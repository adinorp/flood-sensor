
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ceb0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0801cfe8  0801cfe8  0002cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801dd84  0801dd84  0002dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801de44  0801de44  00030138  2**0
                  CONTENTS
  5 .ARM          00000008  0801de44  0801de44  0002de44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801de4c  0801de4c  00030138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801de4c  0801de4c  0002de4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801de50  0801de50  0002de50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000138  20000000  0801de54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002098  20000138  0801df8c  00030138  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200021d0  0801df8c  000321d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00048952  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000adb3  00000000  00000000  00078ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000038c0  00000000  00000000  00083868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034a0  00000000  00000000  00087128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001223e  00000000  00000000  0008a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047b6e  00000000  00000000  0009c806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0a5  00000000  00000000  000e4374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b3419  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e998  00000000  00000000  001b346c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000138 	.word	0x20000138
 8000154:	00000000 	.word	0x00000000
 8000158:	0801cfd0 	.word	0x0801cfd0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000013c 	.word	0x2000013c
 8000174:	0801cfd0 	.word	0x0801cfd0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b974 	b.w	8000bc8 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9e08      	ldr	r6, [sp, #32]
 80008fe:	460d      	mov	r5, r1
 8000900:	4604      	mov	r4, r0
 8000902:	4688      	mov	r8, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14d      	bne.n	80009a4 <__udivmoddi4+0xac>
 8000908:	428a      	cmp	r2, r1
 800090a:	4694      	mov	ip, r2
 800090c:	d968      	bls.n	80009e0 <__udivmoddi4+0xe8>
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	b152      	cbz	r2, 800092a <__udivmoddi4+0x32>
 8000914:	fa01 f302 	lsl.w	r3, r1, r2
 8000918:	f1c2 0120 	rsb	r1, r2, #32
 800091c:	fa20 f101 	lsr.w	r1, r0, r1
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	ea41 0803 	orr.w	r8, r1, r3
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800092e:	0c21      	lsrs	r1, r4, #16
 8000930:	fbb8 fef5 	udiv	lr, r8, r5
 8000934:	fa1f f78c 	uxth.w	r7, ip
 8000938:	fb05 831e 	mls	r3, r5, lr, r8
 800093c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000940:	fb0e f107 	mul.w	r1, lr, r7
 8000944:	4299      	cmp	r1, r3
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x68>
 8000948:	eb1c 0303 	adds.w	r3, ip, r3
 800094c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000950:	f080 811e 	bcs.w	8000b90 <__udivmoddi4+0x298>
 8000954:	4299      	cmp	r1, r3
 8000956:	f240 811b 	bls.w	8000b90 <__udivmoddi4+0x298>
 800095a:	f1ae 0e02 	sub.w	lr, lr, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f5 	udiv	r0, r3, r5
 8000968:	fb05 3310 	mls	r3, r5, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x96>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 8108 	bcs.w	8000b94 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8105 	bls.w	8000b94 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	1be4      	subs	r4, r4, r7
 8000990:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000994:	2100      	movs	r1, #0
 8000996:	b11e      	cbz	r6, 80009a0 <__udivmoddi4+0xa8>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c6 4300 	strd	r4, r3, [r6]
 80009a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0xc2>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	f000 80ee 	beq.w	8000b8a <__udivmoddi4+0x292>
 80009ae:	2100      	movs	r1, #0
 80009b0:	e9c6 0500 	strd	r0, r5, [r6]
 80009b4:	4608      	mov	r0, r1
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	fab3 f183 	clz	r1, r3
 80009be:	2900      	cmp	r1, #0
 80009c0:	d14a      	bne.n	8000a58 <__udivmoddi4+0x160>
 80009c2:	42ab      	cmp	r3, r5
 80009c4:	d302      	bcc.n	80009cc <__udivmoddi4+0xd4>
 80009c6:	4282      	cmp	r2, r0
 80009c8:	f200 80f9 	bhi.w	8000bbe <__udivmoddi4+0x2c6>
 80009cc:	1a84      	subs	r4, r0, r2
 80009ce:	eb65 0303 	sbc.w	r3, r5, r3
 80009d2:	2001      	movs	r0, #1
 80009d4:	4698      	mov	r8, r3
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d0e2      	beq.n	80009a0 <__udivmoddi4+0xa8>
 80009da:	e9c6 4800 	strd	r4, r8, [r6]
 80009de:	e7df      	b.n	80009a0 <__udivmoddi4+0xa8>
 80009e0:	b902      	cbnz	r2, 80009e4 <__udivmoddi4+0xec>
 80009e2:	deff      	udf	#255	; 0xff
 80009e4:	fab2 f282 	clz	r2, r2
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	f040 8091 	bne.w	8000b10 <__udivmoddi4+0x218>
 80009ee:	eba1 050c 	sub.w	r5, r1, ip
 80009f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f6:	fa1f fe8c 	uxth.w	lr, ip
 80009fa:	2101      	movs	r1, #1
 80009fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000a00:	fb07 5013 	mls	r0, r7, r3, r5
 8000a04:	0c25      	lsrs	r5, r4, #16
 8000a06:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a0a:	fb0e f003 	mul.w	r0, lr, r3
 8000a0e:	42a8      	cmp	r0, r5
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x12c>
 8000a12:	eb1c 0505 	adds.w	r5, ip, r5
 8000a16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x12a>
 8000a1c:	42a8      	cmp	r0, r5
 8000a1e:	f200 80cb 	bhi.w	8000bb8 <__udivmoddi4+0x2c0>
 8000a22:	4643      	mov	r3, r8
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb5 f0f7 	udiv	r0, r5, r7
 8000a2c:	fb07 5510 	mls	r5, r7, r0, r5
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb0e fe00 	mul.w	lr, lr, r0
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x156>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a44:	d202      	bcs.n	8000a4c <__udivmoddi4+0x154>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	f200 80bb 	bhi.w	8000bc2 <__udivmoddi4+0x2ca>
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a56:	e79e      	b.n	8000996 <__udivmoddi4+0x9e>
 8000a58:	f1c1 0720 	rsb	r7, r1, #32
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a66:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6a:	fa05 f301 	lsl.w	r3, r5, r1
 8000a6e:	431c      	orrs	r4, r3
 8000a70:	40fd      	lsrs	r5, r7
 8000a72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a76:	fa00 f301 	lsl.w	r3, r0, r1
 8000a7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a7e:	0c20      	lsrs	r0, r4, #16
 8000a80:	fa1f fe8c 	uxth.w	lr, ip
 8000a84:	fb09 5518 	mls	r5, r9, r8, r5
 8000a88:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000a8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	fa02 f201 	lsl.w	r2, r2, r1
 8000a96:	d90b      	bls.n	8000ab0 <__udivmoddi4+0x1b8>
 8000a98:	eb1c 0505 	adds.w	r5, ip, r5
 8000a9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa0:	f080 8088 	bcs.w	8000bb4 <__udivmoddi4+0x2bc>
 8000aa4:	42a8      	cmp	r0, r5
 8000aa6:	f240 8085 	bls.w	8000bb4 <__udivmoddi4+0x2bc>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	4465      	add	r5, ip
 8000ab0:	1a2d      	subs	r5, r5, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000ab8:	fb09 5510 	mls	r5, r9, r0, r5
 8000abc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ac0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac4:	45ae      	cmp	lr, r5
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x1e2>
 8000ac8:	eb1c 0505 	adds.w	r5, ip, r5
 8000acc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad0:	d26c      	bcs.n	8000bac <__udivmoddi4+0x2b4>
 8000ad2:	45ae      	cmp	lr, r5
 8000ad4:	d96a      	bls.n	8000bac <__udivmoddi4+0x2b4>
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	4465      	add	r5, ip
 8000ada:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ade:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae2:	eba5 050e 	sub.w	r5, r5, lr
 8000ae6:	42a5      	cmp	r5, r4
 8000ae8:	46c8      	mov	r8, r9
 8000aea:	46a6      	mov	lr, r4
 8000aec:	d356      	bcc.n	8000b9c <__udivmoddi4+0x2a4>
 8000aee:	d053      	beq.n	8000b98 <__udivmoddi4+0x2a0>
 8000af0:	b15e      	cbz	r6, 8000b0a <__udivmoddi4+0x212>
 8000af2:	ebb3 0208 	subs.w	r2, r3, r8
 8000af6:	eb65 050e 	sbc.w	r5, r5, lr
 8000afa:	fa05 f707 	lsl.w	r7, r5, r7
 8000afe:	fa22 f301 	lsr.w	r3, r2, r1
 8000b02:	40cd      	lsrs	r5, r1
 8000b04:	431f      	orrs	r7, r3
 8000b06:	e9c6 7500 	strd	r7, r5, [r6]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa25 f303 	lsr.w	r3, r5, r3
 8000b20:	4095      	lsls	r5, r2
 8000b22:	430d      	orrs	r5, r1
 8000b24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000b30:	fb07 3011 	mls	r0, r7, r1, r3
 8000b34:	0c2b      	lsrs	r3, r5, #16
 8000b36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000b3a:	fb01 f00e 	mul.w	r0, r1, lr
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	fa04 f402 	lsl.w	r4, r4, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x260>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000b4e:	d22f      	bcs.n	8000bb0 <__udivmoddi4+0x2b8>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	d92d      	bls.n	8000bb0 <__udivmoddi4+0x2b8>
 8000b54:	3902      	subs	r1, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a1b      	subs	r3, r3, r0
 8000b5a:	b2ad      	uxth	r5, r5
 8000b5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b60:	fb07 3310 	mls	r3, r7, r0, r3
 8000b64:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b68:	fb00 f30e 	mul.w	r3, r0, lr
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x28a>
 8000b70:	eb1c 0505 	adds.w	r5, ip, r5
 8000b74:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b78:	d216      	bcs.n	8000ba8 <__udivmoddi4+0x2b0>
 8000b7a:	42ab      	cmp	r3, r5
 8000b7c:	d914      	bls.n	8000ba8 <__udivmoddi4+0x2b0>
 8000b7e:	3802      	subs	r0, #2
 8000b80:	4465      	add	r5, ip
 8000b82:	1aed      	subs	r5, r5, r3
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	e738      	b.n	80009fc <__udivmoddi4+0x104>
 8000b8a:	4631      	mov	r1, r6
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e707      	b.n	80009a0 <__udivmoddi4+0xa8>
 8000b90:	4686      	mov	lr, r0
 8000b92:	e6e5      	b.n	8000960 <__udivmoddi4+0x68>
 8000b94:	4618      	mov	r0, r3
 8000b96:	e6fa      	b.n	800098e <__udivmoddi4+0x96>
 8000b98:	454b      	cmp	r3, r9
 8000b9a:	d2a9      	bcs.n	8000af0 <__udivmoddi4+0x1f8>
 8000b9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	e7a3      	b.n	8000af0 <__udivmoddi4+0x1f8>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	e7ea      	b.n	8000b82 <__udivmoddi4+0x28a>
 8000bac:	4620      	mov	r0, r4
 8000bae:	e794      	b.n	8000ada <__udivmoddi4+0x1e2>
 8000bb0:	4641      	mov	r1, r8
 8000bb2:	e7d1      	b.n	8000b58 <__udivmoddi4+0x260>
 8000bb4:	46d0      	mov	r8, sl
 8000bb6:	e77b      	b.n	8000ab0 <__udivmoddi4+0x1b8>
 8000bb8:	3b02      	subs	r3, #2
 8000bba:	4465      	add	r5, ip
 8000bbc:	e732      	b.n	8000a24 <__udivmoddi4+0x12c>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e709      	b.n	80009d6 <__udivmoddi4+0xde>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e742      	b.n	8000a4e <__udivmoddi4+0x156>

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f001 fa52 	bl	800207c <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8000bd8:	f000 ff80 	bl	8001adc <Spi1_AssertCs>
	HAL_Delay(100);
 8000bdc:	2064      	movs	r0, #100	; 0x64
 8000bde:	f001 fa4d 	bl	800207c <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f82a 	bl	8000c3e <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <Flash__Init+0x34>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d001      	beq.n	8000bf6 <Flash__Init+0x2a>
	{
		return false;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <Flash__Init+0x2c>
	}
	else
	{
		return true;
 8000bf6:	2301      	movs	r3, #1
	}
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	00ef4014 	.word	0x00ef4014

08000c04 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ff7a 	bl	8001b0c <Spi1_Transmit>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 ff85 	bl	8001b3e <Spi1_Receive>
	return ret;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8000c46:	f000 ff55 	bl	8001af4 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 8000c4a:	209f      	movs	r0, #159	; 0x9f
 8000c4c:	f7ff ffda 	bl	8000c04 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 8000c50:	f7ff ffe6 	bl	8000c20 <Flash__SpiRead>
 8000c54:	4603      	mov	r3, r0
 8000c56:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 8000c58:	f7ff ffe2 	bl	8000c20 <Flash__SpiRead>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 8000c60:	f7ff ffde 	bl	8000c20 <Flash__SpiRead>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 8000c68:	f000 ff38 	bl	8001adc <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	041a      	lsls	r2, r3, #16
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	4313      	orrs	r3, r2
 8000c76:	7bba      	ldrb	r2, [r7, #14]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8000c90:	f000 fd8a 	bl	80017a8 <Get_DebugHandle>
 8000c94:	4604      	mov	r4, r0
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fa6e 	bl	8000178 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f008 fa7e 	bl	80091a6 <HAL_UART_Transmit>

}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}

08000cb2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4013      	ands	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d28:	4013      	ands	r3, r2
 8000d2a:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <MX_ADC_Init+0x98>)
 8000d40:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d48:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_ADC_Init+0x94>)
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_ADC_Init+0x94>)
 8000da0:	2205      	movs	r2, #5
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_ADC_Init+0x94>)
 8000da6:	2205      	movs	r2, #5
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_ADC_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_ADC_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_ADC_Init+0x94>)
 8000dba:	f002 fa71 	bl	80032a0 <HAL_ADC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000dc4:	f000 fd04 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000154 	.word	0x20000154
 8000dd0:	40012400 	.word	0x40012400

08000dd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <HAL_ADC_MspInit+0x50>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d112      	bne.n	8000e1c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000df6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dfa:	f7ff ff72 	bl	8000ce2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff ff57 	bl	8000cb2 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8000e04:	2308      	movs	r3, #8
 8000e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4804      	ldr	r0, [pc, #16]	; (8000e28 <HAL_ADC_MspInit+0x54>)
 8000e18:	f004 f8c8 	bl	8004fac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012400 	.word	0x40012400
 8000e28:	48000400 	.word	0x48000400

08000e2c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_ADC_MspDeInit+0x2c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d107      	bne.n	8000e4e <HAL_ADC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000e3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e42:	f7ff ff66 	bl	8000d12 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    HAL_GPIO_DeInit(ADC_IN_GPIO_Port, ADC_IN_Pin);
 8000e46:	2108      	movs	r1, #8
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <HAL_ADC_MspDeInit+0x30>)
 8000e4a:	f004 fa0f 	bl	800526c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	48000400 	.word	0x48000400

08000e60 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <SYS_InitMeasurement+0x14>)
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <SYS_InitMeasurement+0x18>)
 8000e68:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000154 	.word	0x20000154
 8000e78:	40012400 	.word	0x40012400

08000e7c <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000e8a:	f000 f869 	bl	8000f60 <SYS_GetBatteryLevel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000e92:	482d      	ldr	r0, [pc, #180]	; (8000f48 <SYS_GetTemperatureLevel+0xcc>)
 8000e94:	f000 f898 	bl	8000fc8 <ADC_ReadChannels>
 8000e98:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <SYS_GetTemperatureLevel+0xd0>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <SYS_GetTemperatureLevel+0xd4>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d026      	beq.n	8000ef4 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <SYS_GetTemperatureLevel+0xd0>)
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <SYS_GetTemperatureLevel+0xd4>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d01c      	beq.n	8000eec <SYS_GetTemperatureLevel+0x70>
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <SYS_GetTemperatureLevel+0xd8>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <SYS_GetTemperatureLevel+0xd4>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2264      	movs	r2, #100	; 0x64
 8000ece:	fb03 f202 	mul.w	r2, r3, r2
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <SYS_GetTemperatureLevel+0xd0>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <SYS_GetTemperatureLevel+0xd4>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	331e      	adds	r3, #30
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	e001      	b.n	8000ef0 <SYS_GetTemperatureLevel+0x74>
 8000eec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000ef0:	803b      	strh	r3, [r7, #0]
 8000ef2:	e01d      	b.n	8000f30 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	fb03 f202 	mul.w	r2, r3, r2
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <SYS_GetTemperatureLevel+0xdc>)
 8000efe:	fba3 1302 	umull	r1, r3, r3, r2
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	0852      	lsrs	r2, r2, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	0adb      	lsrs	r3, r3, #11
 8000f0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000f16:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <SYS_GetTemperatureLevel+0xe0>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1292      	asrs	r2, r2, #10
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	331e      	adds	r3, #30
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000f30:	883b      	ldrh	r3, [r7, #0]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	b0001000 	.word	0xb0001000
 8000f4c:	1fff75c8 	.word	0x1fff75c8
 8000f50:	1fff75a8 	.word	0x1fff75a8
 8000f54:	09ee009f 	.word	0x09ee009f
 8000f58:	00100101 	.word	0x00100101
 8000f5c:	68db8bad 	.word	0x68db8bad

08000f60 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <SYS_GetBatteryLevel+0x5c>)
 8000f70:	f000 f82a 	bl	8000fc8 <ADC_ReadChannels>
 8000f74:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	80fb      	strh	r3, [r7, #6]
 8000f80:	e016      	b.n	8000fb0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <SYS_GetBatteryLevel+0x60>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00b      	beq.n	8000fa6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <SYS_GetBatteryLevel+0x60>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000f98:	fb03 f202 	mul.w	r2, r3, r2
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	80fb      	strh	r3, [r7, #6]
 8000fa4:	e004      	b.n	8000fb0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <SYS_GetBatteryLevel+0x64>)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	b4002000 	.word	0xb4002000
 8000fc0:	1fff75aa 	.word	0x1fff75aa
 8000fc4:	004c08d8 	.word	0x004c08d8

08000fc8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000fe0:	f7ff feaa 	bl	8000d38 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <ADC_ReadChannels+0x88>)
 8000fe6:	f002 ff8a 	bl	8003efe <HAL_ADCEx_Calibration_Start>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000ff0:	f000 fbee 	bl	80017d0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <ADC_ReadChannels+0x88>)
 8001008:	f002 fc96 	bl	8003938 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001012:	f000 fbdd 	bl	80017d0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <ADC_ReadChannels+0x88>)
 8001018:	f002 fb72 	bl	8003700 <HAL_ADC_Start>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001022:	f000 fbd5 	bl	80017d0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001026:	f04f 31ff 	mov.w	r1, #4294967295
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <ADC_ReadChannels+0x88>)
 800102c:	f002 fbe0 	bl	80037f0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <ADC_ReadChannels+0x88>)
 8001032:	f002 fbab 	bl	800378c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <ADC_ReadChannels+0x88>)
 8001038:	f002 fc71 	bl	800391e <HAL_ADC_GetValue>
 800103c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <ADC_ReadChannels+0x88>)
 8001040:	f002 fae2 	bl	8003608 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001044:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000154 	.word	0x20000154

08001054 <LL_AHB1_GRP1_EnableClock>:
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001088:	2004      	movs	r0, #4
 800108a:	f7ff ffe3 	bl	8001054 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ffe0 	bl	8001054 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	200e      	movs	r0, #14
 800109a:	f003 f8f8 	bl	800428e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 f90f 	bl	80042c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	200f      	movs	r0, #15
 80010aa:	f003 f8f0 	bl	800428e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010ae:	200f      	movs	r0, #15
 80010b0:	f003 f907 	bl	80042c2 <HAL_NVIC_EnableIRQ>

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80010c8:	d101      	bne.n	80010ce <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80010ce:	2300      	movs	r3, #0
#endif
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	58004000 	.word	0x58004000

080010dc <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <FLASH_IF_Write+0x174>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0299      	lsls	r1, r3, #10
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <FLASH_IF_Write+0x178>)
 80010fc:	400b      	ands	r3, r1
 80010fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	0adb      	lsrs	r3, r3, #11
 800110a:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001116:	3b01      	subs	r3, #1
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <FLASH_IF_Write+0x174>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	0291      	lsls	r1, r2, #10
 800111e:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <FLASH_IF_Write+0x178>)
 8001120:	400a      	ands	r2, r1
 8001122:	fbb3 f1f2 	udiv	r1, r3, r2
 8001126:	fb01 f202 	mul.w	r2, r1, r2
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <FLASH_IF_Write+0x7a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <FLASH_IF_Write+0x7a>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001156:	f06f 0304 	mvn.w	r3, #4
 800115a:	e074      	b.n	8001246 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <FLASH_IF_Write+0x17c>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da02      	bge.n	800116a <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001164:	f06f 0303 	mvn.w	r3, #3
 8001168:	e06d      	b.n	8001246 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	429a      	cmp	r2, r3
 8001170:	d005      	beq.n	800117e <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001178:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e05b      	b.n	800123c <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f8f8 	bl	800137e <FLASH_IF_IsEmpty>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d037      	beq.n	8001204 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800119a:	f06f 0304 	mvn.w	r3, #4
 800119e:	e052      	b.n	8001246 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011a6:	02db      	lsls	r3, r3, #11
 80011a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ac:	4619      	mov	r1, r3
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f01a fb9a 	bl	801b8e8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	6a39      	ldr	r1, [r7, #32]
 80011c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c2:	b292      	uxth	r2, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f01a fb8f 	bl	801b8e8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	69f8      	ldr	r0, [r7, #28]
 80011d0:	f000 f865 	bl	800129e <FLASH_IF_EraseByPages>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80011da:	f06f 0301 	mvn.w	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80011e0:	e030      	b.n	8001244 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011e8:	02db      	lsls	r3, r3, #11
 80011ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f88a 	bl	800130a <FLASH_IF_Write_Buffer>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80011fc:	f06f 0302 	mvn.w	r3, #2
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001202:	e01f      	b.n	8001244 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001208:	4619      	mov	r1, r3
 800120a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800120c:	f000 f87d 	bl	800130a <FLASH_IF_Write_Buffer>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001216:	f06f 0302 	mvn.w	r3, #2
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800121c:	e012      	b.n	8001244 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	4413      	add	r3, r2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 8001226:	6a3a      	ldr	r2, [r7, #32]
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	4413      	add	r3, r2
 800122c:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	d99f      	bls.n	8001184 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001246:	4618      	mov	r0, r3
 8001248:	3730      	adds	r7, #48	; 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	1fff75e0 	.word	0x1fff75e0
 8001254:	03fffc00 	.word	0x03fffc00
 8001258:	58004000 	.word	0x58004000

0800125c <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001268:	e00b      	b.n	8001282 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800126a:	bf00      	nop
 800126c:	f7ff ff24 	bl	80010b8 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1fa      	bne.n	800126c <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	2001      	movs	r0, #1
 800127e:	f003 fc33 	bl	8004ae8 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128c:	4299      	cmp	r1, r3
 800128e:	bf08      	it	eq
 8001290:	4290      	cmpeq	r0, r2
 8001292:	d1ea      	bne.n	800126a <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001294:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b08a      	sub	sp, #40	; 0x28
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	460b      	mov	r3, r1
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d008      	beq.n	80012d0 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fdae 	bl	8004e24 <HAL_FLASHEx_Erase_IT>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ce:	e00a      	b.n	80012e6 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80012d0:	f107 0214 	add.w	r2, r7, #20
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 fd4a 	bl	8004d74 <HAL_FLASHEx_Erase>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80012e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d008      	beq.n	8001300 <FLASH_IF_EraseByPages+0x62>
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d101      	bne.n	80012fa <FLASH_IF_EraseByPages+0x5c>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e003      	b.n	8001302 <FLASH_IF_EraseByPages+0x64>
 80012fa:	f06f 0301 	mvn.w	r3, #1
 80012fe:	e000      	b.n	8001302 <FLASH_IF_EraseByPages+0x64>
 8001300:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001302:	4618      	mov	r0, r3
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b08a      	sub	sp, #40	; 0x28
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e020      	b.n	8001366 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	2208      	movs	r2, #8
 800132a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f01a fadb 	bl	801b8e8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001332:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133a:	bf08      	it	eq
 800133c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001340:	d005      	beq.n	800134e <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001342:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ff88 	bl	800125c <FLASH_IF_Write64>
 800134c:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3308      	adds	r3, #8
 8001352:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	3308      	adds	r3, #8
 8001358:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3301      	adds	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3d9      	bcc.n	8001324 <FLASH_IF_Write_Buffer+0x1a>
 8001370:	e000      	b.n	8001374 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001372:	bf00      	nop
    }
  }

  return status;
 8001374:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001376:	4618      	mov	r0, r3
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001388:	e00a      	b.n	80013a0 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d001      	beq.n	800139a <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001396:	2301      	movs	r3, #1
 8001398:	e039      	b.n	800140e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ef      	bne.n	800138a <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e010      	b.n	80013d6 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f103 0208 	add.w	r2, r3, #8
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	bf08      	it	eq
 80013c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013ca:	d001      	beq.n	80013d0 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e01e      	b.n	800140e <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3e9      	bcc.n	80013b4 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80013ee:	e00a      	b.n	8001406 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d001      	beq.n	8001400 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e006      	b.n	800140e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3b01      	subs	r3, #1
 8001404:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f1      	bne.n	80013f0 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 800140c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_AHB2_GRP1_EnableClock>:
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ffdb 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2002      	movs	r0, #2
 8001464:	f7ff ffd8 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	2004      	movs	r0, #4
 800146a:	f7ff ffd5 	bl	8001418 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8001474:	4824      	ldr	r0, [pc, #144]	; (8001508 <MX_GPIO_Init+0xc0>)
 8001476:	f003 ffc7 	bl	8005408 <HAL_GPIO_WritePin>
                          |LED_Pin|EXT_OC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f240 2101 	movw	r1, #513	; 0x201
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f003 ffc0 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	481f      	ldr	r0, [pc, #124]	; (800150c <MX_GPIO_Init+0xc4>)
 800148e:	f003 ffbb 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = PG_Pin|ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin
 8001492:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
 8001496:	607b      	str	r3, [r7, #4]
                          |EXT_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4817      	ldr	r0, [pc, #92]	; (8001508 <MX_GPIO_Init+0xc0>)
 80014aa:	f003 fd7f 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 80014ae:	f240 2301 	movw	r3, #513	; 0x201
 80014b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f003 fd70 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <MX_GPIO_Init+0xc0>)
 80014e2:	f003 fd63 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 80014e6:	2301      	movs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_GPIO_Init+0xc4>)
 80014fc:	f003 fd56 	bl	8004fac <HAL_GPIO_Init>

}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800

08001510 <LL_AHB2_GRP1_EnableClock>:
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_APB1_GRP1_EnableClock>:
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800154e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C2_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C2_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C2_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <MX_I2C2_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C2_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_I2C2_Init+0x74>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C2_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_I2C2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C2_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_I2C2_Init+0x74>)
 80015ac:	f003 ff43 	bl	8005436 <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f000 f90b 	bl	80017d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_I2C2_Init+0x74>)
 80015be:	f003 ffc9 	bl	8005554 <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f902 	bl	80017d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_I2C2_Init+0x74>)
 80015d0:	f004 f80a 	bl	80055e8 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 f8f9 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001b8 	.word	0x200001b8
 80015e8:	40005800 	.word	0x40005800
 80015ec:	20303e5d 	.word	0x20303e5d

080015f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b096      	sub	sp, #88	; 0x58
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2238      	movs	r2, #56	; 0x38
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f01b fc55 	bl	801cec0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_I2C_MspInit+0xb0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d13b      	bne.n	8001698 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001624:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4618      	mov	r0, r3
 8001630:	f005 fab0 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800163a:	f000 f8c9 	bl	80017d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff ff66 	bl	8001510 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff ff63 	bl	8001510 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800165c:	2304      	movs	r3, #4
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f003 fc9f 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800166e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001680:	2304      	movs	r3, #4
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <HAL_I2C_MspInit+0xb4>)
 800168c:	f003 fc8e 	bl	8004fac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001690:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001694:	f7ff ff54 	bl	8001540 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005800 	.word	0x40005800
 80016a4:	48000400 	.word	0x48000400

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f001 fbd0 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f81e 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f7ff fec8 	bl	8001448 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80016b8:	f009 ff26 	bl	800b508 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80016bc:	f7ff ff58 	bl	8001570 <MX_I2C2_Init>
  MX_SPI2_Init();
 80016c0:	f000 f972 	bl	80019a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MX_LPUART1_UART_Init();
 80016c4:	f000 fff4 	bl	80026b0 <MX_LPUART1_UART_Init>
  Flash__Init() ? serialPutStr("Flash Test OK\n") : serialPutStr("Flash FAIL Test \n");
 80016c8:	f7ff fa80 	bl	8000bcc <Flash__Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <main+0x32>
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <main+0x40>)
 80016d4:	f7ff fad8 	bl	8000c88 <serialPutStr>
 80016d8:	e002      	b.n	80016e0 <main+0x38>
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <main+0x44>)
 80016dc:	f7ff fad4 	bl	8000c88 <serialPutStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80016e0:	f009 ff1a 	bl	800b518 <MX_LoRaWAN_Process>
 80016e4:	e7fc      	b.n	80016e0 <main+0x38>
 80016e6:	bf00      	nop
 80016e8:	0801cfe8 	.word	0x0801cfe8
 80016ec:	0801cff8 	.word	0x0801cff8

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b09a      	sub	sp, #104	; 0x68
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2248      	movs	r2, #72	; 0x48
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f01b fbde 	bl	801cec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <SystemClock_Config+0xb4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <SystemClock_Config+0xb4>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <SystemClock_Config+0xb4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001732:	232a      	movs	r3, #42	; 0x2a
 8001734:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800173c:	2301      	movs	r3, #1
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001740:	2340      	movs	r3, #64	; 0x40
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001744:	2300      	movs	r3, #0
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001748:	23b0      	movs	r3, #176	; 0xb0
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fadb 	bl	8005d18 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001768:	f000 f832 	bl	80017d0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800176c:	234f      	movs	r3, #79	; 0x4f
 800176e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fe60 	bl	8006450 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001796:	f000 f81b 	bl	80017d0 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3768      	adds	r7, #104	; 0x68
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	58000400 	.word	0x58000400

080017a8 <Get_DebugHandle>:
/* USER CODE BEGIN 4 */



UART_HandleTypeDef *Get_DebugHandle(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return &huart2;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <Get_DebugHandle+0x10>)
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000344 	.word	0x20000344

080017bc <Get_SpiHandle>:
}



SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return &hspi2;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <Get_SpiHandle+0x10>)
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2000023c 	.word	0x2000023c

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>

080017da <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <LL_APB1_GRP1_EnableClock>:
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4313      	orrs	r3, r2
 8001810:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
	...

0800182c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	222c      	movs	r2, #44	; 0x2c
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f01b fb41 	bl	801cec0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <MX_RTC_Init+0xa0>)
 8001842:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001846:	221f      	movs	r2, #31
 8001848:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_RTC_Init+0x9c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_RTC_Init+0x9c>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_RTC_Init+0x9c>)
 800186c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001872:	4815      	ldr	r0, [pc, #84]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001874:	f005 faa8 	bl	8006dc8 <HAL_RTC_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800187e:	f7ff ffa7 	bl	80017d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001882:	4811      	ldr	r0, [pc, #68]	; (80018c8 <MX_RTC_Init+0x9c>)
 8001884:	f005 fd96 	bl	80073b4 <HAL_RTCEx_SetSSRU_IT>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800188e:	f7ff ff9f 	bl	80017d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800189e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018a2:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_RTC_Init+0x9c>)
 80018b2:	f005 fb03 	bl	8006ebc <HAL_RTC_SetAlarm_IT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80018bc:	f7ff ff88 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3730      	adds	r7, #48	; 0x30
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000204 	.word	0x20000204
 80018cc:	40002800 	.word	0x40002800

080018d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	2238      	movs	r2, #56	; 0x38
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f01b faed 	bl	801cec0 <memset>
  if(rtcHandle->Instance==RTC)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_RTC_MspInit+0x74>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d125      	bne.n	800193c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	4618      	mov	r0, r3
 8001902:	f005 f947 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800190c:	f7ff ff60 	bl	80017d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001910:	f7ff ff63 	bl	80017da <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001914:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001918:	f7ff ff6f 	bl	80017fa <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2002      	movs	r0, #2
 8001922:	f002 fcb4 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001926:	2002      	movs	r0, #2
 8001928:	f002 fccb 	bl	80042c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	202a      	movs	r0, #42	; 0x2a
 8001932:	f002 fcac 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001936:	202a      	movs	r0, #42	; 0x2a
 8001938:	f002 fcc3 	bl	80042c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800193c:	bf00      	nop
 800193e:	3740      	adds	r7, #64	; 0x40
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40002800 	.word	0x40002800

08001948 <LL_AHB2_GRP1_EnableClock>:
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <LL_APB1_GRP1_EnableClock>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <MX_SPI2_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019f6:	2207      	movs	r2, #7
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_SPI2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_SPI2_Init+0x74>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_SPI2_Init+0x74>)
 8001a08:	f005 fd62 	bl	80074d0 <HAL_SPI_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f7ff fedd 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000023c 	.word	0x2000023c
 8001a20:	40003800 	.word	0x40003800

08001a24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b096      	sub	sp, #88	; 0x58
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2238      	movs	r2, #56	; 0x38
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f01b fa3b 	bl	801cec0 <memset>
  if(spiHandle->Instance==SPI2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_SPI_MspInit+0xb0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d13b      	bne.n	8001acc <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001a54:	2310      	movs	r3, #16
 8001a56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 f896 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a6e:	f7ff feaf 	bl	80017d0 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a76:	f7ff ff7f 	bl	8001978 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f7ff ff64 	bl	8001948 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff ff61 	bl	8001948 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001a86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_SPI_MspInit+0xb4>)
 8001aa4:	f003 fa82 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aba:	2305      	movs	r3, #5
 8001abc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f003 fa70 	bl	8004fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001acc:	bf00      	nop
 8001ace:	3758      	adds	r7, #88	; 0x58
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40003800 	.word	0x40003800
 8001ad8:	48000400 	.word	0x48000400

08001adc <Spi1_AssertCs>:
  }
}

/* USER CODE BEGIN 1 */
void Spi1_AssertCs(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae6:	4802      	ldr	r0, [pc, #8]	; (8001af0 <Spi1_AssertCs+0x14>)
 8001ae8:	f003 fc8e 	bl	8005408 <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	48000400 	.word	0x48000400

08001af4 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <Spi1_DeassertCs+0x14>)
 8001b00:	f003 fc82 	bl	8005408 <HAL_GPIO_WritePin>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	48000400 	.word	0x48000400

08001b0c <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8001b1c:	f7ff fe4e 	bl	80017bc <Get_SpiHandle>
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	f005 fda7 	bl	8007678 <HAL_SPI_Transmit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <Spi1_Transmit+0x28>
  {
    status  = true;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8001b4e:	f7ff fe35 	bl	80017bc <Get_SpiHandle>
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f005 ff1e 	bl	8007998 <HAL_SPI_Receive>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <Spi1_Receive+0x28>
  {
    status = true;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	58000400 	.word	0x58000400

08001b88 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001ba4:	f001 f9ae 	bl	8002f04 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001ba8:	f7ff ffe2 	bl	8001b70 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f003 fdf9 	bl	80057a4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001bba:	f001 f9b1 	bl	8002f20 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001bbe:	f000 ffdb 	bl	8002b78 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001bca:	f001 f99b 	bl	8002f04 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001bce:	2101      	movs	r1, #1
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f003 fd63 	bl	800569c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001bde:	f001 f99f 	bl	8002f20 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <HardFault_Handler+0x4>

08001bfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <UsageFault_Handler+0x4>

08001c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001c46:	f005 fbf1 	bl	800742c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000204 	.word	0x20000204

08001c54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <DMA1_Channel4_IRQHandler+0x10>)
 8001c5a:	f002 fdd5 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200003d4 	.word	0x200003d4

08001c68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <DMA1_Channel5_IRQHandler+0x10>)
 8001c6e:	f002 fdcb 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000434 	.word	0x20000434

08001c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART2_IRQHandler+0x10>)
 8001c82:	f007 fc0f 	bl	80094a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000344 	.word	0x20000344

08001c90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <LPUART1_IRQHandler+0x10>)
 8001c96:	f007 fc05 	bl	80094a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200002b4 	.word	0x200002b4

08001ca4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <RTC_Alarm_IRQHandler+0x10>)
 8001caa:	f005 fa6f 	bl	800718c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000204 	.word	0x20000204

08001cb8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001cbe:	f007 f80b 	bl	8008cd8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002a0 	.word	0x200002a0

08001ccc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_SUBGHZ_Init+0x20>)
 8001d02:	2210      	movs	r2, #16
 8001d04:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_SUBGHZ_Init+0x20>)
 8001d08:	f006 fd6a 	bl	80087e0 <HAL_SUBGHZ_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001d12:	f7ff fd5d 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002a0 	.word	0x200002a0

08001d20 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff ffcf 	bl	8001ccc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2032      	movs	r0, #50	; 0x32
 8001d34:	f002 faab 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001d38:	2032      	movs	r0, #50	; 0x32
 8001d3a:	f002 fac2 	bl	80042c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <LL_FLASH_GetUDN+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	1fff7580 	.word	0x1fff7580

08001d80 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <LL_FLASH_GetDeviceID+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	1fff7584 	.word	0x1fff7584

08001d98 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <LL_FLASH_GetSTCompanyID+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0a1b      	lsrs	r3, r3, #8
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	1fff7584 	.word	0x1fff7584

08001db0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ffc6 	bl	8001d46 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001dba:	f01a fb27 	bl	801c40c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <SystemApp_Init+0x48>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001dc4:	f000 f97a 	bl	80020bc <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001dc8:	f01a fdb0 	bl	801c92c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <SystemApp_Init+0x4c>)
 8001dce:	f01a fe5b 	bl	801ca88 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <SystemApp_Init+0x50>)
 8001dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dd8:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f01a fe62 	bl	801caa4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001de0:	f7ff f83e 	bl	8000e60 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001de4:	f000 f9aa 	bl	800213c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001de8:	f019 fcd8 	bl	801b79c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001dec:	2101      	movs	r1, #1
 8001dee:	2001      	movs	r0, #1
 8001df0:	f019 fd14 	bl	801b81c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200002ac 	.word	0x200002ac
 8001dfc:	08001fc9 	.word	0x08001fc9
 8001e00:	58004000 	.word	0x58004000

08001e04 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001e08:	f019 fd38 	bl	801b87c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001e1a:	f7ff f8a1 	bl	8000f60 <SYS_GetBatteryLevel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d902      	bls.n	8001e32 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001e2c:	23fe      	movs	r3, #254	; 0xfe
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	e014      	b.n	8001e5c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001e38:	d202      	bcs.n	8001e40 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	e00d      	b.n	8001e5c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001e46:	461a      	mov	r2, r3
 8001e48:	4613      	mov	r3, r2
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <GetBatteryLevel+0x58>)
 8001e54:	fba3 2302 	umull	r2, r3, r3, r2
 8001e58:	09db      	lsrs	r3, r3, #7
 8001e5a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	1b4e81b5 	.word	0x1b4e81b5

08001e6c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 f92d 	bl	80020d8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fcfb 	bl	800087c <__aeabi_f2iz>
 8001e86:	4603      	mov	r3, r0
 8001e88:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001e8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001ea2:	f7ff ff63 	bl	8001d6c <LL_FLASH_GetUDN>
 8001ea6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d138      	bne.n	8001f22 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001eb0:	f001 f844 	bl	8002f3c <HAL_GetUIDw0>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	f001 f855 	bl	8002f64 <HAL_GetUIDw2>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4423      	add	r3, r4
 8001ebe:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001ec0:	f001 f846 	bl	8002f50 <HAL_GetUIDw1>
 8001ec4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	0e1a      	lsrs	r2, r3, #24
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3307      	adds	r3, #7
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	0a1a      	lsrs	r2, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3305      	adds	r3, #5
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0e1a      	lsrs	r2, r3, #24
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3303      	adds	r3, #3
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	0c1a      	lsrs	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3302      	adds	r3, #2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0a1a      	lsrs	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001f20:	e031      	b.n	8001f86 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3307      	adds	r3, #7
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	0a1a      	lsrs	r2, r3, #8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3306      	adds	r3, #6
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	0c1a      	lsrs	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3305      	adds	r3, #5
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	0e1a      	lsrs	r2, r3, #24
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001f50:	f7ff ff16 	bl	8001d80 <LL_FLASH_GetDeviceID>
 8001f54:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3303      	adds	r3, #3
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001f60:	f7ff ff1a 	bl	8001d98 <LL_FLASH_GetSTCompanyID>
 8001f64:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	0a1a      	lsrs	r2, r3, #8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	701a      	strb	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}

08001f8e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001f8e:	b590      	push	{r4, r7, lr}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f98:	f7ff fee8 	bl	8001d6c <LL_FLASH_GetUDN>
 8001f9c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d10b      	bne.n	8001fbe <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001fa6:	f000 ffc9 	bl	8002f3c <HAL_GetUIDw0>
 8001faa:	4604      	mov	r4, r0
 8001fac:	f000 ffd0 	bl	8002f50 <HAL_GetUIDw1>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	405c      	eors	r4, r3
 8001fb4:	f000 ffd6 	bl	8002f64 <HAL_GetUIDw2>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4063      	eors	r3, r4
 8001fbc:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001fbe:	687b      	ldr	r3, [r7, #4]

}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}

08001fc8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f019 fd60 	bl	801ba9c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fe2:	9200      	str	r2, [sp, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <TimestampNow+0x3c>)
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f81d 	bl	8002028 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe f8c2 	bl	8000178 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0801d00c 	.word	0x0801d00c

08002008 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800200c:	2101      	movs	r1, #1
 800200e:	2002      	movs	r0, #2
 8002010:	f019 fbd4 	bl	801b7bc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800201c:	2100      	movs	r1, #0
 800201e:	2002      	movs	r0, #2
 8002020:	f019 fbcc 	bl	801b7bc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002028:	b40c      	push	{r2, r3}
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f019 fefd 	bl	801be40 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002050:	b002      	add	sp, #8
 8002052:	4770      	bx	lr

08002054 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_GetTick+0x24>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002066:	f000 f935 	bl	80022d4 <TIMER_IF_GetTimerValue>
 800206a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002ac 	.word	0x200002ac

0800207c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f9ab 	bl	80023e2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800209e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020a2:	4905      	ldr	r1, [pc, #20]	; (80020b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	58000800 	.word	0x58000800

080020bc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80020c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020c4:	f7ff ffe6 	bl	8002094 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80020c8:	f000 ff56 	bl	8002f78 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80020cc:	f000 ff5a 	bl	8002f84 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80020d0:	f000 ff5e 	bl	8002f90 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <EnvSensors_Read+0x50>)
 80020e2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <EnvSensors_Read+0x54>)
 80020e6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <EnvSensors_Read+0x58>)
 80020ea:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80020ec:	f7fe fec6 	bl	8000e7c <SYS_GetTemperatureLevel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	121b      	asrs	r3, r3, #8
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fb6c 	bl	80007d4 <__aeabi_i2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <EnvSensors_Read+0x5c>)
 8002116:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a07      	ldr	r2, [pc, #28]	; (8002138 <EnvSensors_Read+0x60>)
 800211c:	611a      	str	r2, [r3, #16]

  return 0;
 800211e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	42480000 	.word	0x42480000
 800212c:	41900000 	.word	0x41900000
 8002130:	447a0000 	.word	0x447a0000
 8002134:	003e090d 	.word	0x003e090d
 8002138:	000503ab 	.word	0x000503ab

0800213c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <TIMER_IF_Init+0x5c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <TIMER_IF_Init+0x60>)
 800218e:	f04f 32ff 	mov.w	r2, #4294967295
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002194:	f7ff fb4a 	bl	800182c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002198:	f000 f856 	bl	8002248 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800219c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <TIMER_IF_Init+0x60>)
 80021a2:	f004 ff97 	bl	80070d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <TIMER_IF_Init+0x60>)
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <TIMER_IF_Init+0x60>)
 80021b0:	f005 f8ce 	bl	8007350 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 f9d3 	bl	8002560 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80021ba:	f000 f85f 	bl	800227c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <TIMER_IF_Init+0x5c>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002ad 	.word	0x200002ad
 80021d4:	20000204 	.word	0x20000204

080021d8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	222c      	movs	r2, #44	; 0x2c
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f01a fe66 	bl	801cec0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80021f4:	f000 f828 	bl	8002248 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <TIMER_IF_StartTimer+0x68>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	43db      	mvns	r3, r3
 800220a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002210:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002214:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	2201      	movs	r2, #1
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <TIMER_IF_StartTimer+0x6c>)
 8002226:	f004 fe49 	bl	8006ebc <HAL_RTC_SetAlarm_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002230:	f7ff face 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002238:	4618      	mov	r0, r3
 800223a:	3738      	adds	r7, #56	; 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200002b0 	.word	0x200002b0
 8002244:	20000204 	.word	0x20000204

08002248 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <TIMER_IF_StopTimer+0x2c>)
 8002254:	2201      	movs	r2, #1
 8002256:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225c:	4806      	ldr	r0, [pc, #24]	; (8002278 <TIMER_IF_StopTimer+0x30>)
 800225e:	f004 ff39 	bl	80070d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <TIMER_IF_StopTimer+0x30>)
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800226a:	79fb      	ldrb	r3, [r7, #7]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40002800 	.word	0x40002800
 8002278:	20000204 	.word	0x20000204

0800227c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002280:	f000 f98e 	bl	80025a0 <GetTimerTicks>
 8002284:	4603      	mov	r3, r0
 8002286:	4a03      	ldr	r2, [pc, #12]	; (8002294 <TIMER_IF_SetTimerContext+0x18>)
 8002288:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800228a:	4b02      	ldr	r3, [pc, #8]	; (8002294 <TIMER_IF_SetTimerContext+0x18>)
 800228c:	681b      	ldr	r3, [r3, #0]
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002b0 	.word	0x200002b0

08002298 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <TIMER_IF_GetTimerContext+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	200002b0 	.word	0x200002b0

080022ac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80022b6:	f000 f973 	bl	80025a0 <GetTimerTicks>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200002b0 	.word	0x200002b0

080022d4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <TIMER_IF_GetTimerValue+0x24>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80022e6:	f000 f95b 	bl	80025a0 <GetTimerTicks>
 80022ea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200002ad 	.word	0x200002ad

080022fc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002306:	2303      	movs	r3, #3
 8002308:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002316:	b5b0      	push	{r4, r5, r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800231e:	2100      	movs	r1, #0
 8002320:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	2000      	movs	r0, #0
 8002326:	460a      	mov	r2, r1
 8002328:	4603      	mov	r3, r0
 800232a:	0d95      	lsrs	r5, r2, #22
 800232c:	0294      	lsls	r4, r2, #10
 800232e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe fac5 	bl	80008c8 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4613      	mov	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bdb0      	pop	{r4, r5, r7, pc}

08002350 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002350:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800235a:	2100      	movs	r1, #0
 800235c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	2000      	movs	r0, #0
 8002362:	460c      	mov	r4, r1
 8002364:	4605      	mov	r5, r0
 8002366:	4620      	mov	r0, r4
 8002368:	4629      	mov	r1, r5
 800236a:	f04f 0a00 	mov.w	sl, #0
 800236e:	f04f 0b00 	mov.w	fp, #0
 8002372:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002376:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800237a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800237e:	4650      	mov	r0, sl
 8002380:	4659      	mov	r1, fp
 8002382:	1b02      	subs	r2, r0, r4
 8002384:	eb61 0305 	sbc.w	r3, r1, r5
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0099      	lsls	r1, r3, #2
 8002392:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002396:	0090      	lsls	r0, r2, #2
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	eb12 0804 	adds.w	r8, r2, r4
 80023a0:	eb43 0905 	adc.w	r9, r3, r5
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b8:	4690      	mov	r8, r2
 80023ba:	4699      	mov	r9, r3
 80023bc:	4640      	mov	r0, r8
 80023be:	4649      	mov	r1, r9
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	0a82      	lsrs	r2, r0, #10
 80023ca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80023ce:	0a8b      	lsrs	r3, r1, #10
 80023d0:	4613      	mov	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023e0:	4770      	bx	lr

080023e2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff93 	bl	8002316 <TIMER_IF_Convert_ms2Tick>
 80023f0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80023f2:	f000 f8d5 	bl	80025a0 <GetTimerTicks>
 80023f6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80023f8:	e000      	b.n	80023fc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80023fa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80023fc:	f000 f8d0 	bl	80025a0 <GetTimerTicks>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f6      	bhi.n	80023fa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800241e:	f01a f943 	bl	801c6a8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002432:	f000 f8a5 	bl	8002580 <TIMER_IF_BkUp_Read_MSBticks>
 8002436:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f88f 	bl	8002560 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800244a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002458:	f000 f8a2 	bl	80025a0 <GetTimerTicks>
 800245c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800245e:	f000 f88f 	bl	8002580 <TIMER_IF_BkUp_Read_MSBticks>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	000b      	movs	r3, r1
 8002478:	2200      	movs	r2, #0
 800247a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247c:	2000      	movs	r0, #0
 800247e:	460c      	mov	r4, r1
 8002480:	4605      	mov	r5, r0
 8002482:	eb12 0804 	adds.w	r8, r2, r4
 8002486:	eb43 0905 	adc.w	r9, r3, r5
 800248a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800248e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	0a82      	lsrs	r2, r0, #10
 800249c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024a0:	0a8b      	lsrs	r3, r1, #10
 80024a2:	4613      	mov	r3, r2
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2200      	movs	r2, #0
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80024b4:	f04f 0b00 	mov.w	fp, #0
 80024b8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff46 	bl	8002350 <TIMER_IF_Convert_Tick2ms>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024d8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	2100      	movs	r1, #0
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80024e6:	f004 ffc5 	bl	8007474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000204 	.word	0x20000204

080024f8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	2101      	movs	r1, #1
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002506:	f004 ffb5 	bl	8007474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000204 	.word	0x20000204

08002518 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002522:	2100      	movs	r1, #0
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002526:	f004 ffbd 	bl	80074a4 <HAL_RTCEx_BKUPRead>
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800252c:	687b      	ldr	r3, [r7, #4]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000204 	.word	0x20000204

0800253c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002546:	2101      	movs	r1, #1
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800254a:	f004 ffab 	bl	80074a4 <HAL_RTCEx_BKUPRead>
 800254e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000204 	.word	0x20000204

08002560 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	2102      	movs	r1, #2
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800256e:	f004 ff81 	bl	8007474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000204 	.word	0x20000204

08002580 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002586:	2102      	movs	r1, #2
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800258a:	f004 ff8b 	bl	80074a4 <HAL_RTCEx_BKUPRead>
 800258e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002590:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000204 	.word	0x20000204

080025a0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80025a6:	480b      	ldr	r0, [pc, #44]	; (80025d4 <GetTimerTicks+0x34>)
 80025a8:	f7ff fdd9 	bl	800215e <LL_RTC_TIME_GetSubSecond>
 80025ac:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80025ae:	e003      	b.n	80025b8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80025b0:	4808      	ldr	r0, [pc, #32]	; (80025d4 <GetTimerTicks+0x34>)
 80025b2:	f7ff fdd4 	bl	800215e <LL_RTC_TIME_GetSubSecond>
 80025b6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <GetTimerTicks+0x34>)
 80025ba:	f7ff fdd0 	bl	800215e <LL_RTC_TIME_GetSubSecond>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d1f4      	bne.n	80025b0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40002800 	.word	0x40002800

080025d8 <LL_AHB2_GRP1_EnableClock>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025fc:	68fb      	ldr	r3, [r7, #12]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <LL_APB1_GRP1_EnableClock>:
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4313      	orrs	r3, r2
 800261e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800262c:	68fb      	ldr	r3, [r7, #12]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <LL_APB1_GRP2_EnableClock>:
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4313      	orrs	r3, r2
 800264e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <LL_APB1_GRP1_DisableClock>:
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	43db      	mvns	r3, r3
 800267a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800267e:	4013      	ands	r3, r2
 8002680:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <LL_APB1_GRP2_DisableClock>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	43db      	mvns	r3, r3
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a2:	4013      	ands	r3, r2
 80026a4:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <MX_LPUART1_UART_Init+0x90>)
 80026b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80026f2:	4812      	ldr	r0, [pc, #72]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 80026f4:	f006 fcff 	bl	80090f6 <HAL_HalfDuplex_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80026fe:	f7ff f867 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 8002706:	f008 fe14 	bl	800b332 <HAL_UARTEx_SetTxFifoThreshold>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002710:	f7ff f85e 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002714:	2100      	movs	r1, #0
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 8002718:	f008 fe49 	bl	800b3ae <HAL_UARTEx_SetRxFifoThreshold>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002722:	f7ff f855 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_LPUART1_UART_Init+0x8c>)
 8002728:	f008 fdc8 	bl	800b2bc <HAL_UARTEx_EnableFifoMode>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002732:	f7ff f84d 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200002b4 	.word	0x200002b4
 8002740:	40008000 	.word	0x40008000

08002744 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 800274a:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <MX_USART2_UART_Init+0x94>)
 800274c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 800276a:	220c      	movs	r2, #12
 800276c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800278c:	4811      	ldr	r0, [pc, #68]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 800278e:	f006 fc62 	bl	8009056 <HAL_UART_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002798:	f7ff f81a 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279c:	2100      	movs	r1, #0
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 80027a0:	f008 fdc7 	bl	800b332 <HAL_UARTEx_SetTxFifoThreshold>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027aa:	f7ff f811 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ae:	2100      	movs	r1, #0
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 80027b2:	f008 fdfc 	bl	800b3ae <HAL_UARTEx_SetRxFifoThreshold>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027bc:	f7ff f808 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_USART2_UART_Init+0x90>)
 80027c2:	f008 fd7b 	bl	800b2bc <HAL_UARTEx_EnableFifoMode>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027cc:	f7ff f800 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000344 	.word	0x20000344
 80027d8:	40004400 	.word	0x40004400

080027dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b096      	sub	sp, #88	; 0x58
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2238      	movs	r2, #56	; 0x38
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f01a fb5f 	bl	801cec0 <memset>
  if(uartHandle->Instance==LPUART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <HAL_UART_MspInit+0x1a0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d156      	bne.n	80028ba <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800280c:	2320      	movs	r3, #32
 800280e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8002810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002814:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	4618      	mov	r0, r3
 800281c:	f004 f9ba 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002826:	f7fe ffd3 	bl	80017d0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800282a:	2001      	movs	r0, #1
 800282c:	f7ff ff04 	bl	8002638 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002830:	2004      	movs	r0, #4
 8002832:	f7ff fed1 	bl	80025d8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8002836:	2302      	movs	r3, #2
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283a:	2312      	movs	r3, #18
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283e:	2301      	movs	r3, #1
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002846:	2308      	movs	r3, #8
 8002848:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800284e:	4619      	mov	r1, r3
 8002850:	484b      	ldr	r0, [pc, #300]	; (8002980 <HAL_UART_MspInit+0x1a4>)
 8002852:	f002 fbab 	bl	8004fac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_UART_MspInit+0x1ac>)
 800285a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800285c:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 800285e:	2215      	movs	r2, #21
 8002860:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002862:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b45      	ldr	r3, [pc, #276]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002882:	2220      	movs	r2, #32
 8002884:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800288c:	483d      	ldr	r0, [pc, #244]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 800288e:	f001 fd41 	bl	8004314 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002898:	f7fe ff9a 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 80028a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80028a2:	4a38      	ldr	r2, [pc, #224]	; (8002984 <HAL_UART_MspInit+0x1a8>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2026      	movs	r0, #38	; 0x26
 80028ae:	f001 fcee 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80028b2:	2026      	movs	r0, #38	; 0x26
 80028b4:	f001 fd05 	bl	80042c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028b8:	e05c      	b.n	8002974 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a33      	ldr	r2, [pc, #204]	; (800298c <HAL_UART_MspInit+0x1b0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d157      	bne.n	8002974 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028c4:	2302      	movs	r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80028cc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 f95e 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x106>
      Error_Handler();
 80028de:	f7fe ff77 	bl	80017d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028e6:	f7ff fe8f 	bl	8002608 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff fe74 	bl	80025d8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80028f0:	230c      	movs	r3, #12
 80028f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002900:	2307      	movs	r3, #7
 8002902:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f002 fb4d 	bl	8004fac <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_UART_MspInit+0x1b8>)
 8002916:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 800291a:	2214      	movs	r2, #20
 800291c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002920:	2210      	movs	r2, #16
 8002922:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002932:	2200      	movs	r2, #0
 8002934:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002948:	4811      	ldr	r0, [pc, #68]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 800294a:	f001 fce3 	bl	8004314 <HAL_DMA_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8002954:	f7fe ff3c 	bl	80017d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 800295c:	679a      	str	r2, [r3, #120]	; 0x78
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_UART_MspInit+0x1b4>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2025      	movs	r0, #37	; 0x25
 800296a:	f001 fc90 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800296e:	2025      	movs	r0, #37	; 0x25
 8002970:	f001 fca7 	bl	80042c2 <HAL_NVIC_EnableIRQ>
}
 8002974:	bf00      	nop
 8002976:	3758      	adds	r7, #88	; 0x58
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40008000 	.word	0x40008000
 8002980:	48000800 	.word	0x48000800
 8002984:	200003d4 	.word	0x200003d4
 8002988:	40020044 	.word	0x40020044
 800298c:	40004400 	.word	0x40004400
 8002990:	20000434 	.word	0x20000434
 8002994:	40020058 	.word	0x40020058

08002998 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_UART_MspDeInit+0x68>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10f      	bne.n	80029ca <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff fe6e 	bl	800268c <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(MB_RX_GPIO_Port, MB_RX_Pin);
 80029b0:	2102      	movs	r1, #2
 80029b2:	4814      	ldr	r0, [pc, #80]	; (8002a04 <HAL_UART_MspDeInit+0x6c>)
 80029b4:	f002 fc5a 	bl	800526c <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fd51 	bl	8004464 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80029c2:	2026      	movs	r0, #38	; 0x26
 80029c4:	f001 fc8b 	bl	80042de <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80029c8:	e015      	b.n	80029f6 <HAL_UART_MspDeInit+0x5e>
  else if(uartHandle->Instance==USART2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_UART_MspDeInit+0x70>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d110      	bne.n	80029f6 <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80029d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029d8:	f7ff fe46 	bl	8002668 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80029dc:	210c      	movs	r1, #12
 80029de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e2:	f002 fc43 	bl	800526c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fd3a 	bl	8004464 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80029f0:	2025      	movs	r0, #37	; 0x25
 80029f2:	f001 fc74 	bl	80042de <HAL_NVIC_DisableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40008000 	.word	0x40008000
 8002a04:	48000800 	.word	0x48000800
 8002a08:	40004400 	.word	0x40004400

08002a0c <LL_APB1_GRP1_ForceReset>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_APB1_GRP1_ReleaseReset>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a44:	4013      	ands	r3, r2
 8002a46:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <LL_EXTI_EnableIT_0_31>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	58000800 	.word	0x58000800

08002a7c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <vcom_Init+0x28>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002a8a:	f7fe fafb 	bl	8001084 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002a8e:	f7ff fe59 	bl	8002744 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002a92:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a96:	f7ff ffdd 	bl	8002a54 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002a9a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000498 	.word	0x20000498

08002aa8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002aac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ab0:	f7ff ffac 	bl	8002a0c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002ab4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ab8:	f7ff ffb9 	bl	8002a2e <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <vcom_DeInit+0x28>)
 8002abe:	f7ff ff6b 	bl	8002998 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002ac2:	200f      	movs	r0, #15
 8002ac4:	f001 fc0b 	bl	80042de <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002ac8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000344 	.word	0x20000344

08002ad4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <vcom_Trace_DMA+0x24>)
 8002ae8:	f006 fc4a 	bl	8009380 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002aec:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000344 	.word	0x20000344

08002afc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <vcom_ReceiveInit+0x70>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b0e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b18:	4815      	ldr	r0, [pc, #84]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b1a:	f008 fb42 	bl	800b1a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002b1e:	bf00      	nop
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d0f7      	beq.n	8002b20 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002b30:	bf00      	nop
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d1f7      	bne.n	8002b32 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002b50:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b54:	f008 fb80 	bl	800b258 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4906      	ldr	r1, [pc, #24]	; (8002b74 <vcom_ReceiveInit+0x78>)
 8002b5c:	4804      	ldr	r0, [pc, #16]	; (8002b70 <vcom_ReceiveInit+0x74>)
 8002b5e:	f006 fbb9 	bl	80092d4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002b62:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	2000049c 	.word	0x2000049c
 8002b70:	20000344 	.word	0x20000344
 8002b74:	20000494 	.word	0x20000494

08002b78 <vcom_Resume>:

void vcom_Resume(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b7c:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <vcom_Resume+0x28>)
 8002b7e:	f006 fa6a 	bl	8009056 <HAL_UART_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <vcom_Resume+0x14>
  {
    Error_Handler();
 8002b88:	f7fe fe22 	bl	80017d0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <vcom_Resume+0x2c>)
 8002b8e:	f001 fbc1 	bl	8004314 <HAL_DMA_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <vcom_Resume+0x24>
  {
    Error_Handler();
 8002b98:	f7fe fe1a 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000344 	.word	0x20000344
 8002ba4:	20000434 	.word	0x20000434

08002ba8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_UART_TxCpltCallback+0x24>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d103      	bne.n	8002bc2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_UART_TxCpltCallback+0x28>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40004400 	.word	0x40004400
 8002bd0:	20000498 	.word	0x20000498

08002bd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_UART_RxCpltCallback+0x44>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_UART_RxCpltCallback+0x48>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_UART_RxCpltCallback+0x30>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_UART_RxCpltCallback+0x48>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4807      	ldr	r0, [pc, #28]	; (8002c20 <HAL_UART_RxCpltCallback+0x4c>)
 8002c02:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002c04:	2201      	movs	r2, #1
 8002c06:	4906      	ldr	r1, [pc, #24]	; (8002c20 <HAL_UART_RxCpltCallback+0x4c>)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f006 fb63 	bl	80092d4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	2000049c 	.word	0x2000049c
 8002c20:	20000494 	.word	0x20000494

08002c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c24:	480d      	ldr	r0, [pc, #52]	; (8002c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c28:	f7ff fa93 	bl	8002152 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c2e:	490d      	ldr	r1, [pc, #52]	; (8002c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <LoopForever+0xe>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c34:	e002      	b.n	8002c3c <LoopCopyDataInit>

08002c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3a:	3304      	adds	r3, #4

08002c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c40:	d3f9      	bcc.n	8002c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <LoopForever+0x16>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c48:	e001      	b.n	8002c4e <LoopFillZerobss>

08002c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c4c:	3204      	adds	r2, #4

08002c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c50:	d3fb      	bcc.n	8002c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c52:	f01a f911 	bl	801ce78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c56:	f7fe fd27 	bl	80016a8 <main>

08002c5a <LoopForever>:

LoopForever:
    b LoopForever
 8002c5a:	e7fe      	b.n	8002c5a <LoopForever>
  ldr   r0, =_estack
 8002c5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002c68:	0801de54 	.word	0x0801de54
  ldr r2, =_sbss
 8002c6c:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002c70:	200021d0 	.word	0x200021d0

08002c74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>

08002c76 <LL_AHB2_GRP1_EnableClock>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <BSP_RADIO_Init>:
#include "stm32wlxx_LoRa_E5_radio.h"

int32_t BSP_RADIO_Init(void) {
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	611a      	str	r2, [r3, #16]

  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff ffdb 	bl	8002c76 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f002 f968 	bl	8004fac <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce8:	f002 f960 	bl	8004fac <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2120      	movs	r1, #32
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f002 fb88 	bl	8005408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d00:	f002 fb82 	bl	8005408 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <BSP_RADIO_ConfigRFSwitch>:
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);

  return BSP_ERROR_NONE;
}

int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  switch (Config) {
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d83f      	bhi.n	8002da0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002d20:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d53 	.word	0x08002d53
 8002d30:	08002d6d 	.word	0x08002d6d
 8002d34:	08002d87 	.word	0x08002d87
  case RADIO_SWITCH_OFF: {

    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d40:	f002 fb62 	bl	8005408 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2120      	movs	r1, #32
 8002d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4c:	f002 fb5c 	bl	8005408 <HAL_GPIO_WritePin>
    break;
 8002d50:	e027      	b.n	8002da2 <BSP_RADIO_ConfigRFSwitch+0x92>
  }
  case RADIO_SWITCH_RX: {

    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8002d52:	2201      	movs	r2, #1
 8002d54:	2110      	movs	r1, #16
 8002d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5a:	f002 fb55 	bl	8005408 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2120      	movs	r1, #32
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f002 fb4f 	bl	8005408 <HAL_GPIO_WritePin>
    break;
 8002d6a:	e01a      	b.n	8002da2 <BSP_RADIO_ConfigRFSwitch+0x92>
  }
  case RADIO_SWITCH_RFO_LP: {

    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2110      	movs	r1, #16
 8002d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d74:	f002 fb48 	bl	8005408 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d80:	f002 fb42 	bl	8005408 <HAL_GPIO_WritePin>
    break;
 8002d84:	e00d      	b.n	8002da2 <BSP_RADIO_ConfigRFSwitch+0x92>
  }
  case RADIO_SWITCH_RFO_HP: {

    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2110      	movs	r1, #16
 8002d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8e:	f002 fb3b 	bl	8005408 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8002d92:	2201      	movs	r2, #1
 8002d94:	2120      	movs	r1, #32
 8002d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d9a:	f002 fb35 	bl	8005408 <HAL_GPIO_WritePin>
    break;
 8002d9e:	e000      	b.n	8002da2 <BSP_RADIO_ConfigRFSwitch+0x92>
  }
  default:
    break;
 8002da0:	bf00      	nop
  }

  return BSP_ERROR_NONE;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <BSP_RADIO_GetTxConfig>:

int32_t BSP_RADIO_GetTxConfig(void) { return RADIO_CONF_RFO_HP; }
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	2302      	movs	r3, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <BSP_RADIO_IsTCXO>:

int32_t BSP_RADIO_IsTCXO(void) { return RADIO_CONF_TCXO_SUPPORTED; }
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <BSP_RADIO_IsDCDC>:

int32_t BSP_RADIO_IsDCDC(void) { return RADIO_CONF_DCDC_SUPPORTED; }
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <BSP_RADIO_GetRFOMaxPowerConfig>:

int32_t
BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config) {
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (Config == RADIO_RFO_LP_MAXPOWER) {
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002de6:	230f      	movs	r3, #15
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e001      	b.n	8002df0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  } else {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002dec:	2316      	movs	r3, #22
 8002dee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6053      	str	r3, [r2, #4]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	e0042000 	.word	0xe0042000

08002e18 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	6053      	str	r3, [r2, #4]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	e0042000 	.word	0xe0042000

08002e34 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6053      	str	r3, [r2, #4]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	e0042000 	.word	0xe0042000

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f001 fa0c 	bl	8004278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e60:	f003 fcba 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_Init+0x3c>)
 8002e68:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e6a:	200f      	movs	r0, #15
 8002e6c:	f000 f810 	bl	8002e90 <HAL_InitTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	e001      	b.n	8002e80 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e7c:	f7fe feb3 	bl	8001be6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e80:	79fb      	ldrb	r3, [r7, #7]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_InitTick+0x6c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d024      	beq.n	8002eee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ea4:	f003 fc98 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_InitTick+0x6c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fa1c 	bl	80042fa <HAL_SYSTICK_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d809      	bhi.n	8002ee2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed6:	f001 f9da 	bl	800428e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_InitTick+0x70>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e007      	b.n	8002ef2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e004      	b.n	8002ef2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000008 	.word	0x20000008
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_SuspendTick+0x18>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_SuspendTick+0x18>)
 8002f0e:	f023 0302 	bic.w	r3, r3, #2
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_ResumeTick+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <HAL_ResumeTick+0x18>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <HAL_GetUIDw0+0x10>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	1fff7590 	.word	0x1fff7590

08002f50 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <HAL_GetUIDw1+0x10>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	1fff7594 	.word	0x1fff7594

08002f64 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetUIDw2+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	1fff7598 	.word	0x1fff7598

08002f78 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002f7c:	f7ff ff3e 	bl	8002dfc <LL_DBGMCU_EnableDBGSleepMode>
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002f88:	f7ff ff46 	bl	8002e18 <LL_DBGMCU_EnableDBGStopMode>
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002f94:	f7ff ff4e 	bl	8002e34 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2107      	movs	r1, #7
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2107      	movs	r1, #7
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	210f      	movs	r1, #15
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 010f 	and.w	r1, r3, #15
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0219      	lsls	r1, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	400b      	ands	r3, r1
 8003116:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800311a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800313e:	f023 0317 	bic.w	r3, r3, #23
 8003142:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003164:	f023 0317 	bic.w	r3, r3, #23
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6093      	str	r3, [r2, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800318a:	d101      	bne.n	8003190 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	f023 0317 	bic.w	r3, r3, #23
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d2:	f023 0317 	bic.w	r3, r3, #23
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <LL_ADC_IsEnabled+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_IsEnabled+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d101      	bne.n	8003224 <LL_ADC_IsDisableOngoing+0x18>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_ADC_IsDisableOngoing+0x1a>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003240:	f023 0317 	bic.w	r3, r3, #23
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003266:	f023 0317 	bic.w	r3, r3, #23
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b04      	cmp	r3, #4
 800328e:	d101      	bne.n	8003294 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e19e      	b.n	8003600 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fd fd7f 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff44 	bl	8003176 <LL_ADC_IsInternalRegulatorEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d115      	bne.n	8003320 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff18 	bl	800312e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032fe:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_ADC_Init+0x2c4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	4a98      	ldr	r2, [pc, #608]	; (8003568 <HAL_ADC_Init+0x2c8>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	3301      	adds	r3, #1
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003312:	e002      	b.n	800331a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3b01      	subs	r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f9      	bne.n	8003314 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff26 	bl	8003176 <LL_ADC_IsInternalRegulatorEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f043 0210 	orr.w	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff93 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003356:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f040 8144 	bne.w	80035ee <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 8140 	bne.w	80035ee <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003376:	f043 0202 	orr.w	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff30 	bl	80031e8 <LL_ADC_IsEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 80a7 	bne.w	80034de <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800339a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e5b      	ldrb	r3, [r3, #25]
 80033a0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7e9b      	ldrb	r3, [r3, #26]
 80033a8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033aa:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	d002      	beq.n	80033ba <HAL_ADC_Init+0x11a>
 80033b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033b8:	e000      	b.n	80033bc <HAL_ADC_Init+0x11c>
 80033ba:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033bc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033c2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da04      	bge.n	80033d6 <HAL_ADC_Init+0x136>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033d4:	e001      	b.n	80033da <HAL_ADC_Init+0x13a>
 80033d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80033da:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033e2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033e4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d114      	bne.n	8003420 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e9b      	ldrb	r3, [r3, #26]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e00b      	b.n	8003420 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003434:	4313      	orrs	r3, r2
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003446:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	430b      	orrs	r3, r1
 8003452:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003460:	4313      	orrs	r3, r2
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d111      	bne.n	8003496 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800347e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003484:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800348a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <HAL_ADC_Init+0x2cc>)
 800349e:	4013      	ands	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	6979      	ldr	r1, [r7, #20]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80034b2:	d014      	beq.n	80034de <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d00f      	beq.n	80034de <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c6:	d00a      	beq.n	80034de <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_ADC_Init+0x2d0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d8:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_ADC_Init+0x2d0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	461a      	mov	r2, r3
 80034e8:	2100      	movs	r1, #0
 80034ea:	f7ff fd76 	bl	8002fda <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	461a      	mov	r2, r3
 80034f8:	491e      	ldr	r1, [pc, #120]	; (8003574 <HAL_ADC_Init+0x2d4>)
 80034fa:	f7ff fd6e 	bl	8002fda <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f062 020f 	orn	r2, r2, #15
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
 8003516:	e042      	b.n	800359e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003520:	d13d      	bne.n	800359e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e00c      	b.n	8003542 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d006      	beq.n	800354a <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b07      	cmp	r3, #7
 8003546:	d9ef      	bls.n	8003528 <HAL_ADC_Init+0x288>
 8003548:	e000      	b.n	800354c <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800354a:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d112      	bne.n	8003578 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f062 020f 	orn	r2, r2, #15
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
 8003562:	e01c      	b.n	800359e <HAL_ADC_Init+0x2fe>
 8003564:	20000000 	.word	0x20000000
 8003568:	053e2d63 	.word	0x053e2d63
 800356c:	1ffffc02 	.word	0x1ffffc02
 8003570:	40012708 	.word	0x40012708
 8003574:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	3b01      	subs	r3, #1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	f003 031c 	and.w	r3, r3, #28
 800358a:	f06f 020f 	mvn.w	r2, #15
 800358e:	fa02 f103 	lsl.w	r1, r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fd36 	bl	8003016 <LL_ADC_GetSamplingTimeCommonChannels>
 80035aa:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10b      	bne.n	80035cc <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035ca:	e018      	b.n	80035fe <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f023 0312 	bic.w	r3, r3, #18
 80035d4:	f043 0210 	orr.w	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035ec:	e007      	b.n	80035fe <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06a      	b.n	80036f0 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f043 0202 	orr.w	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fabe 	bl	8003ba8 <ADC_ConversionStop>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fb82 	bl	8003d40 <ADC_Disable>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fd7f 	bl	8003154 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003664:	f023 0303 	bic.w	r3, r3, #3
 8003668:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f240 329f 	movw	r2, #927	; 0x39f
 8003672:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68d9      	ldr	r1, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_ADC_DeInit+0xf0>)
 8003680:	400b      	ands	r3, r1
 8003682:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003692:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0207 	bic.w	r2, r2, #7
 80036a2:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036b2:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_ADC_DeInit+0xf4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <HAL_ADC_DeInit+0xf4>)
 80036c8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80036cc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fbac 	bl	8000e2c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	833e0200 	.word	0x833e0200
 80036fc:	40012708 	.word	0x40012708

08003700 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fdb5 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d132      	bne.n	800377e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_ADC_Start+0x26>
 8003722:	2302      	movs	r3, #2
 8003724:	e02e      	b.n	8003784 <HAL_ADC_Start+0x84>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa80 	bl	8003c34 <ADC_Enable>
 8003734:	4603      	mov	r3, r0
 8003736:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11a      	bne.n	8003774 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	221c      	movs	r2, #28
 800375e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fd5f 	bl	8003230 <LL_ADC_REG_StartConversion>
 8003772:	e006      	b.n	8003782 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800377c:	e001      	b.n	8003782 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_Stop+0x16>
 800379e:	2302      	movs	r3, #2
 80037a0:	e022      	b.n	80037e8 <HAL_ADC_Stop+0x5c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9fc 	bl	8003ba8 <ADC_ConversionStop>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fac0 	bl	8003d40 <ADC_Disable>
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d102      	bne.n	8003808 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003802:	2308      	movs	r3, #8
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e010      	b.n	800382a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e077      	b.n	8003916 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003826:	2304      	movs	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800382a:	f7fe fc13 	bl	8002054 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003830:	e021      	b.n	8003876 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d01d      	beq.n	8003876 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800383a:	f7fe fc0b 	bl	8002054 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <HAL_ADC_PollForConversion+0x60>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d112      	bne.n	8003876 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e04f      	b.n	8003916 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0d6      	beq.n	8003832 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fbd6 	bl	8003046 <LL_ADC_REG_IsTriggerSourceSWStart>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d031      	beq.n	8003904 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7e9b      	ldrb	r3, [r3, #26]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d12d      	bne.n	8003904 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d126      	bne.n	8003904 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fcde 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d112      	bne.n	80038ec <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020c 	bic.w	r2, r2, #12
 80038d4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
 80038ea:	e00b      	b.n	8003904 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f043 0201 	orr.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7e1b      	ldrb	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	220c      	movs	r2, #12
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
	...

08003938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x28>
 800395c:	2302      	movs	r3, #2
 800395e:	e110      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x24a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fc85 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 80f7 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	f000 80b1 	beq.w	8003ae6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398c:	d004      	beq.n	8003998 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003992:	4a7e      	ldr	r2, [pc, #504]	; (8003b8c <HAL_ADC_ConfigChannel+0x254>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff fb82 	bl	80030ac <LL_ADC_REG_SetSequencerChAdd>
 80039a8:	e041      	b.n	8003a2e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	210f      	movs	r1, #15
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	401a      	ands	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0xa0>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	e011      	b.n	80039fc <HAL_ADC_ConfigChannel+0xc4>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e003      	b.n	80039fc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	6849      	ldr	r1, [r1, #4]
 8003a00:	f001 011f 	and.w	r1, r1, #31
 8003a04:	408b      	lsls	r3, r1
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d808      	bhi.n	8003a2e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f7ff fb1e 	bl	800306a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f7ff fb5b 	bl	80030f6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f280 8097 	bge.w	8003b78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a4a:	4851      	ldr	r0, [pc, #324]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003a4c:	f7ff fab8 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 8003a50:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4f      	ldr	r2, [pc, #316]	; (8003b94 <HAL_ADC_ConfigChannel+0x25c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d120      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11b      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4848      	ldr	r0, [pc, #288]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003a70:	f7ff fa94 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <HAL_ADC_ConfigChannel+0x260>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <HAL_ADC_ConfigChannel+0x264>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a8e:	e002      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f9      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a9c:	e06c      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <HAL_ADC_ConfigChannel+0x268>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x18a>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4835      	ldr	r0, [pc, #212]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003abc:	f7ff fa6e 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003ac0:	e05a      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a37      	ldr	r2, [pc, #220]	; (8003ba4 <HAL_ADC_ConfigChannel+0x26c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d155      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d150      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003adc:	4619      	mov	r1, r3
 8003ade:	482c      	ldr	r0, [pc, #176]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003ae0:	f7ff fa5c 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003ae4:	e048      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aee:	d004      	beq.n	8003afa <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003af4:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <HAL_ADC_ConfigChannel+0x254>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d107      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7ff fae3 	bl	80030d0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da32      	bge.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b12:	481f      	ldr	r0, [pc, #124]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b14:	f7ff fa54 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 8003b18:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_ADC_ConfigChannel+0x25c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d107      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4818      	ldr	r0, [pc, #96]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b2e:	f7ff fa35 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b32:	e021      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_ADC_ConfigChannel+0x268>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d107      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b44:	4619      	mov	r1, r3
 8003b46:	4812      	ldr	r0, [pc, #72]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b48:	f7ff fa28 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b4c:	e014      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_ADC_ConfigChannel+0x26c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10f      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b5e:	4619      	mov	r1, r3
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b62:	f7ff fa1b 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b66:	e007      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80000004 	.word	0x80000004
 8003b90:	40012708 	.word	0x40012708
 8003b94:	b0001000 	.word	0xb0001000
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	053e2d63 	.word	0x053e2d63
 8003ba0:	b8004000 	.word	0xb8004000
 8003ba4:	b4002000 	.word	0xb4002000

08003ba8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fb61 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d033      	beq.n	8003c28 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fb21 	bl	800320c <LL_ADC_IsDisableOngoing>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fb3e 	bl	8003256 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bda:	f7fe fa3b 	bl	8002054 <HAL_GetTick>
 8003bde:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003be0:	e01b      	b.n	8003c1a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003be2:	f7fe fa37 	bl	8002054 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d914      	bls.n	8003c1a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f043 0210 	orr.w	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e007      	b.n	8003c2a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1dc      	bne.n	8003be2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff facf 	bl	80031e8 <LL_ADC_IsEnabled>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d169      	bne.n	8003d24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <ADC_Enable+0xfc>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e055      	b.n	8003d26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fa8c 	bl	800319c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c84:	482b      	ldr	r0, [pc, #172]	; (8003d34 <ADC_Enable+0x100>)
 8003c86:	f7ff f99b 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <ADC_Enable+0x104>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <ADC_Enable+0x108>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ca6:	e002      	b.n	8003cae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e5b      	ldrb	r3, [r3, #25]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d033      	beq.n	8003d24 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cbc:	f7fe f9ca 	bl	8002054 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc2:	e028      	b.n	8003d16 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fa8d 	bl	80031e8 <LL_ADC_IsEnabled>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fa5f 	bl	800319c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cde:	f7fe f9b9 	bl	8002054 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d914      	bls.n	8003d16 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d00d      	beq.n	8003d16 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e007      	b.n	8003d26 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d1cf      	bne.n	8003cc4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	80000017 	.word	0x80000017
 8003d34:	40012708 	.word	0x40012708
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	053e2d63 	.word	0x053e2d63

08003d40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fa5d 	bl	800320c <LL_ADC_IsDisableOngoing>
 8003d52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fa45 	bl	80031e8 <LL_ADC_IsEnabled>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d047      	beq.n	8003df4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d144      	bne.n	8003df4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0305 	and.w	r3, r3, #5
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10c      	bne.n	8003d92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fa20 	bl	80031c2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2203      	movs	r2, #3
 8003d88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d8a:	f7fe f963 	bl	8002054 <HAL_GetTick>
 8003d8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d90:	e029      	b.n	8003de6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	f043 0210 	orr.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e023      	b.n	8003df6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dae:	f7fe f951 	bl	8002054 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d914      	bls.n	8003de6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f043 0210 	orr.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1dc      	bne.n	8003dae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <LL_ADC_SetCalibrationFactor>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e0e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_GetCalibrationFactor>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <LL_ADC_Enable>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e52:	f023 0317 	bic.w	r3, r3, #23
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <LL_ADC_Disable>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e78:	f023 0317 	bic.w	r3, r3, #23
 8003e7c:	f043 0202 	orr.w	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_IsEnabled>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <LL_ADC_IsEnabled+0x18>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <LL_ADC_IsEnabled+0x1a>
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_StartCalibration>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ec2:	f023 0317 	bic.w	r3, r3, #23
 8003ec6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eec:	d101      	bne.n	8003ef2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b088      	sub	sp, #32
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_ADCEx_Calibration_Start+0x1e>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0b9      	b.n	8004090 <HAL_ADCEx_Calibration_Start+0x192>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff0b 	bl	8003d40 <ADC_Disable>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ffab 	bl	8003e8e <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 809d 	bne.w	800407a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f48:	f043 0202 	orr.w	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	f248 0303 	movw	r3, #32771	; 0x8003
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f6c:	f023 0303 	bic.w	r3, r3, #3
 8003f70:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e02e      	b.n	8003fd6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff98 	bl	8003eb2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f82:	e014      	b.n	8003fae <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3301      	adds	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f90:	d30d      	bcc.n	8003fae <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f023 0312 	bic.w	r3, r3, #18
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e070      	b.n	8004090 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff90 	bl	8003ed8 <LL_ADC_IsCalibrationOnGoing>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e2      	bne.n	8003f84 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff2f 	bl	8003e26 <LL_ADC_GetCalibrationFactor>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	d9cd      	bls.n	8003f78 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff29 	bl	8003e42 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff01 	bl	8003dfe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff31 	bl	8003e68 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004006:	f7fe f825 	bl	8002054 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800400c:	e01c      	b.n	8004048 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800400e:	f7fe f821 	bl	8002054 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d915      	bls.n	8004048 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff34 	bl	8003e8e <LL_ADC_IsEnabled>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	f043 0210 	orr.w	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e023      	b.n	8004090 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff1e 	bl	8003e8e <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1da      	bne.n	800400e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	430a      	orrs	r2, r1
 8004066:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f023 0303 	bic.w	r3, r3, #3
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	659a      	str	r2, [r3, #88]	; 0x58
 8004078:	e005      	b.n	8004086 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f043 0210 	orr.w	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <__NVIC_SetPriorityGrouping+0x44>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040b4:	4013      	ands	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <__NVIC_SetPriorityGrouping+0x44>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	60d3      	str	r3, [r2, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <__NVIC_GetPriorityGrouping+0x18>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	f003 0307 	and.w	r3, r3, #7
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	2b00      	cmp	r3, #0
 800410c:	db0b      	blt.n	8004126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	f003 021f 	and.w	r2, r3, #31
 8004114:	4906      	ldr	r1, [pc, #24]	; (8004130 <__NVIC_EnableIRQ+0x34>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2001      	movs	r0, #1
 800411e:	fa00 f202 	lsl.w	r2, r0, r2
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	e000e100 	.word	0xe000e100

08004134 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db12      	blt.n	800416c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	490a      	ldr	r1, [pc, #40]	; (8004178 <__NVIC_DisableIRQ+0x44>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	3320      	adds	r3, #32
 800415c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004160:	f3bf 8f4f 	dsb	sy
}
 8004164:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004166:	f3bf 8f6f 	isb	sy
}
 800416a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	; (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	; (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf28      	it	cs
 80041ee:	2304      	movcs	r3, #4
 80041f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d902      	bls.n	8004200 <NVIC_EncodePriority+0x30>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3b03      	subs	r3, #3
 80041fe:	e000      	b.n	8004202 <NVIC_EncodePriority+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004218:	f04f 31ff 	mov.w	r1, #4294967295
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43d9      	mvns	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	4313      	orrs	r3, r2
         );
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004244:	d301      	bcc.n	800424a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004246:	2301      	movs	r3, #1
 8004248:	e00f      	b.n	800426a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <SysTick_Config+0x40>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004252:	210f      	movs	r1, #15
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	f7ff ff90 	bl	800417c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <SysTick_Config+0x40>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <SysTick_Config+0x40>)
 8004264:	2207      	movs	r2, #7
 8004266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000e010 	.word	0xe000e010

08004278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff09 	bl	8004098 <__NVIC_SetPriorityGrouping>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	4603      	mov	r3, r0
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800429c:	f7ff ff20 	bl	80040e0 <__NVIC_GetPriorityGrouping>
 80042a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	6978      	ldr	r0, [r7, #20]
 80042a8:	f7ff ff92 	bl	80041d0 <NVIC_EncodePriority>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff61 	bl	800417c <__NVIC_SetPriority>
}
 80042ba:	bf00      	nop
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff13 	bl	80040fc <__NVIC_EnableIRQ>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff ff21 	bl	8004134 <__NVIC_DisableIRQ>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff96 	bl	8004234 <SysTick_Config>
 8004308:	4603      	mov	r3, r0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e08e      	b.n	8004444 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_DMA_Init+0x138>)
 800432e:	429a      	cmp	r2, r3
 8004330:	d80f      	bhi.n	8004352 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b45      	ldr	r3, [pc, #276]	; (8004450 <HAL_DMA_Init+0x13c>)
 800433a:	4413      	add	r3, r2
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_DMA_Init+0x140>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a42      	ldr	r2, [pc, #264]	; (8004458 <HAL_DMA_Init+0x144>)
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
 8004350:	e00e      	b.n	8004370 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_DMA_Init+0x148>)
 800435a:	4413      	add	r3, r2
 800435c:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <HAL_DMA_Init+0x140>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	009a      	lsls	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <HAL_DMA_Init+0x14c>)
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fb24 	bl	8004a10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d0:	d102      	bne.n	80043d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_DMA_Init+0x106>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d80c      	bhi.n	800441a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb4d 	bl	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	e008      	b.n	800442c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40020407 	.word	0x40020407
 8004450:	bffdfff8 	.word	0xbffdfff8
 8004454:	cccccccd 	.word	0xcccccccd
 8004458:	40020000 	.word	0x40020000
 800445c:	bffdfbf8 	.word	0xbffdfbf8
 8004460:	40020400 	.word	0x40020400

08004464 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07b      	b.n	800456e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <HAL_DMA_DeInit+0x114>)
 800448e:	429a      	cmp	r2, r3
 8004490:	d80f      	bhi.n	80044b2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	4b38      	ldr	r3, [pc, #224]	; (800457c <HAL_DMA_DeInit+0x118>)
 800449a:	4413      	add	r3, r2
 800449c:	4a38      	ldr	r2, [pc, #224]	; (8004580 <HAL_DMA_DeInit+0x11c>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	009a      	lsls	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a35      	ldr	r2, [pc, #212]	; (8004584 <HAL_DMA_DeInit+0x120>)
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
 80044b0:	e00e      	b.n	80044d0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_DMA_DeInit+0x124>)
 80044ba:	4413      	add	r3, r2
 80044bc:	4a30      	ldr	r2, [pc, #192]	; (8004580 <HAL_DMA_DeInit+0x11c>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	009a      	lsls	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2f      	ldr	r2, [pc, #188]	; (800458c <HAL_DMA_DeInit+0x128>)
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f003 021c 	and.w	r2, r3, #28
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ea:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa8f 	bl	8004a10 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004502:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00f      	beq.n	800452c <HAL_DMA_DeInit+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d80b      	bhi.n	800452c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fac3 	bl	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800452a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40020407 	.word	0x40020407
 800457c:	bffdfff8 	.word	0xbffdfff8
 8004580:	cccccccd 	.word	0xcccccccd
 8004584:	40020000 	.word	0x40020000
 8004588:	bffdfbf8 	.word	0xbffdfbf8
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_Start_IT+0x20>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e069      	b.n	8004684 <HAL_DMA_Start_IT+0xf4>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d155      	bne.n	8004670 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f9d3 	bl	8004994 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 020e 	orr.w	r2, r2, #14
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00f      	b.n	8004628 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 020a 	orr.w	r2, r2, #10
 8004626:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e008      	b.n	8004682 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004682:	7dfb      	ldrb	r3, [r7, #23]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e04f      	b.n	800473e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d008      	beq.n	80046bc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e040      	b.n	800473e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 020e 	bic.w	r2, r2, #14
 80046ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f003 021c 	and.w	r2, r3, #28
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f202 	lsl.w	r2, r1, r2
 80046fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004708:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004720:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800472a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d005      	beq.n	800476c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2204      	movs	r2, #4
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	e047      	b.n	80047fc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 020e 	bic.w	r2, r2, #14
 800477a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f003 021c 	and.w	r2, r3, #28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f202 	lsl.w	r2, r1, r2
 80047ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
    }
  }
  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	f003 031c 	and.w	r3, r3, #28
 8004828:	2204      	movs	r2, #4
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d027      	beq.n	8004884 <HAL_DMA_IRQHandler+0x7c>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d022      	beq.n	8004884 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f003 021c 	and.w	r2, r3, #28
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	2104      	movs	r1, #4
 800486a:	fa01 f202 	lsl.w	r2, r1, r2
 800486e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8081 	beq.w	800497c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004882:	e07b      	b.n	800497c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 031c 	and.w	r3, r3, #28
 800488c:	2202      	movs	r2, #2
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d03d      	beq.n	8004914 <HAL_DMA_IRQHandler+0x10c>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d038      	beq.n	8004914 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 020a 	bic.w	r2, r2, #10
 80048be:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_DMA_IRQHandler+0x180>)
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d909      	bls.n	80048e8 <HAL_DMA_IRQHandler+0xe0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f003 031c 	and.w	r3, r3, #28
 80048dc:	4a2b      	ldr	r2, [pc, #172]	; (800498c <HAL_DMA_IRQHandler+0x184>)
 80048de:	2102      	movs	r1, #2
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	6053      	str	r3, [r2, #4]
 80048e6:	e008      	b.n	80048fa <HAL_DMA_IRQHandler+0xf2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 031c 	and.w	r3, r3, #28
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <HAL_DMA_IRQHandler+0x188>)
 80048f2:	2102      	movs	r1, #2
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d038      	beq.n	800497c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004912:	e033      	b.n	800497c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f003 031c 	and.w	r3, r3, #28
 800491c:	2208      	movs	r2, #8
 800491e:	409a      	lsls	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02a      	beq.n	800497e <HAL_DMA_IRQHandler+0x176>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d025      	beq.n	800497e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 020e 	bic.w	r2, r2, #14
 8004940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f003 021c 	and.w	r2, r3, #28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800497c:	bf00      	nop
 800497e:	bf00      	nop
}
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40020080 	.word	0x40020080
 800498c:	40020400 	.word	0x40020400
 8004990:	40020000 	.word	0x40020000

08004994 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f003 021c 	and.w	r2, r3, #28
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2101      	movs	r1, #1
 80049cc:	fa01 f202 	lsl.w	r2, r1, r2
 80049d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d108      	bne.n	80049f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049f2:	e007      	b.n	8004a04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
	...

08004a10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d813      	bhi.n	8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	3b08      	subs	r3, #8
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e011      	b.n	8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	009a      	lsls	r2, r3, #2
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a56:	4413      	add	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3b08      	subs	r3, #8
 8004a64:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004a74:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40020407 	.word	0x40020407
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	4002081c 	.word	0x4002081c
 8004a9c:	40020880 	.word	0x40020880

08004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	1000823f 	.word	0x1000823f
 8004ae4:	40020940 	.word	0x40020940

08004ae8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <HAL_FLASH_Program+0x80>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_FLASH_Program+0x1a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e02d      	b.n	8004b5e <HAL_FLASH_Program+0x76>
 8004b02:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_FLASH_Program+0x80>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_FLASH_Program+0x80>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b12:	f000 f869 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11a      	bne.n	8004b56 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f000 f8be 	bl	8004cac <FLASH_Program_DoubleWord>
 8004b30:	e004      	b.n	8004b3c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	f000 f8de 	bl	8004cf8 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b40:	f000 f852 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <HAL_FLASH_Program+0x84>)
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4906      	ldr	r1, [pc, #24]	; (8004b6c <HAL_FLASH_Program+0x84>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_FLASH_Program+0x80>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200004a0 	.word	0x200004a0
 8004b6c:	58004000 	.word	0x58004000

08004b70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_FLASH_Unlock+0x38>)
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0b      	bge.n	8004b9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_FLASH_Unlock+0x38>)
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_FLASH_Unlock+0x3c>)
 8004b86:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_FLASH_Unlock+0x38>)
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_FLASH_Unlock+0x40>)
 8004b8c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_FLASH_Unlock+0x38>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da01      	bge.n	8004b9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	58004000 	.word	0x58004000
 8004bac:	45670123 	.word	0x45670123
 8004bb0:	cdef89ab 	.word	0xcdef89ab

08004bb4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_FLASH_Lock+0x30>)
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_FLASH_Lock+0x30>)
 8004bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_FLASH_Lock+0x30>)
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	db01      	blt.n	8004bd6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	58004000 	.word	0x58004000

08004be8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004bf0:	f7fd fa30 	bl	8002054 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004bf6:	e009      	b.n	8004c0c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004bf8:	f7fd fa2c 	bl	8002054 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d801      	bhi.n	8004c0c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e047      	b.n	8004c9c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d0ee      	beq.n	8004bf8 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004c36:	4013      	ands	r3, r2
 8004c38:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <FLASH_WaitForLastOperation+0x6c>
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c4e:	4915      	ldr	r1, [pc, #84]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	618b      	str	r3, [r1, #24]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <FLASH_WaitForLastOperation+0x80>
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c66:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <FLASH_WaitForLastOperation+0xc0>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e011      	b.n	8004c9c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c78:	f7fd f9ec 	bl	8002054 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d801      	bhi.n	8004c8c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e007      	b.n	8004c9c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <FLASH_WaitForLastOperation+0xbc>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c98:	d0ee      	beq.n	8004c78 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58004000 	.word	0x58004000
 8004ca8:	200004a0 	.word	0x200004a0

08004cac <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <FLASH_Program_DoubleWord+0x48>)
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <FLASH_Program_DoubleWord+0x48>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004cca:	f3bf 8f6f 	isb	sy
}
 8004cce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	000a      	movs	r2, r1
 8004cde:	2300      	movs	r3, #0
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	3104      	adds	r1, #4
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	58004000 	.word	0x58004000

08004cf8 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <FLASH_Program_Fast+0x78>)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <FLASH_Program_Fast+0x78>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d24:	b672      	cpsid	i
}
 8004d26:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	3304      	adds	r3, #4
 8004d34:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	617b      	str	r3, [r7, #20]
    row_index--;
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004d42:	7ffb      	ldrb	r3, [r7, #31]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ef      	bne.n	8004d28 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004d48:	bf00      	nop
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <FLASH_Program_Fast+0x78>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d0f8      	beq.n	8004d4a <FLASH_Program_Fast+0x52>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004d64:	bf00      	nop
 8004d66:	3724      	adds	r7, #36	; 0x24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	58004000 	.word	0x58004000

08004d74 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_FLASHEx_Erase+0xac>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_FLASHEx_Erase+0x16>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e046      	b.n	8004e18 <HAL_FLASHEx_Erase+0xa4>
 8004d8a:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <HAL_FLASHEx_Erase+0xac>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <HAL_FLASHEx_Erase+0xac>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d9a:	f7ff ff25 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d133      	bne.n	8004e10 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d108      	bne.n	8004dc2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004db0:	f000 f880 	bl	8004eb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db8:	f7ff ff16 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e024      	b.n	8004e0c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	e012      	b.n	8004df8 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004dd2:	68b8      	ldr	r0, [r7, #8]
 8004dd4:	f000 f87e 	bl	8004ed4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ddc:	f7ff ff04 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	601a      	str	r2, [r3, #0]
          break;
 8004df0:	e00a      	b.n	8004e08 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4413      	add	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3e4      	bcc.n	8004dd2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004e08:	f000 f8c0 	bl	8004f8c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004e0c:	f000 f87a 	bl	8004f04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_FLASHEx_Erase+0xac>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]

  return status;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200004a0 	.word	0x200004a0

08004e24 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_FLASHEx_Erase_IT+0x14>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e034      	b.n	8004ea2 <HAL_FLASHEx_Erase_IT+0x7e>
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e4a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e50:	f7ff feca 	bl	8004be8 <FLASH_WaitForLastOperation>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e01c      	b.n	8004ea0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004e6c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004e70:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d105      	bne.n	8004e86 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004e80:	f000 f818 	bl	8004eb4 <FLASH_MassErase>
 8004e84:	e00c      	b.n	8004ea0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e8c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a06      	ldr	r2, [pc, #24]	; (8004eac <HAL_FLASHEx_Erase_IT+0x88>)
 8004e94:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f81a 	bl	8004ed4 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200004a0 	.word	0x200004a0
 8004eb0:	58004000 	.word	0x58004000

08004eb4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <FLASH_MassErase+0x1c>)
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <FLASH_MassErase+0x1c>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6153      	str	r3, [r2, #20]
#endif
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	58004000 	.word	0x58004000

08004ed4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <FLASH_PageErase+0x2c>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <FLASH_PageErase+0x2c>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	6153      	str	r3, [r2, #20]
#endif
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	58004000 	.word	0x58004000

08004f04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004f08:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d117      	bne.n	8004f44 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f42:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d117      	bne.n	8004f80 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a03      	ldr	r2, [pc, #12]	; (8004f88 <FLASH_FlushCaches+0x84>)
 8004f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	58004000 	.word	0x58004000

08004f8c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <FLASH_AcknowledgePageErase+0x1c>)
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <FLASH_AcknowledgePageErase+0x1c>)
 8004f96:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004f9a:	f023 0302 	bic.w	r3, r3, #2
 8004f9e:	6153      	str	r3, [r2, #20]
#endif
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	58004000 	.word	0x58004000

08004fac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fba:	e140      	b.n	800523e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8132 	beq.w	8005238 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d005      	beq.n	8004fec <HAL_GPIO_Init+0x40>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d130      	bne.n	800504e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005022:	2201      	movs	r2, #1
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 0201 	and.w	r2, r3, #1
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b03      	cmp	r3, #3
 8005058:	d017      	beq.n	800508a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d123      	bne.n	80050de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	08da      	lsrs	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3208      	adds	r2, #8
 800509e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	220f      	movs	r2, #15
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	08da      	lsrs	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3208      	adds	r2, #8
 80050d8:	6939      	ldr	r1, [r7, #16]
 80050da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	2203      	movs	r2, #3
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0203 	and.w	r2, r3, #3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 808c 	beq.w	8005238 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005120:	4a4e      	ldr	r2, [pc, #312]	; (800525c <HAL_GPIO_Init+0x2b0>)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	3302      	adds	r3, #2
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	2207      	movs	r2, #7
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800514a:	d00d      	beq.n	8005168 <HAL_GPIO_Init+0x1bc>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <HAL_GPIO_Init+0x2b4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <HAL_GPIO_Init+0x1b8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a43      	ldr	r2, [pc, #268]	; (8005264 <HAL_GPIO_Init+0x2b8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d101      	bne.n	8005160 <HAL_GPIO_Init+0x1b4>
 800515c:	2302      	movs	r3, #2
 800515e:	e004      	b.n	800516a <HAL_GPIO_Init+0x1be>
 8005160:	2307      	movs	r3, #7
 8005162:	e002      	b.n	800516a <HAL_GPIO_Init+0x1be>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_GPIO_Init+0x1be>
 8005168:	2300      	movs	r3, #0
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	f002 0203 	and.w	r2, r2, #3
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	4093      	lsls	r3, r2
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800517a:	4938      	ldr	r1, [pc, #224]	; (800525c <HAL_GPIO_Init+0x2b0>)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	3302      	adds	r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005188:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	43db      	mvns	r3, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051ac:	4a2e      	ldr	r2, [pc, #184]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051b2:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051d6:	4a24      	ldr	r2, [pc, #144]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80051dc:	4b22      	ldr	r3, [pc, #136]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 800520c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005210:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <HAL_GPIO_Init+0x2bc>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	f47f aeb7 	bne.w	8004fbc <HAL_GPIO_Init+0x10>
  }
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	48000400 	.word	0x48000400
 8005264:	48000800 	.word	0x48000800
 8005268:	58000800 	.word	0x58000800

0800526c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800527a:	e0af      	b.n	80053dc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800527c:	2201      	movs	r2, #1
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80a2 	beq.w	80053d6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005292:	4a59      	ldr	r2, [pc, #356]	; (80053f8 <HAL_GPIO_DeInit+0x18c>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	3302      	adds	r3, #2
 800529a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	2207      	movs	r2, #7
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052ba:	d00d      	beq.n	80052d8 <HAL_GPIO_DeInit+0x6c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a4f      	ldr	r2, [pc, #316]	; (80053fc <HAL_GPIO_DeInit+0x190>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <HAL_GPIO_DeInit+0x68>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a4e      	ldr	r2, [pc, #312]	; (8005400 <HAL_GPIO_DeInit+0x194>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_GPIO_DeInit+0x64>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e004      	b.n	80052da <HAL_GPIO_DeInit+0x6e>
 80052d0:	2307      	movs	r3, #7
 80052d2:	e002      	b.n	80052da <HAL_GPIO_DeInit+0x6e>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <HAL_GPIO_DeInit+0x6e>
 80052d8:	2300      	movs	r3, #0
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	f002 0203 	and.w	r2, r2, #3
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	4093      	lsls	r3, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d136      	bne.n	8005358 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80052ea:	4b46      	ldr	r3, [pc, #280]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 80052ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	4943      	ldr	r1, [pc, #268]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80052fc:	4b41      	ldr	r3, [pc, #260]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 80052fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	43db      	mvns	r3, r3
 8005306:	493f      	ldr	r1, [pc, #252]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 8005308:	4013      	ands	r3, r2
 800530a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800530e:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	43db      	mvns	r3, r3
 8005316:	493b      	ldr	r1, [pc, #236]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 8005318:	4013      	ands	r3, r2
 800531a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800531c:	4b39      	ldr	r3, [pc, #228]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	4937      	ldr	r1, [pc, #220]	; (8005404 <HAL_GPIO_DeInit+0x198>)
 8005326:	4013      	ands	r3, r2
 8005328:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	2207      	movs	r2, #7
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800533a:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <HAL_GPIO_DeInit+0x18c>)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	3302      	adds	r3, #2
 8005342:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43da      	mvns	r2, r3
 800534a:	482b      	ldr	r0, [pc, #172]	; (80053f8 <HAL_GPIO_DeInit+0x18c>)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	400a      	ands	r2, r1
 8005352:	3302      	adds	r3, #2
 8005354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	2103      	movs	r1, #3
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	08da      	lsrs	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3208      	adds	r2, #8
 8005374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	220f      	movs	r2, #15
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	08d2      	lsrs	r2, r2, #3
 800538c:	4019      	ands	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3208      	adds	r2, #8
 8005392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	2103      	movs	r1, #3
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	2101      	movs	r1, #1
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2103      	movs	r1, #3
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	401a      	ands	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	3301      	adds	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af49 	bne.w	800527c <HAL_GPIO_DeInit+0x10>
  }
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	48000400 	.word	0x48000400
 8005400:	48000800 	.word	0x48000800
 8005404:	58000800 	.word	0x58000800

08005408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	4613      	mov	r3, r2
 8005416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005418:	787b      	ldrb	r3, [r7, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005424:	e002      	b.n	800542c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005426:	887a      	ldrh	r2, [r7, #2]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e081      	b.n	800554c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fc f8c7 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	; 0x24
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005486:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005496:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	e006      	b.n	80054be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d104      	bne.n	80054d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69d9      	ldr	r1, [r3, #28]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	d138      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005574:	2302      	movs	r3, #2
 8005576:	e032      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d139      	bne.n	8005672 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005608:	2302      	movs	r3, #2
 800560a:	e033      	b.n	8005674 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800563a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr
	...

08005680 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a03      	ldr	r2, [pc, #12]	; (8005698 <HAL_PWR_EnableBkUpAccess+0x18>)
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6013      	str	r3, [r2, #0]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr
 8005698:	58000400 	.word	0x58000400

0800569c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	d10d      	bne.n	80056d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056bc:	f000 f83c 	bl	8005738 <HAL_PWREx_DisableLowPowerRunMode>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80056c6:	e015      	b.n	80056f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80056d4:	f000 f822 	bl	800571c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_PWR_EnterSLEEPMode+0x64>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <HAL_PWR_EnterSLEEPMode+0x64>)
 80056de:	f023 0304 	bic.w	r3, r3, #4
 80056e2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80056ea:	bf30      	wfi
 80056ec:	e002      	b.n	80056f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056ee:	bf40      	sev
    __WFE();
 80056f0:	bf20      	wfe
    __WFE();
 80056f2:	bf20      	wfe
  }
}
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58000400 	.word	0x58000400
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <HAL_PWREx_GetVoltageRange+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	58000400 	.word	0x58000400

0800571c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a03      	ldr	r2, [pc, #12]	; (8005734 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	58000400 	.word	0x58000400

08005738 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005748:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2232      	movs	r2, #50	; 0x32
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	4a12      	ldr	r2, [pc, #72]	; (80057a0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800575e:	e002      	b.n	8005766 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3b01      	subs	r3, #1
 8005764:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	d102      	bne.n	800577a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f2      	bne.n	8005760 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005786:	d101      	bne.n	800578c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e000      	b.n	800578e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	58000400 	.word	0x58000400
 800579c:	20000000 	.word	0x20000000
 80057a0:	431bde83 	.word	0x431bde83

080057a4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 0307 	bic.w	r3, r3, #7
 80057b6:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057b8:	f043 0302 	orr.w	r3, r3, #2
 80057bc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057c4:	f043 0304 	orr.w	r3, r3, #4
 80057c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057d0:	bf30      	wfi
 80057d2:	e002      	b.n	80057da <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057d4:	bf40      	sev
    __WFE();
 80057d6:	bf20      	wfe
    __WFE();
 80057d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	6113      	str	r3, [r2, #16]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	58000400 	.word	0x58000400
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005808:	d101      	bne.n	800580e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr
 8005818:	58000400 	.word	0x58000400

0800581c <LL_RCC_HSE_EnableTcxo>:
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800582a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <LL_RCC_HSE_DisableTcxo>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005866:	d101      	bne.n	800586c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <LL_RCC_HSE_Enable>:
{
 8005876:	b480      	push	{r7}
 8005878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800587a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005888:	6013      	str	r3, [r2, #0]
}
 800588a:	bf00      	nop
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <LL_RCC_HSE_Disable>:
{
 8005892:	b480      	push	{r7}
 8005894:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_HSE_IsReady>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c0:	d101      	bne.n	80058c6 <LL_RCC_HSE_IsReady+0x18>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_RCC_HSE_IsReady+0x1a>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <LL_RCC_HSI_Enable>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <LL_RCC_HSI_Disable>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <LL_RCC_HSI_IsReady>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d101      	bne.n	8005920 <LL_RCC_HSI_IsReady+0x18>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <LL_RCC_HSI_IsReady+0x1a>
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr

0800592a <LL_RCC_HSI_SetCalibTrimming>:
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <LL_RCC_LSE_IsReady>:
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b02      	cmp	r3, #2
 8005964:	d101      	bne.n	800596a <LL_RCC_LSE_IsReady+0x18>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <LL_RCC_LSE_IsReady+0x1a>
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <LL_RCC_LSI_Enable>:
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <LL_RCC_LSI_Disable>:
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_LSI_IsReady>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d101      	bne.n	80059cc <LL_RCC_LSI_IsReady+0x18>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <LL_RCC_LSI_IsReady+0x1a>
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <LL_RCC_MSI_Enable>:
{
 80059d6:	b480      	push	{r7}
 80059d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_MSI_Disable>:
{
 80059f2:	b480      	push	{r7}
 80059f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80059f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_MSI_IsReady>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d101      	bne.n	8005a24 <LL_RCC_MSI_IsReady+0x16>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <LL_RCC_MSI_IsReady+0x18>
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d101      	bne.n	8005a44 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <LL_RCC_MSI_GetRange>:
{
 8005a4e:	b480      	push	{r7}
 8005a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a96:	4313      	orrs	r3, r2
 8005a98:	604b      	str	r3, [r1, #4]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <LL_RCC_SetSysClkSource>:
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f023 0203 	bic.w	r2, r3, #3
 8005ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <LL_RCC_GetSysClkSource>:
{
 8005aca:	b480      	push	{r7}
 8005acc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <LL_RCC_SetAHBPrescaler>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	608b      	str	r3, [r1, #8]
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <LL_RCC_SetAHB3Prescaler>:
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_SetAPB1Prescaler>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <LL_RCC_SetAPB2Prescaler>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <LL_RCC_GetAHBPrescaler>:
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_GetAHB3Prescaler>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <LL_RCC_GetAPB1Prescaler>:
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <LL_RCC_GetAPB2Prescaler>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c08:	6013      	str	r3, [r2, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c24:	d101      	bne.n	8005c2a <LL_RCC_PLL_IsReady+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_RCC_PLL_IsReady+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005c62:	b480      	push	{r7}
 8005c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0303 	and.w	r3, r3, #3
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d101      	bne.n	8005ca6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d101      	bne.n	8005cca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce6:	d101      	bne.n	8005cec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d08:	d101      	bne.n	8005d0e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e38b      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2a:	f7ff fece 	bl	8005aca <LL_RCC_GetSysClkSource>
 8005d2e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d30:	f7ff ffa2 	bl	8005c78 <LL_RCC_PLL_GetMainSource>
 8005d34:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80c9 	beq.w	8005ed6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_RCC_OscConfig+0x3e>
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d17b      	bne.n	8005e48 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d178      	bne.n	8005e48 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d56:	f7ff fe5a 	bl	8005a0e <LL_RCC_MSI_IsReady>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_RCC_OscConfig+0x54>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e36a      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_RCC_OscConfig+0x72>
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d88:	e006      	b.n	8005d98 <HAL_RCC_OscConfig+0x80>
 8005d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d222      	bcs.n	8005de2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fd51 	bl	8006848 <RCC_SetFlashLatencyFromMSIRange>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e348      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	f043 0308 	orr.w	r3, r3, #8
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fe4e 	bl	8005a7c <LL_RCC_MSI_SetCalibTrimming>
 8005de0:	e021      	b.n	8005e26 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dec:	f043 0308 	orr.w	r3, r3, #8
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fe35 	bl	8005a7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fd16 	bl	8006848 <RCC_SetFlashLatencyFromMSIRange>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e30d      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e26:	f000 fcd7 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4aa1      	ldr	r2, [pc, #644]	; (80060b4 <HAL_RCC_OscConfig+0x39c>)
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e30:	4ba1      	ldr	r3, [pc, #644]	; (80060b8 <HAL_RCC_OscConfig+0x3a0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fd f82b 	bl	8002e90 <HAL_InitTick>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d047      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	e2fc      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d02c      	beq.n	8005eaa <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e50:	f7ff fdc1 	bl	80059d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e54:	f7fc f8fe 	bl	8002054 <HAL_GetTick>
 8005e58:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e5c:	f7fc f8fa 	bl	8002054 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e2e9      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e6e:	f7ff fdce 	bl	8005a0e <LL_RCC_MSI_IsReady>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f1      	beq.n	8005e5c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e82:	f043 0308 	orr.w	r3, r3, #8
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fdea 	bl	8005a7c <LL_RCC_MSI_SetCalibTrimming>
 8005ea8:	e015      	b.n	8005ed6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eaa:	f7ff fda2 	bl	80059f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eae:	f7fc f8d1 	bl	8002054 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005eb6:	f7fc f8cd 	bl	8002054 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e2bc      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ec8:	f7ff fda1 	bl	8005a0e <LL_RCC_MSI_IsReady>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f1      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x19e>
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ed4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d05f      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x1dc>
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2b0c      	cmp	r3, #12
 8005eec:	d10d      	bne.n	8005f0a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d10a      	bne.n	8005f0a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef4:	f7ff fcdb 	bl	80058ae <LL_RCC_HSE_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d050      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x288>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d14c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e29b      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d102      	bne.n	8005f30 <HAL_RCC_OscConfig+0x218>
 8005f2a:	f7ff fca4 	bl	8005876 <LL_RCC_HSE_Enable>
 8005f2e:	e00d      	b.n	8005f4c <HAL_RCC_OscConfig+0x234>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005f38:	d104      	bne.n	8005f44 <HAL_RCC_OscConfig+0x22c>
 8005f3a:	f7ff fc6f 	bl	800581c <LL_RCC_HSE_EnableTcxo>
 8005f3e:	f7ff fc9a 	bl	8005876 <LL_RCC_HSE_Enable>
 8005f42:	e003      	b.n	8005f4c <HAL_RCC_OscConfig+0x234>
 8005f44:	f7ff fca5 	bl	8005892 <LL_RCC_HSE_Disable>
 8005f48:	f7ff fc76 	bl	8005838 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fc f87e 	bl	8002054 <HAL_GetTick>
 8005f58:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fc f87a 	bl	8002054 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e269      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f6e:	f7ff fc9e 	bl	80058ae <LL_RCC_HSE_IsReady>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f1      	beq.n	8005f5c <HAL_RCC_OscConfig+0x244>
 8005f78:	e013      	b.n	8005fa2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fc f86b 	bl	8002054 <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f82:	f7fc f867 	bl	8002054 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b64      	cmp	r3, #100	; 0x64
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e256      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f94:	f7ff fc8b 	bl	80058ae <LL_RCC_HSE_IsReady>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f1      	bne.n	8005f82 <HAL_RCC_OscConfig+0x26a>
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d04b      	beq.n	8006046 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x2a8>
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d113      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d110      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fc0:	f7ff fca2 	bl	8005908 <LL_RCC_HSI_IsReady>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x2be>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e235      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fca5 	bl	800592a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe0:	e031      	b.n	8006046 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d019      	beq.n	800601e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fea:	f7ff fc71 	bl	80058d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fee:	f7fc f831 	bl	8002054 <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff6:	f7fc f82d 	bl	8002054 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e21c      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006008:	f7ff fc7e 	bl	8005908 <LL_RCC_HSI_IsReady>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f1      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fc87 	bl	800592a <LL_RCC_HSI_SetCalibTrimming>
 800601c:	e013      	b.n	8006046 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800601e:	f7ff fc65 	bl	80058ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fc f817 	bl	8002054 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602a:	f7fc f813 	bl	8002054 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e202      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800603c:	f7ff fc64 	bl	8005908 <LL_RCC_HSI_IsReady>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f1      	bne.n	800602a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d06f      	beq.n	8006132 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d057      	beq.n	800610a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	429a      	cmp	r2, r3
 8006070:	d036      	beq.n	80060e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e1db      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d018      	beq.n	80060c6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006094:	f7ff fc7e 	bl	8005994 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006098:	f7fb ffdc 	bl	8002054 <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800609e:	e00d      	b.n	80060bc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a0:	f7fb ffd8 	bl	8002054 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b11      	cmp	r3, #17
 80060ac:	d906      	bls.n	80060bc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e1c7      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
 80060b2:	bf00      	nop
 80060b4:	20000000 	.word	0x20000000
 80060b8:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80060bc:	f7ff fc7a 	bl	80059b4 <LL_RCC_LSI_IsReady>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ec      	bne.n	80060a0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80060c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ce:	f023 0210 	bic.w	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e0:	f7ff fc48 	bl	8005974 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fb ffb6 	bl	8002054 <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ec:	f7fb ffb2 	bl	8002054 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b11      	cmp	r3, #17
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e1a1      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80060fe:	f7ff fc59 	bl	80059b4 <LL_RCC_LSI_IsReady>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f1      	beq.n	80060ec <HAL_RCC_OscConfig+0x3d4>
 8006108:	e013      	b.n	8006132 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800610a:	f7ff fc43 	bl	8005994 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fb ffa1 	bl	8002054 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006116:	f7fb ff9d 	bl	8002054 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b11      	cmp	r3, #17
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e18c      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006128:	f7ff fc44 	bl	80059b4 <LL_RCC_LSI_IsReady>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f1      	bne.n	8006116 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80d8 	beq.w	80062f0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006140:	f7ff fb5a 	bl	80057f8 <LL_PWR_IsEnabledBkUpAccess>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d113      	bne.n	8006172 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800614a:	f7ff fa99 	bl	8005680 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614e:	f7fb ff81 	bl	8002054 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fb ff7d 	bl	8002054 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e16c      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006168:	f7ff fb46 	bl	80057f8 <LL_PWR_IsEnabledBkUpAccess>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f1      	beq.n	8006156 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d07b      	beq.n	8006272 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b85      	cmp	r3, #133	; 0x85
 8006180:	d003      	beq.n	800618a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b05      	cmp	r3, #5
 8006188:	d109      	bne.n	800619e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800618a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006196:	f043 0304 	orr.w	r3, r3, #4
 800619a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fb ff59 	bl	8002054 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ba:	f7fb ff4b 	bl	8002054 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e138      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80061d0:	f7ff fbbf 	bl	8005952 <LL_RCC_LSE_IsReady>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	2b81      	cmp	r3, #129	; 0x81
 80061e0:	d003      	beq.n	80061ea <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b85      	cmp	r3, #133	; 0x85
 80061e8:	d121      	bne.n	800622e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ea:	f7fb ff33 	bl	8002054 <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7fb ff25 	bl	8002054 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e112      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ec      	beq.n	8006206 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800622c:	e060      	b.n	80062f0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb ff11 	bl	8002054 <HAL_GetTick>
 8006232:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fb ff03 	bl	8002054 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e0f0      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ec      	bne.n	800624a <HAL_RCC_OscConfig+0x532>
 8006270:	e03e      	b.n	80062f0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fb feef 	bl	8002054 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800628c:	e00a      	b.n	80062a4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fb fee1 	bl	8002054 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e0ce      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1ec      	bne.n	800628e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fb fece 	bl	8002054 <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fb fec0 	bl	8002054 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0ad      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062e6:	f7ff fb34 	bl	8005952 <LL_RCC_LSE_IsReady>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ef      	bne.n	80062d0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a3 	beq.w	8006440 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	d076      	beq.n	80063ee <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	2b02      	cmp	r3, #2
 8006306:	d14b      	bne.n	80063a0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006308:	f7ff fc75 	bl	8005bf6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fb fea2 	bl	8002054 <HAL_GetTick>
 8006310:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006314:	f7fb fe9e 	bl	8002054 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b0a      	cmp	r3, #10
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e08d      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006326:	f7ff fc74 	bl	8005c12 <LL_RCC_PLL_IsReady>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f1      	bne.n	8006314 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	4b45      	ldr	r3, [pc, #276]	; (800644c <HAL_RCC_OscConfig+0x734>)
 8006338:	4013      	ands	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006342:	4311      	orrs	r1, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006348:	0212      	lsls	r2, r2, #8
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006350:	4311      	orrs	r1, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006356:	4311      	orrs	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800635c:	430a      	orrs	r2, r1
 800635e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006362:	4313      	orrs	r3, r2
 8006364:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006366:	f7ff fc38 	bl	8005bda <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006378:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fb fe6b 	bl	8002054 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006382:	f7fb fe67 	bl	8002054 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b0a      	cmp	r3, #10
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e056      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006394:	f7ff fc3d 	bl	8005c12 <LL_RCC_PLL_IsReady>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f1      	beq.n	8006382 <HAL_RCC_OscConfig+0x66a>
 800639e:	e04f      	b.n	8006440 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a0:	f7ff fc29 	bl	8005bf6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80063b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063be:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c8:	f7fb fe44 	bl	8002054 <HAL_GetTick>
 80063cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fb fe40 	bl	8002054 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b0a      	cmp	r3, #10
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e02f      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80063e2:	f7ff fc16 	bl	8005c12 <LL_RCC_PLL_IsReady>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f1      	bne.n	80063d0 <HAL_RCC_OscConfig+0x6b8>
 80063ec:	e028      	b.n	8006440 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e023      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f003 0203 	and.w	r2, r3, #3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	429a      	cmp	r2, r3
 800640e:	d115      	bne.n	800643c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	429a      	cmp	r2, r3
 800641c:	d10e      	bne.n	800643c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	429a      	cmp	r2, r3
 800642c:	d106      	bne.n	800643c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	11c1808c 	.word	0x11c1808c

08006450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e10f      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006464:	4b89      	ldr	r3, [pc, #548]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d91b      	bls.n	80064aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006472:	4b86      	ldr	r3, [pc, #536]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 0207 	bic.w	r2, r3, #7
 800647a:	4984      	ldr	r1, [pc, #528]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4313      	orrs	r3, r2
 8006480:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006482:	f7fb fde7 	bl	8002054 <HAL_GetTick>
 8006486:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006488:	e008      	b.n	800649c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800648a:	f7fb fde3 	bl	8002054 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e0f3      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649c:	4b7b      	ldr	r3, [pc, #492]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d1ef      	bne.n	800648a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fb10 	bl	8005ae0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064c0:	f7fb fdc8 	bl	8002054 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064c8:	f7fb fdc4 	bl	8002054 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0d4      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80064da:	f7ff fbd8 	bl	8005c8e <LL_RCC_IsActiveFlag_HPRE>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f1      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fb06 	bl	8005b06 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064fa:	f7fb fdab 	bl	8002054 <HAL_GetTick>
 80064fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006502:	f7fb fda7 	bl	8002054 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0b7      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006514:	f7ff fbcc 	bl	8005cb0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f1      	beq.n	8006502 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff faff 	bl	8005b32 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006534:	f7fb fd8e 	bl	8002054 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800653c:	f7fb fd8a 	bl	8002054 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e09a      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800654e:	f7ff fbc1 	bl	8005cd4 <LL_RCC_IsActiveFlag_PPRE1>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f1      	beq.n	800653c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff faf4 	bl	8005b58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006570:	f7fb fd70 	bl	8002054 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006578:	f7fb fd6c 	bl	8002054 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e07c      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800658a:	f7ff fbb4 	bl	8005cf6 <LL_RCC_IsActiveFlag_PPRE2>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f1      	beq.n	8006578 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d043      	beq.n	8006628 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d106      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80065a8:	f7ff f981 	bl	80058ae <LL_RCC_HSE_IsReady>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d11e      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e066      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d106      	bne.n	80065cc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80065be:	f7ff fb28 	bl	8005c12 <LL_RCC_PLL_IsReady>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d113      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e05b      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80065d4:	f7ff fa1b 	bl	8005a0e <LL_RCC_MSI_IsReady>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d108      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e050      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80065e2:	f7ff f991 	bl	8005908 <LL_RCC_HSI_IsReady>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e049      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fa55 	bl	8005aa4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065fa:	f7fb fd2b 	bl	8002054 <HAL_GetTick>
 80065fe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006600:	e00a      	b.n	8006618 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006602:	f7fb fd27 	bl	8002054 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e035      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006618:	f7ff fa57 	bl	8005aca <LL_RCC_GetSysClkSource>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	429a      	cmp	r2, r3
 8006626:	d1ec      	bne.n	8006602 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d21b      	bcs.n	800666e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 0207 	bic.w	r2, r3, #7
 800663e:	4913      	ldr	r1, [pc, #76]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006646:	f7fb fd05 	bl	8002054 <HAL_GetTick>
 800664a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664c:	e008      	b.n	8006660 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800664e:	f7fb fd01 	bl	8002054 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e011      	b.n	8006684 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <HAL_RCC_ClockConfig+0x23c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d1ef      	bne.n	800664e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800666e:	f000 f8b3 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8006672:	4603      	mov	r3, r0
 8006674:	4a06      	ldr	r2, [pc, #24]	; (8006690 <HAL_RCC_ClockConfig+0x240>)
 8006676:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_ClockConfig+0x244>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f7fc fc07 	bl	8002e90 <HAL_InitTick>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	58004000 	.word	0x58004000
 8006690:	20000000 	.word	0x20000000
 8006694:	20000004 	.word	0x20000004

08006698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a6:	f7ff fa10 	bl	8005aca <LL_RCC_GetSysClkSource>
 80066aa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ac:	f7ff fae4 	bl	8005c78 <LL_RCC_PLL_GetMainSource>
 80066b0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	d139      	bne.n	8006732 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d136      	bne.n	8006732 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066c4:	f7ff f9b3 	bl	8005a2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d115      	bne.n	80066fa <HAL_RCC_GetSysClockFreq+0x62>
 80066ce:	f7ff f9ae 	bl	8005a2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d106      	bne.n	80066e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80066d8:	f7ff f9b9 	bl	8005a4e <LL_RCC_MSI_GetRange>
 80066dc:	4603      	mov	r3, r0
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	e005      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x5a>
 80066e6:	f7ff f9bd 	bl	8005a64 <LL_RCC_MSI_GetRangeAfterStandby>
 80066ea:	4603      	mov	r3, r0
 80066ec:	0a1b      	lsrs	r3, r3, #8
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	4a36      	ldr	r2, [pc, #216]	; (80067cc <HAL_RCC_GetSysClockFreq+0x134>)
 80066f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f8:	e014      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x8c>
 80066fa:	f7ff f998 	bl	8005a2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d106      	bne.n	8006712 <HAL_RCC_GetSysClockFreq+0x7a>
 8006704:	f7ff f9a3 	bl	8005a4e <LL_RCC_MSI_GetRange>
 8006708:	4603      	mov	r3, r0
 800670a:	091b      	lsrs	r3, r3, #4
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	e005      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x86>
 8006712:	f7ff f9a7 	bl	8005a64 <LL_RCC_MSI_GetRangeAfterStandby>
 8006716:	4603      	mov	r3, r0
 8006718:	091b      	lsrs	r3, r3, #4
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	4a2b      	ldr	r2, [pc, #172]	; (80067cc <HAL_RCC_GetSysClockFreq+0x134>)
 8006720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006724:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d115      	bne.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006730:	e012      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d102      	bne.n	800673e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006738:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x138>)
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e00c      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d109      	bne.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006744:	f7ff f886 	bl	8005854 <LL_RCC_HSE_IsEnabledDiv2>
 8006748:	4603      	mov	r3, r0
 800674a:	2b01      	cmp	r3, #1
 800674c:	d102      	bne.n	8006754 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800674e:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e001      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006754:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006756:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006758:	f7ff f9b7 	bl	8005aca <LL_RCC_GetSysClkSource>
 800675c:	4603      	mov	r3, r0
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d12f      	bne.n	80067c2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006762:	f7ff fa89 	bl	8005c78 <LL_RCC_PLL_GetMainSource>
 8006766:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d003      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0xde>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d003      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0xe4>
 8006774:	e00d      	b.n	8006792 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006778:	60fb      	str	r3, [r7, #12]
        break;
 800677a:	e00d      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800677c:	f7ff f86a 	bl	8005854 <LL_RCC_HSE_IsEnabledDiv2>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006788:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800678a:	e005      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800678e:	60fb      	str	r3, [r7, #12]
        break;
 8006790:	e002      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	60fb      	str	r3, [r7, #12]
        break;
 8006796:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006798:	f7ff fa4c 	bl	8005c34 <LL_RCC_PLL_GetN>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	fb03 f402 	mul.w	r4, r3, r2
 80067a4:	f7ff fa5d 	bl	8005c62 <LL_RCC_PLL_GetDivider>
 80067a8:	4603      	mov	r3, r0
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	3301      	adds	r3, #1
 80067ae:	fbb4 f4f3 	udiv	r4, r4, r3
 80067b2:	f7ff fa4b 	bl	8005c4c <LL_RCC_PLL_GetR>
 80067b6:	4603      	mov	r3, r0
 80067b8:	0f5b      	lsrs	r3, r3, #29
 80067ba:	3301      	adds	r3, #1
 80067bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80067c0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067c2:	697b      	ldr	r3, [r7, #20]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd90      	pop	{r4, r7, pc}
 80067cc:	0801d7f0 	.word	0x0801d7f0
 80067d0:	00f42400 	.word	0x00f42400
 80067d4:	01e84800 	.word	0x01e84800

080067d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067d8:	b598      	push	{r3, r4, r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067dc:	f7ff ff5c 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 80067e0:	4604      	mov	r4, r0
 80067e2:	f7ff f9cc 	bl	8005b7e <LL_RCC_GetAHBPrescaler>
 80067e6:	4603      	mov	r3, r0
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	4a03      	ldr	r2, [pc, #12]	; (80067fc <HAL_RCC_GetHCLKFreq+0x24>)
 80067f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	bd98      	pop	{r3, r4, r7, pc}
 80067fc:	0801d790 	.word	0x0801d790

08006800 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006800:	b598      	push	{r3, r4, r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006804:	f7ff ffe8 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8006808:	4604      	mov	r4, r0
 800680a:	f7ff f9d0 	bl	8005bae <LL_RCC_GetAPB1Prescaler>
 800680e:	4603      	mov	r3, r0
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	4a03      	ldr	r2, [pc, #12]	; (8006820 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006818:	fa24 f303 	lsr.w	r3, r4, r3
}
 800681c:	4618      	mov	r0, r3
 800681e:	bd98      	pop	{r3, r4, r7, pc}
 8006820:	0801d7d0 	.word	0x0801d7d0

08006824 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006824:	b598      	push	{r3, r4, r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006828:	f7ff ffd6 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 800682c:	4604      	mov	r4, r0
 800682e:	f7ff f9c9 	bl	8005bc4 <LL_RCC_GetAPB2Prescaler>
 8006832:	4603      	mov	r3, r0
 8006834:	0adb      	lsrs	r3, r3, #11
 8006836:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd98      	pop	{r3, r4, r7, pc}
 8006844:	0801d7d0 	.word	0x0801d7d0

08006848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	4a10      	ldr	r2, [pc, #64]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006860:	f7ff f998 	bl	8005b94 <LL_RCC_GetAHB3Prescaler>
 8006864:	4603      	mov	r3, r0
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800686e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	0c9c      	lsrs	r4, r3, #18
 8006884:	f7fe ff3e 	bl	8005704 <HAL_PWREx_GetVoltageRange>
 8006888:	4603      	mov	r3, r0
 800688a:	4619      	mov	r1, r3
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f80b 	bl	80068a8 <RCC_SetFlashLatency>
 8006892:	4603      	mov	r3, r0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	0801d7f0 	.word	0x0801d7f0
 80068a0:	0801d790 	.word	0x0801d790
 80068a4:	431bde83 	.word	0x431bde83

080068a8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	; 0x38
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80068b2:	4a3a      	ldr	r2, [pc, #232]	; (800699c <RCC_SetFlashLatency+0xf4>)
 80068b4:	f107 0320 	add.w	r3, r7, #32
 80068b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068bc:	6018      	str	r0, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80068c2:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <RCC_SetFlashLatency+0xf8>)
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068cc:	6018      	str	r0, [r3, #0]
 80068ce:	3304      	adds	r3, #4
 80068d0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80068d2:	4a34      	ldr	r2, [pc, #208]	; (80069a4 <RCC_SetFlashLatency+0xfc>)
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80068da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e8:	d11b      	bne.n	8006922 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30
 80068ee:	e014      	b.n	800691a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	3338      	adds	r3, #56	; 0x38
 80068f6:	443b      	add	r3, r7
 80068f8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80068fc:	461a      	mov	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4293      	cmp	r3, r2
 8006902:	d807      	bhi.n	8006914 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	3338      	adds	r3, #56	; 0x38
 800690a:	443b      	add	r3, r7
 800690c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006912:	e021      	b.n	8006958 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	3301      	adds	r3, #1
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2b02      	cmp	r3, #2
 800691e:	d9e7      	bls.n	80068f0 <RCC_SetFlashLatency+0x48>
 8006920:	e01a      	b.n	8006958 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006922:	2300      	movs	r3, #0
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006926:	e014      	b.n	8006952 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	3338      	adds	r3, #56	; 0x38
 800692e:	443b      	add	r3, r7
 8006930:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4293      	cmp	r3, r2
 800693a:	d807      	bhi.n	800694c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	3338      	adds	r3, #56	; 0x38
 8006942:	443b      	add	r3, r7
 8006944:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800694a:	e005      	b.n	8006958 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	3301      	adds	r3, #1
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2b02      	cmp	r3, #2
 8006956:	d9e7      	bls.n	8006928 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006958:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <RCC_SetFlashLatency+0x100>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f023 0207 	bic.w	r2, r3, #7
 8006960:	4911      	ldr	r1, [pc, #68]	; (80069a8 <RCC_SetFlashLatency+0x100>)
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	4313      	orrs	r3, r2
 8006966:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006968:	f7fb fb74 	bl	8002054 <HAL_GetTick>
 800696c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800696e:	e008      	b.n	8006982 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006970:	f7fb fb70 	bl	8002054 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e007      	b.n	8006992 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <RCC_SetFlashLatency+0x100>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698c:	429a      	cmp	r2, r3
 800698e:	d1ef      	bne.n	8006970 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3738      	adds	r7, #56	; 0x38
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	0801d018 	.word	0x0801d018
 80069a0:	0801d020 	.word	0x0801d020
 80069a4:	0801d028 	.word	0x0801d028
 80069a8:	58004000 	.word	0x58004000

080069ac <LL_RCC_LSE_IsReady>:
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d101      	bne.n	80069c4 <LL_RCC_LSE_IsReady+0x18>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <LL_RCC_LSE_IsReady+0x1a>
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <LL_RCC_SetUSARTClockSource>:
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	43db      	mvns	r3, r3
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <LL_RCC_SetI2SClockSource>:
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <LL_RCC_SetLPUARTClockSource>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <LL_RCC_SetI2CClockSource>:
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <LL_RCC_SetLPTIMClockSource>:
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <LL_RCC_SetRNGClockSource>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_SetADCClockSource>:
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <LL_RCC_SetRTCClockSource>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_GetRTCClockSource>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr

08006b52 <LL_RCC_ForceBackupDomainReset>:
{
 8006b52:	b480      	push	{r7}
 8006b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b8a:	bf00      	nop
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
	...

08006b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d058      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006bb4:	f7fe fd64 	bl	8005680 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bb8:	f7fb fa4c 	bl	8002054 <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006bbe:	e009      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc0:	f7fb fa48 	bl	8002054 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d902      	bls.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8006bd2:	e006      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006bd4:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be0:	d1ee      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006be2:	7cfb      	ldrb	r3, [r7, #19]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d13c      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006be8:	f7ff ffa7 	bl	8006b3a <LL_RCC_GetRTCClockSource>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d00f      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c04:	f7ff ffa5 	bl	8006b52 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c08:	f7ff ffb3 	bl	8006b72 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d014      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fb fa18 	bl	8002054 <HAL_GetTick>
 8006c24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c26:	e00b      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c28:	f7fb fa14 	bl	8002054 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d902      	bls.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	74fb      	strb	r3, [r7, #19]
            break;
 8006c3e:	e004      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c40:	f7ff feb4 	bl	80069ac <LL_RCC_LSE_IsReady>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d1ee      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006c4a:	7cfb      	ldrb	r3, [r7, #19]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff ff5b 	bl	8006b10 <LL_RCC_SetRTCClockSource>
 8006c5a:	e004      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c5c:	7cfb      	ldrb	r3, [r7, #19]
 8006c5e:	74bb      	strb	r3, [r7, #18]
 8006c60:	e001      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fea9 	bl	80069ce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fe9e 	bl	80069ce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fec0 	bl	8006a28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fee6 	bl	8006a8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fedb 	bl	8006a8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fed0 	bl	8006a8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fea9 	bl	8006a52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d004      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fe9e 	bl	8006a52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fe93 	bl	8006a52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d011      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fe5e 	bl	80069fe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d010      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fea5 	bl	8006abc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d88:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d011      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fea3 	bl	8006ae6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	58000400 	.word	0x58000400

08006dc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d068      	beq.n	8006eac <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fa fd6e 	bl	80018d0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dfc:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006dfe:	22ca      	movs	r2, #202	; 0xca
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24
 8006e02:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e04:	2253      	movs	r2, #83	; 0x53
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa0f 	bl	800722c <RTC_EnterInitMode>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d13f      	bne.n	8006e98 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e18:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e1e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e26:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e28:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4319      	orrs	r1, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	491e      	ldr	r1, [pc, #120]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	491a      	ldr	r1, [pc, #104]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e52:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	430b      	orrs	r3, r1
 8006e64:	4914      	ldr	r1, [pc, #80]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa12 	bl	8007294 <RTC_ExitInitMode>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10e      	bne.n	8006e98 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a19      	ldr	r1, [r3, #32]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	4319      	orrs	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	430b      	orrs	r3, r1
 8006e92:	4909      	ldr	r1, [pc, #36]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_RTC_Init+0xf0>)
 8006e9a:	22ff      	movs	r2, #255	; 0xff
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40002800 	.word	0x40002800

08006ebc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_RTC_SetAlarm_IT+0x1e>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e0f3      	b.n	80070c2 <HAL_RTC_SetAlarm_IT+0x206>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006eea:	4b78      	ldr	r3, [pc, #480]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d06a      	beq.n	8006fd2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d13a      	bne.n	8006f78 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f02:	4b72      	ldr	r3, [pc, #456]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2200      	movs	r2, #0
 8006f12:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f9f5 	bl	8007310 <RTC_ByteToBcd2>
 8006f26:	4603      	mov	r3, r0
 8006f28:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f9ee 	bl	8007310 <RTC_ByteToBcd2>
 8006f34:	4603      	mov	r3, r0
 8006f36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f38:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	789b      	ldrb	r3, [r3, #2]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f9e6 	bl	8007310 <RTC_ByteToBcd2>
 8006f44:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f46:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	78db      	ldrb	r3, [r3, #3]
 8006f4e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f50:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f9d8 	bl	8007310 <RTC_ByteToBcd2>
 8006f60:	4603      	mov	r3, r0
 8006f62:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f64:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f6c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e02c      	b.n	8006fd2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006f80:	d00d      	beq.n	8006f9e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f8a:	d008      	beq.n	8006f9e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f8c:	4b4f      	ldr	r3, [pc, #316]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006faa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fb0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	78db      	ldrb	r3, [r3, #3]
 8006fb6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fb8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fc0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fc2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fc8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fd2:	4b3e      	ldr	r3, [pc, #248]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd4:	22ca      	movs	r2, #202	; 0xca
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8006fd8:	4b3c      	ldr	r3, [pc, #240]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006fda:	2253      	movs	r2, #83	; 0x53
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe6:	d12c      	bne.n	8007042 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006fe8:	4b38      	ldr	r3, [pc, #224]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	4a37      	ldr	r2, [pc, #220]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ff2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ff4:	4b35      	ldr	r3, [pc, #212]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d107      	bne.n	8007012 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	4930      	ldr	r1, [pc, #192]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 800700c:	4313      	orrs	r3, r2
 800700e:	644b      	str	r3, [r1, #68]	; 0x44
 8007010:	e006      	b.n	8007020 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007018:	4a2c      	ldr	r2, [pc, #176]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007020:	4a2a      	ldr	r2, [pc, #168]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	f043 0201 	orr.w	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007034:	4b25      	ldr	r3, [pc, #148]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	4a24      	ldr	r2, [pc, #144]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 800703a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800703e:	6193      	str	r3, [r2, #24]
 8007040:	e02b      	b.n	800709a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007042:	4b22      	ldr	r3, [pc, #136]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	4a21      	ldr	r2, [pc, #132]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007048:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800704c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800704e:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007050:	2202      	movs	r2, #2
 8007052:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	d107      	bne.n	800706c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4919      	ldr	r1, [pc, #100]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007066:	4313      	orrs	r3, r2
 8007068:	64cb      	str	r3, [r1, #76]	; 0x4c
 800706a:	e006      	b.n	800707a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007072:	4a16      	ldr	r2, [pc, #88]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800707a:	4a14      	ldr	r2, [pc, #80]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007094:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007098:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80070a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070aa:	4b08      	ldr	r3, [pc, #32]	; (80070cc <HAL_RTC_SetAlarm_IT+0x210>)
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd90      	pop	{r4, r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40002800 	.word	0x40002800
 80070d0:	58000800 	.word	0x58000800

080070d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_RTC_DeactivateAlarm+0x18>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e048      	b.n	800717e <HAL_RTC_DeactivateAlarm+0xaa>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070fe:	22ca      	movs	r2, #202	; 0xca
 8007100:	625a      	str	r2, [r3, #36]	; 0x24
 8007102:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007104:	2253      	movs	r2, #83	; 0x53
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710e:	d115      	bne.n	800713c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007110:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007116:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800711a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	4a19      	ldr	r2, [pc, #100]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007126:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	f023 0201 	bic.w	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007134:	4b14      	ldr	r3, [pc, #80]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007136:	2201      	movs	r2, #1
 8007138:	65da      	str	r2, [r3, #92]	; 0x5c
 800713a:	e014      	b.n	8007166 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800713c:	4b12      	ldr	r3, [pc, #72]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	4a11      	ldr	r2, [pc, #68]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007142:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007146:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714c:	4a0e      	ldr	r2, [pc, #56]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800714e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007152:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	f023 0202 	bic.w	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007162:	2202      	movs	r2, #2
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007166:	4b08      	ldr	r3, [pc, #32]	; (8007188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007168:	22ff      	movs	r2, #255	; 0xff
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	40002800 	.word	0x40002800

0800718c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <HAL_RTC_AlarmIRQHandler+0x50>)
 8007196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071aa:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fb f930 	bl	8002416 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071c0:	4b06      	ldr	r3, [pc, #24]	; (80071dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80071c2:	2202      	movs	r2, #2
 80071c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f94a 	bl	8007460 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40002800 	.word	0x40002800

080071e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <HAL_RTC_WaitForSynchro+0x48>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <HAL_RTC_WaitForSynchro+0x48>)
 80071ee:	f023 0320 	bic.w	r3, r3, #32
 80071f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80071f4:	f7fa ff2e 	bl	8002054 <HAL_GetTick>
 80071f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80071fa:	e009      	b.n	8007210 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071fc:	f7fa ff2a 	bl	8002054 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800720a:	d901      	bls.n	8007210 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <HAL_RTC_WaitForSynchro+0x48>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ef      	beq.n	80071fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40002800 	.word	0x40002800

0800722c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <RTC_EnterInitMode+0x64>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d120      	bne.n	8007286 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <RTC_EnterInitMode+0x64>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	4a11      	ldr	r2, [pc, #68]	; (8007290 <RTC_EnterInitMode+0x64>)
 800724a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007250:	f7fa ff00 	bl	8002054 <HAL_GetTick>
 8007254:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007256:	e00d      	b.n	8007274 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007258:	f7fa fefc 	bl	8002054 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007266:	d905      	bls.n	8007274 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2203      	movs	r2, #3
 8007270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <RTC_EnterInitMode+0x64>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <RTC_EnterInitMode+0x5a>
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	2b03      	cmp	r3, #3
 8007284:	d1e8      	bne.n	8007258 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40002800 	.word	0x40002800

08007294 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072a0:	4b1a      	ldr	r3, [pc, #104]	; (800730c <RTC_ExitInitMode+0x78>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4a19      	ldr	r2, [pc, #100]	; (800730c <RTC_ExitInitMode+0x78>)
 80072a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072ac:	4b17      	ldr	r3, [pc, #92]	; (800730c <RTC_ExitInitMode+0x78>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10c      	bne.n	80072d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff91 	bl	80071e0 <HAL_RTC_WaitForSynchro>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01e      	beq.n	8007302 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e017      	b.n	8007302 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <RTC_ExitInitMode+0x78>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4a0d      	ldr	r2, [pc, #52]	; (800730c <RTC_ExitInitMode+0x78>)
 80072d8:	f023 0320 	bic.w	r3, r3, #32
 80072dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff ff7e 	bl	80071e0 <HAL_RTC_WaitForSynchro>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2203      	movs	r2, #3
 80072ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <RTC_ExitInitMode+0x78>)
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <RTC_ExitInitMode+0x78>)
 80072fc:	f043 0320 	orr.w	r3, r3, #32
 8007300:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40002800 	.word	0x40002800

08007310 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007322:	e005      	b.n	8007330 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	3b0a      	subs	r3, #10
 800732e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d8f6      	bhi.n	8007324 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	b2da      	uxtb	r2, r3
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	4313      	orrs	r3, r2
 8007342:	b2db      	uxtb	r3, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr
	...

08007350 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007362:	2302      	movs	r3, #2
 8007364:	e01f      	b.n	80073a6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007376:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007378:	22ca      	movs	r2, #202	; 0xca
 800737a:	625a      	str	r2, [r3, #36]	; 0x24
 800737c:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800737e:	2253      	movs	r2, #83	; 0x53
 8007380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007388:	f043 0320 	orr.w	r3, r3, #32
 800738c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738e:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr
 80073b0:	40002800 	.word	0x40002800

080073b4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_RTCEx_SetSSRU_IT+0x16>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e027      	b.n	800741a <HAL_RTCEx_SetSSRU_IT+0x66>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073dc:	22ca      	movs	r2, #202	; 0xca
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073e2:	2253      	movs	r2, #83	; 0x53
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80073e6:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80073f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073f8:	4a0b      	ldr	r2, [pc, #44]	; (8007428 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80073fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007402:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr
 8007424:	40002800 	.word	0x40002800
 8007428:	58000800 	.word	0x58000800

0800742c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007442:	2240      	movs	r2, #64	; 0x40
 8007444:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fa ffef 	bl	800242a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40002800 	.word	0x40002800

08007460 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
	...

08007474 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007482:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	4000b100 	.word	0x4000b100

080074a4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <HAL_RTCEx_BKUPRead+0x28>)
 80074b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	4000b100 	.word	0x4000b100

080074d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0c6      	b.n	8007670 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d108      	bne.n	80074fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f2:	d009      	beq.n	8007508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	61da      	str	r2, [r3, #28]
 80074fa:	e005      	b.n	8007508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7fa fa81 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007538:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007542:	d902      	bls.n	800754a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e002      	b.n	8007550 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800754a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007558:	d007      	beq.n	800756a <HAL_SPI_Init+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007562:	d002      	beq.n	800756a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	ea42 0103 	orr.w	r1, r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c8:	d11b      	bne.n	8007602 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075da:	d903      	bls.n	80075e4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
 80075e2:	e002      	b.n	80075ea <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d107      	bne.n	8007602 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007600:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	f003 0204 	and.w	r2, r3, #4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007628:	ea42 0103 	orr.w	r1, r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007642:	d105      	bne.n	8007650 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	b292      	uxth	r2, r2
 800764e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69da      	ldr	r2, [r3, #28]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800765e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_SPI_Transmit+0x22>
 8007696:	2302      	movs	r3, #2
 8007698:	e17a      	b.n	8007990 <HAL_SPI_Transmit+0x318>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a2:	f7fa fcd7 	bl	8002054 <HAL_GetTick>
 80076a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
 80076ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076bc:	e15f      	b.n	800797e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_SPI_Transmit+0x52>
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076ce:	e156      	b.n	800797e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2203      	movs	r2, #3
 80076d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771a:	d10f      	bne.n	800773c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800773a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d10f      	bne.n	8007766 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007764:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d007      	beq.n	8007784 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800778c:	d94b      	bls.n	8007826 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_SPI_Transmit+0x124>
 8007796:	8afb      	ldrh	r3, [r7, #22]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d13e      	bne.n	800781a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077c0:	e02b      	b.n	800781a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d112      	bne.n	80077f6 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	881a      	ldrh	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	1c9a      	adds	r2, r3, #2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077f4:	e011      	b.n	800781a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f6:	f7fa fc2d 	bl	8002054 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d803      	bhi.n	800780e <HAL_SPI_Transmit+0x196>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d102      	bne.n	8007814 <HAL_SPI_Transmit+0x19c>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007818:	e0b1      	b.n	800797e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ce      	bne.n	80077c2 <HAL_SPI_Transmit+0x14a>
 8007824:	e07c      	b.n	8007920 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_SPI_Transmit+0x1bc>
 800782e:	8afb      	ldrh	r3, [r7, #22]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d170      	bne.n	8007916 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d912      	bls.n	8007864 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b02      	subs	r3, #2
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007862:	e058      	b.n	8007916 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	7812      	ldrb	r2, [r2, #0]
 8007870:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800788a:	e044      	b.n	8007916 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b02      	cmp	r3, #2
 8007898:	d12b      	bne.n	80078f2 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d912      	bls.n	80078ca <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	881a      	ldrh	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	1c9a      	adds	r2, r3, #2
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b02      	subs	r3, #2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078c8:	e025      	b.n	8007916 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	7812      	ldrb	r2, [r2, #0]
 80078d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078f0:	e011      	b.n	8007916 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f2:	f7fa fbaf 	bl	8002054 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d803      	bhi.n	800790a <HAL_SPI_Transmit+0x292>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d102      	bne.n	8007910 <HAL_SPI_Transmit+0x298>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007914:	e033      	b.n	800797e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1b5      	bne.n	800788c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007928:	d107      	bne.n	800793a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007938:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fe6e 	bl	8008620 <SPI_EndRxTxTransaction>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007958:	2300      	movs	r3, #0
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e000      	b.n	800797e <HAL_SPI_Transmit+0x306>
  }

error:
 800797c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800798e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3720      	adds	r7, #32
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	4613      	mov	r3, r2
 80079a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079be:	d112      	bne.n	80079e6 <HAL_SPI_Receive+0x4e>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10e      	bne.n	80079e6 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2204      	movs	r2, #4
 80079cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f9c4 	bl	8007d6a <HAL_SPI_TransmitReceive>
 80079e2:	4603      	mov	r3, r0
 80079e4:	e1bd      	b.n	8007d62 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_SPI_Receive+0x5c>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e1b6      	b.n	8007d62 <HAL_SPI_Receive+0x3ca>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079fc:	f7fa fb2a 	bl	8002054 <HAL_GetTick>
 8007a00:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d003      	beq.n	8007a16 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8007a14:	e19b      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_SPI_Receive+0x8a>
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d103      	bne.n	8007a2a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8007a28:	e191      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a74:	d118      	bne.n	8007aa8 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a94:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ab0:	d908      	bls.n	8007ac4 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	e007      	b.n	8007ad4 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007adc:	d10f      	bne.n	8007afe <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d007      	beq.n	8007b1c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b24:	d869      	bhi.n	8007bfa <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b26:	e031      	b.n	8007b8c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d117      	bne.n	8007b66 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f103 020c 	add.w	r2, r3, #12
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b64:	e012      	b.n	8007b8c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b66:	f7fa fa75 	bl	8002054 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d803      	bhi.n	8007b7e <HAL_SPI_Receive+0x1e6>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d102      	bne.n	8007b84 <HAL_SPI_Receive+0x1ec>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007b8a:	e0e0      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1c7      	bne.n	8007b28 <HAL_SPI_Receive+0x190>
 8007b98:	e035      	b.n	8007c06 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d115      	bne.n	8007bd4 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007bd2:	e012      	b.n	8007bfa <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd4:	f7fa fa3e 	bl	8002054 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d803      	bhi.n	8007bec <HAL_SPI_Receive+0x254>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d102      	bne.n	8007bf2 <HAL_SPI_Receive+0x25a>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007bf8:	e0a9      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1c9      	bne.n	8007b9a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0e:	d178      	bne.n	8007d02 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	2101      	movs	r1, #1
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fb82 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8007c3c:	e087      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c46:	d907      	bls.n	8007c58 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	b292      	uxth	r2, r2
 8007c54:	801a      	strh	r2, [r3, #0]
 8007c56:	e008      	b.n	8007c6a <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f103 020c 	add.w	r2, r3, #12
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	2101      	movs	r1, #1
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fb5d 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c84:	f043 0202 	orr.w	r2, r3, #2
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8007c92:	e05c      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c9c:	d105      	bne.n	8007caa <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	e02b      	b.n	8007d02 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cba:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cc4:	d11d      	bne.n	8007d02 <HAL_SPI_Receive+0x36a>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d119      	bne.n	8007d02 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fb2b 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce8:	f043 0202 	orr.w	r2, r3, #2
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007cf6:	e02a      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fc32 	bl	8008570 <SPI_EndRxTransaction>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d10a      	bne.n	8007d3c <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2a:	f043 0202 	orr.w	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007d3a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d4a:	e000      	b.n	8007d4e <HAL_SPI_Receive+0x3b6>
  }

error :
 8007d4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b092      	sub	sp, #72	; 0x48
 8007d6e:	af02      	add	r7, sp, #8
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d80:	2301      	movs	r3, #1
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x2e>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e2c8      	b.n	800832a <HAL_SPI_TransmitReceive+0x5c0>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007da0:	f7fa f958 	bl	8002054 <HAL_GetTick>
 8007da4:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8007db6:	887b      	ldrh	r3, [r7, #2]
 8007db8:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d00f      	beq.n	8007df6 <HAL_SPI_TransmitReceive+0x8c>
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ddc:	d107      	bne.n	8007dee <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <HAL_SPI_TransmitReceive+0x84>
 8007de6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d003      	beq.n	8007df6 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8007dee:	2302      	movs	r3, #2
 8007df0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8007df4:	e28f      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x9e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x9e>
 8007e02:	887b      	ldrh	r3, [r7, #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8007e0e:	e282      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d003      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	887a      	ldrh	r2, [r7, #2]
 8007e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	887a      	ldrh	r2, [r7, #2]
 8007e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	887a      	ldrh	r2, [r7, #2]
 8007e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	887a      	ldrh	r2, [r7, #2]
 8007e50:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e66:	d10f      	bne.n	8007e88 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e86:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e90:	d802      	bhi.n	8007e98 <HAL_SPI_TransmitReceive+0x12e>
 8007e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d908      	bls.n	8007eaa <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ea6:	605a      	str	r2, [r3, #4]
 8007ea8:	e007      	b.n	8007eba <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d007      	beq.n	8007ed8 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ee0:	f240 80a4 	bls.w	800802c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <HAL_SPI_TransmitReceive+0x18a>
 8007eec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	f040 808e 	bne.w	8008010 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	881a      	ldrh	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	1c9a      	adds	r2, r3, #2
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f18:	e07a      	b.n	8008010 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d13f      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x23e>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d03a      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0x23e>
 8007f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d137      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	881a      	ldrh	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11e      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x23e>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f72:	d119      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10c      	bne.n	8007f98 <HAL_SPI_TransmitReceive+0x22e>
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f96:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fa6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d11c      	bne.n	8007ff0 <HAL_SPI_TransmitReceive+0x286>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d016      	beq.n	8007ff0 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd4:	1c9a      	adds	r2, r3, #2
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fec:	2301      	movs	r3, #1
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ff0:	f7fa f830 	bl	8002054 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d807      	bhi.n	8008010 <HAL_SPI_TransmitReceive+0x2a6>
 8008000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008006:	d003      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800800e:	e182      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	f47f af7f 	bne.w	8007f1a <HAL_SPI_TransmitReceive+0x1b0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	f47f af78 	bne.w	8007f1a <HAL_SPI_TransmitReceive+0x1b0>
 800802a:	e103      	b.n	8008234 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_SPI_TransmitReceive+0x2d2>
 8008034:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008036:	2b01      	cmp	r3, #1
 8008038:	f040 80ef 	bne.w	800821a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d912      	bls.n	800806c <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	881a      	ldrh	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	1c9a      	adds	r2, r3, #2
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b02      	subs	r3, #2
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800806a:	e0d6      	b.n	800821a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008092:	e0c2      	b.n	800821a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d158      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x3ea>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d053      	beq.n	8008154 <HAL_SPI_TransmitReceive+0x3ea>
 80080ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d150      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d912      	bls.n	80080e2 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	881a      	ldrh	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	1c9a      	adds	r2, r3, #2
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b02      	subs	r3, #2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080e0:	e012      	b.n	8008108 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	330c      	adds	r3, #12
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d11e      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x3ea>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811e:	d119      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10c      	bne.n	8008144 <HAL_SPI_TransmitReceive+0x3da>
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008142:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008152:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b01      	cmp	r3, #1
 8008160:	d148      	bne.n	80081f4 <HAL_SPI_TransmitReceive+0x48a>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d042      	beq.n	80081f4 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d923      	bls.n	80081c2 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	b292      	uxth	r2, r2
 8008186:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	1c9a      	adds	r2, r3, #2
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b02      	subs	r3, #2
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d81f      	bhi.n	80081f0 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e016      	b.n	80081f0 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f103 020c 	add.w	r2, r3, #12
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081f0:	2301      	movs	r3, #1
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081f4:	f7f9 ff2e 	bl	8002054 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008200:	429a      	cmp	r2, r3
 8008202:	d803      	bhi.n	800820c <HAL_SPI_TransmitReceive+0x4a2>
 8008204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d102      	bne.n	8008212 <HAL_SPI_TransmitReceive+0x4a8>
 800820c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8008218:	e07d      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f af37 	bne.w	8008094 <HAL_SPI_TransmitReceive+0x32a>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	f47f af30 	bne.w	8008094 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823c:	d146      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008244:	2201      	movs	r2, #1
 8008246:	2101      	movs	r1, #1
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f873 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	f043 0202 	orr.w	r2, r3, #2
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8008266:	e056      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008270:	d105      	bne.n	800827e <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	e026      	b.n	80082cc <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800828e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008294:	2b02      	cmp	r3, #2
 8008296:	d119      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829e:	2201      	movs	r2, #1
 80082a0:	2101      	movs	r1, #1
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f846 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b2:	f043 0202 	orr.w	r2, r3, #2
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80082c0:	e029      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d10d      	bne.n	80082f6 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082de:	f043 0202 	orr.w	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80082ee:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 f990 	bl	8008620 <SPI_EndRxTxTransaction>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d006      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	661a      	str	r2, [r3, #96]	; 0x60
 8008312:	e000      	b.n	8008316 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8008314:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800832a:	4618      	mov	r0, r3
 800832c:	3740      	adds	r7, #64	; 0x40
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008344:	f7f9 fe86 	bl	8002054 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	4413      	add	r3, r2
 8008352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008354:	f7f9 fe7e 	bl	8002054 <HAL_GetTick>
 8008358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800835a:	4b39      	ldr	r3, [pc, #228]	; (8008440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	015b      	lsls	r3, r3, #5
 8008360:	0d1b      	lsrs	r3, r3, #20
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	fb02 f303 	mul.w	r3, r2, r3
 8008368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800836a:	e054      	b.n	8008416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d050      	beq.n	8008416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008374:	f7f9 fe6e 	bl	8002054 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	429a      	cmp	r2, r3
 8008382:	d902      	bls.n	800838a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d13d      	bne.n	8008406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083a2:	d111      	bne.n	80083c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ac:	d004      	beq.n	80083b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b6:	d107      	bne.n	80083c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d0:	d10f      	bne.n	80083f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e017      	b.n	8008436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3b01      	subs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4013      	ands	r3, r2
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	bf0c      	ite	eq
 8008426:	2301      	moveq	r3, #1
 8008428:	2300      	movne	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	429a      	cmp	r2, r3
 8008432:	d19b      	bne.n	800836c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000000 	.word	0x20000000

08008444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008456:	f7f9 fdfd 	bl	8002054 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	4413      	add	r3, r2
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008466:	f7f9 fdf5 	bl	8002054 <HAL_GetTick>
 800846a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008474:	4b3d      	ldr	r3, [pc, #244]	; (800856c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	00da      	lsls	r2, r3, #3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	0d1b      	lsrs	r3, r3, #20
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800848c:	e060      	b.n	8008550 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008494:	d107      	bne.n	80084a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ac:	d050      	beq.n	8008550 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084ae:	f7f9 fdd1 	bl	8002054 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d902      	bls.n	80084c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d13d      	bne.n	8008540 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084dc:	d111      	bne.n	8008502 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e6:	d004      	beq.n	80084f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f0:	d107      	bne.n	8008502 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008500:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850a:	d10f      	bne.n	800852c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800852a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e010      	b.n	8008562 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	3b01      	subs	r3, #1
 800854e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4013      	ands	r3, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d196      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3728      	adds	r7, #40	; 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000000 	.word	0x20000000

08008570 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008584:	d111      	bne.n	80085aa <SPI_EndRxTransaction+0x3a>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858e:	d004      	beq.n	800859a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008598:	d107      	bne.n	80085aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2180      	movs	r1, #128	; 0x80
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff febd 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	f043 0220 	orr.w	r2, r3, #32
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e023      	b.n	8008618 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085d8:	d11d      	bne.n	8008616 <SPI_EndRxTransaction+0xa6>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e2:	d004      	beq.n	80085ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ec:	d113      	bne.n	8008616 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff ff22 	bl	8008444 <SPI_WaitFifoStateUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800860a:	f043 0220 	orr.w	r2, r3, #32
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e000      	b.n	8008618 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff ff03 	bl	8008444 <SPI_WaitFifoStateUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008648:	f043 0220 	orr.w	r2, r3, #32
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e027      	b.n	80086a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	2180      	movs	r1, #128	; 0x80
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fe68 	bl	8008334 <SPI_WaitFlagStateUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e014      	b.n	80086a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2200      	movs	r2, #0
 8008682:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fedc 	bl	8008444 <SPI_WaitFifoStateUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e000      	b.n	80086a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <LL_PWR_SetRadioBusyTrigger>:
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086bc:	4904      	ldr	r1, [pc, #16]	; (80086d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	608b      	str	r3, [r1, #8]
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	58000400 	.word	0x58000400

080086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086de:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	58000400 	.word	0x58000400

080086f4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	4a04      	ldr	r2, [pc, #16]	; (8008710 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr
 8008710:	58000400 	.word	0x58000400

08008714 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	619a      	str	r2, [r3, #24]
}
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr
 8008728:	58000400 	.word	0x58000400

0800872c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d101      	bne.n	8008740 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	58000400 	.word	0x58000400

08008750 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b04      	cmp	r3, #4
 800875e:	d101      	bne.n	8008764 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	58000400 	.word	0x58000400

08008774 <LL_RCC_RF_DisableReset>:
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800877c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800878c:	bf00      	nop
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <LL_RCC_IsRFUnderReset>:
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800879c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a8:	d101      	bne.n	80087ae <LL_RCC_IsRFUnderReset+0x1a>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <LL_RCC_IsRFUnderReset+0x1c>
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <LL_EXTI_EnableIT_32_63>:
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <LL_EXTI_EnableIT_32_63+0x24>)
 80087c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80087c6:	4905      	ldr	r1, [pc, #20]	; (80087dc <LL_EXTI_EnableIT_32_63+0x24>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	58000800 	.word	0x58000800

080087e0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d103      	bne.n	80087f6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	73fb      	strb	r3, [r7, #15]
    return status;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	e04b      	b.n	800888e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	799b      	ldrb	r3, [r3, #6]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f9 fa88 	bl	8001d20 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8008816:	f7ff ffad 	bl	8008774 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800881a:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_SUBGHZ_Init+0xb8>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	0cdb      	lsrs	r3, r3, #19
 8008828:	2264      	movs	r2, #100	; 0x64
 800882a:	fb02 f303 	mul.w	r3, r2, r3
 800882e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	609a      	str	r2, [r3, #8]
      break;
 8008840:	e007      	b.n	8008852 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	3b01      	subs	r3, #1
 8008846:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008848:	f7ff ffa4 	bl	8008794 <LL_RCC_IsRFUnderReset>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1ee      	bne.n	8008830 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8008852:	f7ff ff3f 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008856:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800885a:	f7ff ffad 	bl	80087b8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800885e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008862:	f7ff ff23 	bl	80086ac <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008866:	f7ff ff55 	bl	8008714 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 faad 	bl	8008dd4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	719a      	strb	r2, [r3, #6]

  return status;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000000 	.word	0x20000000

0800889c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	607a      	str	r2, [r7, #4]
 80088a6:	461a      	mov	r2, r3
 80088a8:	460b      	mov	r3, r1
 80088aa:	817b      	strh	r3, [r7, #10]
 80088ac:	4613      	mov	r3, r2
 80088ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	799b      	ldrb	r3, [r3, #6]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d14a      	bne.n	8008950 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d101      	bne.n	80088c6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80088c2:	2302      	movs	r3, #2
 80088c4:	e045      	b.n	8008952 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fb4c 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80088d8:	f7ff ff0c 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80088dc:	210d      	movs	r1, #13
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa98 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80088e4:	897b      	ldrh	r3, [r7, #10]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 fa90 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80088f4:	897b      	ldrh	r3, [r7, #10]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fa8a 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008900:	2300      	movs	r3, #0
 8008902:	82bb      	strh	r3, [r7, #20]
 8008904:	e00a      	b.n	800891c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008906:	8abb      	ldrh	r3, [r7, #20]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fa7f 	bl	8008e14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008916:	8abb      	ldrh	r3, [r7, #20]
 8008918:	3301      	adds	r3, #1
 800891a:	82bb      	strh	r3, [r7, #20]
 800891c:	8aba      	ldrh	r2, [r7, #20]
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d3f0      	bcc.n	8008906 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008924:	f7ff fed6 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fb45 	bl	8008fb8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
 800893a:	e001      	b.n	8008940 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2201      	movs	r2, #1
 8008944:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	715a      	strb	r2, [r3, #5]

    return status;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	e000      	b.n	8008952 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b088      	sub	sp, #32
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	461a      	mov	r2, r3
 8008966:	460b      	mov	r3, r1
 8008968:	817b      	strh	r3, [r7, #10]
 800896a:	4613      	mov	r3, r2
 800896c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	799b      	ldrb	r3, [r3, #6]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	d14a      	bne.n	8008a12 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	795b      	ldrb	r3, [r3, #5]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008984:	2302      	movs	r3, #2
 8008986:	e045      	b.n	8008a14 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 faee 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008994:	f7ff feae 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008998:	211d      	movs	r1, #29
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fa3a 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80089a0:	897b      	ldrh	r3, [r7, #10]
 80089a2:	0a1b      	lsrs	r3, r3, #8
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	4619      	mov	r1, r3
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fa32 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80089b0:	897b      	ldrh	r3, [r7, #10]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	4619      	mov	r1, r3
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fa2c 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80089bc:	2100      	movs	r1, #0
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fa28 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089c4:	2300      	movs	r3, #0
 80089c6:	82fb      	strh	r3, [r7, #22]
 80089c8:	e009      	b.n	80089de <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80089ca:	69b9      	ldr	r1, [r7, #24]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fa77 	bl	8008ec0 <SUBGHZSPI_Receive>
      pData++;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	3301      	adds	r3, #1
 80089d6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80089d8:	8afb      	ldrh	r3, [r7, #22]
 80089da:	3301      	adds	r3, #1
 80089dc:	82fb      	strh	r3, [r7, #22]
 80089de:	8afa      	ldrh	r2, [r7, #22]
 80089e0:	893b      	ldrh	r3, [r7, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3f1      	bcc.n	80089ca <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089e6:	f7ff fe75 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fae4 	bl	8008fb8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	77fb      	strb	r3, [r7, #31]
 80089fc:	e001      	b.n	8008a02 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	715a      	strb	r2, [r3, #5]

    return status;
 8008a0e:	7ffb      	ldrb	r3, [r7, #31]
 8008a10:	e000      	b.n	8008a14 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008a12:	2302      	movs	r3, #2
  }
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	461a      	mov	r2, r3
 8008a28:	460b      	mov	r3, r1
 8008a2a:	72fb      	strb	r3, [r7, #11]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	799b      	ldrb	r3, [r3, #6]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d14a      	bne.n	8008ad0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	795b      	ldrb	r3, [r3, #5]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008a42:	2302      	movs	r3, #2
 8008a44:	e045      	b.n	8008ad2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fa8f 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	2b84      	cmp	r3, #132	; 0x84
 8008a56:	d002      	beq.n	8008a5e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	2b94      	cmp	r3, #148	; 0x94
 8008a5c:	d103      	bne.n	8008a66 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	711a      	strb	r2, [r3, #4]
 8008a64:	e002      	b.n	8008a6c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a6c:	f7ff fe42 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	4619      	mov	r1, r3
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f9cd 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	82bb      	strh	r3, [r7, #20]
 8008a7e:	e00a      	b.n	8008a96 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008a80:	8abb      	ldrh	r3, [r7, #20]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f9c2 	bl	8008e14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a90:	8abb      	ldrh	r3, [r7, #20]
 8008a92:	3301      	adds	r3, #1
 8008a94:	82bb      	strh	r3, [r7, #20]
 8008a96:	8aba      	ldrh	r2, [r7, #20]
 8008a98:	893b      	ldrh	r3, [r7, #8]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3f0      	bcc.n	8008a80 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a9e:	f7ff fe19 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	2b84      	cmp	r3, #132	; 0x84
 8008aa6:	d002      	beq.n	8008aae <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fa85 	bl	8008fb8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
 8008aba:	e001      	b.n	8008ac0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	715a      	strb	r2, [r3, #5]

    return status;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	e000      	b.n	8008ad2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b088      	sub	sp, #32
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	72fb      	strb	r3, [r7, #11]
 8008aea:	4613      	mov	r3, r2
 8008aec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	799b      	ldrb	r3, [r3, #6]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d13d      	bne.n	8008b78 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	795b      	ldrb	r3, [r3, #5]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e038      	b.n	8008b7a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fa2e 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b14:	f7ff fdee 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f979 	bl	8008e14 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008b22:	2100      	movs	r1, #0
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f975 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	82fb      	strh	r3, [r7, #22]
 8008b2e:	e009      	b.n	8008b44 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008b30:	69b9      	ldr	r1, [r7, #24]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f9c4 	bl	8008ec0 <SUBGHZSPI_Receive>
      pData++;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008b3e:	8afb      	ldrh	r3, [r7, #22]
 8008b40:	3301      	adds	r3, #1
 8008b42:	82fb      	strh	r3, [r7, #22]
 8008b44:	8afa      	ldrh	r2, [r7, #22]
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d3f1      	bcc.n	8008b30 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b4c:	f7ff fdc2 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fa31 	bl	8008fb8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	77fb      	strb	r3, [r7, #31]
 8008b62:	e001      	b.n	8008b68 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	715a      	strb	r2, [r3, #5]

    return status;
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	e000      	b.n	8008b7a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
  }
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	460b      	mov	r3, r1
 8008b90:	72fb      	strb	r3, [r7, #11]
 8008b92:	4613      	mov	r3, r2
 8008b94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	799b      	ldrb	r3, [r3, #6]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d13e      	bne.n	8008c1e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	795b      	ldrb	r3, [r3, #5]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e039      	b.n	8008c20 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 f9dc 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bb8:	f7ff fd9c 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008bbc:	210e      	movs	r1, #14
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f928 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f923 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bce:	2300      	movs	r3, #0
 8008bd0:	82bb      	strh	r3, [r7, #20]
 8008bd2:	e00a      	b.n	8008bea <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008bd4:	8abb      	ldrh	r3, [r7, #20]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f918 	bl	8008e14 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008be4:	8abb      	ldrh	r3, [r7, #20]
 8008be6:	3301      	adds	r3, #1
 8008be8:	82bb      	strh	r3, [r7, #20]
 8008bea:	8aba      	ldrh	r2, [r7, #20]
 8008bec:	893b      	ldrh	r3, [r7, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d3f0      	bcc.n	8008bd4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008bf2:	f7ff fd6f 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 f9de 	bl	8008fb8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
 8008c08:	e001      	b.n	8008c0e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	715a      	strb	r2, [r3, #5]

    return status;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	e000      	b.n	8008c20 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008c1e:	2302      	movs	r3, #2
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	607a      	str	r2, [r7, #4]
 8008c32:	461a      	mov	r2, r3
 8008c34:	460b      	mov	r3, r1
 8008c36:	72fb      	strb	r3, [r7, #11]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	799b      	ldrb	r3, [r3, #6]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d141      	bne.n	8008cce <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	795b      	ldrb	r3, [r3, #5]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e03c      	b.n	8008cd0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f987 	bl	8008f70 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c62:	f7ff fd47 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008c66:	211e      	movs	r1, #30
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f8d3 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	4619      	mov	r1, r3
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f8ce 	bl	8008e14 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f8ca 	bl	8008e14 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	82fb      	strh	r3, [r7, #22]
 8008c84:	e009      	b.n	8008c9a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008c86:	69b9      	ldr	r1, [r7, #24]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f919 	bl	8008ec0 <SUBGHZSPI_Receive>
      pData++;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	3301      	adds	r3, #1
 8008c92:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	3301      	adds	r3, #1
 8008c98:	82fb      	strh	r3, [r7, #22]
 8008c9a:	8afa      	ldrh	r2, [r7, #22]
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3f1      	bcc.n	8008c86 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ca2:	f7ff fd17 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f986 	bl	8008fb8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	77fb      	strb	r3, [r7, #31]
 8008cb8:	e001      	b.n	8008cbe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	715a      	strb	r2, [r3, #5]

    return status;
 8008cca:	7ffb      	ldrb	r3, [r7, #31]
 8008ccc:	e000      	b.n	8008cd0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008cce:	2302      	movs	r3, #2
  }
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008ce4:	f107 020c 	add.w	r2, r7, #12
 8008ce8:	2302      	movs	r3, #2
 8008cea:	2112      	movs	r1, #18
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff fef4 	bl	8008ada <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008cf2:	7b3b      	ldrb	r3, [r7, #12]
 8008cf4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008cf6:	89fb      	ldrh	r3, [r7, #14]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	b21a      	sxth	r2, r3
 8008cfc:	7b7b      	ldrb	r3, [r7, #13]
 8008cfe:	b21b      	sxth	r3, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b21b      	sxth	r3, r3
 8008d04:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008d06:	89fb      	ldrh	r3, [r7, #14]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f012 fb77 	bl	801b404 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f012 fb7c 	bl	801b420 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f012 fbcb 	bl	801b4d0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008d3a:	89fb      	ldrh	r3, [r7, #14]
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f012 fbd0 	bl	801b4ec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f012 fbd5 	bl	801b508 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008d5e:	89fb      	ldrh	r3, [r7, #14]
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f012 fba2 	bl	801b4b4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008d70:	89fb      	ldrh	r3, [r7, #14]
 8008d72:	099b      	lsrs	r3, r3, #6
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f012 fb5d 	bl	801b43c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008d82:	89fb      	ldrh	r3, [r7, #14]
 8008d84:	09db      	lsrs	r3, r3, #7
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d004      	beq.n	8008da4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f012 fb5b 	bl	801b458 <HAL_SUBGHZ_CADStatusCallback>
 8008da2:	e003      	b.n	8008dac <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008da4:	2100      	movs	r1, #0
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f012 fb56 	bl	801b458 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	0a5b      	lsrs	r3, r3, #9
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f012 fb6b 	bl	801b494 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008dbe:	f107 020c 	add.w	r2, r7, #12
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fe28 	bl	8008a1c <HAL_SUBGHZ_ExecSetCmd>
}
 8008dcc:	bf00      	nop
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0b      	ldr	r2, [pc, #44]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008df0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008df2:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008df4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008df8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a04      	ldr	r2, [pc, #16]	; (8008e10 <SUBGHZSPI_Init+0x3c>)
 8008e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e04:	6013      	str	r3, [r2, #0]
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bc80      	pop	{r7}
 8008e0e:	4770      	bx	lr
 8008e10:	58010000 	.word	0x58010000

08008e14 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e24:	4b23      	ldr	r3, [pc, #140]	; (8008eb4 <SUBGHZSPI_Transmit+0xa0>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	0cdb      	lsrs	r3, r3, #19
 8008e32:	2264      	movs	r2, #100	; 0x64
 8008e34:	fb02 f303 	mul.w	r3, r2, r3
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	609a      	str	r2, [r3, #8]
      break;
 8008e4a:	e008      	b.n	8008e5e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e52:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <SUBGHZSPI_Transmit+0xa4>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d1ed      	bne.n	8008e3a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e5e:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <SUBGHZSPI_Transmit+0xa8>)
 8008e60:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e68:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <SUBGHZSPI_Transmit+0xa0>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	0cdb      	lsrs	r3, r3, #19
 8008e76:	2264      	movs	r2, #100	; 0x64
 8008e78:	fb02 f303 	mul.w	r3, r2, r3
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	609a      	str	r2, [r3, #8]
      break;
 8008e8e:	e008      	b.n	8008ea2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008e96:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <SUBGHZSPI_Transmit+0xa4>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d1ed      	bne.n	8008e7e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <SUBGHZSPI_Transmit+0xa4>)
 8008ea4:	68db      	ldr	r3, [r3, #12]

  return status;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20000000 	.word	0x20000000
 8008eb8:	58010000 	.word	0x58010000
 8008ebc:	5801000c 	.word	0x5801000c

08008ec0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ece:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <SUBGHZSPI_Receive+0xa4>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	0cdb      	lsrs	r3, r3, #19
 8008edc:	2264      	movs	r2, #100	; 0x64
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	609a      	str	r2, [r3, #8]
      break;
 8008ef4:	e008      	b.n	8008f08 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008efc:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <SUBGHZSPI_Receive+0xa8>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d1ed      	bne.n	8008ee4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008f08:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <SUBGHZSPI_Receive+0xac>)
 8008f0a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	22ff      	movs	r2, #255	; 0xff
 8008f10:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <SUBGHZSPI_Receive+0xa4>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	4613      	mov	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	1a9b      	subs	r3, r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	0cdb      	lsrs	r3, r3, #19
 8008f20:	2264      	movs	r2, #100	; 0x64
 8008f22:	fb02 f303 	mul.w	r3, r2, r3
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	609a      	str	r2, [r3, #8]
      break;
 8008f38:	e008      	b.n	8008f4c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008f40:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <SUBGHZSPI_Receive+0xa8>)
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d1ed      	bne.n	8008f28 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <SUBGHZSPI_Receive+0xa8>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	701a      	strb	r2, [r3, #0]

  return status;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000000 	.word	0x20000000
 8008f68:	58010000 	.word	0x58010000
 8008f6c:	5801000c 	.word	0x5801000c

08008f70 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	791b      	ldrb	r3, [r3, #4]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d111      	bne.n	8008fa4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <SUBGHZ_CheckDeviceReady+0x44>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	4413      	add	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f90:	f7ff fbb0 	bl	80086f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f9      	bne.n	8008f94 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008fa0:	f7ff fb98 	bl	80086d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f807 	bl	8008fb8 <SUBGHZ_WaitOnBusy>
 8008faa:	4603      	mov	r3, r0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000000 	.word	0x20000000

08008fb8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008fc4:	4b12      	ldr	r3, [pc, #72]	; (8009010 <SUBGHZ_WaitOnBusy+0x58>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	4413      	add	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	0d1b      	lsrs	r3, r3, #20
 8008fd2:	2264      	movs	r2, #100	; 0x64
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008fda:	f7ff fbb9 	bl	8008750 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008fde:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2202      	movs	r2, #2
 8008fee:	609a      	str	r2, [r3, #8]
      break;
 8008ff0:	e009      	b.n	8009006 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008ff8:	f7ff fb98 	bl	800872c <LL_PWR_IsActiveFlag_RFBUSYS>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	4013      	ands	r3, r2
 8009002:	2b01      	cmp	r3, #1
 8009004:	d0e9      	beq.n	8008fda <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000000 	.word	0x20000000

08009014 <LL_RCC_GetUSARTClockSource>:
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800901c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009020:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	401a      	ands	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	041b      	lsls	r3, r3, #16
 800902c:	4313      	orrs	r3, r2
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <LL_RCC_GetLPUARTClockSource>:
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009044:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4013      	ands	r3, r2
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	bc80      	pop	{r7}
 8009054:	4770      	bx	lr

08009056 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e042      	b.n	80090ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f9 fbae 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2224      	movs	r2, #36	; 0x24
 8009084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0201 	bic.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fd39 	bl	8009b10 <UART_SetConfig>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e022      	b.n	80090ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 ffa1 	bl	8009ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0201 	orr.w	r2, r2, #1
 80090e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 f827 	bl	800a13a <UART_CheckIdleState>
 80090ec:	4603      	mov	r3, r0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e04a      	b.n	800919e <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f9 fb5e 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2224      	movs	r2, #36	; 0x24
 8009124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fce9 	bl	8009b10 <UART_SetConfig>
 800913e:	4603      	mov	r3, r0
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e02a      	b.n	800919e <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 ff51 	bl	8009ff8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009164:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009174:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0208 	orr.w	r2, r2, #8
 8009184:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0201 	orr.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 ffcf 	bl	800a13a <UART_CheckIdleState>
 800919c:	4603      	mov	r3, r0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08a      	sub	sp, #40	; 0x28
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091bc:	2b20      	cmp	r3, #32
 80091be:	f040 8083 	bne.w	80092c8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HAL_UART_Transmit+0x28>
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e07b      	b.n	80092ca <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_UART_Transmit+0x3a>
 80091dc:	2302      	movs	r3, #2
 80091de:	e074      	b.n	80092ca <HAL_UART_Transmit+0x124>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2221      	movs	r2, #33	; 0x21
 80091f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091f8:	f7f8 ff2c 	bl	8002054 <HAL_GetTick>
 80091fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009216:	d108      	bne.n	800922a <HAL_UART_Transmit+0x84>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d104      	bne.n	800922a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	e003      	b.n	8009232 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800923a:	e02c      	b.n	8009296 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2200      	movs	r2, #0
 8009244:	2180      	movs	r1, #128	; 0x80
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 ffc2 	bl	800a1d0 <UART_WaitOnFlagUntilTimeout>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e039      	b.n	80092ca <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10b      	bne.n	8009274 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800926a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3302      	adds	r3, #2
 8009270:	61bb      	str	r3, [r7, #24]
 8009272:	e007      	b.n	8009284 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	3301      	adds	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1cc      	bne.n	800923c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2200      	movs	r2, #0
 80092aa:	2140      	movs	r1, #64	; 0x40
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 ff8f 	bl	800a1d0 <UART_WaitOnFlagUntilTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e006      	b.n	80092ca <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2220      	movs	r2, #32
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e000      	b.n	80092ca <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80092c8:	2302      	movs	r3, #2
  }
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	; 0x28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e8:	2b20      	cmp	r3, #32
 80092ea:	d142      	bne.n	8009372 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_UART_Receive_IT+0x24>
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e03b      	b.n	8009374 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_UART_Receive_IT+0x36>
 8009306:	2302      	movs	r3, #2
 8009308:	e034      	b.n	8009374 <HAL_UART_Receive_IT+0xa0>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <HAL_UART_Receive_IT+0xa8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d01f      	beq.n	8009362 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d018      	beq.n	8009362 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	613b      	str	r3, [r7, #16]
   return(result);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009344:	627b      	str	r3, [r7, #36]	; 0x24
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	623b      	str	r3, [r7, #32]
 8009350:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	69f9      	ldr	r1, [r7, #28]
 8009354:	6a3a      	ldr	r2, [r7, #32]
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	61bb      	str	r3, [r7, #24]
   return(result);
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	461a      	mov	r2, r3
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fff9 	bl	800a360 <UART_Start_Receive_IT>
 800936e:	4603      	mov	r3, r0
 8009370:	e000      	b.n	8009374 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009372:	2302      	movs	r3, #2
  }
}
 8009374:	4618      	mov	r0, r3
 8009376:	3728      	adds	r7, #40	; 0x28
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	40008000 	.word	0x40008000

08009380 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	2b20      	cmp	r3, #32
 8009396:	d17a      	bne.n	800948e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <HAL_UART_Transmit_DMA+0x24>
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e073      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Transmit_DMA+0x36>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e06c      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	88fa      	ldrh	r2, [r7, #6]
 80093c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2221      	movs	r2, #33	; 0x21
 80093e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d02c      	beq.n	8009446 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f0:	4a29      	ldr	r2, [pc, #164]	; (8009498 <HAL_UART_Transmit_DMA+0x118>)
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f8:	4a28      	ldr	r2, [pc, #160]	; (800949c <HAL_UART_Transmit_DMA+0x11c>)
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009400:	4a27      	ldr	r2, [pc, #156]	; (80094a0 <HAL_UART_Transmit_DMA+0x120>)
 8009402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009408:	2200      	movs	r2, #0
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009414:	4619      	mov	r1, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3328      	adds	r3, #40	; 0x28
 800941c:	461a      	mov	r2, r3
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	f7fb f8b6 	bl	8004590 <HAL_DMA_Start_IT>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2210      	movs	r2, #16
 800942e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e024      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2240      	movs	r2, #64	; 0x40
 800944c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	613b      	str	r3, [r7, #16]
   return(result);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009476:	623a      	str	r2, [r7, #32]
 8009478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	69f9      	ldr	r1, [r7, #28]
 800947c:	6a3a      	ldr	r2, [r7, #32]
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	61bb      	str	r3, [r7, #24]
   return(result);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e5      	bne.n	8009456 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e000      	b.n	8009490 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3728      	adds	r7, #40	; 0x28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	0800a6fb 	.word	0x0800a6fb
 800949c:	0800a795 	.word	0x0800a795
 80094a0:	0800a7b1 	.word	0x0800a7b1

080094a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b0ba      	sub	sp, #232	; 0xe8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80094d2:	4013      	ands	r3, r2
 80094d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11b      	bne.n	8009518 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d015      	beq.n	8009518 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 82d6 	beq.w	8009aba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
      }
      return;
 8009516:	e2d0      	b.n	8009aba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 811f 	beq.w	8009760 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009522:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009526:	4b8b      	ldr	r3, [pc, #556]	; (8009754 <HAL_UART_IRQHandler+0x2b0>)
 8009528:	4013      	ands	r3, r2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800952e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009532:	4b89      	ldr	r3, [pc, #548]	; (8009758 <HAL_UART_IRQHandler+0x2b4>)
 8009534:	4013      	ands	r3, r2
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8112 	beq.w	8009760 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d011      	beq.n	800956c <HAL_UART_IRQHandler+0xc8>
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800954c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2201      	movs	r2, #1
 800955a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009562:	f043 0201 	orr.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d011      	beq.n	800959c <HAL_UART_IRQHandler+0xf8>
 8009578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2202      	movs	r2, #2
 800958a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009592:	f043 0204 	orr.w	r2, r3, #4
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d011      	beq.n	80095cc <HAL_UART_IRQHandler+0x128>
 80095a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2204      	movs	r2, #4
 80095ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c2:	f043 0202 	orr.w	r2, r3, #2
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d0:	f003 0308 	and.w	r3, r3, #8
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095e8:	4b5a      	ldr	r3, [pc, #360]	; (8009754 <HAL_UART_IRQHandler+0x2b0>)
 80095ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2208      	movs	r2, #8
 80095f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fe:	f043 0208 	orr.w	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009610:	2b00      	cmp	r3, #0
 8009612:	d012      	beq.n	800963a <HAL_UART_IRQHandler+0x196>
 8009614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00c      	beq.n	800963a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009630:	f043 0220 	orr.w	r2, r3, #32
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 823c 	beq.w	8009abe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b00      	cmp	r3, #0
 8009650:	d013      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d005      	beq.n	800969e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800969a:	2b00      	cmp	r3, #0
 800969c:	d04f      	beq.n	800973e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 ffc6 	bl	800a630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d141      	bne.n	8009736 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3308      	adds	r3, #8
 80096da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1d9      	bne.n	80096b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d013      	beq.n	800972e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	4a14      	ldr	r2, [pc, #80]	; (800975c <HAL_UART_IRQHandler+0x2b8>)
 800970c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009712:	4618      	mov	r0, r3
 8009714:	f7fb f818 	bl	8004748 <HAL_DMA_Abort_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d017      	beq.n	800974e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00f      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9d9 	bl	8009ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00b      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f9d5 	bl	8009ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	e007      	b.n	800974e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9d1 	bl	8009ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800974c:	e1b7      	b.n	8009abe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974e:	bf00      	nop
    return;
 8009750:	e1b5      	b.n	8009abe <HAL_UART_IRQHandler+0x61a>
 8009752:	bf00      	nop
 8009754:	10000001 	.word	0x10000001
 8009758:	04000120 	.word	0x04000120
 800975c:	0800a831 	.word	0x0800a831

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009764:	2b01      	cmp	r3, #1
 8009766:	f040 814a 	bne.w	80099fe <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800976a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8143 	beq.w	80099fe <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 813c 	beq.w	80099fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2210      	movs	r2, #16
 800978c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009798:	2b40      	cmp	r3, #64	; 0x40
 800979a:	f040 80b5 	bne.w	8009908 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80097aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8187 	beq.w	8009ac2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097be:	429a      	cmp	r2, r3
 80097c0:	f080 817f 	bcs.w	8009ac2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 8086 	bne.w	80098ec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800980a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800980e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1da      	bne.n	80097e0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800983a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800983c:	f023 0301 	bic.w	r3, r3, #1
 8009840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3308      	adds	r3, #8
 800984a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800984e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e1      	bne.n	800982a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800988a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800988c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e3      	bne.n	8009866 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098bc:	f023 0310 	bic.w	r3, r3, #16
 80098c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80098d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e4      	bne.n	80098ac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fa fed0 	bl	800468c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f8f9 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009906:	e0dc      	b.n	8009ac2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009914:	b29b      	uxth	r3, r3
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80ce 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800992a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80c9 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009956:	647b      	str	r3, [r7, #68]	; 0x44
 8009958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800995c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	623b      	str	r3, [r7, #32]
   return(result);
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009980:	f023 0301 	bic.w	r3, r3, #1
 8009984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009992:	633a      	str	r2, [r7, #48]	; 0x30
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e1      	bne.n	800996a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0310 	bic.w	r3, r3, #16
 80099ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	69b9      	ldr	r1, [r7, #24]
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	617b      	str	r3, [r7, #20]
   return(result);
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e4      	bne.n	80099ba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f87e 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80099fc:	e063      	b.n	8009ac6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <HAL_UART_IRQHandler+0x584>
 8009a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d008      	beq.n	8009a28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 fba3 	bl	800b16c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a26:	e051      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d014      	beq.n	8009a5e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d03a      	beq.n	8009aca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
    }
    return;
 8009a5c:	e035      	b.n	8009aca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_UART_IRQHandler+0x5da>
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fef0 	bl	800a85c <UART_EndTransmit_IT>
    return;
 8009a7c:	e026      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_UART_IRQHandler+0x5fa>
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fb7a 	bl	800b190 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a9c:	e016      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d010      	beq.n	8009acc <HAL_UART_IRQHandler+0x628>
 8009aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da0c      	bge.n	8009acc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fb63 	bl	800b17e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ab8:	e008      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009aba:	bf00      	nop
 8009abc:	e006      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
    return;
 8009abe:	bf00      	nop
 8009ac0:	e004      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009ac2:	bf00      	nop
 8009ac4:	e002      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
      return;
 8009ac6:	bf00      	nop
 8009ac8:	e000      	b.n	8009acc <HAL_UART_IRQHandler+0x628>
    return;
 8009aca:	bf00      	nop
  }
}
 8009acc:	37e8      	adds	r7, #232	; 0xe8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop

08009ad4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr

08009ae6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bc80      	pop	{r7}
 8009af6:	4770      	bx	lr

08009af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr
	...

08009b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b14:	b08c      	sub	sp, #48	; 0x30
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b94      	ldr	r3, [pc, #592]	; (8009d90 <UART_SetConfig+0x280>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a89      	ldr	r2, [pc, #548]	; (8009d94 <UART_SetConfig+0x284>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d004      	beq.n	8009b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	6812      	ldr	r2, [r2, #0]
 8009b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b90:	430b      	orrs	r3, r1
 8009b92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	f023 010f 	bic.w	r1, r3, #15
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a7a      	ldr	r2, [pc, #488]	; (8009d98 <UART_SetConfig+0x288>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d127      	bne.n	8009c04 <UART_SetConfig+0xf4>
 8009bb4:	2003      	movs	r0, #3
 8009bb6:	f7ff fa2d 	bl	8009014 <LL_RCC_GetUSARTClockSource>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d81b      	bhi.n	8009bfc <UART_SetConfig+0xec>
 8009bc4:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0xbc>)
 8009bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bca:	bf00      	nop
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e080      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009be4:	2302      	movs	r3, #2
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bea:	e07c      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009bec:	2304      	movs	r3, #4
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf2:	e078      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bfa:	e074      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c02:	e070      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a64      	ldr	r2, [pc, #400]	; (8009d9c <UART_SetConfig+0x28c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d138      	bne.n	8009c80 <UART_SetConfig+0x170>
 8009c0e:	200c      	movs	r0, #12
 8009c10:	f7ff fa00 	bl	8009014 <LL_RCC_GetUSARTClockSource>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009c1a:	2b0c      	cmp	r3, #12
 8009c1c:	d82c      	bhi.n	8009c78 <UART_SetConfig+0x168>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x114>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c59 	.word	0x08009c59
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c79 	.word	0x08009c79
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c79 	.word	0x08009c79
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c71 	.word	0x08009c71
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c5e:	e042      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c60:	2302      	movs	r3, #2
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c66:	e03e      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c6e:	e03a      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c76:	e036      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c7e:	e032      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a43      	ldr	r2, [pc, #268]	; (8009d94 <UART_SetConfig+0x284>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d12a      	bne.n	8009ce0 <UART_SetConfig+0x1d0>
 8009c8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009c8e:	f7ff f9d3 	bl	8009038 <LL_RCC_GetLPUARTClockSource>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c98:	d01a      	beq.n	8009cd0 <UART_SetConfig+0x1c0>
 8009c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c9e:	d81b      	bhi.n	8009cd8 <UART_SetConfig+0x1c8>
 8009ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca4:	d00c      	beq.n	8009cc0 <UART_SetConfig+0x1b0>
 8009ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009caa:	d815      	bhi.n	8009cd8 <UART_SetConfig+0x1c8>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <UART_SetConfig+0x1a8>
 8009cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb4:	d008      	beq.n	8009cc8 <UART_SetConfig+0x1b8>
 8009cb6:	e00f      	b.n	8009cd8 <UART_SetConfig+0x1c8>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cbe:	e012      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cc6:	e00e      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cce:	e00a      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cd6:	e006      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cde:	e002      	b.n	8009ce6 <UART_SetConfig+0x1d6>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a2a      	ldr	r2, [pc, #168]	; (8009d94 <UART_SetConfig+0x284>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	f040 80a4 	bne.w	8009e3a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d823      	bhi.n	8009d42 <UART_SetConfig+0x232>
 8009cfa:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <UART_SetConfig+0x1f0>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d25 	.word	0x08009d25
 8009d04:	08009d43 	.word	0x08009d43
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d43 	.word	0x08009d43
 8009d10:	08009d33 	.word	0x08009d33
 8009d14:	08009d43 	.word	0x08009d43
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d43 	.word	0x08009d43
 8009d20:	08009d3b 	.word	0x08009d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d24:	f7fc fd6c 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8009d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d2a:	e010      	b.n	8009d4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <UART_SetConfig+0x290>)
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d30:	e00d      	b.n	8009d4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d32:	f7fc fcb1 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d38:	e009      	b.n	8009d4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d40:	e005      	b.n	8009d4e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8137 	beq.w	8009fc4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <UART_SetConfig+0x294>)
 8009d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4413      	add	r3, r2
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d305      	bcc.n	8009d86 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d80:	69ba      	ldr	r2, [r7, #24]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d910      	bls.n	8009da8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d8c:	e11a      	b.n	8009fc4 <UART_SetConfig+0x4b4>
 8009d8e:	bf00      	nop
 8009d90:	cfff69f3 	.word	0xcfff69f3
 8009d94:	40008000 	.word	0x40008000
 8009d98:	40013800 	.word	0x40013800
 8009d9c:	40004400 	.word	0x40004400
 8009da0:	00f42400 	.word	0x00f42400
 8009da4:	0801d880 	.word	0x0801d880
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	2200      	movs	r2, #0
 8009dac:	60bb      	str	r3, [r7, #8]
 8009dae:	60fa      	str	r2, [r7, #12]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db4:	4a8e      	ldr	r2, [pc, #568]	; (8009ff0 <UART_SetConfig+0x4e0>)
 8009db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dca:	f7f6 fd7d 	bl	80008c8 <__aeabi_uldivmod>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	020b      	lsls	r3, r1, #8
 8009de0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009de4:	0202      	lsls	r2, r0, #8
 8009de6:	6979      	ldr	r1, [r7, #20]
 8009de8:	6849      	ldr	r1, [r1, #4]
 8009dea:	0849      	lsrs	r1, r1, #1
 8009dec:	2000      	movs	r0, #0
 8009dee:	460c      	mov	r4, r1
 8009df0:	4605      	mov	r5, r0
 8009df2:	eb12 0804 	adds.w	r8, r2, r4
 8009df6:	eb43 0905 	adc.w	r9, r3, r5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	469a      	mov	sl, r3
 8009e02:	4693      	mov	fp, r2
 8009e04:	4652      	mov	r2, sl
 8009e06:	465b      	mov	r3, fp
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fd5c 	bl	80008c8 <__aeabi_uldivmod>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4613      	mov	r3, r2
 8009e16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e1e:	d308      	bcc.n	8009e32 <UART_SetConfig+0x322>
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e26:	d204      	bcs.n	8009e32 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6a3a      	ldr	r2, [r7, #32]
 8009e2e:	60da      	str	r2, [r3, #12]
 8009e30:	e0c8      	b.n	8009fc4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e38:	e0c4      	b.n	8009fc4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e42:	d168      	bne.n	8009f16 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d828      	bhi.n	8009e9e <UART_SetConfig+0x38e>
 8009e4c:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <UART_SetConfig+0x344>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e79 	.word	0x08009e79
 8009e58:	08009e81 	.word	0x08009e81
 8009e5c:	08009e89 	.word	0x08009e89
 8009e60:	08009e9f 	.word	0x08009e9f
 8009e64:	08009e8f 	.word	0x08009e8f
 8009e68:	08009e9f 	.word	0x08009e9f
 8009e6c:	08009e9f 	.word	0x08009e9f
 8009e70:	08009e9f 	.word	0x08009e9f
 8009e74:	08009e97 	.word	0x08009e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e78:	f7fc fcc2 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8009e7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e7e:	e014      	b.n	8009eaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e80:	f7fc fcd0 	bl	8006824 <HAL_RCC_GetPCLK2Freq>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e86:	e010      	b.n	8009eaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e88:	4b5a      	ldr	r3, [pc, #360]	; (8009ff4 <UART_SetConfig+0x4e4>)
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e8c:	e00d      	b.n	8009eaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e8e:	f7fc fc03 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8009e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e94:	e009      	b.n	8009eaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e9c:	e005      	b.n	8009eaa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8089 	beq.w	8009fc4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	4a4e      	ldr	r2, [pc, #312]	; (8009ff0 <UART_SetConfig+0x4e0>)
 8009eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ec4:	005a      	lsls	r2, r3, #1
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	085b      	lsrs	r3, r3, #1
 8009ecc:	441a      	add	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	2b0f      	cmp	r3, #15
 8009ede:	d916      	bls.n	8009f0e <UART_SetConfig+0x3fe>
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee6:	d212      	bcs.n	8009f0e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f023 030f 	bic.w	r3, r3, #15
 8009ef0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	8bfa      	ldrh	r2, [r7, #30]
 8009f0a:	60da      	str	r2, [r3, #12]
 8009f0c:	e05a      	b.n	8009fc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009f14:	e056      	b.n	8009fc4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d827      	bhi.n	8009f6e <UART_SetConfig+0x45e>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <UART_SetConfig+0x414>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f51 	.word	0x08009f51
 8009f2c:	08009f59 	.word	0x08009f59
 8009f30:	08009f6f 	.word	0x08009f6f
 8009f34:	08009f5f 	.word	0x08009f5f
 8009f38:	08009f6f 	.word	0x08009f6f
 8009f3c:	08009f6f 	.word	0x08009f6f
 8009f40:	08009f6f 	.word	0x08009f6f
 8009f44:	08009f67 	.word	0x08009f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f48:	f7fc fc5a 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8009f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f4e:	e014      	b.n	8009f7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f50:	f7fc fc68 	bl	8006824 <HAL_RCC_GetPCLK2Freq>
 8009f54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f56:	e010      	b.n	8009f7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f58:	4b26      	ldr	r3, [pc, #152]	; (8009ff4 <UART_SetConfig+0x4e4>)
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f5c:	e00d      	b.n	8009f7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f5e:	f7fc fb9b 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8009f62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f64:	e009      	b.n	8009f7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f6c:	e005      	b.n	8009f7a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f78:	bf00      	nop
    }

    if (pclk != 0U)
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d021      	beq.n	8009fc4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	4a1a      	ldr	r2, [pc, #104]	; (8009ff0 <UART_SetConfig+0x4e0>)
 8009f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	441a      	add	r2, r3
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	2b0f      	cmp	r3, #15
 8009faa:	d908      	bls.n	8009fbe <UART_SetConfig+0x4ae>
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb2:	d204      	bcs.n	8009fbe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6a3a      	ldr	r2, [r7, #32]
 8009fba:	60da      	str	r2, [r3, #12]
 8009fbc:	e002      	b.n	8009fc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009fe0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3730      	adds	r7, #48	; 0x30
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fee:	bf00      	nop
 8009ff0:	0801d880 	.word	0x0801d880
 8009ff4:	00f42400 	.word	0x00f42400

08009ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f003 0308 	and.w	r3, r3, #8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f003 0310 	and.w	r3, r3, #16
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01a      	beq.n	800a10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f6:	d10a      	bne.n	800a10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	605a      	str	r2, [r3, #4]
  }
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr

0800a13a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af02      	add	r7, sp, #8
 800a140:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a14a:	f7f7 ff83 	bl	8002054 <HAL_GetTick>
 800a14e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0308 	and.w	r3, r3, #8
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d10e      	bne.n	800a17c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a15e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f82f 	bl	800a1d0 <UART_WaitOnFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e025      	b.n	800a1c8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b04      	cmp	r3, #4
 800a188:	d10e      	bne.n	800a1a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a18a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f819 	bl	800a1d0 <UART_WaitOnFlagUntilTimeout>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e00f      	b.n	800a1c8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b09c      	sub	sp, #112	; 0x70
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e0:	e0a9      	b.n	800a336 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	f000 80a5 	beq.w	800a336 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ec:	f7f7 ff32 	bl	8002054 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <UART_WaitOnFlagUntilTimeout+0x32>
 800a1fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d140      	bne.n	800a284 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a216:	667b      	str	r3, [r7, #100]	; 0x64
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a220:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a222:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e6      	bne.n	800a202 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3308      	adds	r3, #8
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	f023 0301 	bic.w	r3, r3, #1
 800a24a:	663b      	str	r3, [r7, #96]	; 0x60
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3308      	adds	r3, #8
 800a252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a254:	64ba      	str	r2, [r7, #72]	; 0x48
 800a256:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a25a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e5      	bne.n	800a234 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e069      	b.n	800a358 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d051      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a29c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2a0:	d149      	bne.n	800a336 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a2cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d2:	e841 2300 	strex	r3, r2, [r1]
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1e6      	bne.n	800a2ac <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	e853 3f00 	ldrex	r3, [r3]
 800a2ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2fe:	623a      	str	r2, [r7, #32]
 800a300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	69f9      	ldr	r1, [r7, #28]
 800a304:	6a3a      	ldr	r2, [r7, #32]
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e5      	bne.n	800a2de <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e010      	b.n	800a358 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4013      	ands	r3, r2
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	429a      	cmp	r2, r3
 800a344:	bf0c      	ite	eq
 800a346:	2301      	moveq	r3, #1
 800a348:	2300      	movne	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	461a      	mov	r2, r3
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	429a      	cmp	r2, r3
 800a352:	f43f af46 	beq.w	800a1e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3770      	adds	r7, #112	; 0x70
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a360:	b480      	push	{r7}
 800a362:	b0a3      	sub	sp, #140	; 0x8c
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4613      	mov	r3, r2
 800a36c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	88fa      	ldrh	r2, [r7, #6]
 800a380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a392:	d10e      	bne.n	800a3b2 <UART_Start_Receive_IT+0x52>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d105      	bne.n	800a3a8 <UART_Start_Receive_IT+0x48>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a3a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3a6:	e02d      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	22ff      	movs	r2, #255	; 0xff
 800a3ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3b0:	e028      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10d      	bne.n	800a3d6 <UART_Start_Receive_IT+0x76>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d104      	bne.n	800a3cc <UART_Start_Receive_IT+0x6c>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3ca:	e01b      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	227f      	movs	r2, #127	; 0x7f
 800a3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3d4:	e016      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3de:	d10d      	bne.n	800a3fc <UART_Start_Receive_IT+0x9c>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <UART_Start_Receive_IT+0x92>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	227f      	movs	r2, #127	; 0x7f
 800a3ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3f0:	e008      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	223f      	movs	r2, #63	; 0x3f
 800a3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3fa:	e003      	b.n	800a404 <UART_Start_Receive_IT+0xa4>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2222      	movs	r2, #34	; 0x22
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3308      	adds	r3, #8
 800a41a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3308      	adds	r3, #8
 800a434:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a438:	673a      	str	r2, [r7, #112]	; 0x70
 800a43a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a43e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e3      	bne.n	800a414 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a454:	d153      	bne.n	800a4fe <UART_Start_Receive_IT+0x19e>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a45c:	88fa      	ldrh	r2, [r7, #6]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d34d      	bcc.n	800a4fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a46a:	d107      	bne.n	800a47c <UART_Start_Receive_IT+0x11c>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a4a      	ldr	r2, [pc, #296]	; (800a5a0 <UART_Start_Receive_IT+0x240>)
 800a478:	671a      	str	r2, [r3, #112]	; 0x70
 800a47a:	e002      	b.n	800a482 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4a49      	ldr	r2, [pc, #292]	; (800a5a4 <UART_Start_Receive_IT+0x244>)
 800a480:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01a      	beq.n	800a4c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e4      	bne.n	800a492 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d2:	e853 3f00 	ldrex	r3, [r3]
 800a4d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a4e8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e5      	bne.n	800a4c8 <UART_Start_Receive_IT+0x168>
 800a4fc:	e04a      	b.n	800a594 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a506:	d107      	bne.n	800a518 <UART_Start_Receive_IT+0x1b8>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a25      	ldr	r2, [pc, #148]	; (800a5a8 <UART_Start_Receive_IT+0x248>)
 800a514:	671a      	str	r2, [r3, #112]	; 0x70
 800a516:	e002      	b.n	800a51e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a24      	ldr	r2, [pc, #144]	; (800a5ac <UART_Start_Receive_IT+0x24c>)
 800a51c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d019      	beq.n	800a562 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a542:	677b      	str	r3, [r7, #116]	; 0x74
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a54c:	637b      	str	r3, [r7, #52]	; 0x34
 800a54e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_Start_Receive_IT+0x1ce>
 800a560:	e018      	b.n	800a594 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	613b      	str	r3, [r7, #16]
   return(result);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	f043 0320 	orr.w	r3, r3, #32
 800a576:	67bb      	str	r3, [r7, #120]	; 0x78
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a580:	623b      	str	r3, [r7, #32]
 800a582:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	69f9      	ldr	r1, [r7, #28]
 800a586:	6a3a      	ldr	r2, [r7, #32]
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	378c      	adds	r7, #140	; 0x8c
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr
 800a5a0:	0800ae6d 	.word	0x0800ae6d
 800a5a4:	0800ab75 	.word	0x0800ab75
 800a5a8:	0800aa13 	.word	0x0800aa13
 800a5ac:	0800a8b3 	.word	0x0800a8b3

0800a5b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b08f      	sub	sp, #60	; 0x3c
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	e853 3f00 	ldrex	r3, [r3]
 800a5c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1e6      	bne.n	800a5b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a600:	633b      	str	r3, [r7, #48]	; 0x30
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a60a:	61ba      	str	r2, [r7, #24]
 800a60c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6979      	ldr	r1, [r7, #20]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	613b      	str	r3, [r7, #16]
   return(result);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e5      	bne.n	800a5ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a626:	bf00      	nop
 800a628:	373c      	adds	r7, #60	; 0x3c
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b095      	sub	sp, #84	; 0x54
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a64c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a656:	643b      	str	r3, [r7, #64]	; 0x40
 800a658:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a65c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e6      	bne.n	800a638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	61fb      	str	r3, [r7, #28]
   return(result);
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a680:	f023 0301 	bic.w	r3, r3, #1
 800a684:	64bb      	str	r3, [r7, #72]	; 0x48
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a68e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e3      	bne.n	800a66a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d118      	bne.n	800a6dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	e853 3f00 	ldrex	r3, [r3]
 800a6b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f023 0310 	bic.w	r3, r3, #16
 800a6be:	647b      	str	r3, [r7, #68]	; 0x44
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c8:	61bb      	str	r3, [r7, #24]
 800a6ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6979      	ldr	r1, [r7, #20]
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	e841 2300 	strex	r3, r2, [r1]
 800a6d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e6      	bne.n	800a6aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a6f0:	bf00      	nop
 800a6f2:	3754      	adds	r7, #84	; 0x54
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr

0800a6fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b090      	sub	sp, #64	; 0x40
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d137      	bne.n	800a786 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	2200      	movs	r2, #0
 800a71a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	623b      	str	r3, [r7, #32]
   return(result);
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a734:	63bb      	str	r3, [r7, #56]	; 0x38
 800a736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a73e:	633a      	str	r2, [r7, #48]	; 0x30
 800a740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e5      	bne.n	800a71e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
 800a768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a770:	61fb      	str	r3, [r7, #28]
 800a772:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a774:	69b9      	ldr	r1, [r7, #24]
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	e841 2300 	strex	r3, r2, [r1]
 800a77c:	617b      	str	r3, [r7, #20]
   return(result);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e6      	bne.n	800a752 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a784:	e002      	b.n	800a78c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a786:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a788:	f7f8 fa0e 	bl	8002ba8 <HAL_UART_TxCpltCallback>
}
 800a78c:	bf00      	nop
 800a78e:	3740      	adds	r7, #64	; 0x40
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff f996 	bl	8009ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d8:	2b80      	cmp	r3, #128	; 0x80
 800a7da:	d109      	bne.n	800a7f0 <UART_DMAError+0x40>
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b21      	cmp	r3, #33	; 0x21
 800a7e0:	d106      	bne.n	800a7f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a7ea:	6978      	ldr	r0, [r7, #20]
 800a7ec:	f7ff fee0 	bl	800a5b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	d109      	bne.n	800a812 <UART_DMAError+0x62>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b22      	cmp	r3, #34	; 0x22
 800a802:	d106      	bne.n	800a812 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2200      	movs	r2, #0
 800a808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a80c:	6978      	ldr	r0, [r7, #20]
 800a80e:	f7ff ff0f 	bl	800a630 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a818:	f043 0210 	orr.w	r2, r3, #16
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a822:	6978      	ldr	r0, [r7, #20]
 800a824:	f7ff f95f 	bl	8009ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a828:	bf00      	nop
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff f949 	bl	8009ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	60bb      	str	r3, [r7, #8]
   return(result);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a878:	61fb      	str	r3, [r7, #28]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6979      	ldr	r1, [r7, #20]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	613b      	str	r3, [r7, #16]
   return(result);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e6      	bne.n	800a864 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7f8 f97f 	bl	8002ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8aa:	bf00      	nop
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b096      	sub	sp, #88	; 0x58
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ca:	2b22      	cmp	r3, #34	; 0x22
 800a8cc:	f040 8095 	bne.w	800a9fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a8da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a8de:	b2d9      	uxtb	r1, r3
 800a8e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ea:	400a      	ands	r2, r1
 800a8ec:	b2d2      	uxtb	r2, r2
 800a8ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a900:	b29b      	uxth	r3, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a912:	b29b      	uxth	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d178      	bne.n	800aa0a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a92c:	653b      	str	r3, [r7, #80]	; 0x50
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a936:	647b      	str	r3, [r7, #68]	; 0x44
 800a938:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a93c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	623b      	str	r3, [r7, #32]
   return(result);
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a96a:	633a      	str	r2, [r7, #48]	; 0x30
 800a96c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e5      	bne.n	800a94a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2220      	movs	r2, #32
 800a982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a990:	2b01      	cmp	r3, #1
 800a992:	d12e      	bne.n	800a9f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f023 0310 	bic.w	r3, r3, #16
 800a9ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b8:	61fb      	str	r3, [r7, #28]
 800a9ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	69b9      	ldr	r1, [r7, #24]
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e6      	bne.n	800a99a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	f003 0310 	and.w	r3, r3, #16
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d103      	bne.n	800a9e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2210      	movs	r2, #16
 800a9e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff f884 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9f0:	e00b      	b.n	800aa0a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7f8 f8ee 	bl	8002bd4 <HAL_UART_RxCpltCallback>
}
 800a9f8:	e007      	b.n	800aa0a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	699a      	ldr	r2, [r3, #24]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0208 	orr.w	r2, r2, #8
 800aa08:	619a      	str	r2, [r3, #24]
}
 800aa0a:	bf00      	nop
 800aa0c:	3758      	adds	r7, #88	; 0x58
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b096      	sub	sp, #88	; 0x58
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2a:	2b22      	cmp	r3, #34	; 0x22
 800aa2c:	f040 8095 	bne.w	800ab5a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa40:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800aa44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aa48:	4013      	ands	r3, r2
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa54:	1c9a      	adds	r2, r3, #2
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d178      	bne.n	800ab6a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40
 800aa98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e6      	bne.n	800aa78 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	f023 0301 	bic.w	r3, r3, #1
 800aac0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aacc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e5      	bne.n	800aaaa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d12e      	bne.n	800ab52 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f023 0310 	bic.w	r3, r3, #16
 800ab0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab18:	61bb      	str	r3, [r7, #24]
 800ab1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6979      	ldr	r1, [r7, #20]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	613b      	str	r3, [r7, #16]
   return(result);
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e6      	bne.n	800aafa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f003 0310 	and.w	r3, r3, #16
 800ab36:	2b10      	cmp	r3, #16
 800ab38:	d103      	bne.n	800ab42 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2210      	movs	r2, #16
 800ab40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fe ffd4 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab50:	e00b      	b.n	800ab6a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7f8 f83e 	bl	8002bd4 <HAL_UART_RxCpltCallback>
}
 800ab58:	e007      	b.n	800ab6a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f042 0208 	orr.w	r2, r2, #8
 800ab68:	619a      	str	r2, [r3, #24]
}
 800ab6a:	bf00      	nop
 800ab6c:	3758      	adds	r7, #88	; 0x58
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b0a6      	sub	sp, #152	; 0x98
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab82:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abaa:	2b22      	cmp	r3, #34	; 0x22
 800abac:	f040 814f 	bne.w	800ae4e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800abb6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abba:	e0f6      	b.n	800adaa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abc6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800abca:	b2d9      	uxtb	r1, r3
 800abcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd6:	400a      	ands	r2, r1
 800abd8:	b2d2      	uxtb	r2, r2
 800abda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abec:	b29b      	uxth	r3, r3
 800abee:	3b01      	subs	r3, #1
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ac02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d053      	beq.n	800acb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d011      	beq.n	800ac3e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ac1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac34:	f043 0201 	orr.w	r2, r3, #1
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ac4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00b      	beq.n	800ac6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac64:	f043 0204 	orr.w	r2, r3, #4
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d011      	beq.n	800ac9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2204      	movs	r2, #4
 800ac8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac94:	f043 0202 	orr.w	r2, r3, #2
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7fe ff1c 	bl	8009ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d173      	bne.n	800adaa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800acd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ace4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ace6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800acea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800acf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e4      	bne.n	800acc2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad02:	e853 3f00 	ldrex	r3, [r3]
 800ad06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad0e:	f023 0301 	bic.w	r3, r3, #1
 800ad12:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad1c:	657a      	str	r2, [r7, #84]	; 0x54
 800ad1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad24:	e841 2300 	strex	r3, r2, [r1]
 800ad28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1e3      	bne.n	800acf8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d12e      	bne.n	800ada4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad54:	e853 3f00 	ldrex	r3, [r3]
 800ad58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f023 0310 	bic.w	r3, r3, #16
 800ad60:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e6      	bne.n	800ad4c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	f003 0310 	and.w	r3, r3, #16
 800ad88:	2b10      	cmp	r3, #16
 800ad8a:	d103      	bne.n	800ad94 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2210      	movs	r2, #16
 800ad92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe feab 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
 800ada2:	e002      	b.n	800adaa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7f7 ff15 	bl	8002bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d006      	beq.n	800adc0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800adb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f47f aefe 	bne.w	800abbc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800adca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800adce:	2b00      	cmp	r3, #0
 800add0:	d045      	beq.n	800ae5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800add8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800addc:	429a      	cmp	r2, r3
 800adde:	d23e      	bcs.n	800ae5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3308      	adds	r3, #8
 800ade6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	e853 3f00 	ldrex	r3, [r3]
 800adee:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adf6:	673b      	str	r3, [r7, #112]	; 0x70
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3308      	adds	r3, #8
 800adfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae08:	e841 2300 	strex	r3, r2, [r1]
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1e5      	bne.n	800ade0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a14      	ldr	r2, [pc, #80]	; (800ae68 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ae18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f043 0320 	orr.w	r3, r3, #32
 800ae2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6979      	ldr	r1, [r7, #20]
 800ae3e:	69ba      	ldr	r2, [r7, #24]
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	613b      	str	r3, [r7, #16]
   return(result);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e6      	bne.n	800ae1a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae4c:	e007      	b.n	800ae5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f042 0208 	orr.w	r2, r2, #8
 800ae5c:	619a      	str	r2, [r3, #24]
}
 800ae5e:	bf00      	nop
 800ae60:	3798      	adds	r7, #152	; 0x98
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	0800a8b3 	.word	0x0800a8b3

0800ae6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b0a8      	sub	sp, #160	; 0xa0
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae7a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea2:	2b22      	cmp	r3, #34	; 0x22
 800aea4:	f040 8153 	bne.w	800b14e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aeae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aeb2:	e0fa      	b.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800aec6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800aeca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aece:	4013      	ands	r3, r2
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aed6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aedc:	1c9a      	adds	r2, r3, #2
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aefe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b00      	cmp	r3, #0
 800af08:	d053      	beq.n	800afb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d011      	beq.n	800af3a <UART_RxISR_16BIT_FIFOEN+0xce>
 800af16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af30:	f043 0201 	orr.w	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d011      	beq.n	800af6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2202      	movs	r2, #2
 800af58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af60:	f043 0204 	orr.w	r2, r3, #4
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d011      	beq.n	800af9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00b      	beq.n	800af9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2204      	movs	r2, #4
 800af88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af90:	f043 0202 	orr.w	r2, r3, #2
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7fe fd9e 	bl	8009ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d175      	bne.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afe2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e4      	bne.n	800afbe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3308      	adds	r3, #8
 800affa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b00a:	f023 0301 	bic.w	r3, r3, #1
 800b00e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3308      	adds	r3, #8
 800b018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b01c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b01e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e1      	bne.n	800aff4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2220      	movs	r2, #32
 800b034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d12e      	bne.n	800b0a4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	f023 0310 	bic.w	r3, r3, #16
 800b060:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b06a:	647b      	str	r3, [r7, #68]	; 0x44
 800b06c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e6      	bne.n	800b04c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d103      	bne.n	800b094 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2210      	movs	r2, #16
 800b092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7fe fd2b 	bl	8009af8 <HAL_UARTEx_RxEventCallback>
 800b0a2:	e002      	b.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7f7 fd95 	bl	8002bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d006      	beq.n	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b0b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f47f aefa 	bne.w	800aeb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d045      	beq.n	800b15e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0d8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d23e      	bcs.n	800b15e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	623b      	str	r3, [r7, #32]
   return(result);
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0f6:	677b      	str	r3, [r7, #116]	; 0x74
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b100:	633a      	str	r2, [r7, #48]	; 0x30
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e5      	bne.n	800b0e0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a14      	ldr	r2, [pc, #80]	; (800b168 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b118:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	60fb      	str	r3, [r7, #12]
   return(result);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f043 0320 	orr.w	r3, r3, #32
 800b12e:	673b      	str	r3, [r7, #112]	; 0x70
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b138:	61fb      	str	r3, [r7, #28]
 800b13a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	69b9      	ldr	r1, [r7, #24]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	617b      	str	r3, [r7, #20]
   return(result);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e6      	bne.n	800b11a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b14c:	e007      	b.n	800b15e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	699a      	ldr	r2, [r3, #24]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f042 0208 	orr.w	r2, r2, #8
 800b15c:	619a      	str	r2, [r3, #24]
}
 800b15e:	bf00      	nop
 800b160:	37a0      	adds	r7, #160	; 0xa0
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	0800aa13 	.word	0x0800aa13

0800b16c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	bc80      	pop	{r7}
 800b17c:	4770      	bx	lr

0800b17e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bc80      	pop	{r7}
 800b18e:	4770      	bx	lr

0800b190 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bc80      	pop	{r7}
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b088      	sub	sp, #32
 800b1a6:	af02      	add	r7, sp, #8
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	1d3b      	adds	r3, r7, #4
 800b1ac:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e046      	b.n	800b250 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2224      	movs	r2, #36	; 0x24
 800b1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0201 	bic.w	r2, r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d105      	bne.n	800b208 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b1fc:	1d3b      	adds	r3, r7, #4
 800b1fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f911 	bl	800b42a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f042 0201 	orr.w	r2, r2, #1
 800b216:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b218:	f7f6 ff1c 	bl	8002054 <HAL_GetTick>
 800b21c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b21e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2200      	movs	r2, #0
 800b228:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7fe ffcf 	bl	800a1d0 <UART_WaitOnFlagUntilTimeout>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	e003      	b.n	800b246 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b089      	sub	sp, #36	; 0x24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b266:	2b01      	cmp	r3, #1
 800b268:	d101      	bne.n	800b26e <HAL_UARTEx_EnableStopMode+0x16>
 800b26a:	2302      	movs	r3, #2
 800b26c:	e021      	b.n	800b2b2 <HAL_UARTEx_EnableStopMode+0x5a>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	e853 3f00 	ldrex	r3, [r3]
 800b282:	60bb      	str	r3, [r7, #8]
   return(result);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f043 0302 	orr.w	r3, r3, #2
 800b28a:	61fb      	str	r3, [r7, #28]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	61bb      	str	r3, [r7, #24]
 800b296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6979      	ldr	r1, [r7, #20]
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e6      	bne.n	800b276 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3724      	adds	r7, #36	; 0x24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d101      	bne.n	800b2d2 <HAL_UARTEx_EnableFifoMode+0x16>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e02b      	b.n	800b32a <HAL_UARTEx_EnableFifoMode+0x6e>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2224      	movs	r2, #36	; 0x24
 800b2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b308:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f8ac 	bl	800b470 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b342:	2b01      	cmp	r3, #1
 800b344:	d101      	bne.n	800b34a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b346:	2302      	movs	r3, #2
 800b348:	e02d      	b.n	800b3a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2224      	movs	r2, #36	; 0x24
 800b356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0201 	bic.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f872 	bl	800b470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d101      	bne.n	800b3c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	e02d      	b.n	800b422 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2224      	movs	r2, #36	; 0x24
 800b3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f022 0201 	bic.w	r2, r2, #1
 800b3ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f834 	bl	800b470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2220      	movs	r2, #32
 800b414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	1d3b      	adds	r3, r7, #4
 800b434:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f023 0210 	bic.w	r2, r3, #16
 800b442:	893b      	ldrh	r3, [r7, #8]
 800b444:	4619      	mov	r1, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800b458:	7abb      	ldrb	r3, [r7, #10]
 800b45a:	061a      	lsls	r2, r3, #24
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	430a      	orrs	r2, r1
 800b462:	605a      	str	r2, [r3, #4]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr
	...

0800b470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d108      	bne.n	800b492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b490:	e031      	b.n	800b4f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b492:	2308      	movs	r3, #8
 800b494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b496:	2308      	movs	r3, #8
 800b498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	0e5b      	lsrs	r3, r3, #25
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	0f5b      	lsrs	r3, r3, #29
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0307 	and.w	r3, r3, #7
 800b4b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	7b3a      	ldrb	r2, [r7, #12]
 800b4be:	4910      	ldr	r1, [pc, #64]	; (800b500 <UARTEx_SetNbDataToProcess+0x90>)
 800b4c0:	5c8a      	ldrb	r2, [r1, r2]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4c6:	7b3a      	ldrb	r2, [r7, #12]
 800b4c8:	490e      	ldr	r1, [pc, #56]	; (800b504 <UARTEx_SetNbDataToProcess+0x94>)
 800b4ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	7b7a      	ldrb	r2, [r7, #13]
 800b4dc:	4908      	ldr	r1, [pc, #32]	; (800b500 <UARTEx_SetNbDataToProcess+0x90>)
 800b4de:	5c8a      	ldrb	r2, [r1, r2]
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4e4:	7b7a      	ldrb	r2, [r7, #13]
 800b4e6:	4907      	ldr	r1, [pc, #28]	; (800b504 <UARTEx_SetNbDataToProcess+0x94>)
 800b4e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr
 800b500:	0801d898 	.word	0x0801d898
 800b504:	0801d8a0 	.word	0x0801d8a0

0800b508 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b50c:	f7f6 fc50 	bl	8001db0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b510:	f000 f820 	bl	800b554 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b514:	bf00      	nop
 800b516:	bd80      	pop	{r7, pc}

0800b518 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	f010 fde4 	bl	801c0ec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b524:	bf00      	nop
 800b526:	bd80      	pop	{r7, pc}

0800b528 <__NVIC_SystemReset>:
{
 800b528:	b480      	push	{r7}
 800b52a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b52c:	f3bf 8f4f 	dsb	sy
}
 800b530:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b532:	4b06      	ldr	r3, [pc, #24]	; (800b54c <__NVIC_SystemReset+0x24>)
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b53a:	4904      	ldr	r1, [pc, #16]	; (800b54c <__NVIC_SystemReset+0x24>)
 800b53c:	4b04      	ldr	r3, [pc, #16]	; (800b550 <__NVIC_SystemReset+0x28>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b542:	f3bf 8f4f 	dsb	sy
}
 800b546:	bf00      	nop
    __NOP();
 800b548:	bf00      	nop
 800b54a:	e7fd      	b.n	800b548 <__NVIC_SystemReset+0x20>
 800b54c:	e000ed00 	.word	0xe000ed00
 800b550:	05fa0004 	.word	0x05fa0004

0800b554 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
	uint32_t feature_version = 0UL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */
	  /* Get LoRaWAN APP version*/
	  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b55e:	2300      	movs	r3, #0
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	2302      	movs	r3, #2
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	2301      	movs	r3, #1
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	4b4b      	ldr	r3, [pc, #300]	; (800b698 <LoRaWAN_Init+0x144>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	2002      	movs	r0, #2
 800b572:	f011 fa09 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(APP_VERSION_MAIN),
	          (uint8_t)(APP_VERSION_SUB1),
	          (uint8_t)(APP_VERSION_SUB2));

	  /* Get MW LoRaWAN info */
	  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b576:	2300      	movs	r3, #0
 800b578:	9302      	str	r3, [sp, #8]
 800b57a:	2304      	movs	r3, #4
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	2302      	movs	r3, #2
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	4b46      	ldr	r3, [pc, #280]	; (800b69c <LoRaWAN_Init+0x148>)
 800b584:	2200      	movs	r2, #0
 800b586:	2100      	movs	r1, #0
 800b588:	2002      	movs	r0, #2
 800b58a:	f011 f9fd 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(LORAWAN_VERSION_MAIN),
	          (uint8_t)(LORAWAN_VERSION_SUB1),
	          (uint8_t)(LORAWAN_VERSION_SUB2));

	  /* Get MW SubGhz_Phy info */
	  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b58e:	2300      	movs	r3, #0
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	2302      	movs	r3, #2
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	2301      	movs	r3, #1
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	4b41      	ldr	r3, [pc, #260]	; (800b6a0 <LoRaWAN_Init+0x14c>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	2002      	movs	r0, #2
 800b5a2:	f011 f9f1 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

	  /* Get LoRaWAN Link Layer info */
	  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b5a6:	1d3b      	adds	r3, r7, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f002 fef6 	bl	800e39c <LmHandlerGetVersion>
	  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	0e1b      	lsrs	r3, r3, #24
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	0c1b      	lsrs	r3, r3, #16
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	4619      	mov	r1, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	9302      	str	r3, [sp, #8]
 800b5c8:	9101      	str	r1, [sp, #4]
 800b5ca:	9200      	str	r2, [sp, #0]
 800b5cc:	4b35      	ldr	r3, [pc, #212]	; (800b6a4 <LoRaWAN_Init+0x150>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	2002      	movs	r0, #2
 800b5d4:	f011 f9d8 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(feature_version >> 24),
	          (uint8_t)(feature_version >> 16),
	          (uint8_t)(feature_version >> 8));

	  /* Get LoRaWAN Regional Parameters info */
	  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b5d8:	1d3b      	adds	r3, r7, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	2001      	movs	r0, #1
 800b5de:	f002 fedd 	bl	800e39c <LmHandlerGetVersion>
	  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	0e1b      	lsrs	r3, r3, #24
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	0c1b      	lsrs	r3, r3, #16
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	0a1b      	lsrs	r3, r3, #8
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	b2c0      	uxtb	r0, r0
 800b5fc:	9003      	str	r0, [sp, #12]
 800b5fe:	9302      	str	r3, [sp, #8]
 800b600:	9101      	str	r1, [sp, #4]
 800b602:	9200      	str	r2, [sp, #0]
 800b604:	4b28      	ldr	r3, [pc, #160]	; (800b6a8 <LoRaWAN_Init+0x154>)
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	2002      	movs	r0, #2
 800b60c:	f011 f9bc 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(feature_version >> 16),
	          (uint8_t)(feature_version >> 8),
	          (uint8_t)(feature_version));
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b610:	2300      	movs	r3, #0
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <LoRaWAN_Init+0x158>)
 800b616:	2200      	movs	r2, #0
 800b618:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b61c:	4824      	ldr	r0, [pc, #144]	; (800b6b0 <LoRaWAN_Init+0x15c>)
 800b61e:	f010 ff05 	bl	801c42c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b622:	4a24      	ldr	r2, [pc, #144]	; (800b6b4 <LoRaWAN_Init+0x160>)
 800b624:	2100      	movs	r1, #0
 800b626:	2001      	movs	r0, #1
 800b628:	f010 fe5c 	bl	801c2e4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b62c:	4a22      	ldr	r2, [pc, #136]	; (800b6b8 <LoRaWAN_Init+0x164>)
 800b62e:	2100      	movs	r1, #0
 800b630:	2002      	movs	r0, #2
 800b632:	f010 fe57 	bl	801c2e4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b636:	4a21      	ldr	r2, [pc, #132]	; (800b6bc <LoRaWAN_Init+0x168>)
 800b638:	2100      	movs	r1, #0
 800b63a:	2004      	movs	r0, #4
 800b63c:	f010 fe52 	bl	801c2e4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b640:	4a1f      	ldr	r2, [pc, #124]	; (800b6c0 <LoRaWAN_Init+0x16c>)
 800b642:	2100      	movs	r1, #0
 800b644:	2008      	movs	r0, #8
 800b646:	f010 fe4d 	bl	801c2e4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b64a:	f000 faad 	bl	800bba8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b64e:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800b652:	481c      	ldr	r0, [pc, #112]	; (800b6c4 <LoRaWAN_Init+0x170>)
 800b654:	f001 ff62 	bl	800d51c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b658:	481b      	ldr	r0, [pc, #108]	; (800b6c8 <LoRaWAN_Init+0x174>)
 800b65a:	f001 ffbd 	bl	800d5d8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b65e:	4b1b      	ldr	r3, [pc, #108]	; (800b6cc <LoRaWAN_Init+0x178>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4a1b      	ldr	r2, [pc, #108]	; (800b6d0 <LoRaWAN_Init+0x17c>)
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f002 f953 	bl	800d914 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b66e:	4b19      	ldr	r3, [pc, #100]	; (800b6d4 <LoRaWAN_Init+0x180>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10b      	bne.n	800b68e <LoRaWAN_Init+0x13a>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <LoRaWAN_Init+0x184>)
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	2300      	movs	r3, #0
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <LoRaWAN_Init+0x188>)
 800b680:	2200      	movs	r2, #0
 800b682:	4817      	ldr	r0, [pc, #92]	; (800b6e0 <LoRaWAN_Init+0x18c>)
 800b684:	f010 fed2 	bl	801c42c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b688:	4815      	ldr	r0, [pc, #84]	; (800b6e0 <LoRaWAN_Init+0x18c>)
 800b68a:	f010 ff05 	bl	801c498 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	0801d034 	.word	0x0801d034
 800b69c:	0801d058 	.word	0x0801d058
 800b6a0:	0801d07c 	.word	0x0801d07c
 800b6a4:	0801d0a0 	.word	0x0801d0a0
 800b6a8:	0801d0c4 	.word	0x0801d0c4
 800b6ac:	0800ba71 	.word	0x0800ba71
 800b6b0:	200004e8 	.word	0x200004e8
 800b6b4:	0800d8a9 	.word	0x0800d8a9
 800b6b8:	0800b6f9 	.word	0x0800b6f9
 800b6bc:	0800ba95 	.word	0x0800ba95
 800b6c0:	0800b9f1 	.word	0x0800b9f1
 800b6c4:	2000000c 	.word	0x2000000c
 800b6c8:	20000058 	.word	0x20000058
 800b6cc:	20000009 	.word	0x20000009
 800b6d0:	200004cd 	.word	0x200004cd
 800b6d4:	200004ce 	.word	0x200004ce
 800b6d8:	2000006c 	.word	0x2000006c
 800b6dc:	0800b81d 	.word	0x0800b81d
 800b6e0:	200004d0 	.word	0x200004d0

0800b6e4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bc80      	pop	{r7}
 800b6f6:	4770      	bx	lr

0800b6f8 <SendTxData>:

static void SendTxData(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
	if (LmHandlerIsBusy() == true) {
 800b6fe:	f002 f8af 	bl	800d860 <LmHandlerIsBusy>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d172      	bne.n	800b7ee <SendTxData+0xf6>
	    return;
	  }

	  uint8_t isPending = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b70c:	f3ef 8310 	mrs	r3, PRIMASK
 800b710:	60bb      	str	r3, [r7, #8]
  return(result);
 800b712:	68bb      	ldr	r3, [r7, #8]
	  CRITICAL_SECTION_BEGIN();
 800b714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b716:	b672      	cpsid	i
}
 800b718:	bf00      	nop
	  isPending = IsTxFramePending;
 800b71a:	4b37      	ldr	r3, [pc, #220]	; (800b7f8 <SendTxData+0x100>)
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	77fb      	strb	r3, [r7, #31]
	  IsTxFramePending = 0;
 800b720:	4b35      	ldr	r3, [pc, #212]	; (800b7f8 <SendTxData+0x100>)
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f383 8810 	msr	PRIMASK, r3
}
 800b730:	bf00      	nop
	  CRITICAL_SECTION_END();

	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800b732:	2200      	movs	r2, #0
 800b734:	2140      	movs	r1, #64	; 0x40
 800b736:	4831      	ldr	r0, [pc, #196]	; (800b7fc <SendTxData+0x104>)
 800b738:	f7f9 fe66 	bl	8005408 <HAL_GPIO_WritePin>

	  /*if (TxPeriodicity != 60000){
		  OnTxPeriodicityChanged(60000);
	  }*/

	  if (isPending == 1)
 800b73c:	7ffb      	ldrb	r3, [r7, #31]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d156      	bne.n	800b7f0 <SendTxData+0xf8>
	  {
	    LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b742:	23ff      	movs	r3, #255	; 0xff
 800b744:	75fb      	strb	r3, [r7, #23]
	    //uint16_t dist_mm = getSensorReading(2, 150, 7);
	    uint16_t dist_mm = 5;
 800b746:	2305      	movs	r3, #5
 800b748:	82bb      	strh	r3, [r7, #20]
	    uint16_t batt_level_adc = 5;
 800b74a:	2305      	movs	r3, #5
 800b74c:	827b      	strh	r3, [r7, #18]
	    		//SYS_GetBatteryLevel();
	    AppDataBuffer[0] = (uint8_t)dist_mm;
 800b74e:	8abb      	ldrh	r3, [r7, #20]
 800b750:	b2da      	uxtb	r2, r3
 800b752:	4b2b      	ldr	r3, [pc, #172]	; (800b800 <SendTxData+0x108>)
 800b754:	701a      	strb	r2, [r3, #0]
	    APP_LOG(TS_OFF, VLEVEL_L, "Distance (Low byte): %x\n", AppDataBuffer[0]);
 800b756:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <SendTxData+0x108>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4b29      	ldr	r3, [pc, #164]	; (800b804 <SendTxData+0x10c>)
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	2001      	movs	r0, #1
 800b764:	f011 f910 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	    AppDataBuffer[1] = (uint8_t)(dist_mm >> 8);
 800b768:	8abb      	ldrh	r3, [r7, #20]
 800b76a:	0a1b      	lsrs	r3, r3, #8
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	4b23      	ldr	r3, [pc, #140]	; (800b800 <SendTxData+0x108>)
 800b772:	705a      	strb	r2, [r3, #1]
	    APP_LOG(TS_OFF, VLEVEL_L, "Distance (High byte): %x\n", AppDataBuffer[1]);
 800b774:	4b22      	ldr	r3, [pc, #136]	; (800b800 <SendTxData+0x108>)
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	4b23      	ldr	r3, [pc, #140]	; (800b808 <SendTxData+0x110>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	2100      	movs	r1, #0
 800b780:	2001      	movs	r0, #1
 800b782:	f011 f901 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	    AppDataBuffer[2] = (uint8_t)batt_level_adc;
 800b786:	8a7b      	ldrh	r3, [r7, #18]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <SendTxData+0x108>)
 800b78c:	709a      	strb	r2, [r3, #2]
	    APP_LOG(TS_OFF, VLEVEL_L, "Battery Level (Low byte): %x\n",
 800b78e:	4b1c      	ldr	r3, [pc, #112]	; (800b800 <SendTxData+0x108>)
 800b790:	789b      	ldrb	r3, [r3, #2]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4b1d      	ldr	r3, [pc, #116]	; (800b80c <SendTxData+0x114>)
 800b796:	2200      	movs	r2, #0
 800b798:	2100      	movs	r1, #0
 800b79a:	2001      	movs	r0, #1
 800b79c:	f011 f8f4 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	            AppDataBuffer[2]);
	    AppDataBuffer[3] = (uint8_t)(batt_level_adc >> 8);
 800b7a0:	8a7b      	ldrh	r3, [r7, #18]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <SendTxData+0x108>)
 800b7aa:	70da      	strb	r2, [r3, #3]
	    APP_LOG(TS_OFF, VLEVEL_L, "Battery Level (High byte): %x\n",
 800b7ac:	4b14      	ldr	r3, [pc, #80]	; (800b800 <SendTxData+0x108>)
 800b7ae:	78db      	ldrb	r3, [r3, #3]
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	4b17      	ldr	r3, [pc, #92]	; (800b810 <SendTxData+0x118>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f011 f8e5 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	            AppDataBuffer[3]);
	    LmHandlerAppData_t appData = {
 800b7be:	4a15      	ldr	r2, [pc, #84]	; (800b814 <SendTxData+0x11c>)
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7c6:	e883 0003 	stmia.w	r3, {r0, r1}
	        .Buffer = AppDataBuffer, .BufferSize = 4, .Port = 1};
	    status = LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800b7ca:	463b      	mov	r3, r7
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 f93d 	bl	800da50 <LmHandlerSend>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]
	    APP_LOG(TS_ON, VLEVEL_L, "Uplink send %s\r\n", status);
 800b7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <SendTxData+0x120>)
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	f011 f8ce 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800b7ec:	e000      	b.n	800b7f0 <SendTxData+0xf8>
	    return;
 800b7ee:	bf00      	nop
	  }
  /* USER CODE END SendTxData_1 */
}
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200004cc 	.word	0x200004cc
 800b7fc:	48000400 	.word	0x48000400
 800b800:	200004b8 	.word	0x200004b8
 800b804:	0801d0e8 	.word	0x0801d0e8
 800b808:	0801d104 	.word	0x0801d104
 800b80c:	0801d120 	.word	0x0801d120
 800b810:	0801d140 	.word	0x0801d140
 800b814:	0801d174 	.word	0x0801d174
 800b818:	0801d160 	.word	0x0801d160

0800b81c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	 UTIL_TIMER_Stop(&TxTimer);
 800b824:	4808      	ldr	r0, [pc, #32]	; (800b848 <OnTxTimerEvent+0x2c>)
 800b826:	f010 fea5 	bl	801c574 <UTIL_TIMER_Stop>
	 IsTxFramePending = 1;
 800b82a:	4b08      	ldr	r3, [pc, #32]	; (800b84c <OnTxTimerEvent+0x30>)
 800b82c:	2201      	movs	r2, #1
 800b82e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b830:	2100      	movs	r1, #0
 800b832:	2002      	movs	r0, #2
 800b834:	f010 fd78 	bl	801c328 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b838:	4803      	ldr	r0, [pc, #12]	; (800b848 <OnTxTimerEvent+0x2c>)
 800b83a:	f010 fe2d 	bl	801c498 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200004d0 	.word	0x200004d0
 800b84c:	200004cc 	.word	0x200004cc

0800b850 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af04      	add	r7, sp, #16
 800b856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
	if ((params != NULL))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d03e      	beq.n	800b8dc <OnTxData+0x8c>
	  {
	    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
	    if (params->IsMcpsConfirm != 0)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d03a      	beq.n	800b8dc <OnTxData+0x8c>
	    {

	      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b866:	4b1f      	ldr	r3, [pc, #124]	; (800b8e4 <OnTxData+0x94>)
 800b868:	2200      	movs	r2, #0
 800b86a:	2100      	movs	r1, #0
 800b86c:	2002      	movs	r0, #2
 800b86e:	f011 f88b 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	7c12      	ldrb	r2, [r2, #16]
 800b87a:	4611      	mov	r1, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b882:	4610      	mov	r0, r2
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b88a:	9203      	str	r2, [sp, #12]
 800b88c:	9002      	str	r0, [sp, #8]
 800b88e:	9101      	str	r1, [sp, #4]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <OnTxData+0x98>)
 800b894:	2200      	movs	r2, #0
 800b896:	2100      	movs	r1, #0
 800b898:	2003      	movs	r0, #3
 800b89a:	f011 f875 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	              params->AppData.Port, params->Datarate, params->TxPower);

	      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <OnTxData+0x9c>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	2003      	movs	r0, #3
 800b8a6:	f011 f86f 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7a1b      	ldrb	r3, [r3, #8]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d10e      	bne.n	800b8d0 <OnTxData+0x80>
	      {
	        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7a5b      	ldrb	r3, [r3, #9]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <OnTxData+0x6e>
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <OnTxData+0xa0>)
 800b8bc:	e000      	b.n	800b8c0 <OnTxData+0x70>
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <OnTxData+0xa4>)
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <OnTxData+0xa8>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	2003      	movs	r0, #3
 800b8ca:	f011 f85d 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
	        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
	      }
	    }
	  }
  /* USER CODE END OnTxData_1 */
}
 800b8ce:	e005      	b.n	800b8dc <OnTxData+0x8c>
	        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <OnTxData+0xac>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	2003      	movs	r0, #3
 800b8d8:	f011 f856 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	0801d17c 	.word	0x0801d17c
 800b8e8:	0801d1b0 	.word	0x0801d1b0
 800b8ec:	0801d1e4 	.word	0x0801d1e4
 800b8f0:	0801d1f4 	.word	0x0801d1f4
 800b8f4:	0801d1f8 	.word	0x0801d1f8
 800b8f8:	0801d200 	.word	0x0801d200
 800b8fc:	0801d214 	.word	0x0801d214

0800b900 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	    }

	    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
	  }*/
  /* USER CODE END OnJoinRequest_1 */
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bc80      	pop	{r7}
 800b910:	4770      	bx	lr

0800b912 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	bc80      	pop	{r7}
 800b922:	4770      	bx	lr

0800b924 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	bc80      	pop	{r7}
 800b936:	4770      	bx	lr

0800b938 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b93c:	2100      	movs	r1, #0
 800b93e:	2001      	movs	r0, #1
 800b940:	f010 fcf2 	bl	801c328 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b944:	bf00      	nop
 800b946:	bd80      	pop	{r7, pc}

0800b948 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b950:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <OnTxPeriodicityChanged+0x40>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b956:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <OnTxPeriodicityChanged+0x40>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d103      	bne.n	800b966 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <OnTxPeriodicityChanged+0x40>)
 800b960:	f242 7210 	movw	r2, #10000	; 0x2710
 800b964:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b966:	4809      	ldr	r0, [pc, #36]	; (800b98c <OnTxPeriodicityChanged+0x44>)
 800b968:	f010 fe04 	bl	801c574 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b96c:	4b06      	ldr	r3, [pc, #24]	; (800b988 <OnTxPeriodicityChanged+0x40>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4619      	mov	r1, r3
 800b972:	4806      	ldr	r0, [pc, #24]	; (800b98c <OnTxPeriodicityChanged+0x44>)
 800b974:	f010 fe6e 	bl	801c654 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b978:	4804      	ldr	r0, [pc, #16]	; (800b98c <OnTxPeriodicityChanged+0x44>)
 800b97a:	f010 fd8d 	bl	801c498 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2000006c 	.word	0x2000006c
 800b98c:	200004d0 	.word	0x200004d0

0800b990 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b99a:	4a04      	ldr	r2, [pc, #16]	; (800b9ac <OnTxFrameCtrlChanged+0x1c>)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bc80      	pop	{r7}
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	20000058 	.word	0x20000058

0800b9b0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b9ba:	4a04      	ldr	r2, [pc, #16]	; (800b9cc <OnPingSlotPeriodicityChanged+0x1c>)
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bc80      	pop	{r7}
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20000058 	.word	0x20000058

0800b9d0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b9d4:	f002 fd13 	bl	800e3fe <LmHandlerHalt>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <OnSystemReset+0x1c>
 800b9de:	f002 f81b 	bl	800da18 <LmHandlerJoinStatus>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d101      	bne.n	800b9ec <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b9e8:	f7ff fd9e 	bl	800b528 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b9ec:	bf00      	nop
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <StopJoin>:

static void StopJoin(void)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b9f4:	4817      	ldr	r0, [pc, #92]	; (800ba54 <StopJoin+0x64>)
 800b9f6:	f010 fdbd 	bl	801c574 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b9fa:	f002 fcf3 	bl	800e3e4 <LmHandlerStop>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d006      	beq.n	800ba12 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ba04:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <StopJoin+0x68>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	2002      	movs	r0, #2
 800ba0c:	f010 ffbc 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800ba10:	e01a      	b.n	800ba48 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ba12:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <StopJoin+0x6c>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	2100      	movs	r1, #0
 800ba18:	2002      	movs	r0, #2
 800ba1a:	f010 ffb5 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ba1e:	4b10      	ldr	r3, [pc, #64]	; (800ba60 <StopJoin+0x70>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ba24:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <StopJoin+0x74>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2002      	movs	r0, #2
 800ba2c:	f010 ffac 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ba30:	480d      	ldr	r0, [pc, #52]	; (800ba68 <StopJoin+0x78>)
 800ba32:	f001 fdd1 	bl	800d5d8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ba36:	4b0a      	ldr	r3, [pc, #40]	; (800ba60 <StopJoin+0x70>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 ff69 	bl	800d914 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ba42:	4804      	ldr	r0, [pc, #16]	; (800ba54 <StopJoin+0x64>)
 800ba44:	f010 fd28 	bl	801c498 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ba48:	4808      	ldr	r0, [pc, #32]	; (800ba6c <StopJoin+0x7c>)
 800ba4a:	f010 fd25 	bl	801c498 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ba4e:	bf00      	nop
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200004d0 	.word	0x200004d0
 800ba58:	0801d224 	.word	0x0801d224
 800ba5c:	0801d244 	.word	0x0801d244
 800ba60:	20000009 	.word	0x20000009
 800ba64:	0801d258 	.word	0x0801d258
 800ba68:	20000058 	.word	0x20000058
 800ba6c:	200004e8 	.word	0x200004e8

0800ba70 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ba78:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <OnStopJoinTimerEvent+0x20>)
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d103      	bne.n	800ba88 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ba80:	2100      	movs	r1, #0
 800ba82:	2008      	movs	r0, #8
 800ba84:	f010 fc50 	bl	801c328 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	20000009 	.word	0x20000009

0800ba94 <StoreContext>:

static void StoreContext(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ba9a:	23ff      	movs	r3, #255	; 0xff
 800ba9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ba9e:	f002 fcbb 	bl	800e418 <LmHandlerNvmDataStore>
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800baa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baaa:	f113 0f08 	cmn.w	r3, #8
 800baae:	d106      	bne.n	800babe <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <StoreContext+0x48>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	2002      	movs	r0, #2
 800bab8:	f010 ff66 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800babc:	e00a      	b.n	800bad4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800babe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d105      	bne.n	800bad4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <StoreContext+0x4c>)
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	2002      	movs	r0, #2
 800bad0:	f010 ff5a 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	0801d278 	.word	0x0801d278
 800bae0:	0801d290 	.word	0x0801d290

0800bae4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d106      	bne.n	800bb02 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800baf4:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <OnNvmDataChange+0x34>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	2100      	movs	r1, #0
 800bafa:	2002      	movs	r0, #2
 800bafc:	f010 ff44 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800bb00:	e005      	b.n	800bb0e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800bb02:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <OnNvmDataChange+0x38>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	2002      	movs	r0, #2
 800bb0a:	f010 ff3d 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb0e:	bf00      	nop
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	0801d2a8 	.word	0x0801d2a8
 800bb1c:	0801d2bc 	.word	0x0801d2bc

0800bb20 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800bb2a:	f7f9 f821 	bl	8004b70 <HAL_FLASH_Unlock>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d11c      	bne.n	800bb6e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800bb34:	4b10      	ldr	r3, [pc, #64]	; (800bb78 <OnStoreContextRequest+0x58>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	029a      	lsls	r2, r3, #10
 800bb3a:	4b10      	ldr	r3, [pc, #64]	; (800bb7c <OnStoreContextRequest+0x5c>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800bb42:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	0adb      	lsrs	r3, r3, #11
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2101      	movs	r1, #1
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 fba3 	bl	800129e <FLASH_IF_EraseByPages>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800bb5e:	2300      	movs	r3, #0
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	4806      	ldr	r0, [pc, #24]	; (800bb80 <OnStoreContextRequest+0x60>)
 800bb66:	f7f5 fab9 	bl	80010dc <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800bb6a:	f7f9 f823 	bl	8004bb4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	1fff75e0 	.word	0x1fff75e0
 800bb7c:	03fffc00 	.word	0x03fffc00
 800bb80:	0803f000 	.word	0x0803f000

0800bb84 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	4903      	ldr	r1, [pc, #12]	; (800bba4 <OnRestoreContextRequest+0x20>)
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f00f fea6 	bl	801b8e8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	0803f000 	.word	0x0803f000

0800bba8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800bbac:	4b15      	ldr	r3, [pc, #84]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800bbb2:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800bbb8:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bbbe:	4b11      	ldr	r3, [pc, #68]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbcc:	4a0d      	ldr	r2, [pc, #52]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbce:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10c      	bne.n	800bbf2 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <LoraInfo_Init+0x60>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2000      	movs	r0, #0
 800bbe0:	f010 fed2 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800bbe4:	bf00      	nop
 800bbe6:	f010 febd 	bl	801c964 <UTIL_ADV_TRACE_IsBufferEmpty>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d1fa      	bne.n	800bbe6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800bbf0:	e7fe      	b.n	800bbf0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800bbf2:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800bbf8:	4b02      	ldr	r3, [pc, #8]	; (800bc04 <LoraInfo_Init+0x5c>)
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800bbfe:	bf00      	nop
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	20000500 	.word	0x20000500
 800bc08:	0801d2d0 	.word	0x0801d2d0

0800bc0c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <LoraInfo_GetPtr+0x10>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000500 	.word	0x20000500

0800bc20 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800bc24:	f7f7 f83f 	bl	8002ca6 <BSP_RADIO_Init>
 800bc28:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	4603      	mov	r3, r0
 800bc36:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f7 f868 	bl	8002d10 <BSP_RADIO_ConfigRFSwitch>
 800bc40:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800bc4e:	f7f7 f8ad 	bl	8002dac <BSP_RADIO_GetTxConfig>
 800bc52:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800bc5c:	f7f7 f8ad 	bl	8002dba <BSP_RADIO_IsTCXO>
 800bc60:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800bc6a:	f7f7 f8ad 	bl	8002dc8 <BSP_RADIO_IsDCDC>
 800bc6e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7f7 f8a8 	bl	8002dd6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800bc86:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	33f1      	adds	r3, #241	; 0xf1
 800bc9c:	2210      	movs	r2, #16
 800bc9e:	2100      	movs	r1, #0
 800bca0:	4618      	mov	r0, r3
 800bca2:	f00c fb57 	bl	8018354 <memset1>
    ctx->M_n = 0;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	22f0      	movs	r2, #240	; 0xf0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f00c fb4d 	bl	8018354 <memset1>
}
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	2110      	movs	r1, #16
 800bcd2:	6838      	ldr	r0, [r7, #0]
 800bcd4:	f000 fe5c 	bl	800c990 <lorawan_aes_set_key>
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08c      	sub	sp, #48	; 0x30
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80a1 	beq.w	800be3a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcfe:	f1c3 0310 	rsb	r3, r3, #16
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	4293      	cmp	r3, r2
 800bd06:	bf28      	it	cs
 800bd08:	4613      	movcs	r3, r2
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd18:	4413      	add	r3, r2
 800bd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1c:	b292      	uxth	r2, r2
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f00c fadc 	bl	80182de <memcpy1>
        ctx->M_n += mlen;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2e:	441a      	add	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd3c:	2b0f      	cmp	r3, #15
 800bd3e:	f240 808d 	bls.w	800be5c <AES_CMAC_Update+0x17c>
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	429a      	cmp	r2, r3
 800bd48:	f000 8088 	beq.w	800be5c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd50:	e015      	b.n	800bd7e <AES_CMAC_Update+0x9e>
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	4413      	add	r3, r2
 800bd58:	33f1      	adds	r3, #241	; 0xf1
 800bd5a:	781a      	ldrb	r2, [r3, #0]
 800bd5c:	68f9      	ldr	r1, [r7, #12]
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	440b      	add	r3, r1
 800bd62:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	4053      	eors	r3, r2
 800bd6a:	b2d9      	uxtb	r1, r3
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	4413      	add	r3, r2
 800bd72:	33f1      	adds	r3, #241	; 0xf1
 800bd74:	460a      	mov	r2, r1
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	2b0f      	cmp	r3, #15
 800bd82:	dde6      	ble.n	800bd52 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bd8a:	f107 0314 	add.w	r3, r7, #20
 800bd8e:	2210      	movs	r2, #16
 800bd90:	4618      	mov	r0, r3
 800bd92:	f00c faa4 	bl	80182de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	f107 0114 	add.w	r1, r7, #20
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 fed3 	bl	800cb4c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	33f1      	adds	r3, #241	; 0xf1
 800bdaa:	f107 0114 	add.w	r1, r7, #20
 800bdae:	2210      	movs	r2, #16
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f00c fa94 	bl	80182de <memcpy1>

        data += mlen;
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	4413      	add	r3, r2
 800bdbc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bdc6:	e038      	b.n	800be3a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bdc8:	2300      	movs	r3, #0
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdcc:	e013      	b.n	800bdf6 <AES_CMAC_Update+0x116>
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	4413      	add	r3, r2
 800bdd4:	33f1      	adds	r3, #241	; 0xf1
 800bdd6:	781a      	ldrb	r2, [r3, #0]
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	440b      	add	r3, r1
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	4053      	eors	r3, r2
 800bde2:	b2d9      	uxtb	r1, r3
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	4413      	add	r3, r2
 800bdea:	33f1      	adds	r3, #241	; 0xf1
 800bdec:	460a      	mov	r2, r1
 800bdee:	701a      	strb	r2, [r3, #0]
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	2b0f      	cmp	r3, #15
 800bdfa:	dde8      	ble.n	800bdce <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800be02:	f107 0314 	add.w	r3, r7, #20
 800be06:	2210      	movs	r2, #16
 800be08:	4618      	mov	r0, r3
 800be0a:	f00c fa68 	bl	80182de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	f107 0114 	add.w	r1, r7, #20
 800be14:	f107 0314 	add.w	r3, r7, #20
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 fe97 	bl	800cb4c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	33f1      	adds	r3, #241	; 0xf1
 800be22:	f107 0114 	add.w	r1, r7, #20
 800be26:	2210      	movs	r2, #16
 800be28:	4618      	mov	r0, r3
 800be2a:	f00c fa58 	bl	80182de <memcpy1>

        data += 16;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	3310      	adds	r3, #16
 800be32:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3b10      	subs	r3, #16
 800be38:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b10      	cmp	r3, #16
 800be3e:	d8c3      	bhi.n	800bdc8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f203 1301 	addw	r3, r3, #257	; 0x101
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	b292      	uxth	r2, r2
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f00c fa46 	bl	80182de <memcpy1>
    ctx->M_n = len;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800be5a:	e000      	b.n	800be5e <AES_CMAC_Update+0x17e>
            return;
 800be5c:	bf00      	nop
}
 800be5e:	3730      	adds	r7, #48	; 0x30
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b092      	sub	sp, #72	; 0x48
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800be6e:	f107 031c 	add.w	r3, r7, #28
 800be72:	2210      	movs	r2, #16
 800be74:	2100      	movs	r1, #0
 800be76:	4618      	mov	r0, r3
 800be78:	f00c fa6c 	bl	8018354 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	f107 011c 	add.w	r1, r7, #28
 800be82:	f107 031c 	add.w	r3, r7, #28
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fe60 	bl	800cb4c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800be8c:	7f3b      	ldrb	r3, [r7, #28]
 800be8e:	b25b      	sxtb	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	da30      	bge.n	800bef6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800be94:	2300      	movs	r3, #0
 800be96:	647b      	str	r3, [r7, #68]	; 0x44
 800be98:	e01b      	b.n	800bed2 <AES_CMAC_Final+0x6e>
 800be9a:	f107 021c 	add.w	r2, r7, #28
 800be9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea0:	4413      	add	r3, r2
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	b25a      	sxtb	r2, r3
 800bea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beaa:	3301      	adds	r3, #1
 800beac:	3348      	adds	r3, #72	; 0x48
 800beae:	443b      	add	r3, r7
 800beb0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800beb4:	09db      	lsrs	r3, r3, #7
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	b25b      	sxtb	r3, r3
 800beba:	4313      	orrs	r3, r2
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	b2d9      	uxtb	r1, r3
 800bec0:	f107 021c 	add.w	r2, r7, #28
 800bec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec6:	4413      	add	r3, r2
 800bec8:	460a      	mov	r2, r1
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bece:	3301      	adds	r3, #1
 800bed0:	647b      	str	r3, [r7, #68]	; 0x44
 800bed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bed4:	2b0e      	cmp	r3, #14
 800bed6:	dde0      	ble.n	800be9a <AES_CMAC_Final+0x36>
 800bed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800bee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bee8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800beec:	43db      	mvns	r3, r3
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bef4:	e027      	b.n	800bf46 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800bef6:	2300      	movs	r3, #0
 800bef8:	643b      	str	r3, [r7, #64]	; 0x40
 800befa:	e01b      	b.n	800bf34 <AES_CMAC_Final+0xd0>
 800befc:	f107 021c 	add.w	r2, r7, #28
 800bf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf02:	4413      	add	r3, r2
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	b25a      	sxtb	r2, r3
 800bf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	3348      	adds	r3, #72	; 0x48
 800bf10:	443b      	add	r3, r7
 800bf12:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf16:	09db      	lsrs	r3, r3, #7
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	b25b      	sxtb	r3, r3
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	b25b      	sxtb	r3, r3
 800bf20:	b2d9      	uxtb	r1, r3
 800bf22:	f107 021c 	add.w	r2, r7, #28
 800bf26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf28:	4413      	add	r3, r2
 800bf2a:	460a      	mov	r2, r1
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf30:	3301      	adds	r3, #1
 800bf32:	643b      	str	r3, [r7, #64]	; 0x40
 800bf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf36:	2b0e      	cmp	r3, #14
 800bf38:	dde0      	ble.n	800befc <AES_CMAC_Final+0x98>
 800bf3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf4c:	2b10      	cmp	r3, #16
 800bf4e:	d11d      	bne.n	800bf8c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bf50:	2300      	movs	r3, #0
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf54:	e016      	b.n	800bf84 <AES_CMAC_Final+0x120>
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bf60:	781a      	ldrb	r2, [r3, #0]
 800bf62:	f107 011c 	add.w	r1, r7, #28
 800bf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf68:	440b      	add	r3, r1
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	4053      	eors	r3, r2
 800bf6e:	b2d9      	uxtb	r1, r3
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	4413      	add	r3, r2
 800bf76:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	3301      	adds	r3, #1
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf86:	2b0f      	cmp	r3, #15
 800bf88:	dde5      	ble.n	800bf56 <AES_CMAC_Final+0xf2>
 800bf8a:	e096      	b.n	800c0ba <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bf8c:	7f3b      	ldrb	r3, [r7, #28]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da30      	bge.n	800bff6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bf94:	2300      	movs	r3, #0
 800bf96:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf98:	e01b      	b.n	800bfd2 <AES_CMAC_Final+0x16e>
 800bf9a:	f107 021c 	add.w	r2, r7, #28
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	4413      	add	r3, r2
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	b25a      	sxtb	r2, r3
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	3301      	adds	r3, #1
 800bfac:	3348      	adds	r3, #72	; 0x48
 800bfae:	443b      	add	r3, r7
 800bfb0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bfb4:	09db      	lsrs	r3, r3, #7
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	b25b      	sxtb	r3, r3
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	b25b      	sxtb	r3, r3
 800bfbe:	b2d9      	uxtb	r1, r3
 800bfc0:	f107 021c 	add.w	r2, r7, #28
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	4413      	add	r3, r2
 800bfc8:	460a      	mov	r2, r1
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	3301      	adds	r3, #1
 800bfd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	2b0e      	cmp	r3, #14
 800bfd6:	dde0      	ble.n	800bf9a <AES_CMAC_Final+0x136>
 800bfd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800bfe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfe8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bfec:	43db      	mvns	r3, r3
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bff4:	e027      	b.n	800c046 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800bff6:	2300      	movs	r3, #0
 800bff8:	637b      	str	r3, [r7, #52]	; 0x34
 800bffa:	e01b      	b.n	800c034 <AES_CMAC_Final+0x1d0>
 800bffc:	f107 021c 	add.w	r2, r7, #28
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	4413      	add	r3, r2
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	b25a      	sxtb	r2, r3
 800c00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00c:	3301      	adds	r3, #1
 800c00e:	3348      	adds	r3, #72	; 0x48
 800c010:	443b      	add	r3, r7
 800c012:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c016:	09db      	lsrs	r3, r3, #7
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	b25b      	sxtb	r3, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	b25b      	sxtb	r3, r3
 800c020:	b2d9      	uxtb	r1, r3
 800c022:	f107 021c 	add.w	r2, r7, #28
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	4413      	add	r3, r2
 800c02a:	460a      	mov	r2, r1
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c030:	3301      	adds	r3, #1
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
 800c034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c036:	2b0e      	cmp	r3, #14
 800c038:	dde0      	ble.n	800bffc <AES_CMAC_Final+0x198>
 800c03a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	4413      	add	r3, r2
 800c050:	2280      	movs	r2, #128	; 0x80
 800c052:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c056:	e007      	b.n	800c068 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	4413      	add	r3, r2
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c07c:	2b0f      	cmp	r3, #15
 800c07e:	d9eb      	bls.n	800c058 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c080:	2300      	movs	r3, #0
 800c082:	633b      	str	r3, [r7, #48]	; 0x30
 800c084:	e016      	b.n	800c0b4 <AES_CMAC_Final+0x250>
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	4413      	add	r3, r2
 800c08c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c090:	781a      	ldrb	r2, [r3, #0]
 800c092:	f107 011c 	add.w	r1, r7, #28
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	440b      	add	r3, r1
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	4053      	eors	r3, r2
 800c09e:	b2d9      	uxtb	r1, r3
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	633b      	str	r3, [r7, #48]	; 0x30
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	2b0f      	cmp	r3, #15
 800c0b8:	dde5      	ble.n	800c086 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0be:	e015      	b.n	800c0ec <AES_CMAC_Final+0x288>
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	4413      	add	r3, r2
 800c0c6:	33f1      	adds	r3, #241	; 0xf1
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	440b      	add	r3, r1
 800c0d0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	4053      	eors	r3, r2
 800c0d8:	b2d9      	uxtb	r1, r3
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	4413      	add	r3, r2
 800c0e0:	33f1      	adds	r3, #241	; 0xf1
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	2b0f      	cmp	r3, #15
 800c0f0:	dde6      	ble.n	800c0c0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	2210      	movs	r2, #16
 800c0fe:	4618      	mov	r0, r3
 800c100:	f00c f8ed 	bl	80182de <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	f107 030c 	add.w	r3, r7, #12
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 fd1d 	bl	800cb4c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c112:	f107 031c 	add.w	r3, r7, #28
 800c116:	2210      	movs	r2, #16
 800c118:	2100      	movs	r1, #0
 800c11a:	4618      	mov	r0, r3
 800c11c:	f00c f91a 	bl	8018354 <memset1>
}
 800c120:	bf00      	nop
 800c122:	3748      	adds	r7, #72	; 0x48
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3301      	adds	r3, #1
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	7852      	ldrb	r2, [r2, #1]
 800c142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	3302      	adds	r3, #2
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	7892      	ldrb	r2, [r2, #2]
 800c14c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3303      	adds	r3, #3
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	78d2      	ldrb	r2, [r2, #3]
 800c156:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3304      	adds	r3, #4
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	7912      	ldrb	r2, [r2, #4]
 800c160:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3305      	adds	r3, #5
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	7952      	ldrb	r2, [r2, #5]
 800c16a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3306      	adds	r3, #6
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	7992      	ldrb	r2, [r2, #6]
 800c174:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3307      	adds	r3, #7
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	79d2      	ldrb	r2, [r2, #7]
 800c17e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3308      	adds	r3, #8
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	7a12      	ldrb	r2, [r2, #8]
 800c188:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3309      	adds	r3, #9
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	7a52      	ldrb	r2, [r2, #9]
 800c192:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	330a      	adds	r3, #10
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	7a92      	ldrb	r2, [r2, #10]
 800c19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	330b      	adds	r3, #11
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	7ad2      	ldrb	r2, [r2, #11]
 800c1a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	330c      	adds	r3, #12
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	7b12      	ldrb	r2, [r2, #12]
 800c1b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	330d      	adds	r3, #13
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	7b52      	ldrb	r2, [r2, #13]
 800c1ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	330e      	adds	r3, #14
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	7b92      	ldrb	r2, [r2, #14]
 800c1c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	330f      	adds	r3, #15
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	7bd2      	ldrb	r2, [r2, #15]
 800c1ce:	701a      	strb	r2, [r3, #0]
#endif
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bc80      	pop	{r7}
 800c1d8:	4770      	bx	lr

0800c1da <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c1da:	b480      	push	{r7}
 800c1dc:	b085      	sub	sp, #20
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c1e8:	e007      	b.n	800c1fa <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	1c53      	adds	r3, r2, #1
 800c1ee:	60bb      	str	r3, [r7, #8]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	1c59      	adds	r1, r3, #1
 800c1f4:	60f9      	str	r1, [r7, #12]
 800c1f6:	7812      	ldrb	r2, [r2, #0]
 800c1f8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	1e5a      	subs	r2, r3, #1
 800c1fe:	71fa      	strb	r2, [r7, #7]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f2      	bne.n	800c1ea <copy_block_nn+0x10>
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc80      	pop	{r7}
 800c20e:	4770      	bx	lr

0800c210 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	4053      	eors	r3, r2
 800c224:	b2da      	uxtb	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3301      	adds	r3, #1
 800c22e:	7819      	ldrb	r1, [r3, #0]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	781a      	ldrb	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3301      	adds	r3, #1
 800c23a:	404a      	eors	r2, r1
 800c23c:	b2d2      	uxtb	r2, r2
 800c23e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3302      	adds	r3, #2
 800c244:	7819      	ldrb	r1, [r3, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	3302      	adds	r3, #2
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3302      	adds	r3, #2
 800c250:	404a      	eors	r2, r1
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	3303      	adds	r3, #3
 800c25a:	7819      	ldrb	r1, [r3, #0]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	3303      	adds	r3, #3
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3303      	adds	r3, #3
 800c266:	404a      	eors	r2, r1
 800c268:	b2d2      	uxtb	r2, r2
 800c26a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3304      	adds	r3, #4
 800c270:	7819      	ldrb	r1, [r3, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	3304      	adds	r3, #4
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3304      	adds	r3, #4
 800c27c:	404a      	eors	r2, r1
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3305      	adds	r3, #5
 800c286:	7819      	ldrb	r1, [r3, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	3305      	adds	r3, #5
 800c28c:	781a      	ldrb	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3305      	adds	r3, #5
 800c292:	404a      	eors	r2, r1
 800c294:	b2d2      	uxtb	r2, r2
 800c296:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3306      	adds	r3, #6
 800c29c:	7819      	ldrb	r1, [r3, #0]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	3306      	adds	r3, #6
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3306      	adds	r3, #6
 800c2a8:	404a      	eors	r2, r1
 800c2aa:	b2d2      	uxtb	r2, r2
 800c2ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3307      	adds	r3, #7
 800c2b2:	7819      	ldrb	r1, [r3, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	3307      	adds	r3, #7
 800c2b8:	781a      	ldrb	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3307      	adds	r3, #7
 800c2be:	404a      	eors	r2, r1
 800c2c0:	b2d2      	uxtb	r2, r2
 800c2c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	7819      	ldrb	r1, [r3, #0]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3308      	adds	r3, #8
 800c2d4:	404a      	eors	r2, r1
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3309      	adds	r3, #9
 800c2de:	7819      	ldrb	r1, [r3, #0]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	3309      	adds	r3, #9
 800c2e4:	781a      	ldrb	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3309      	adds	r3, #9
 800c2ea:	404a      	eors	r2, r1
 800c2ec:	b2d2      	uxtb	r2, r2
 800c2ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	330a      	adds	r3, #10
 800c2f4:	7819      	ldrb	r1, [r3, #0]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	330a      	adds	r3, #10
 800c2fa:	781a      	ldrb	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	330a      	adds	r3, #10
 800c300:	404a      	eors	r2, r1
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	330b      	adds	r3, #11
 800c30a:	7819      	ldrb	r1, [r3, #0]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	330b      	adds	r3, #11
 800c310:	781a      	ldrb	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	330b      	adds	r3, #11
 800c316:	404a      	eors	r2, r1
 800c318:	b2d2      	uxtb	r2, r2
 800c31a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	330c      	adds	r3, #12
 800c320:	7819      	ldrb	r1, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	330c      	adds	r3, #12
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	330c      	adds	r3, #12
 800c32c:	404a      	eors	r2, r1
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	330d      	adds	r3, #13
 800c336:	7819      	ldrb	r1, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	330d      	adds	r3, #13
 800c33c:	781a      	ldrb	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	330d      	adds	r3, #13
 800c342:	404a      	eors	r2, r1
 800c344:	b2d2      	uxtb	r2, r2
 800c346:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	330e      	adds	r3, #14
 800c34c:	7819      	ldrb	r1, [r3, #0]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	330e      	adds	r3, #14
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	330e      	adds	r3, #14
 800c358:	404a      	eors	r2, r1
 800c35a:	b2d2      	uxtb	r2, r2
 800c35c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	330f      	adds	r3, #15
 800c362:	7819      	ldrb	r1, [r3, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	330f      	adds	r3, #15
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	330f      	adds	r3, #15
 800c36e:	404a      	eors	r2, r1
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
#endif
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	bc80      	pop	{r7}
 800c37c:	4770      	bx	lr

0800c37e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	781a      	ldrb	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	4053      	eors	r3, r2
 800c394:	b2da      	uxtb	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	3301      	adds	r3, #1
 800c39e:	7819      	ldrb	r1, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	781a      	ldrb	r2, [r3, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	404a      	eors	r2, r1
 800c3ac:	b2d2      	uxtb	r2, r2
 800c3ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	3302      	adds	r3, #2
 800c3b4:	7819      	ldrb	r1, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	3302      	adds	r3, #2
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3302      	adds	r3, #2
 800c3c0:	404a      	eors	r2, r1
 800c3c2:	b2d2      	uxtb	r2, r2
 800c3c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	3303      	adds	r3, #3
 800c3ca:	7819      	ldrb	r1, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3303      	adds	r3, #3
 800c3d0:	781a      	ldrb	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3303      	adds	r3, #3
 800c3d6:	404a      	eors	r2, r1
 800c3d8:	b2d2      	uxtb	r2, r2
 800c3da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	7819      	ldrb	r1, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	781a      	ldrb	r2, [r3, #0]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	404a      	eors	r2, r1
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	3305      	adds	r3, #5
 800c3f6:	7819      	ldrb	r1, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	3305      	adds	r3, #5
 800c3fc:	781a      	ldrb	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3305      	adds	r3, #5
 800c402:	404a      	eors	r2, r1
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	3306      	adds	r3, #6
 800c40c:	7819      	ldrb	r1, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3306      	adds	r3, #6
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3306      	adds	r3, #6
 800c418:	404a      	eors	r2, r1
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	3307      	adds	r3, #7
 800c422:	7819      	ldrb	r1, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3307      	adds	r3, #7
 800c428:	781a      	ldrb	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3307      	adds	r3, #7
 800c42e:	404a      	eors	r2, r1
 800c430:	b2d2      	uxtb	r2, r2
 800c432:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	3308      	adds	r3, #8
 800c438:	7819      	ldrb	r1, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3308      	adds	r3, #8
 800c43e:	781a      	ldrb	r2, [r3, #0]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3308      	adds	r3, #8
 800c444:	404a      	eors	r2, r1
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	3309      	adds	r3, #9
 800c44e:	7819      	ldrb	r1, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3309      	adds	r3, #9
 800c454:	781a      	ldrb	r2, [r3, #0]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3309      	adds	r3, #9
 800c45a:	404a      	eors	r2, r1
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	330a      	adds	r3, #10
 800c464:	7819      	ldrb	r1, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	330a      	adds	r3, #10
 800c46a:	781a      	ldrb	r2, [r3, #0]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	330a      	adds	r3, #10
 800c470:	404a      	eors	r2, r1
 800c472:	b2d2      	uxtb	r2, r2
 800c474:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	330b      	adds	r3, #11
 800c47a:	7819      	ldrb	r1, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	330b      	adds	r3, #11
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	330b      	adds	r3, #11
 800c486:	404a      	eors	r2, r1
 800c488:	b2d2      	uxtb	r2, r2
 800c48a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	330c      	adds	r3, #12
 800c490:	7819      	ldrb	r1, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	330c      	adds	r3, #12
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	330c      	adds	r3, #12
 800c49c:	404a      	eors	r2, r1
 800c49e:	b2d2      	uxtb	r2, r2
 800c4a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	330d      	adds	r3, #13
 800c4a6:	7819      	ldrb	r1, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	330d      	adds	r3, #13
 800c4ac:	781a      	ldrb	r2, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	330d      	adds	r3, #13
 800c4b2:	404a      	eors	r2, r1
 800c4b4:	b2d2      	uxtb	r2, r2
 800c4b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	330e      	adds	r3, #14
 800c4bc:	7819      	ldrb	r1, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	330e      	adds	r3, #14
 800c4c2:	781a      	ldrb	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	330e      	adds	r3, #14
 800c4c8:	404a      	eors	r2, r1
 800c4ca:	b2d2      	uxtb	r2, r2
 800c4cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	330f      	adds	r3, #15
 800c4d2:	7819      	ldrb	r1, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	330f      	adds	r3, #15
 800c4d8:	781a      	ldrb	r2, [r3, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	330f      	adds	r3, #15
 800c4de:	404a      	eors	r2, r1
 800c4e0:	b2d2      	uxtb	r2, r2
 800c4e2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c4e4:	bf00      	nop
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bc80      	pop	{r7}
 800c4ec:	4770      	bx	lr

0800c4ee <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff fe88 	bl	800c210 <xor_block>
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	4b48      	ldr	r3, [pc, #288]	; (800c638 <shift_sub_rows+0x130>)
 800c518:	5c9a      	ldrb	r2, [r3, r2]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3304      	adds	r3, #4
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	4619      	mov	r1, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3304      	adds	r3, #4
 800c52a:	4a43      	ldr	r2, [pc, #268]	; (800c638 <shift_sub_rows+0x130>)
 800c52c:	5c52      	ldrb	r2, [r2, r1]
 800c52e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3308      	adds	r3, #8
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	4619      	mov	r1, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3308      	adds	r3, #8
 800c53c:	4a3e      	ldr	r2, [pc, #248]	; (800c638 <shift_sub_rows+0x130>)
 800c53e:	5c52      	ldrb	r2, [r2, r1]
 800c540:	701a      	strb	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	330c      	adds	r3, #12
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	4619      	mov	r1, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	330c      	adds	r3, #12
 800c54e:	4a3a      	ldr	r2, [pc, #232]	; (800c638 <shift_sub_rows+0x130>)
 800c550:	5c52      	ldrb	r2, [r2, r1]
 800c552:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	73fb      	strb	r3, [r7, #15]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3305      	adds	r3, #5
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	4619      	mov	r1, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3301      	adds	r3, #1
 800c566:	4a34      	ldr	r2, [pc, #208]	; (800c638 <shift_sub_rows+0x130>)
 800c568:	5c52      	ldrb	r2, [r2, r1]
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3309      	adds	r3, #9
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3305      	adds	r3, #5
 800c578:	4a2f      	ldr	r2, [pc, #188]	; (800c638 <shift_sub_rows+0x130>)
 800c57a:	5c52      	ldrb	r2, [r2, r1]
 800c57c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	330d      	adds	r3, #13
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	4619      	mov	r1, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3309      	adds	r3, #9
 800c58a:	4a2b      	ldr	r2, [pc, #172]	; (800c638 <shift_sub_rows+0x130>)
 800c58c:	5c52      	ldrb	r2, [r2, r1]
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	7bfa      	ldrb	r2, [r7, #15]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	330d      	adds	r3, #13
 800c596:	4928      	ldr	r1, [pc, #160]	; (800c638 <shift_sub_rows+0x130>)
 800c598:	5c8a      	ldrb	r2, [r1, r2]
 800c59a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	789b      	ldrb	r3, [r3, #2]
 800c5a0:	73fb      	strb	r3, [r7, #15]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	330a      	adds	r3, #10
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3302      	adds	r3, #2
 800c5ae:	4a22      	ldr	r2, [pc, #136]	; (800c638 <shift_sub_rows+0x130>)
 800c5b0:	5c52      	ldrb	r2, [r2, r1]
 800c5b2:	701a      	strb	r2, [r3, #0]
 800c5b4:	7bfa      	ldrb	r2, [r7, #15]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	330a      	adds	r3, #10
 800c5ba:	491f      	ldr	r1, [pc, #124]	; (800c638 <shift_sub_rows+0x130>)
 800c5bc:	5c8a      	ldrb	r2, [r1, r2]
 800c5be:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	799b      	ldrb	r3, [r3, #6]
 800c5c4:	73fb      	strb	r3, [r7, #15]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	330e      	adds	r3, #14
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3306      	adds	r3, #6
 800c5d2:	4a19      	ldr	r2, [pc, #100]	; (800c638 <shift_sub_rows+0x130>)
 800c5d4:	5c52      	ldrb	r2, [r2, r1]
 800c5d6:	701a      	strb	r2, [r3, #0]
 800c5d8:	7bfa      	ldrb	r2, [r7, #15]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	330e      	adds	r3, #14
 800c5de:	4916      	ldr	r1, [pc, #88]	; (800c638 <shift_sub_rows+0x130>)
 800c5e0:	5c8a      	ldrb	r2, [r1, r2]
 800c5e2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	7bdb      	ldrb	r3, [r3, #15]
 800c5e8:	73fb      	strb	r3, [r7, #15]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	330b      	adds	r3, #11
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	330f      	adds	r3, #15
 800c5f6:	4a10      	ldr	r2, [pc, #64]	; (800c638 <shift_sub_rows+0x130>)
 800c5f8:	5c52      	ldrb	r2, [r2, r1]
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	3307      	adds	r3, #7
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	4619      	mov	r1, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	330b      	adds	r3, #11
 800c608:	4a0b      	ldr	r2, [pc, #44]	; (800c638 <shift_sub_rows+0x130>)
 800c60a:	5c52      	ldrb	r2, [r2, r1]
 800c60c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3303      	adds	r3, #3
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3307      	adds	r3, #7
 800c61a:	4a07      	ldr	r2, [pc, #28]	; (800c638 <shift_sub_rows+0x130>)
 800c61c:	5c52      	ldrb	r2, [r2, r1]
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	7bfa      	ldrb	r2, [r7, #15]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3303      	adds	r3, #3
 800c626:	4904      	ldr	r1, [pc, #16]	; (800c638 <shift_sub_rows+0x130>)
 800c628:	5c8a      	ldrb	r2, [r1, r2]
 800c62a:	701a      	strb	r2, [r3, #0]
}
 800c62c:	bf00      	nop
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	bc80      	pop	{r7}
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	0801d8a8 	.word	0x0801d8a8

0800c63c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c644:	f107 0308 	add.w	r3, r7, #8
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7ff fd6c 	bl	800c128 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c650:	7a3b      	ldrb	r3, [r7, #8]
 800c652:	461a      	mov	r2, r3
 800c654:	4b9a      	ldr	r3, [pc, #616]	; (800c8c0 <mix_sub_columns+0x284>)
 800c656:	5c9a      	ldrb	r2, [r3, r2]
 800c658:	7b7b      	ldrb	r3, [r7, #13]
 800c65a:	4619      	mov	r1, r3
 800c65c:	4b99      	ldr	r3, [pc, #612]	; (800c8c4 <mix_sub_columns+0x288>)
 800c65e:	5c5b      	ldrb	r3, [r3, r1]
 800c660:	4053      	eors	r3, r2
 800c662:	b2da      	uxtb	r2, r3
 800c664:	7cbb      	ldrb	r3, [r7, #18]
 800c666:	4619      	mov	r1, r3
 800c668:	4b97      	ldr	r3, [pc, #604]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c66a:	5c5b      	ldrb	r3, [r3, r1]
 800c66c:	4053      	eors	r3, r2
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	4619      	mov	r1, r3
 800c674:	4b94      	ldr	r3, [pc, #592]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c676:	5c5b      	ldrb	r3, [r3, r1]
 800c678:	4053      	eors	r3, r2
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c680:	7a3b      	ldrb	r3, [r7, #8]
 800c682:	461a      	mov	r2, r3
 800c684:	4b90      	ldr	r3, [pc, #576]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c686:	5c9a      	ldrb	r2, [r3, r2]
 800c688:	7b7b      	ldrb	r3, [r7, #13]
 800c68a:	4619      	mov	r1, r3
 800c68c:	4b8c      	ldr	r3, [pc, #560]	; (800c8c0 <mix_sub_columns+0x284>)
 800c68e:	5c5b      	ldrb	r3, [r3, r1]
 800c690:	4053      	eors	r3, r2
 800c692:	b2da      	uxtb	r2, r3
 800c694:	7cbb      	ldrb	r3, [r7, #18]
 800c696:	4619      	mov	r1, r3
 800c698:	4b8a      	ldr	r3, [pc, #552]	; (800c8c4 <mix_sub_columns+0x288>)
 800c69a:	5c5b      	ldrb	r3, [r3, r1]
 800c69c:	4053      	eors	r3, r2
 800c69e:	b2d9      	uxtb	r1, r3
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b88      	ldr	r3, [pc, #544]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c6a6:	5c9a      	ldrb	r2, [r3, r2]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	404a      	eors	r2, r1
 800c6ae:	b2d2      	uxtb	r2, r2
 800c6b0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c6b2:	7a3b      	ldrb	r3, [r7, #8]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b84      	ldr	r3, [pc, #528]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c6b8:	5c9a      	ldrb	r2, [r3, r2]
 800c6ba:	7b7b      	ldrb	r3, [r7, #13]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4b82      	ldr	r3, [pc, #520]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c6c0:	5c5b      	ldrb	r3, [r3, r1]
 800c6c2:	4053      	eors	r3, r2
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	7cbb      	ldrb	r3, [r7, #18]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	4b7d      	ldr	r3, [pc, #500]	; (800c8c0 <mix_sub_columns+0x284>)
 800c6cc:	5c5b      	ldrb	r3, [r3, r1]
 800c6ce:	4053      	eors	r3, r2
 800c6d0:	b2d9      	uxtb	r1, r3
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <mix_sub_columns+0x288>)
 800c6d8:	5c9a      	ldrb	r2, [r3, r2]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3302      	adds	r3, #2
 800c6de:	404a      	eors	r2, r1
 800c6e0:	b2d2      	uxtb	r2, r2
 800c6e2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c6e4:	7a3b      	ldrb	r3, [r7, #8]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b76      	ldr	r3, [pc, #472]	; (800c8c4 <mix_sub_columns+0x288>)
 800c6ea:	5c9a      	ldrb	r2, [r3, r2]
 800c6ec:	7b7b      	ldrb	r3, [r7, #13]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4b75      	ldr	r3, [pc, #468]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c6f2:	5c5b      	ldrb	r3, [r3, r1]
 800c6f4:	4053      	eors	r3, r2
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	7cbb      	ldrb	r3, [r7, #18]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4b72      	ldr	r3, [pc, #456]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c6fe:	5c5b      	ldrb	r3, [r3, r1]
 800c700:	4053      	eors	r3, r2
 800c702:	b2d9      	uxtb	r1, r3
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	461a      	mov	r2, r3
 800c708:	4b6d      	ldr	r3, [pc, #436]	; (800c8c0 <mix_sub_columns+0x284>)
 800c70a:	5c9a      	ldrb	r2, [r3, r2]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3303      	adds	r3, #3
 800c710:	404a      	eors	r2, r1
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c716:	7b3b      	ldrb	r3, [r7, #12]
 800c718:	461a      	mov	r2, r3
 800c71a:	4b69      	ldr	r3, [pc, #420]	; (800c8c0 <mix_sub_columns+0x284>)
 800c71c:	5c9a      	ldrb	r2, [r3, r2]
 800c71e:	7c7b      	ldrb	r3, [r7, #17]
 800c720:	4619      	mov	r1, r3
 800c722:	4b68      	ldr	r3, [pc, #416]	; (800c8c4 <mix_sub_columns+0x288>)
 800c724:	5c5b      	ldrb	r3, [r3, r1]
 800c726:	4053      	eors	r3, r2
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	7dbb      	ldrb	r3, [r7, #22]
 800c72c:	4619      	mov	r1, r3
 800c72e:	4b66      	ldr	r3, [pc, #408]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c730:	5c5b      	ldrb	r3, [r3, r1]
 800c732:	4053      	eors	r3, r2
 800c734:	b2d9      	uxtb	r1, r3
 800c736:	7afb      	ldrb	r3, [r7, #11]
 800c738:	461a      	mov	r2, r3
 800c73a:	4b63      	ldr	r3, [pc, #396]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c73c:	5c9a      	ldrb	r2, [r3, r2]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3304      	adds	r3, #4
 800c742:	404a      	eors	r2, r1
 800c744:	b2d2      	uxtb	r2, r2
 800c746:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c748:	7b3b      	ldrb	r3, [r7, #12]
 800c74a:	461a      	mov	r2, r3
 800c74c:	4b5e      	ldr	r3, [pc, #376]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c74e:	5c9a      	ldrb	r2, [r3, r2]
 800c750:	7c7b      	ldrb	r3, [r7, #17]
 800c752:	4619      	mov	r1, r3
 800c754:	4b5a      	ldr	r3, [pc, #360]	; (800c8c0 <mix_sub_columns+0x284>)
 800c756:	5c5b      	ldrb	r3, [r3, r1]
 800c758:	4053      	eors	r3, r2
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	7dbb      	ldrb	r3, [r7, #22]
 800c75e:	4619      	mov	r1, r3
 800c760:	4b58      	ldr	r3, [pc, #352]	; (800c8c4 <mix_sub_columns+0x288>)
 800c762:	5c5b      	ldrb	r3, [r3, r1]
 800c764:	4053      	eors	r3, r2
 800c766:	b2d9      	uxtb	r1, r3
 800c768:	7afb      	ldrb	r3, [r7, #11]
 800c76a:	461a      	mov	r2, r3
 800c76c:	4b56      	ldr	r3, [pc, #344]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c76e:	5c9a      	ldrb	r2, [r3, r2]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3305      	adds	r3, #5
 800c774:	404a      	eors	r2, r1
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c77a:	7b3b      	ldrb	r3, [r7, #12]
 800c77c:	461a      	mov	r2, r3
 800c77e:	4b52      	ldr	r3, [pc, #328]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c780:	5c9a      	ldrb	r2, [r3, r2]
 800c782:	7c7b      	ldrb	r3, [r7, #17]
 800c784:	4619      	mov	r1, r3
 800c786:	4b50      	ldr	r3, [pc, #320]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c788:	5c5b      	ldrb	r3, [r3, r1]
 800c78a:	4053      	eors	r3, r2
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	7dbb      	ldrb	r3, [r7, #22]
 800c790:	4619      	mov	r1, r3
 800c792:	4b4b      	ldr	r3, [pc, #300]	; (800c8c0 <mix_sub_columns+0x284>)
 800c794:	5c5b      	ldrb	r3, [r3, r1]
 800c796:	4053      	eors	r3, r2
 800c798:	b2d9      	uxtb	r1, r3
 800c79a:	7afb      	ldrb	r3, [r7, #11]
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b49      	ldr	r3, [pc, #292]	; (800c8c4 <mix_sub_columns+0x288>)
 800c7a0:	5c9a      	ldrb	r2, [r3, r2]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3306      	adds	r3, #6
 800c7a6:	404a      	eors	r2, r1
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c7ac:	7b3b      	ldrb	r3, [r7, #12]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4b44      	ldr	r3, [pc, #272]	; (800c8c4 <mix_sub_columns+0x288>)
 800c7b2:	5c9a      	ldrb	r2, [r3, r2]
 800c7b4:	7c7b      	ldrb	r3, [r7, #17]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4b43      	ldr	r3, [pc, #268]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c7ba:	5c5b      	ldrb	r3, [r3, r1]
 800c7bc:	4053      	eors	r3, r2
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	7dbb      	ldrb	r3, [r7, #22]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4b40      	ldr	r3, [pc, #256]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c7c6:	5c5b      	ldrb	r3, [r3, r1]
 800c7c8:	4053      	eors	r3, r2
 800c7ca:	b2d9      	uxtb	r1, r3
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4b3b      	ldr	r3, [pc, #236]	; (800c8c0 <mix_sub_columns+0x284>)
 800c7d2:	5c9a      	ldrb	r2, [r3, r2]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3307      	adds	r3, #7
 800c7d8:	404a      	eors	r2, r1
 800c7da:	b2d2      	uxtb	r2, r2
 800c7dc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c7de:	7c3b      	ldrb	r3, [r7, #16]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b37      	ldr	r3, [pc, #220]	; (800c8c0 <mix_sub_columns+0x284>)
 800c7e4:	5c9a      	ldrb	r2, [r3, r2]
 800c7e6:	7d7b      	ldrb	r3, [r7, #21]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4b36      	ldr	r3, [pc, #216]	; (800c8c4 <mix_sub_columns+0x288>)
 800c7ec:	5c5b      	ldrb	r3, [r3, r1]
 800c7ee:	4053      	eors	r3, r2
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	7abb      	ldrb	r3, [r7, #10]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4b34      	ldr	r3, [pc, #208]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c7f8:	5c5b      	ldrb	r3, [r3, r1]
 800c7fa:	4053      	eors	r3, r2
 800c7fc:	b2d9      	uxtb	r1, r3
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	461a      	mov	r2, r3
 800c802:	4b31      	ldr	r3, [pc, #196]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c804:	5c9a      	ldrb	r2, [r3, r2]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3308      	adds	r3, #8
 800c80a:	404a      	eors	r2, r1
 800c80c:	b2d2      	uxtb	r2, r2
 800c80e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c810:	7c3b      	ldrb	r3, [r7, #16]
 800c812:	461a      	mov	r2, r3
 800c814:	4b2c      	ldr	r3, [pc, #176]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c816:	5c9a      	ldrb	r2, [r3, r2]
 800c818:	7d7b      	ldrb	r3, [r7, #21]
 800c81a:	4619      	mov	r1, r3
 800c81c:	4b28      	ldr	r3, [pc, #160]	; (800c8c0 <mix_sub_columns+0x284>)
 800c81e:	5c5b      	ldrb	r3, [r3, r1]
 800c820:	4053      	eors	r3, r2
 800c822:	b2da      	uxtb	r2, r3
 800c824:	7abb      	ldrb	r3, [r7, #10]
 800c826:	4619      	mov	r1, r3
 800c828:	4b26      	ldr	r3, [pc, #152]	; (800c8c4 <mix_sub_columns+0x288>)
 800c82a:	5c5b      	ldrb	r3, [r3, r1]
 800c82c:	4053      	eors	r3, r2
 800c82e:	b2d9      	uxtb	r1, r3
 800c830:	7bfb      	ldrb	r3, [r7, #15]
 800c832:	461a      	mov	r2, r3
 800c834:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c836:	5c9a      	ldrb	r2, [r3, r2]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	3309      	adds	r3, #9
 800c83c:	404a      	eors	r2, r1
 800c83e:	b2d2      	uxtb	r2, r2
 800c840:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c842:	7c3b      	ldrb	r3, [r7, #16]
 800c844:	461a      	mov	r2, r3
 800c846:	4b20      	ldr	r3, [pc, #128]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c848:	5c9a      	ldrb	r2, [r3, r2]
 800c84a:	7d7b      	ldrb	r3, [r7, #21]
 800c84c:	4619      	mov	r1, r3
 800c84e:	4b1e      	ldr	r3, [pc, #120]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c850:	5c5b      	ldrb	r3, [r3, r1]
 800c852:	4053      	eors	r3, r2
 800c854:	b2da      	uxtb	r2, r3
 800c856:	7abb      	ldrb	r3, [r7, #10]
 800c858:	4619      	mov	r1, r3
 800c85a:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <mix_sub_columns+0x284>)
 800c85c:	5c5b      	ldrb	r3, [r3, r1]
 800c85e:	4053      	eors	r3, r2
 800c860:	b2d9      	uxtb	r1, r3
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	461a      	mov	r2, r3
 800c866:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <mix_sub_columns+0x288>)
 800c868:	5c9a      	ldrb	r2, [r3, r2]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	330a      	adds	r3, #10
 800c86e:	404a      	eors	r2, r1
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c874:	7c3b      	ldrb	r3, [r7, #16]
 800c876:	461a      	mov	r2, r3
 800c878:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <mix_sub_columns+0x288>)
 800c87a:	5c9a      	ldrb	r2, [r3, r2]
 800c87c:	7d7b      	ldrb	r3, [r7, #21]
 800c87e:	4619      	mov	r1, r3
 800c880:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c882:	5c5b      	ldrb	r3, [r3, r1]
 800c884:	4053      	eors	r3, r2
 800c886:	b2da      	uxtb	r2, r3
 800c888:	7abb      	ldrb	r3, [r7, #10]
 800c88a:	4619      	mov	r1, r3
 800c88c:	4b0e      	ldr	r3, [pc, #56]	; (800c8c8 <mix_sub_columns+0x28c>)
 800c88e:	5c5b      	ldrb	r3, [r3, r1]
 800c890:	4053      	eors	r3, r2
 800c892:	b2d9      	uxtb	r1, r3
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	461a      	mov	r2, r3
 800c898:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <mix_sub_columns+0x284>)
 800c89a:	5c9a      	ldrb	r2, [r3, r2]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	330b      	adds	r3, #11
 800c8a0:	404a      	eors	r2, r1
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c8a6:	7d3b      	ldrb	r3, [r7, #20]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <mix_sub_columns+0x284>)
 800c8ac:	5c9a      	ldrb	r2, [r3, r2]
 800c8ae:	7a7b      	ldrb	r3, [r7, #9]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <mix_sub_columns+0x288>)
 800c8b4:	5c5b      	ldrb	r3, [r3, r1]
 800c8b6:	4053      	eors	r3, r2
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	e005      	b.n	800c8cc <mix_sub_columns+0x290>
 800c8c0:	0801d9a8 	.word	0x0801d9a8
 800c8c4:	0801daa8 	.word	0x0801daa8
 800c8c8:	0801d8a8 	.word	0x0801d8a8
 800c8cc:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <mix_sub_columns+0x348>)
 800c8ce:	5c5b      	ldrb	r3, [r3, r1]
 800c8d0:	4053      	eors	r3, r2
 800c8d2:	b2d9      	uxtb	r1, r3
 800c8d4:	7cfb      	ldrb	r3, [r7, #19]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4b2a      	ldr	r3, [pc, #168]	; (800c984 <mix_sub_columns+0x348>)
 800c8da:	5c9a      	ldrb	r2, [r3, r2]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	330c      	adds	r3, #12
 800c8e0:	404a      	eors	r2, r1
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c8e6:	7d3b      	ldrb	r3, [r7, #20]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4b26      	ldr	r3, [pc, #152]	; (800c984 <mix_sub_columns+0x348>)
 800c8ec:	5c9a      	ldrb	r2, [r3, r2]
 800c8ee:	7a7b      	ldrb	r3, [r7, #9]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4b25      	ldr	r3, [pc, #148]	; (800c988 <mix_sub_columns+0x34c>)
 800c8f4:	5c5b      	ldrb	r3, [r3, r1]
 800c8f6:	4053      	eors	r3, r2
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4b23      	ldr	r3, [pc, #140]	; (800c98c <mix_sub_columns+0x350>)
 800c900:	5c5b      	ldrb	r3, [r3, r1]
 800c902:	4053      	eors	r3, r2
 800c904:	b2d9      	uxtb	r1, r3
 800c906:	7cfb      	ldrb	r3, [r7, #19]
 800c908:	461a      	mov	r2, r3
 800c90a:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <mix_sub_columns+0x348>)
 800c90c:	5c9a      	ldrb	r2, [r3, r2]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	330d      	adds	r3, #13
 800c912:	404a      	eors	r2, r1
 800c914:	b2d2      	uxtb	r2, r2
 800c916:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c918:	7d3b      	ldrb	r3, [r7, #20]
 800c91a:	461a      	mov	r2, r3
 800c91c:	4b19      	ldr	r3, [pc, #100]	; (800c984 <mix_sub_columns+0x348>)
 800c91e:	5c9a      	ldrb	r2, [r3, r2]
 800c920:	7a7b      	ldrb	r3, [r7, #9]
 800c922:	4619      	mov	r1, r3
 800c924:	4b17      	ldr	r3, [pc, #92]	; (800c984 <mix_sub_columns+0x348>)
 800c926:	5c5b      	ldrb	r3, [r3, r1]
 800c928:	4053      	eors	r3, r2
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	4619      	mov	r1, r3
 800c930:	4b15      	ldr	r3, [pc, #84]	; (800c988 <mix_sub_columns+0x34c>)
 800c932:	5c5b      	ldrb	r3, [r3, r1]
 800c934:	4053      	eors	r3, r2
 800c936:	b2d9      	uxtb	r1, r3
 800c938:	7cfb      	ldrb	r3, [r7, #19]
 800c93a:	461a      	mov	r2, r3
 800c93c:	4b13      	ldr	r3, [pc, #76]	; (800c98c <mix_sub_columns+0x350>)
 800c93e:	5c9a      	ldrb	r2, [r3, r2]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	330e      	adds	r3, #14
 800c944:	404a      	eors	r2, r1
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c94a:	7d3b      	ldrb	r3, [r7, #20]
 800c94c:	461a      	mov	r2, r3
 800c94e:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <mix_sub_columns+0x350>)
 800c950:	5c9a      	ldrb	r2, [r3, r2]
 800c952:	7a7b      	ldrb	r3, [r7, #9]
 800c954:	4619      	mov	r1, r3
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <mix_sub_columns+0x348>)
 800c958:	5c5b      	ldrb	r3, [r3, r1]
 800c95a:	4053      	eors	r3, r2
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	4619      	mov	r1, r3
 800c962:	4b08      	ldr	r3, [pc, #32]	; (800c984 <mix_sub_columns+0x348>)
 800c964:	5c5b      	ldrb	r3, [r3, r1]
 800c966:	4053      	eors	r3, r2
 800c968:	b2d9      	uxtb	r1, r3
 800c96a:	7cfb      	ldrb	r3, [r7, #19]
 800c96c:	461a      	mov	r2, r3
 800c96e:	4b06      	ldr	r3, [pc, #24]	; (800c988 <mix_sub_columns+0x34c>)
 800c970:	5c9a      	ldrb	r2, [r3, r2]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	330f      	adds	r3, #15
 800c976:	404a      	eors	r2, r1
 800c978:	b2d2      	uxtb	r2, r2
 800c97a:	701a      	strb	r2, [r3, #0]
  }
 800c97c:	bf00      	nop
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	0801d8a8 	.word	0x0801d8a8
 800c988:	0801d9a8 	.word	0x0801d9a8
 800c98c:	0801daa8 	.word	0x0801daa8

0800c990 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	460b      	mov	r3, r1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c99e:	7afb      	ldrb	r3, [r7, #11]
 800c9a0:	3b10      	subs	r3, #16
 800c9a2:	2b10      	cmp	r3, #16
 800c9a4:	bf8c      	ite	hi
 800c9a6:	2201      	movhi	r2, #1
 800c9a8:	2200      	movls	r2, #0
 800c9aa:	b2d2      	uxtb	r2, r2
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	d10d      	bne.n	800c9cc <lorawan_aes_set_key+0x3c>
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c9ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bf14      	ite	ne
 800c9c2:	2301      	movne	r3, #1
 800c9c4:	2300      	moveq	r3, #0
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d105      	bne.n	800c9d8 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800c9d4:	23ff      	movs	r3, #255	; 0xff
 800c9d6:	e0b2      	b.n	800cb3e <lorawan_aes_set_key+0x1ae>
        break;
 800c9d8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7afa      	ldrb	r2, [r7, #11]
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fbfa 	bl	800c1da <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c9e6:	7afb      	ldrb	r3, [r7, #11]
 800c9e8:	331c      	adds	r3, #28
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c9f0:	7c7b      	ldrb	r3, [r7, #17]
 800c9f2:	091b      	lsrs	r3, r3, #4
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	75fb      	strb	r3, [r7, #23]
 800ca04:	2301      	movs	r3, #1
 800ca06:	75bb      	strb	r3, [r7, #22]
 800ca08:	e093      	b.n	800cb32 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	3b04      	subs	r3, #4
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	5cd3      	ldrb	r3, [r2, r3]
 800ca12:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ca14:	7dfb      	ldrb	r3, [r7, #23]
 800ca16:	3b03      	subs	r3, #3
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	5cd3      	ldrb	r3, [r2, r3]
 800ca1c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	3b02      	subs	r3, #2
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	5cd3      	ldrb	r3, [r2, r3]
 800ca26:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	5cd3      	ldrb	r3, [r2, r3]
 800ca30:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	7afa      	ldrb	r2, [r7, #11]
 800ca36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca3a:	fb01 f202 	mul.w	r2, r1, r2
 800ca3e:	1a9b      	subs	r3, r3, r2
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d127      	bne.n	800ca96 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ca46:	7d7b      	ldrb	r3, [r7, #21]
 800ca48:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ca4a:	7d3b      	ldrb	r3, [r7, #20]
 800ca4c:	4a3e      	ldr	r2, [pc, #248]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800ca4e:	5cd2      	ldrb	r2, [r2, r3]
 800ca50:	7dbb      	ldrb	r3, [r7, #22]
 800ca52:	4053      	eors	r3, r2
 800ca54:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ca56:	7cfb      	ldrb	r3, [r7, #19]
 800ca58:	4a3b      	ldr	r2, [pc, #236]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800ca5a:	5cd3      	ldrb	r3, [r2, r3]
 800ca5c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ca5e:	7cbb      	ldrb	r3, [r7, #18]
 800ca60:	4a39      	ldr	r2, [pc, #228]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800ca62:	5cd3      	ldrb	r3, [r2, r3]
 800ca64:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ca66:	7c3b      	ldrb	r3, [r7, #16]
 800ca68:	4a37      	ldr	r2, [pc, #220]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800ca6a:	5cd3      	ldrb	r3, [r2, r3]
 800ca6c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ca6e:	7dbb      	ldrb	r3, [r7, #22]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	b25a      	sxtb	r2, r3
 800ca74:	7dbb      	ldrb	r3, [r7, #22]
 800ca76:	09db      	lsrs	r3, r3, #7
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	0049      	lsls	r1, r1, #1
 800ca7e:	440b      	add	r3, r1
 800ca80:	4619      	mov	r1, r3
 800ca82:	00c8      	lsls	r0, r1, #3
 800ca84:	4619      	mov	r1, r3
 800ca86:	4603      	mov	r3, r0
 800ca88:	440b      	add	r3, r1
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	b25b      	sxtb	r3, r3
 800ca8e:	4053      	eors	r3, r2
 800ca90:	b25b      	sxtb	r3, r3
 800ca92:	75bb      	strb	r3, [r7, #22]
 800ca94:	e01c      	b.n	800cad0 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ca96:	7afb      	ldrb	r3, [r7, #11]
 800ca98:	2b18      	cmp	r3, #24
 800ca9a:	d919      	bls.n	800cad0 <lorawan_aes_set_key+0x140>
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	7afa      	ldrb	r2, [r7, #11]
 800caa0:	fbb3 f1f2 	udiv	r1, r3, r2
 800caa4:	fb01 f202 	mul.w	r2, r1, r2
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b10      	cmp	r3, #16
 800caae:	d10f      	bne.n	800cad0 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800cab0:	7d7b      	ldrb	r3, [r7, #21]
 800cab2:	4a25      	ldr	r2, [pc, #148]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800cab4:	5cd3      	ldrb	r3, [r2, r3]
 800cab6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cab8:	7d3b      	ldrb	r3, [r7, #20]
 800caba:	4a23      	ldr	r2, [pc, #140]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800cabc:	5cd3      	ldrb	r3, [r2, r3]
 800cabe:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cac0:	7cfb      	ldrb	r3, [r7, #19]
 800cac2:	4a21      	ldr	r2, [pc, #132]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800cac4:	5cd3      	ldrb	r3, [r2, r3]
 800cac6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cac8:	7cbb      	ldrb	r3, [r7, #18]
 800caca:	4a1f      	ldr	r2, [pc, #124]	; (800cb48 <lorawan_aes_set_key+0x1b8>)
 800cacc:	5cd3      	ldrb	r3, [r2, r3]
 800cace:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cad0:	7dfa      	ldrb	r2, [r7, #23]
 800cad2:	7afb      	ldrb	r3, [r7, #11]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cad8:	7c3b      	ldrb	r3, [r7, #16]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	5cd1      	ldrb	r1, [r2, r3]
 800cade:	7dfb      	ldrb	r3, [r7, #23]
 800cae0:	7d7a      	ldrb	r2, [r7, #21]
 800cae2:	404a      	eors	r2, r1
 800cae4:	b2d1      	uxtb	r1, r2
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800caea:	7c3b      	ldrb	r3, [r7, #16]
 800caec:	3301      	adds	r3, #1
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	5cd1      	ldrb	r1, [r2, r3]
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	3301      	adds	r3, #1
 800caf6:	7d3a      	ldrb	r2, [r7, #20]
 800caf8:	404a      	eors	r2, r1
 800cafa:	b2d1      	uxtb	r1, r2
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cb00:	7c3b      	ldrb	r3, [r7, #16]
 800cb02:	3302      	adds	r3, #2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	5cd1      	ldrb	r1, [r2, r3]
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	3302      	adds	r3, #2
 800cb0c:	7cfa      	ldrb	r2, [r7, #19]
 800cb0e:	404a      	eors	r2, r1
 800cb10:	b2d1      	uxtb	r1, r2
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cb16:	7c3b      	ldrb	r3, [r7, #16]
 800cb18:	3303      	adds	r3, #3
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	5cd1      	ldrb	r1, [r2, r3]
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	3303      	adds	r3, #3
 800cb22:	7cba      	ldrb	r2, [r7, #18]
 800cb24:	404a      	eors	r2, r1
 800cb26:	b2d1      	uxtb	r1, r2
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	75fb      	strb	r3, [r7, #23]
 800cb32:	7dfa      	ldrb	r2, [r7, #23]
 800cb34:	7c7b      	ldrb	r3, [r7, #17]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	f4ff af67 	bcc.w	800ca0a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	0801d8a8 	.word	0x0801d8a8

0800cb4c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d038      	beq.n	800cbd4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	f107 0314 	add.w	r3, r7, #20
 800cb68:	68f9      	ldr	r1, [r7, #12]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fc07 	bl	800c37e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cb70:	2301      	movs	r3, #1
 800cb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb76:	e014      	b.n	800cba2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cb78:	f107 0314 	add.w	r3, r7, #20
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff fd5d 	bl	800c63c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb88:	0112      	lsls	r2, r2, #4
 800cb8a:	441a      	add	r2, r3
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	4611      	mov	r1, r2
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fcab 	bl	800c4ee <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cba8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d3e3      	bcc.n	800cb78 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cbb0:	f107 0314 	add.w	r3, r7, #20
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fca7 	bl	800c508 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbc0:	0112      	lsls	r2, r2, #4
 800cbc2:	441a      	add	r2, r3
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	4619      	mov	r1, r3
 800cbca:	68b8      	ldr	r0, [r7, #8]
 800cbcc:	f7ff fbd7 	bl	800c37e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e000      	b.n	800cbd6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cbd4:	23ff      	movs	r3, #255	; 0xff
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3728      	adds	r7, #40	; 0x28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
	...

0800cbe0 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800cbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe2:	b09d      	sub	sp, #116	; 0x74
 800cbe4:	af10      	add	r7, sp, #64	; 0x40
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cbec:	2306      	movs	r3, #6
 800cbee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800cbf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f9a7 	bl	800cf50 <SecureElementGetKeyByID>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800cc08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 80b0 	bne.w	800cd72 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800cc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800cc1a:	4b58      	ldr	r3, [pc, #352]	; (800cd7c <PrintKey+0x19c>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2100      	movs	r1, #0
 800cc20:	2002      	movs	r0, #2
 800cc22:	f00f feb1 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc26:	e056      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d106      	bne.n	800cc3e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800cc30:	4b53      	ldr	r3, [pc, #332]	; (800cd80 <PrintKey+0x1a0>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	2100      	movs	r1, #0
 800cc36:	2002      	movs	r0, #2
 800cc38:	f00f fea6 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc3c:	e04b      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800cc3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d106      	bne.n	800cc54 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800cc46:	4b4f      	ldr	r3, [pc, #316]	; (800cd84 <PrintKey+0x1a4>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	2002      	movs	r0, #2
 800cc4e:	f00f fe9b 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc52:	e040      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800cc54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d106      	bne.n	800cc6a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800cc5c:	4b4a      	ldr	r3, [pc, #296]	; (800cd88 <PrintKey+0x1a8>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	2100      	movs	r1, #0
 800cc62:	2002      	movs	r0, #2
 800cc64:	f00f fe90 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc68:	e035      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800cc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc6e:	2b04      	cmp	r3, #4
 800cc70:	d106      	bne.n	800cc80 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800cc72:	4b46      	ldr	r3, [pc, #280]	; (800cd8c <PrintKey+0x1ac>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	2100      	movs	r1, #0
 800cc78:	2002      	movs	r0, #2
 800cc7a:	f00f fe85 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc7e:	e02a      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc84:	2b7f      	cmp	r3, #127	; 0x7f
 800cc86:	d106      	bne.n	800cc96 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800cc88:	4b41      	ldr	r3, [pc, #260]	; (800cd90 <PrintKey+0x1b0>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2002      	movs	r0, #2
 800cc90:	f00f fe7a 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800cc94:	e01f      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800cc96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9a:	2b80      	cmp	r3, #128	; 0x80
 800cc9c:	d106      	bne.n	800ccac <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800cc9e:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <PrintKey+0x1b4>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	2100      	movs	r1, #0
 800cca4:	2002      	movs	r0, #2
 800cca6:	f00f fe6f 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800ccaa:	e014      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb0:	2b81      	cmp	r3, #129	; 0x81
 800ccb2:	d106      	bne.n	800ccc2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ccb4:	4b38      	ldr	r3, [pc, #224]	; (800cd98 <PrintKey+0x1b8>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2100      	movs	r1, #0
 800ccba:	2002      	movs	r0, #2
 800ccbc:	f00f fe64 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 800ccc0:	e009      	b.n	800ccd6 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ccc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc6:	2b82      	cmp	r3, #130	; 0x82
 800ccc8:	d105      	bne.n	800ccd6 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ccca:	4b34      	ldr	r3, [pc, #208]	; (800cd9c <PrintKey+0x1bc>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	2100      	movs	r1, #0
 800ccd0:	2002      	movs	r0, #2
 800ccd2:	f00f fe59 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	785b      	ldrb	r3, [r3, #1]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	789b      	ldrb	r3, [r3, #2]
 800cce0:	461c      	mov	r4, r3
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	78db      	ldrb	r3, [r3, #3]
 800cce6:	461d      	mov	r5, r3
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	791b      	ldrb	r3, [r3, #4]
 800ccec:	461e      	mov	r6, r3
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	795b      	ldrb	r3, [r3, #5]
 800ccf2:	623b      	str	r3, [r7, #32]
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	799b      	ldrb	r3, [r3, #6]
 800ccf8:	61fb      	str	r3, [r7, #28]
 800ccfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfc:	79db      	ldrb	r3, [r3, #7]
 800ccfe:	61bb      	str	r3, [r7, #24]
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	7a1b      	ldrb	r3, [r3, #8]
 800cd04:	617b      	str	r3, [r7, #20]
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	7a5b      	ldrb	r3, [r3, #9]
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	7a9b      	ldrb	r3, [r3, #10]
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	7adb      	ldrb	r3, [r3, #11]
 800cd16:	60bb      	str	r3, [r7, #8]
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	7b1b      	ldrb	r3, [r3, #12]
 800cd1c:	607b      	str	r3, [r7, #4]
 800cd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd20:	7b5b      	ldrb	r3, [r3, #13]
 800cd22:	603b      	str	r3, [r7, #0]
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	7b9b      	ldrb	r3, [r3, #14]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	7bdb      	ldrb	r3, [r3, #15]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	7c1b      	ldrb	r3, [r3, #16]
 800cd34:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd36:	920e      	str	r2, [sp, #56]	; 0x38
 800cd38:	910d      	str	r1, [sp, #52]	; 0x34
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	920c      	str	r2, [sp, #48]	; 0x30
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	920a      	str	r2, [sp, #40]	; 0x28
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	9209      	str	r2, [sp, #36]	; 0x24
 800cd4a:	693a      	ldr	r2, [r7, #16]
 800cd4c:	9208      	str	r2, [sp, #32]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	9207      	str	r2, [sp, #28]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	9206      	str	r2, [sp, #24]
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	9205      	str	r2, [sp, #20]
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	9603      	str	r6, [sp, #12]
 800cd60:	9502      	str	r5, [sp, #8]
 800cd62:	9401      	str	r4, [sp, #4]
 800cd64:	9000      	str	r0, [sp, #0]
 800cd66:	4b0e      	ldr	r3, [pc, #56]	; (800cda0 <PrintKey+0x1c0>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	2002      	movs	r0, #2
 800cd6e:	f00f fe0b 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800cd72:	bf00      	nop
 800cd74:	3734      	adds	r7, #52	; 0x34
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0801d320 	.word	0x0801d320
 800cd80:	0801d338 	.word	0x0801d338
 800cd84:	0801d350 	.word	0x0801d350
 800cd88:	0801d368 	.word	0x0801d368
 800cd8c:	0801d380 	.word	0x0801d380
 800cd90:	0801d398 	.word	0x0801d398
 800cd94:	0801d3b0 	.word	0x0801d3b0
 800cd98:	0801d3c8 	.word	0x0801d3c8
 800cd9c:	0801d3e0 	.word	0x0801d3e0
 800cda0:	0801d3f8 	.word	0x0801d3f8

0800cda4 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	6039      	str	r1, [r7, #0]
 800cdae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
 800cdb4:	e01a      	b.n	800cdec <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cdb6:	4b12      	ldr	r3, [pc, #72]	; (800ce00 <GetKeyByID+0x5c>)
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	7bfa      	ldrb	r2, [r7, #15]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	4413      	add	r3, r2
 800cdc2:	440b      	add	r3, r1
 800cdc4:	3310      	adds	r3, #16
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	79fa      	ldrb	r2, [r7, #7]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d10b      	bne.n	800cde6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cdce:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <GetKeyByID+0x5c>)
 800cdd0:	6819      	ldr	r1, [r3, #0]
 800cdd2:	7bfa      	ldrb	r2, [r7, #15]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	4413      	add	r3, r2
 800cdda:	3310      	adds	r3, #16
 800cddc:	18ca      	adds	r2, r1, r3
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e006      	b.n	800cdf4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	3301      	adds	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b09      	cmp	r3, #9
 800cdf0:	d9e1      	bls.n	800cdb6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cdf2:	2303      	movs	r3, #3
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bc80      	pop	{r7}
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	20000510 	.word	0x20000510

0800ce04 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b0d1      	sub	sp, #324	; 0x144
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ce0e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ce12:	6020      	str	r0, [r4, #0]
 800ce14:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ce18:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ce1c:	6001      	str	r1, [r0, #0]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce24:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ce28:	801a      	strh	r2, [r3, #0]
 800ce2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce2e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ce32:	460a      	mov	r2, r1
 800ce34:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ce36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <ComputeCmac+0x48>
 800ce44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e05c      	b.n	800cf0a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ce50:	f107 0314 	add.w	r3, r7, #20
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe ff1b 	bl	800bc90 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ce5a:	f107 0210 	add.w	r2, r7, #16
 800ce5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce62:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff ff9a 	bl	800cda4 <GetKeyByID>
 800ce70:	4603      	mov	r3, r0
 800ce72:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ce76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d143      	bne.n	800cf06 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ce7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	f107 0314 	add.w	r3, r7, #20
 800ce8e:	4611      	mov	r1, r2
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe ff16 	bl	800bcc2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ce96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d009      	beq.n	800ceb8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800cea4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cea8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ceac:	f107 0014 	add.w	r0, r7, #20
 800ceb0:	2210      	movs	r2, #16
 800ceb2:	6819      	ldr	r1, [r3, #0]
 800ceb4:	f7fe ff14 	bl	800bce0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ceb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cebc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cec0:	881a      	ldrh	r2, [r3, #0]
 800cec2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cec6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ceca:	f107 0014 	add.w	r0, r7, #20
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	f7fe ff06 	bl	800bce0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ced4:	f107 0214 	add.w	r2, r7, #20
 800ced8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe ffc0 	bl	800be64 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cee4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800cee8:	061a      	lsls	r2, r3, #24
 800ceea:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ceee:	041b      	lsls	r3, r3, #16
 800cef0:	431a      	orrs	r2, r3
 800cef2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800cef6:	021b      	lsls	r3, r3, #8
 800cef8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800cefa:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cefe:	431a      	orrs	r2, r3
 800cf00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cf04:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800cf06:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd90      	pop	{r4, r7, pc}

0800cf14 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf24:	2302      	movs	r3, #2
 800cf26:	e00a      	b.n	800cf3e <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800cf28:	4a07      	ldr	r2, [pc, #28]	; (800cf48 <SecureElementInit+0x34>)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800cf2e:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <SecureElementInit+0x34>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	22c0      	movs	r2, #192	; 0xc0
 800cf34:	4905      	ldr	r1, [pc, #20]	; (800cf4c <SecureElementInit+0x38>)
 800cf36:	4618      	mov	r0, r3
 800cf38:	f00b f9d1 	bl	80182de <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20000510 	.word	0x20000510
 800cf4c:	0801dd84 	.word	0x0801dd84

0800cf50 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	6039      	str	r1, [r7, #0]
 800cf5a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
 800cf60:	e01a      	b.n	800cf98 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800cf62:	4b12      	ldr	r3, [pc, #72]	; (800cfac <SecureElementGetKeyByID+0x5c>)
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	7bfa      	ldrb	r2, [r7, #15]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	011b      	lsls	r3, r3, #4
 800cf6c:	4413      	add	r3, r2
 800cf6e:	440b      	add	r3, r1
 800cf70:	3310      	adds	r3, #16
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	79fa      	ldrb	r2, [r7, #7]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d10b      	bne.n	800cf92 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <SecureElementGetKeyByID+0x5c>)
 800cf7c:	6819      	ldr	r1, [r3, #0]
 800cf7e:	7bfa      	ldrb	r2, [r7, #15]
 800cf80:	4613      	mov	r3, r2
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	4413      	add	r3, r2
 800cf86:	3310      	adds	r3, #16
 800cf88:	18ca      	adds	r2, r1, r3
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e006      	b.n	800cfa0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	3301      	adds	r3, #1
 800cf96:	73fb      	strb	r3, [r7, #15]
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	2b09      	cmp	r3, #9
 800cf9c:	d9e1      	bls.n	800cf62 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cf9e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bc80      	pop	{r7}
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	20000510 	.word	0x20000510

0800cfb0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfb2:	b08b      	sub	sp, #44	; 0x2c
 800cfb4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cfb6:	4b3f      	ldr	r3, [pc, #252]	; (800d0b4 <SecureElementPrintKeys+0x104>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2100      	movs	r1, #0
 800cfbc:	2002      	movs	r0, #2
 800cfbe:	f00f fce3 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f7ff fe0c 	bl	800cbe0 <PrintKey>
    PrintKey(NWK_KEY);
 800cfc8:	2001      	movs	r0, #1
 800cfca:	f7ff fe09 	bl	800cbe0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cfce:	4b3a      	ldr	r3, [pc, #232]	; (800d0b8 <SecureElementPrintKeys+0x108>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	2002      	movs	r0, #2
 800cfd6:	f00f fcd7 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800cfda:	2003      	movs	r0, #3
 800cfdc:	f7ff fe00 	bl	800cbe0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800cfe0:	2002      	movs	r0, #2
 800cfe2:	f7ff fdfd 	bl	800cbe0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800cfe6:	4b35      	ldr	r3, [pc, #212]	; (800d0bc <SecureElementPrintKeys+0x10c>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	2002      	movs	r0, #2
 800cfee:	f00f fccb 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cff2:	4b33      	ldr	r3, [pc, #204]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	461a      	mov	r2, r3
 800cffa:	4b31      	ldr	r3, [pc, #196]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	4619      	mov	r1, r3
 800d002:	4b2f      	ldr	r3, [pc, #188]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	789b      	ldrb	r3, [r3, #2]
 800d008:	4618      	mov	r0, r3
 800d00a:	4b2d      	ldr	r3, [pc, #180]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	78db      	ldrb	r3, [r3, #3]
 800d010:	461c      	mov	r4, r3
 800d012:	4b2b      	ldr	r3, [pc, #172]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	791b      	ldrb	r3, [r3, #4]
 800d018:	461d      	mov	r5, r3
 800d01a:	4b29      	ldr	r3, [pc, #164]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	795b      	ldrb	r3, [r3, #5]
 800d020:	461e      	mov	r6, r3
 800d022:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	799b      	ldrb	r3, [r3, #6]
 800d028:	607b      	str	r3, [r7, #4]
 800d02a:	4b25      	ldr	r3, [pc, #148]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	79db      	ldrb	r3, [r3, #7]
 800d030:	9307      	str	r3, [sp, #28]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	9306      	str	r3, [sp, #24]
 800d036:	9605      	str	r6, [sp, #20]
 800d038:	9504      	str	r5, [sp, #16]
 800d03a:	9403      	str	r4, [sp, #12]
 800d03c:	9002      	str	r0, [sp, #8]
 800d03e:	9101      	str	r1, [sp, #4]
 800d040:	9200      	str	r2, [sp, #0]
 800d042:	4b20      	ldr	r3, [pc, #128]	; (800d0c4 <SecureElementPrintKeys+0x114>)
 800d044:	2200      	movs	r2, #0
 800d046:	2100      	movs	r1, #0
 800d048:	2002      	movs	r0, #2
 800d04a:	f00f fc9d 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d04e:	4b1c      	ldr	r3, [pc, #112]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	7a1b      	ldrb	r3, [r3, #8]
 800d054:	461a      	mov	r2, r3
 800d056:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	7a5b      	ldrb	r3, [r3, #9]
 800d05c:	4619      	mov	r1, r3
 800d05e:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	7a9b      	ldrb	r3, [r3, #10]
 800d064:	4618      	mov	r0, r3
 800d066:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	7adb      	ldrb	r3, [r3, #11]
 800d06c:	461c      	mov	r4, r3
 800d06e:	4b14      	ldr	r3, [pc, #80]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	7b1b      	ldrb	r3, [r3, #12]
 800d074:	461d      	mov	r5, r3
 800d076:	4b12      	ldr	r3, [pc, #72]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	7b5b      	ldrb	r3, [r3, #13]
 800d07c:	461e      	mov	r6, r3
 800d07e:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	7b9b      	ldrb	r3, [r3, #14]
 800d084:	607b      	str	r3, [r7, #4]
 800d086:	4b0e      	ldr	r3, [pc, #56]	; (800d0c0 <SecureElementPrintKeys+0x110>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	7bdb      	ldrb	r3, [r3, #15]
 800d08c:	9307      	str	r3, [sp, #28]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	9306      	str	r3, [sp, #24]
 800d092:	9605      	str	r6, [sp, #20]
 800d094:	9504      	str	r5, [sp, #16]
 800d096:	9403      	str	r4, [sp, #12]
 800d098:	9002      	str	r0, [sp, #8]
 800d09a:	9101      	str	r1, [sp, #4]
 800d09c:	9200      	str	r2, [sp, #0]
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <SecureElementPrintKeys+0x118>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	2002      	movs	r0, #2
 800d0a6:	f00f fc6f 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b4:	0801d44c 	.word	0x0801d44c
 800d0b8:	0801d464 	.word	0x0801d464
 800d0bc:	0801d47c 	.word	0x0801d47c
 800d0c0:	20000510 	.word	0x20000510
 800d0c4:	0801d494 	.word	0x0801d494
 800d0c8:	0801d4d4 	.word	0x0801d4d4

0800d0cc <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800d0d0:	2004      	movs	r0, #4
 800d0d2:	f7ff fd85 	bl	800cbe0 <PrintKey>
    PrintKey(MC_KE_KEY);
 800d0d6:	207f      	movs	r0, #127	; 0x7f
 800d0d8:	f7ff fd82 	bl	800cbe0 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800d0dc:	2002      	movs	r0, #2
 800d0de:	f7ff fd7f 	bl	800cbe0 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800d0e2:	2003      	movs	r0, #3
 800d0e4:	f7ff fd7c 	bl	800cbe0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	bd80      	pop	{r7, pc}
	...

0800d0f0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b088      	sub	sp, #32
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	6039      	str	r1, [r7, #0]
 800d0fa:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d102:	2302      	movs	r3, #2
 800d104:	e04c      	b.n	800d1a0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d106:	2300      	movs	r3, #0
 800d108:	77fb      	strb	r3, [r7, #31]
 800d10a:	e045      	b.n	800d198 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d10c:	4b26      	ldr	r3, [pc, #152]	; (800d1a8 <SecureElementSetKey+0xb8>)
 800d10e:	6819      	ldr	r1, [r3, #0]
 800d110:	7ffa      	ldrb	r2, [r7, #31]
 800d112:	4613      	mov	r3, r2
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	4413      	add	r3, r2
 800d118:	440b      	add	r3, r1
 800d11a:	3310      	adds	r3, #16
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	79fa      	ldrb	r2, [r7, #7]
 800d120:	429a      	cmp	r2, r3
 800d122:	d136      	bne.n	800d192 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d124:	79fb      	ldrb	r3, [r7, #7]
 800d126:	2b80      	cmp	r3, #128	; 0x80
 800d128:	d123      	bne.n	800d172 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d12a:	2306      	movs	r3, #6
 800d12c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d12e:	2300      	movs	r3, #0
 800d130:	60fb      	str	r3, [r7, #12]
 800d132:	f107 0310 	add.w	r3, r7, #16
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	605a      	str	r2, [r3, #4]
 800d13c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d13e:	f107 030c 	add.w	r3, r7, #12
 800d142:	227f      	movs	r2, #127	; 0x7f
 800d144:	2110      	movs	r1, #16
 800d146:	6838      	ldr	r0, [r7, #0]
 800d148:	f000 f87d 	bl	800d246 <SecureElementAesEncrypt>
 800d14c:	4603      	mov	r3, r0
 800d14e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d150:	4b15      	ldr	r3, [pc, #84]	; (800d1a8 <SecureElementSetKey+0xb8>)
 800d152:	6819      	ldr	r1, [r3, #0]
 800d154:	7ffa      	ldrb	r2, [r7, #31]
 800d156:	4613      	mov	r3, r2
 800d158:	011b      	lsls	r3, r3, #4
 800d15a:	4413      	add	r3, r2
 800d15c:	3310      	adds	r3, #16
 800d15e:	440b      	add	r3, r1
 800d160:	3301      	adds	r3, #1
 800d162:	f107 010c 	add.w	r1, r7, #12
 800d166:	2210      	movs	r2, #16
 800d168:	4618      	mov	r0, r3
 800d16a:	f00b f8b8 	bl	80182de <memcpy1>
                return retval;
 800d16e:	7fbb      	ldrb	r3, [r7, #30]
 800d170:	e016      	b.n	800d1a0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d172:	4b0d      	ldr	r3, [pc, #52]	; (800d1a8 <SecureElementSetKey+0xb8>)
 800d174:	6819      	ldr	r1, [r3, #0]
 800d176:	7ffa      	ldrb	r2, [r7, #31]
 800d178:	4613      	mov	r3, r2
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	4413      	add	r3, r2
 800d17e:	3310      	adds	r3, #16
 800d180:	440b      	add	r3, r1
 800d182:	3301      	adds	r3, #1
 800d184:	2210      	movs	r2, #16
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	4618      	mov	r0, r3
 800d18a:	f00b f8a8 	bl	80182de <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d18e:	2300      	movs	r3, #0
 800d190:	e006      	b.n	800d1a0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d192:	7ffb      	ldrb	r3, [r7, #31]
 800d194:	3301      	adds	r3, #1
 800d196:	77fb      	strb	r3, [r7, #31]
 800d198:	7ffb      	ldrb	r3, [r7, #31]
 800d19a:	2b09      	cmp	r3, #9
 800d19c:	d9b6      	bls.n	800d10c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d19e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	20000510 	.word	0x20000510

0800d1ac <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	80fb      	strh	r3, [r7, #6]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d1c2:	797b      	ldrb	r3, [r7, #5]
 800d1c4:	2b7e      	cmp	r3, #126	; 0x7e
 800d1c6:	d901      	bls.n	800d1cc <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e009      	b.n	800d1e0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d1cc:	7979      	ldrb	r1, [r7, #5]
 800d1ce:	88fa      	ldrh	r2, [r7, #6]
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fe13 	bl	800ce04 <ComputeCmac>
 800d1de:	4603      	mov	r3, r0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af02      	add	r7, sp, #8
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	607a      	str	r2, [r7, #4]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	817b      	strh	r3, [r7, #10]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d101      	bne.n	800d206 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d202:	2302      	movs	r3, #2
 800d204:	e01b      	b.n	800d23e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d206:	2306      	movs	r3, #6
 800d208:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d20e:	7a79      	ldrb	r1, [r7, #9]
 800d210:	897a      	ldrh	r2, [r7, #10]
 800d212:	f107 0310 	add.w	r3, r7, #16
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	460b      	mov	r3, r1
 800d21a:	68f9      	ldr	r1, [r7, #12]
 800d21c:	2000      	movs	r0, #0
 800d21e:	f7ff fdf1 	bl	800ce04 <ComputeCmac>
 800d222:	4603      	mov	r3, r0
 800d224:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d226:	7dfb      	ldrb	r3, [r7, #23]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d001      	beq.n	800d230 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
 800d22e:	e006      	b.n	800d23e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d001      	beq.n	800d23c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d238:	2301      	movs	r3, #1
 800d23a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b0c2      	sub	sp, #264	; 0x108
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	4608      	mov	r0, r1
 800d250:	4611      	mov	r1, r2
 800d252:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d256:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	4603      	mov	r3, r0
 800d25e:	817b      	strh	r3, [r7, #10]
 800d260:	460b      	mov	r3, r1
 800d262:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d006      	beq.n	800d278 <SecureElementAesEncrypt+0x32>
 800d26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d278:	2302      	movs	r3, #2
 800d27a:	e046      	b.n	800d30a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d27c:	897b      	ldrh	r3, [r7, #10]
 800d27e:	f003 030f 	and.w	r3, r3, #15
 800d282:	b29b      	uxth	r3, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d288:	2305      	movs	r3, #5
 800d28a:	e03e      	b.n	800d30a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d28c:	f107 0314 	add.w	r3, r7, #20
 800d290:	22f0      	movs	r2, #240	; 0xf0
 800d292:	2100      	movs	r1, #0
 800d294:	4618      	mov	r0, r3
 800d296:	f00b f85d 	bl	8018354 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d29a:	f107 0210 	add.w	r2, r7, #16
 800d29e:	7a7b      	ldrb	r3, [r7, #9]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff fd7e 	bl	800cda4 <GetKeyByID>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d2ae:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d127      	bne.n	800d306 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	f107 0214 	add.w	r2, r7, #20
 800d2be:	2110      	movs	r1, #16
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fb65 	bl	800c990 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d2cc:	e018      	b.n	800d300 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d2ce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	18d0      	adds	r0, r2, r3
 800d2d6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d2da:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d2de:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d2e2:	6812      	ldr	r2, [r2, #0]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	f107 0214 	add.w	r2, r7, #20
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	f7ff fc2e 	bl	800cb4c <lorawan_aes_encrypt>
            block = block + 16;
 800d2f0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d2fa:	897b      	ldrh	r3, [r7, #10]
 800d2fc:	3b10      	subs	r3, #16
 800d2fe:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d300:	897b      	ldrh	r3, [r7, #10]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e3      	bne.n	800d2ce <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d306:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
 800d320:	4613      	mov	r3, r2
 800d322:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d32a:	2302      	movs	r3, #2
 800d32c:	e02e      	b.n	800d38c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d32e:	2306      	movs	r3, #6
 800d330:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d332:	78bb      	ldrb	r3, [r7, #2]
 800d334:	2b7f      	cmp	r3, #127	; 0x7f
 800d336:	d104      	bne.n	800d342 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d338:	78fb      	ldrb	r3, [r7, #3]
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d001      	beq.n	800d342 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d33e:	2303      	movs	r3, #3
 800d340:	e024      	b.n	800d38c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d342:	2300      	movs	r3, #0
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	f107 0310 	add.w	r3, r7, #16
 800d34a:	2200      	movs	r2, #0
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	605a      	str	r2, [r3, #4]
 800d350:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d352:	f107 030c 	add.w	r3, r7, #12
 800d356:	78fa      	ldrb	r2, [r7, #3]
 800d358:	2110      	movs	r1, #16
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7ff ff73 	bl	800d246 <SecureElementAesEncrypt>
 800d360:	4603      	mov	r3, r0
 800d362:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d364:	7ffb      	ldrb	r3, [r7, #31]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d36a:	7ffb      	ldrb	r3, [r7, #31]
 800d36c:	e00e      	b.n	800d38c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d36e:	f107 020c 	add.w	r2, r7, #12
 800d372:	78bb      	ldrb	r3, [r7, #2]
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff feba 	bl	800d0f0 <SecureElementSetKey>
 800d37c:	4603      	mov	r3, r0
 800d37e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d380:	7ffb      	ldrb	r3, [r7, #31]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d386:	7ffb      	ldrb	r3, [r7, #31]
 800d388:	e000      	b.n	800d38c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d38a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607b      	str	r3, [r7, #4]
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73fb      	strb	r3, [r7, #15]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d005      	beq.n	800d3b8 <SecureElementProcessJoinAccept+0x24>
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <SecureElementProcessJoinAccept+0x24>
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	e064      	b.n	800d486 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d3bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3c0:	2b21      	cmp	r3, #33	; 0x21
 800d3c2:	d901      	bls.n	800d3c8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d3c4:	2305      	movs	r3, #5
 800d3c6:	e05e      	b.n	800d486 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d3cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3d8:	f00a ff81 	bl	80182de <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	1c58      	adds	r0, r3, #1
 800d3e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	b299      	uxth	r1, r3
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	7dfa      	ldrb	r2, [r7, #23]
 800d3f0:	f7ff ff29 	bl	800d246 <SecureElementAesEncrypt>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d3fa:	2307      	movs	r3, #7
 800d3fc:	e043      	b.n	800d486 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	330b      	adds	r3, #11
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	09db      	lsrs	r3, r3, #7
 800d406:	b2da      	uxtb	r2, r3
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d410:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d414:	3b04      	subs	r3, #4
 800d416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d418:	4413      	add	r3, r2
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d41e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d422:	3b03      	subs	r3, #3
 800d424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d426:	4413      	add	r3, r2
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d432:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d436:	3b02      	subs	r3, #2
 800d438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43a:	4413      	add	r3, r2
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	041b      	lsls	r3, r3, #16
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	4313      	orrs	r3, r2
 800d444:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d44e:	4413      	add	r3, r2
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	061b      	lsls	r3, r3, #24
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	4313      	orrs	r3, r2
 800d458:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10e      	bne.n	800d480 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d462:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d466:	b29b      	uxth	r3, r3
 800d468:	3b04      	subs	r3, #4
 800d46a:	b299      	uxth	r1, r3
 800d46c:	2301      	movs	r3, #1
 800d46e:	693a      	ldr	r2, [r7, #16]
 800d470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d472:	f7ff feb9 	bl	800d1e8 <SecureElementVerifyAesCmac>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e002      	b.n	800d486 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d480:	2304      	movs	r3, #4
 800d482:	e000      	b.n	800d486 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
	...

0800d490 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d49e:	2302      	movs	r3, #2
 800d4a0:	e007      	b.n	800d4b2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d4a2:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <SecureElementSetDevEui+0x2c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2208      	movs	r2, #8
 800d4a8:	6879      	ldr	r1, [r7, #4]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f00a ff17 	bl	80182de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20000510 	.word	0x20000510

0800d4c0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <SecureElementGetDevEui+0x10>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bc80      	pop	{r7}
 800d4ce:	4770      	bx	lr
 800d4d0:	20000510 	.word	0x20000510

0800d4d4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	e008      	b.n	800d4f8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d4e6:	4b06      	ldr	r3, [pc, #24]	; (800d500 <SecureElementSetJoinEui+0x2c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	2208      	movs	r2, #8
 800d4ee:	6879      	ldr	r1, [r7, #4]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f00a fef4 	bl	80182de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20000510 	.word	0x20000510

0800d504 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d504:	b480      	push	{r7}
 800d506:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d508:	4b03      	ldr	r3, [pc, #12]	; (800d518 <SecureElementGetJoinEui+0x14>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3308      	adds	r3, #8
}
 800d50e:	4618      	mov	r0, r3
 800d510:	46bd      	mov	sp, r7
 800d512:	bc80      	pop	{r7}
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20000510 	.word	0x20000510

0800d51c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d526:	4a23      	ldr	r2, [pc, #140]	; (800d5b4 <LmHandlerInit+0x98>)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d52c:	4b22      	ldr	r3, [pc, #136]	; (800d5b8 <LmHandlerInit+0x9c>)
 800d52e:	4a23      	ldr	r2, [pc, #140]	; (800d5bc <LmHandlerInit+0xa0>)
 800d530:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d532:	4b21      	ldr	r3, [pc, #132]	; (800d5b8 <LmHandlerInit+0x9c>)
 800d534:	4a22      	ldr	r2, [pc, #136]	; (800d5c0 <LmHandlerInit+0xa4>)
 800d536:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d538:	4b1f      	ldr	r3, [pc, #124]	; (800d5b8 <LmHandlerInit+0x9c>)
 800d53a:	4a22      	ldr	r2, [pc, #136]	; (800d5c4 <LmHandlerInit+0xa8>)
 800d53c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d53e:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <LmHandlerInit+0x9c>)
 800d540:	4a21      	ldr	r2, [pc, #132]	; (800d5c8 <LmHandlerInit+0xac>)
 800d542:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d544:	4b1b      	ldr	r3, [pc, #108]	; (800d5b4 <LmHandlerInit+0x98>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a20      	ldr	r2, [pc, #128]	; (800d5cc <LmHandlerInit+0xb0>)
 800d54c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d54e:	4b19      	ldr	r3, [pc, #100]	; (800d5b4 <LmHandlerInit+0x98>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	4a1d      	ldr	r2, [pc, #116]	; (800d5cc <LmHandlerInit+0xb0>)
 800d556:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d558:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <LmHandlerInit+0x98>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	4a1b      	ldr	r2, [pc, #108]	; (800d5cc <LmHandlerInit+0xb0>)
 800d560:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d562:	4b1a      	ldr	r3, [pc, #104]	; (800d5cc <LmHandlerInit+0xb0>)
 800d564:	4a1a      	ldr	r2, [pc, #104]	; (800d5d0 <LmHandlerInit+0xb4>)
 800d566:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d568:	4b12      	ldr	r3, [pc, #72]	; (800d5b4 <LmHandlerInit+0x98>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	4a17      	ldr	r2, [pc, #92]	; (800d5cc <LmHandlerInit+0xb0>)
 800d570:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d572:	4a18      	ldr	r2, [pc, #96]	; (800d5d4 <LmHandlerInit+0xb8>)
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d578:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <LmHandlerInit+0x98>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57e:	4a15      	ldr	r2, [pc, #84]	; (800d5d4 <LmHandlerInit+0xb8>)
 800d580:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800d582:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <LmHandlerInit+0x98>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d588:	4a12      	ldr	r2, [pc, #72]	; (800d5d4 <LmHandlerInit+0xb8>)
 800d58a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <LmHandlerInit+0x98>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d592:	4a10      	ldr	r2, [pc, #64]	; (800d5d4 <LmHandlerInit+0xb8>)
 800d594:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d596:	490f      	ldr	r1, [pc, #60]	; (800d5d4 <LmHandlerInit+0xb8>)
 800d598:	2000      	movs	r0, #0
 800d59a:	f000 fdab 	bl	800e0f4 <LmHandlerPackageRegister>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a8:	e000      	b.n	800d5ac <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	2000054c 	.word	0x2000054c
 800d5b8:	20000550 	.word	0x20000550
 800d5bc:	0800de01 	.word	0x0800de01
 800d5c0:	0800de69 	.word	0x0800de69
 800d5c4:	0800df35 	.word	0x0800df35
 800d5c8:	0800e04d 	.word	0x0800e04d
 800d5cc:	20000560 	.word	0x20000560
 800d5d0:	0800e4c9 	.word	0x0800e4c9
 800d5d4:	20000514 	.word	0x20000514

0800d5d8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b094      	sub	sp, #80	; 0x50
 800d5dc:	af04      	add	r7, sp, #16
 800d5de:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d5e0:	2214      	movs	r2, #20
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	4890      	ldr	r0, [pc, #576]	; (800d828 <LmHandlerConfigure+0x250>)
 800d5e6:	f00e f97f 	bl	801b8e8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800d5ea:	4b90      	ldr	r3, [pc, #576]	; (800d82c <LmHandlerConfigure+0x254>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d5f0:	f7fe fb0c 	bl	800bc0c <LoraInfo_GetPtr>
 800d5f4:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d5f6:	4b8c      	ldr	r3, [pc, #560]	; (800d828 <LmHandlerConfigure+0x250>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4093      	lsls	r3, r2
 800d600:	461a      	mov	r2, r3
 800d602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	4013      	ands	r3, r2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d60c:	4b88      	ldr	r3, [pc, #544]	; (800d830 <LmHandlerConfigure+0x258>)
 800d60e:	2201      	movs	r2, #1
 800d610:	2100      	movs	r1, #0
 800d612:	2000      	movs	r0, #0
 800d614:	f00f f9b8 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d618:	e7fe      	b.n	800d618 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d61a:	4b83      	ldr	r3, [pc, #524]	; (800d828 <LmHandlerConfigure+0x250>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	4984      	ldr	r1, [pc, #528]	; (800d834 <LmHandlerConfigure+0x25c>)
 800d622:	4885      	ldr	r0, [pc, #532]	; (800d838 <LmHandlerConfigure+0x260>)
 800d624:	f004 fe94 	bl	8012350 <LoRaMacInitialization>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800d62e:	f04f 33ff 	mov.w	r3, #4294967295
 800d632:	e0f5      	b.n	800d820 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800d634:	2327      	movs	r3, #39	; 0x27
 800d636:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d638:	f107 0318 	add.w	r3, r7, #24
 800d63c:	4618      	mov	r0, r3
 800d63e:	f005 fbd7 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800d648:	4b7c      	ldr	r3, [pc, #496]	; (800d83c <LmHandlerConfigure+0x264>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	701a      	strb	r2, [r3, #0]
 800d64e:	e02a      	b.n	800d6a6 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d650:	2328      	movs	r3, #40	; 0x28
 800d652:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d654:	4b7a      	ldr	r3, [pc, #488]	; (800d840 <LmHandlerConfigure+0x268>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00c      	beq.n	800d678 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d65e:	f107 0318 	add.w	r3, r7, #24
 800d662:	4618      	mov	r0, r3
 800d664:	f005 fa1e 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d668:	4b75      	ldr	r3, [pc, #468]	; (800d840 <LmHandlerConfigure+0x268>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	69fa      	ldr	r2, [r7, #28]
 800d670:	f240 518c 	movw	r1, #1420	; 0x58c
 800d674:	4610      	mov	r0, r2
 800d676:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800d678:	2327      	movs	r3, #39	; 0x27
 800d67a:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d67c:	f107 0318 	add.w	r3, r7, #24
 800d680:	4618      	mov	r0, r3
 800d682:	f005 fbb5 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10c      	bne.n	800d6a6 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d68c:	2301      	movs	r3, #1
 800d68e:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d690:	f107 0318 	add.w	r3, r7, #24
 800d694:	4618      	mov	r0, r3
 800d696:	f005 fa05 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d69a:	7f3b      	ldrb	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800d6a0:	4b66      	ldr	r3, [pc, #408]	; (800d83c <LmHandlerConfigure+0x264>)
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800d6a6:	4b65      	ldr	r3, [pc, #404]	; (800d83c <LmHandlerConfigure+0x264>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d02a      	beq.n	800d704 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d6ae:	4b64      	ldr	r3, [pc, #400]	; (800d840 <LmHandlerConfigure+0x268>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d6b8:	4b61      	ldr	r3, [pc, #388]	; (800d840 <LmHandlerConfigure+0x268>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	69db      	ldr	r3, [r3, #28]
 800d6be:	2000      	movs	r0, #0
 800d6c0:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800d6c2:	2306      	movs	r3, #6
 800d6c4:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d6c6:	f107 0318 	add.w	r3, r7, #24
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f005 f9ea 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	4a5c      	ldr	r2, [pc, #368]	; (800d844 <LmHandlerConfigure+0x26c>)
 800d6d4:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800d6d6:	2327      	movs	r3, #39	; 0x27
 800d6d8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d6da:	f107 0318 	add.w	r3, r7, #24
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f005 f9e0 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d6ea:	4b4f      	ldr	r3, [pc, #316]	; (800d828 <LmHandlerConfigure+0x250>)
 800d6ec:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800d6f4:	4b4c      	ldr	r3, [pc, #304]	; (800d828 <LmHandlerConfigure+0x250>)
 800d6f6:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800d6fe:	4b4a      	ldr	r3, [pc, #296]	; (800d828 <LmHandlerConfigure+0x250>)
 800d700:	709a      	strb	r2, [r3, #2]
 800d702:	e019      	b.n	800d738 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d704:	2305      	movs	r3, #5
 800d706:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d708:	2300      	movs	r3, #0
 800d70a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d70c:	f107 0318 	add.w	r3, r7, #24
 800d710:	4618      	mov	r0, r3
 800d712:	f005 fb6d 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d716:	4b4a      	ldr	r3, [pc, #296]	; (800d840 <LmHandlerConfigure+0x268>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	4798      	blx	r3
 800d71e:	4603      	mov	r3, r0
 800d720:	4a48      	ldr	r2, [pc, #288]	; (800d844 <LmHandlerConfigure+0x26c>)
 800d722:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d724:	2306      	movs	r3, #6
 800d726:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d728:	4b46      	ldr	r3, [pc, #280]	; (800d844 <LmHandlerConfigure+0x26c>)
 800d72a:	695b      	ldr	r3, [r3, #20]
 800d72c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d72e:	f107 0318 	add.w	r3, r7, #24
 800d732:	4618      	mov	r0, r3
 800d734:	f005 fb5c 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d738:	2302      	movs	r3, #2
 800d73a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d73c:	f107 0318 	add.w	r3, r7, #24
 800d740:	4618      	mov	r0, r3
 800d742:	f005 f9af 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	2208      	movs	r2, #8
 800d74a:	4619      	mov	r1, r3
 800d74c:	483d      	ldr	r0, [pc, #244]	; (800d844 <LmHandlerConfigure+0x26c>)
 800d74e:	f00a fdc6 	bl	80182de <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d752:	2303      	movs	r3, #3
 800d754:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d756:	f107 0318 	add.w	r3, r7, #24
 800d75a:	4618      	mov	r0, r3
 800d75c:	f005 f9a2 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2208      	movs	r2, #8
 800d764:	4619      	mov	r1, r3
 800d766:	4838      	ldr	r0, [pc, #224]	; (800d848 <LmHandlerConfigure+0x270>)
 800d768:	f00a fdb9 	bl	80182de <memcpy1>

    SecureElementPrintKeys();
 800d76c:	f7ff fc20 	bl	800cfb0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d770:	4b36      	ldr	r3, [pc, #216]	; (800d84c <LmHandlerConfigure+0x274>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	4b36      	ldr	r3, [pc, #216]	; (800d850 <LmHandlerConfigure+0x278>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	4619      	mov	r1, r3
 800d77c:	4b35      	ldr	r3, [pc, #212]	; (800d854 <LmHandlerConfigure+0x27c>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	4618      	mov	r0, r3
 800d782:	4b35      	ldr	r3, [pc, #212]	; (800d858 <LmHandlerConfigure+0x280>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	9002      	str	r0, [sp, #8]
 800d78a:	9101      	str	r1, [sp, #4]
 800d78c:	9200      	str	r2, [sp, #0]
 800d78e:	4b33      	ldr	r3, [pc, #204]	; (800d85c <LmHandlerConfigure+0x284>)
 800d790:	2200      	movs	r2, #0
 800d792:	2100      	movs	r1, #0
 800d794:	2002      	movs	r0, #2
 800d796:	f00f f8f7 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d79a:	230f      	movs	r3, #15
 800d79c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d7a2:	f107 0318 	add.w	r3, r7, #24
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f005 fb22 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7b4:	f107 0318 	add.w	r3, r7, #24
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f005 fb19 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d7be:	2304      	movs	r3, #4
 800d7c0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d7c2:	4b19      	ldr	r3, [pc, #100]	; (800d828 <LmHandlerConfigure+0x250>)
 800d7c4:	789b      	ldrb	r3, [r3, #2]
 800d7c6:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7c8:	f107 0318 	add.w	r3, r7, #24
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f005 fb0f 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d7d2:	2338      	movs	r3, #56	; 0x38
 800d7d4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d7d6:	4b14      	ldr	r3, [pc, #80]	; (800d828 <LmHandlerConfigure+0x250>)
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7dc:	f107 0318 	add.w	r3, r7, #24
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f005 fb05 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d7e6:	230f      	movs	r3, #15
 800d7e8:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d7ea:	4b0f      	ldr	r3, [pc, #60]	; (800d828 <LmHandlerConfigure+0x250>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f107 0210 	add.w	r2, r7, #16
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f008 f9bb 	bl	8015b70 <RegionGetPhyParam>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2301      	movne	r3, #1
 800d806:	2300      	moveq	r3, #0
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	4b07      	ldr	r3, [pc, #28]	; (800d828 <LmHandlerConfigure+0x250>)
 800d80c:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d80e:	2014      	movs	r0, #20
 800d810:	f000 fade 	bl	800ddd0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d814:	4b04      	ldr	r3, [pc, #16]	; (800d828 <LmHandlerConfigure+0x250>)
 800d816:	799b      	ldrb	r3, [r3, #6]
 800d818:	4618      	mov	r0, r3
 800d81a:	f006 f917 	bl	8013a4c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3740      	adds	r7, #64	; 0x40
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	20000538 	.word	0x20000538
 800d82c:	20000578 	.word	0x20000578
 800d830:	0801d514 	.word	0x0801d514
 800d834:	20000560 	.word	0x20000560
 800d838:	20000550 	.word	0x20000550
 800d83c:	2000066e 	.word	0x2000066e
 800d840:	2000054c 	.word	0x2000054c
 800d844:	20000070 	.word	0x20000070
 800d848:	20000078 	.word	0x20000078
 800d84c:	20000087 	.word	0x20000087
 800d850:	20000086 	.word	0x20000086
 800d854:	20000085 	.word	0x20000085
 800d858:	20000084 	.word	0x20000084
 800d85c:	0801d560 	.word	0x0801d560

0800d860 <LmHandlerIsBusy>:

bool LmHandlerIsBusy( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == true )
 800d864:	f002 fab2 	bl	800fdcc <LoRaMacIsBusy>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <LmHandlerIsBusy+0x12>
    {
        return true;
 800d86e:	2301      	movs	r3, #1
 800d870:	e016      	b.n	800d8a0 <LmHandlerIsBusy+0x40>
    }
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d872:	f000 f8d1 	bl	800da18 <LmHandlerJoinStatus>
 800d876:	4603      	mov	r3, r0
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d009      	beq.n	800d890 <LmHandlerIsBusy+0x30>
    {
        // The network isn't yet joined, try again later.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <LmHandlerIsBusy+0x44>)
 800d87e:	799b      	ldrb	r3, [r3, #6]
 800d880:	4a08      	ldr	r2, [pc, #32]	; (800d8a4 <LmHandlerIsBusy+0x44>)
 800d882:	79d2      	ldrb	r2, [r2, #7]
 800d884:	4611      	mov	r1, r2
 800d886:	4618      	mov	r0, r3
 800d888:	f000 f844 	bl	800d914 <LmHandlerJoin>
        return true;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e007      	b.n	800d8a0 <LmHandlerIsBusy+0x40>
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
    {
        return true;
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LmHandlerPackageIsTxPending( ) == true )
 800d890:	f000 fd26 	bl	800e2e0 <LmHandlerPackageIsTxPending>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <LmHandlerIsBusy+0x3e>
    {
        return true;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <LmHandlerIsBusy+0x40>
    }
#endif /* LORAMAC_VERSION */

    return false;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	20000088 	.word	0x20000088

0800d8a8 <LmHandlerProcess>:

void LmHandlerProcess( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d8ae:	f002 fd2d 	bl	801030c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d8b2:	f000 fd3f 	bl	800e334 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800d8b6:	f000 fd13 	bl	800e2e0 <LmHandlerPackageIsTxPending>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d117      	bne.n	800d8f0 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800d8c0:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <LmHandlerProcess+0x50>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d014      	beq.n	800d8f2 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	703b      	strb	r3, [r7, #0]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	707b      	strb	r3, [r7, #1]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d8d4:	4b09      	ldr	r3, [pc, #36]	; (800d8fc <LmHandlerProcess+0x54>)
 800d8d6:	78d9      	ldrb	r1, [r3, #3]
 800d8d8:	463b      	mov	r3, r7
 800d8da:	2200      	movs	r2, #0
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f8b7 	bl	800da50 <LmHandlerSend>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d104      	bne.n	800d8f2 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d8e8:	4b03      	ldr	r3, [pc, #12]	; (800d8f8 <LmHandlerProcess+0x50>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	e000      	b.n	800d8f2 <LmHandlerProcess+0x4a>
        return;
 800d8f0:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20000578 	.word	0x20000578
 800d8fc:	20000538 	.word	0x20000538

0800d900 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d900:	b480      	push	{r7}
 800d902:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d904:	4b02      	ldr	r3, [pc, #8]	; (800d910 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d906:	681b      	ldr	r3, [r3, #0]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bc80      	pop	{r7}
 800d90e:	4770      	bx	lr
 800d910:	20000574 	.word	0x20000574

0800d914 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b090      	sub	sp, #64	; 0x40
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	460a      	mov	r2, r1
 800d91e:	71fb      	strb	r3, [r7, #7]
 800d920:	4613      	mov	r3, r2
 800d922:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d924:	2301      	movs	r3, #1
 800d926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d92a:	4b36      	ldr	r3, [pc, #216]	; (800da04 <LmHandlerJoin+0xf0>)
 800d92c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d10b      	bne.n	800d954 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d93c:	2302      	movs	r3, #2
 800d93e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d942:	4b31      	ldr	r3, [pc, #196]	; (800da08 <LmHandlerJoin+0xf4>)
 800d944:	2202      	movs	r2, #2
 800d946:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d948:	4a2f      	ldr	r2, [pc, #188]	; (800da08 <LmHandlerJoin+0xf4>)
 800d94a:	79bb      	ldrb	r3, [r7, #6]
 800d94c:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d94e:	f004 ffb7 	bl	80128c0 <LoRaMacStart>
 800d952:	e041      	b.n	800d9d8 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d954:	2301      	movs	r3, #1
 800d956:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d95a:	4b2b      	ldr	r3, [pc, #172]	; (800da08 <LmHandlerJoin+0xf4>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d960:	4b28      	ldr	r3, [pc, #160]	; (800da04 <LmHandlerJoin+0xf0>)
 800d962:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d966:	4b28      	ldr	r3, [pc, #160]	; (800da08 <LmHandlerJoin+0xf4>)
 800d968:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d96a:	4b27      	ldr	r3, [pc, #156]	; (800da08 <LmHandlerJoin+0xf4>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d970:	4a25      	ldr	r2, [pc, #148]	; (800da08 <LmHandlerJoin+0xf4>)
 800d972:	79bb      	ldrb	r3, [r7, #6]
 800d974:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800d976:	4b25      	ldr	r3, [pc, #148]	; (800da0c <LmHandlerJoin+0xf8>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	f083 0301 	eor.w	r3, r3, #1
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01e      	beq.n	800d9c2 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d984:	231f      	movs	r3, #31
 800d986:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d988:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <LmHandlerJoin+0xf0>)
 800d98a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d98e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d990:	f107 0308 	add.w	r3, r7, #8
 800d994:	4618      	mov	r0, r3
 800d996:	f005 fa2b 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d99a:	2320      	movs	r3, #32
 800d99c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d99e:	4b19      	ldr	r3, [pc, #100]	; (800da04 <LmHandlerJoin+0xf0>)
 800d9a0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d9a4:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d9a6:	f107 0308 	add.w	r3, r7, #8
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f005 fa20 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d9b0:	2329      	movs	r3, #41	; 0x29
 800d9b2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d9b4:	4b16      	ldr	r3, [pc, #88]	; (800da10 <LmHandlerJoin+0xfc>)
 800d9b6:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d9b8:	f107 0308 	add.w	r3, r7, #8
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f005 fa17 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800d9c2:	f004 ff7d 	bl	80128c0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d9ce:	f107 0308 	add.w	r3, r7, #8
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f005 fa0c 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800d9d8:	4b0c      	ldr	r3, [pc, #48]	; (800da0c <LmHandlerJoin+0xf8>)
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	f083 0301 	eor.w	r3, r3, #1
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d102      	bne.n	800d9ec <LmHandlerJoin+0xd8>
 800d9e6:	79bb      	ldrb	r3, [r7, #6]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d9ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f005 fd6d 	bl	80134d0 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f8:	4a06      	ldr	r2, [pc, #24]	; (800da14 <LmHandlerJoin+0x100>)
 800d9fa:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d9fc:	bf00      	nop
 800d9fe:	3740      	adds	r7, #64	; 0x40
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	20000538 	.word	0x20000538
 800da08:	20000088 	.word	0x20000088
 800da0c:	2000066e 	.word	0x2000066e
 800da10:	01000400 	.word	0x01000400
 800da14:	20000574 	.word	0x20000574

0800da18 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	; 0x28
 800da1c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800da1e:	2301      	movs	r3, #1
 800da20:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800da22:	463b      	mov	r3, r7
 800da24:	4618      	mov	r0, r3
 800da26:	f005 f83d 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800da30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da34:	2b00      	cmp	r3, #0
 800da36:	d106      	bne.n	800da46 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da38:	793b      	ldrb	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800da3e:	2300      	movs	r3, #0
 800da40:	e002      	b.n	800da48 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800da42:	2301      	movs	r3, #1
 800da44:	e000      	b.n	800da48 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800da46:	2300      	movs	r3, #0
    }
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3728      	adds	r7, #40	; 0x28
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08a      	sub	sp, #40	; 0x28
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
 800da5c:	4613      	mov	r3, r2
 800da5e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800da60:	23ff      	movs	r3, #255	; 0xff
 800da62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800da66:	f002 f9b1 	bl	800fdcc <LoRaMacIsBusy>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da70:	f06f 0301 	mvn.w	r3, #1
 800da74:	e0a3      	b.n	800dbbe <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800da76:	f7ff ffcf 	bl	800da18 <LmHandlerJoinStatus>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d00a      	beq.n	800da96 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800da80:	4b51      	ldr	r3, [pc, #324]	; (800dbc8 <LmHandlerSend+0x178>)
 800da82:	799b      	ldrb	r3, [r3, #6]
 800da84:	4a50      	ldr	r2, [pc, #320]	; (800dbc8 <LmHandlerSend+0x178>)
 800da86:	79d2      	ldrb	r2, [r2, #7]
 800da88:	4611      	mov	r1, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7ff ff42 	bl	800d914 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da90:	f06f 0302 	mvn.w	r3, #2
 800da94:	e093      	b.n	800dbbe <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800da96:	4a4d      	ldr	r2, [pc, #308]	; (800dbcc <LmHandlerSend+0x17c>)
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800da9c:	78fb      	ldrb	r3, [r7, #3]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bf14      	ite	ne
 800daa2:	2301      	movne	r3, #1
 800daa4:	2300      	moveq	r3, #0
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800daaa:	4b49      	ldr	r3, [pc, #292]	; (800dbd0 <LmHandlerSend+0x180>)
 800daac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dab0:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	f107 020c 	add.w	r2, r7, #12
 800daba:	4611      	mov	r1, r2
 800dabc:	4618      	mov	r0, r3
 800dabe:	f004 ff61 	bl	8012984 <LoRaMacQueryTxPossible>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d009      	beq.n	800dadc <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800dac8:	2300      	movs	r3, #0
 800daca:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800dad4:	23f9      	movs	r3, #249	; 0xf9
 800dad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dada:	e009      	b.n	800daf0 <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800daf0:	4b36      	ldr	r3, [pc, #216]	; (800dbcc <LmHandlerSend+0x17c>)
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	3310      	adds	r3, #16
 800daf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dafa:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800dafe:	4b34      	ldr	r3, [pc, #208]	; (800dbd0 <LmHandlerSend+0x180>)
 800db00:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800db04:	4b31      	ldr	r3, [pc, #196]	; (800dbcc <LmHandlerSend+0x17c>)
 800db06:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800db08:	78ba      	ldrb	r2, [r7, #2]
 800db0a:	f107 0310 	add.w	r3, r7, #16
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f005 fe63 	bl	80137dc <LoRaMacMcpsRequest>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800db1c:	6a3b      	ldr	r3, [r7, #32]
 800db1e:	4a2d      	ldr	r2, [pc, #180]	; (800dbd4 <LmHandlerSend+0x184>)
 800db20:	6013      	str	r3, [r2, #0]

    switch (status)
 800db22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db26:	2b11      	cmp	r3, #17
 800db28:	d842      	bhi.n	800dbb0 <LmHandlerSend+0x160>
 800db2a:	a201      	add	r2, pc, #4	; (adr r2, 800db30 <LmHandlerSend+0xe0>)
 800db2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db30:	0800db79 	.word	0x0800db79
 800db34:	0800db91 	.word	0x0800db91
 800db38:	0800dbb1 	.word	0x0800dbb1
 800db3c:	0800dbb1 	.word	0x0800dbb1
 800db40:	0800dbb1 	.word	0x0800dbb1
 800db44:	0800dbb1 	.word	0x0800dbb1
 800db48:	0800dbb1 	.word	0x0800dbb1
 800db4c:	0800db99 	.word	0x0800db99
 800db50:	0800dbb1 	.word	0x0800dbb1
 800db54:	0800dbb1 	.word	0x0800dbb1
 800db58:	0800dbb1 	.word	0x0800dbb1
 800db5c:	0800dba9 	.word	0x0800dba9
 800db60:	0800dbb1 	.word	0x0800dbb1
 800db64:	0800dbb1 	.word	0x0800dbb1
 800db68:	0800db91 	.word	0x0800db91
 800db6c:	0800db91 	.word	0x0800db91
 800db70:	0800db91 	.word	0x0800db91
 800db74:	0800dba1 	.word	0x0800dba1
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800db78:	4b17      	ldr	r3, [pc, #92]	; (800dbd8 <LmHandlerSend+0x188>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800db7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db82:	f113 0f07 	cmn.w	r3, #7
 800db86:	d017      	beq.n	800dbb8 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800db8e:	e013      	b.n	800dbb8 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800db90:	23fe      	movs	r3, #254	; 0xfe
 800db92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800db96:	e010      	b.n	800dbba <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800db98:	23fd      	movs	r3, #253	; 0xfd
 800db9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800db9e:	e00c      	b.n	800dbba <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800dba0:	23fb      	movs	r3, #251	; 0xfb
 800dba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dba6:	e008      	b.n	800dbba <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800dba8:	23fa      	movs	r3, #250	; 0xfa
 800dbaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dbae:	e004      	b.n	800dbba <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dbb0:	23ff      	movs	r3, #255	; 0xff
 800dbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dbb6:	e000      	b.n	800dbba <LmHandlerSend+0x16a>
            break;
 800dbb8:	bf00      	nop
    }

    return lmhStatus;
 800dbba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3728      	adds	r7, #40	; 0x28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20000088 	.word	0x20000088
 800dbcc:	20000090 	.word	0x20000090
 800dbd0:	20000538 	.word	0x20000538
 800dbd4:	20000574 	.word	0x20000574
 800dbd8:	20000578 	.word	0x20000578

0800dbdc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800dbe2:	2309      	movs	r3, #9
 800dbe4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f005 fc71 	bl	80134d0 <LoRaMacMlmeRequest>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	4a06      	ldr	r2, [pc, #24]	; (800dc10 <LmHandlerDeviceTimeReq+0x34>)
 800dbf6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e001      	b.n	800dc06 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dc02:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	20000574 	.word	0x20000574

0800dc14 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800dc1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	370c      	adds	r7, #12
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bc80      	pop	{r7}
 800dc2a:	4770      	bx	lr

0800dc2c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08c      	sub	sp, #48	; 0x30
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800dc36:	2300      	movs	r3, #0
 800dc38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800dc3c:	f002 f8c6 	bl	800fdcc <LoRaMacIsBusy>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d002      	beq.n	800dc4c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dc46:	f06f 0301 	mvn.w	r3, #1
 800dc4a:	e073      	b.n	800dd34 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800dc4c:	f7ff fee4 	bl	800da18 <LmHandlerJoinStatus>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d002      	beq.n	800dc5c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dc56:	f06f 0302 	mvn.w	r3, #2
 800dc5a:	e06b      	b.n	800dd34 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc60:	f107 0308 	add.w	r3, r7, #8
 800dc64:	4618      	mov	r0, r3
 800dc66:	f004 ff1d 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc70:	f04f 33ff 	mov.w	r3, #4294967295
 800dc74:	e05e      	b.n	800dd34 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800dc76:	7b3b      	ldrb	r3, [r7, #12]
 800dc78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800dc7c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d04d      	beq.n	800dd22 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d028      	beq.n	800dcde <LmHandlerRequestClass+0xb2>
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	dc4a      	bgt.n	800dd26 <LmHandlerRequestClass+0xfa>
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <LmHandlerRequestClass+0x6e>
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d01e      	beq.n	800dcd6 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800dc98:	e045      	b.n	800dd26 <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800dc9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d043      	beq.n	800dd2a <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800dca2:	79fb      	ldrb	r3, [r7, #7]
 800dca4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dca6:	f107 0308 	add.w	r3, r7, #8
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f005 f8a0 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10b      	bne.n	800dcce <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dcb6:	4b21      	ldr	r3, [pc, #132]	; (800dd3c <LmHandlerRequestClass+0x110>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d034      	beq.n	800dd2a <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dcc0:	4b1e      	ldr	r3, [pc, #120]	; (800dd3c <LmHandlerRequestClass+0x110>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc6:	79fa      	ldrb	r2, [r7, #7]
 800dcc8:	4610      	mov	r0, r2
 800dcca:	4798      	blx	r3
            break;
 800dccc:	e02d      	b.n	800dd2a <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dcce:	23ff      	movs	r3, #255	; 0xff
 800dcd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dcd4:	e029      	b.n	800dd2a <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800dcd6:	23ff      	movs	r3, #255	; 0xff
 800dcd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dcdc:	e028      	b.n	800dd30 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800dcde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dce6:	23ff      	movs	r3, #255	; 0xff
 800dce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dcec:	e01f      	b.n	800dd2e <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dcf2:	f107 0308 	add.w	r3, r7, #8
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f005 f87a 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10b      	bne.n	800dd1a <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dd02:	4b0e      	ldr	r3, [pc, #56]	; (800dd3c <LmHandlerRequestClass+0x110>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d010      	beq.n	800dd2e <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dd0c:	4b0b      	ldr	r3, [pc, #44]	; (800dd3c <LmHandlerRequestClass+0x110>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd12:	79fa      	ldrb	r2, [r7, #7]
 800dd14:	4610      	mov	r0, r2
 800dd16:	4798      	blx	r3
            break;
 800dd18:	e009      	b.n	800dd2e <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dd1a:	23ff      	movs	r3, #255	; 0xff
 800dd1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dd20:	e005      	b.n	800dd2e <LmHandlerRequestClass+0x102>
        }
    }
 800dd22:	bf00      	nop
 800dd24:	e004      	b.n	800dd30 <LmHandlerRequestClass+0x104>
            break;
 800dd26:	bf00      	nop
 800dd28:	e002      	b.n	800dd30 <LmHandlerRequestClass+0x104>
            break;
 800dd2a:	bf00      	nop
 800dd2c:	e000      	b.n	800dd30 <LmHandlerRequestClass+0x104>
            break;
 800dd2e:	bf00      	nop
    return errorStatus;
 800dd30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3730      	adds	r7, #48	; 0x30
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2000054c 	.word	0x2000054c

0800dd40 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08c      	sub	sp, #48	; 0x30
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd52:	e010      	b.n	800dd76 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dd54:	2300      	movs	r3, #0
 800dd56:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800dd58:	f107 030c 	add.w	r3, r7, #12
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f004 fea1 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	e003      	b.n	800dd76 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dd6e:	7c3a      	ldrb	r2, [r7, #16]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3730      	adds	r7, #48	; 0x30
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08c      	sub	sp, #48	; 0x30
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd92:	e016      	b.n	800ddc2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800dd94:	2320      	movs	r3, #32
 800dd96:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800dd98:	f107 030c 	add.w	r3, r7, #12
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f004 fe81 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dda8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddac:	e009      	b.n	800ddc2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ddae:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f993 2000 	ldrsb.w	r2, [r3]
 800ddbc:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <LmHandlerGetTxDatarate+0x4c>)
 800ddbe:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3730      	adds	r7, #48	; 0x30
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20000538 	.word	0x20000538

0800ddd0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08c      	sub	sp, #48	; 0x30
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ddd8:	2323      	movs	r3, #35	; 0x23
 800ddda:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dde0:	f107 030c 	add.w	r3, r7, #12
 800dde4:	4618      	mov	r0, r3
 800dde6:	f005 f803 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ddf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf4:	e000      	b.n	800ddf8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3730      	adds	r7, #48	; 0x30
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800de08:	4b15      	ldr	r3, [pc, #84]	; (800de60 <McpsConfirm+0x60>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	785a      	ldrb	r2, [r3, #1]
 800de12:	4b13      	ldr	r3, [pc, #76]	; (800de60 <McpsConfirm+0x60>)
 800de14:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	789b      	ldrb	r3, [r3, #2]
 800de1a:	b25a      	sxtb	r2, r3
 800de1c:	4b10      	ldr	r3, [pc, #64]	; (800de60 <McpsConfirm+0x60>)
 800de1e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	4a0e      	ldr	r2, [pc, #56]	; (800de60 <McpsConfirm+0x60>)
 800de26:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800de2e:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <McpsConfirm+0x60>)
 800de30:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	b2da      	uxtb	r2, r3
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <McpsConfirm+0x60>)
 800de3a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	791b      	ldrb	r3, [r3, #4]
 800de40:	461a      	mov	r2, r3
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <McpsConfirm+0x60>)
 800de44:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <McpsConfirm+0x64>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4c:	4804      	ldr	r0, [pc, #16]	; (800de60 <McpsConfirm+0x60>)
 800de4e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800de50:	6879      	ldr	r1, [r7, #4]
 800de52:	2000      	movs	r0, #0
 800de54:	f000 f9c6 	bl	800e1e4 <LmHandlerPackagesNotify>
}
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000090 	.word	0x20000090
 800de64:	2000054c 	.word	0x2000054c

0800de68 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800de76:	4b2c      	ldr	r3, [pc, #176]	; (800df28 <McpsIndication+0xc0>)
 800de78:	2201      	movs	r2, #1
 800de7a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	785a      	ldrb	r2, [r3, #1]
 800de80:	4b29      	ldr	r3, [pc, #164]	; (800df28 <McpsIndication+0xc0>)
 800de82:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800de84:	4b28      	ldr	r3, [pc, #160]	; (800df28 <McpsIndication+0xc0>)
 800de86:	785b      	ldrb	r3, [r3, #1]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d149      	bne.n	800df20 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	791b      	ldrb	r3, [r3, #4]
 800de90:	b25a      	sxtb	r2, r3
 800de92:	4b25      	ldr	r3, [pc, #148]	; (800df28 <McpsIndication+0xc0>)
 800de94:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de9c:	b25a      	sxtb	r2, r3
 800de9e:	4b22      	ldr	r3, [pc, #136]	; (800df28 <McpsIndication+0xc0>)
 800dea0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dea8:	4b1f      	ldr	r3, [pc, #124]	; (800df28 <McpsIndication+0xc0>)
 800deaa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	78da      	ldrb	r2, [r3, #3]
 800deb0:	4b1d      	ldr	r3, [pc, #116]	; (800df28 <McpsIndication+0xc0>)
 800deb2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	4a1b      	ldr	r2, [pc, #108]	; (800df28 <McpsIndication+0xc0>)
 800deba:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	78db      	ldrb	r3, [r3, #3]
 800dec0:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	7b1b      	ldrb	r3, [r3, #12]
 800dec6:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800dece:	4b17      	ldr	r3, [pc, #92]	; (800df2c <McpsIndication+0xc4>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	f107 0210 	add.w	r2, r7, #16
 800ded8:	4913      	ldr	r1, [pc, #76]	; (800df28 <McpsIndication+0xc0>)
 800deda:	4610      	mov	r0, r2
 800dedc:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dede:	4b13      	ldr	r3, [pc, #76]	; (800df2c <McpsIndication+0xc4>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d007      	beq.n	800def8 <McpsIndication+0x90>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7e1b      	ldrb	r3, [r3, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d003      	beq.n	800def8 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800def0:	4b0e      	ldr	r3, [pc, #56]	; (800df2c <McpsIndication+0xc4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def6:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	2001      	movs	r0, #1
 800defc:	f000 f972 	bl	800e1e4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800df00:	f107 030f 	add.w	r3, r7, #15
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff ff1b 	bl	800dd40 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	795b      	ldrb	r3, [r3, #5]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d107      	bne.n	800df22 <McpsIndication+0xba>
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800df18:	4b05      	ldr	r3, [pc, #20]	; (800df30 <McpsIndication+0xc8>)
 800df1a:	2201      	movs	r2, #1
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	e000      	b.n	800df22 <McpsIndication+0xba>
        return;
 800df20:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	200000ac 	.word	0x200000ac
 800df2c:	2000054c 	.word	0x2000054c
 800df30:	20000578 	.word	0x20000578

0800df34 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08c      	sub	sp, #48	; 0x30
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800df3c:	4b3c      	ldr	r3, [pc, #240]	; (800e030 <MlmeConfirm+0xfc>)
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	785a      	ldrb	r2, [r3, #1]
 800df46:	4b3a      	ldr	r3, [pc, #232]	; (800e030 <MlmeConfirm+0xfc>)
 800df48:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800df4a:	4b3a      	ldr	r3, [pc, #232]	; (800e034 <MlmeConfirm+0x100>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df50:	4837      	ldr	r0, [pc, #220]	; (800e030 <MlmeConfirm+0xfc>)
 800df52:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	2002      	movs	r0, #2
 800df58:	f000 f944 	bl	800e1e4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	3b01      	subs	r3, #1
 800df62:	2b0b      	cmp	r3, #11
 800df64:	d85c      	bhi.n	800e020 <MlmeConfirm+0xec>
 800df66:	a201      	add	r2, pc, #4	; (adr r2, 800df6c <MlmeConfirm+0x38>)
 800df68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6c:	0800df9d 	.word	0x0800df9d
 800df70:	0800e021 	.word	0x0800e021
 800df74:	0800e021 	.word	0x0800e021
 800df78:	0800dfef 	.word	0x0800dfef
 800df7c:	0800e021 	.word	0x0800e021
 800df80:	0800e021 	.word	0x0800e021
 800df84:	0800e021 	.word	0x0800e021
 800df88:	0800e021 	.word	0x0800e021
 800df8c:	0800e021 	.word	0x0800e021
 800df90:	0800e021 	.word	0x0800e021
 800df94:	0800e007 	.word	0x0800e007
 800df98:	0800e021 	.word	0x0800e021
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800df9c:	2306      	movs	r3, #6
 800df9e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dfa0:	f107 030c 	add.w	r3, r7, #12
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f004 fd7d 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	4a22      	ldr	r2, [pc, #136]	; (800e038 <MlmeConfirm+0x104>)
 800dfae:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800dfb0:	4822      	ldr	r0, [pc, #136]	; (800e03c <MlmeConfirm+0x108>)
 800dfb2:	f7ff fee5 	bl	800dd80 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d108      	bne.n	800dfd0 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <MlmeConfirm+0x10c>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dfc4:	4b1f      	ldr	r3, [pc, #124]	; (800e044 <MlmeConfirm+0x110>)
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff fe2f 	bl	800dc2c <LmHandlerRequestClass>
 800dfce:	e002      	b.n	800dfd6 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dfd0:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <MlmeConfirm+0x10c>)
 800dfd2:	22ff      	movs	r2, #255	; 0xff
 800dfd4:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dfd6:	4b17      	ldr	r3, [pc, #92]	; (800e034 <MlmeConfirm+0x100>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	4818      	ldr	r0, [pc, #96]	; (800e040 <MlmeConfirm+0x10c>)
 800dfde:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	785b      	ldrb	r3, [r3, #1]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d11d      	bne.n	800e024 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800dfe8:	f7ff f870 	bl	800d0cc <SecureElementPrintSessionKeys>
            }
        }
        break;
 800dfec:	e01a      	b.n	800e024 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800dfee:	4b16      	ldr	r3, [pc, #88]	; (800e048 <MlmeConfirm+0x114>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7a1a      	ldrb	r2, [r3, #8]
 800dff8:	4b13      	ldr	r3, [pc, #76]	; (800e048 <MlmeConfirm+0x114>)
 800dffa:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7a5a      	ldrb	r2, [r3, #9]
 800e000:	4b11      	ldr	r3, [pc, #68]	; (800e048 <MlmeConfirm+0x114>)
 800e002:	74da      	strb	r2, [r3, #19]
        }
        break;
 800e004:	e00f      	b.n	800e026 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	785b      	ldrb	r3, [r3, #1]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d105      	bne.n	800e01a <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e00e:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <MlmeConfirm+0x110>)
 800e010:	7b1b      	ldrb	r3, [r3, #12]
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff fdfe 	bl	800dc14 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800e018:	e005      	b.n	800e026 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800e01a:	f7ff fddf 	bl	800dbdc <LmHandlerDeviceTimeReq>
        break;
 800e01e:	e002      	b.n	800e026 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e020:	bf00      	nop
 800e022:	e000      	b.n	800e026 <MlmeConfirm+0xf2>
        break;
 800e024:	bf00      	nop
    }
}
 800e026:	bf00      	nop
 800e028:	3730      	adds	r7, #48	; 0x30
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000090 	.word	0x20000090
 800e034:	2000054c 	.word	0x2000054c
 800e038:	20000070 	.word	0x20000070
 800e03c:	2000008c 	.word	0x2000008c
 800e040:	20000088 	.word	0x20000088
 800e044:	20000538 	.word	0x20000538
 800e048:	200000ac 	.word	0x200000ac

0800e04c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e056:	4b24      	ldr	r3, [pc, #144]	; (800e0e8 <MlmeIndication+0x9c>)
 800e058:	2200      	movs	r2, #0
 800e05a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	785a      	ldrb	r2, [r3, #1]
 800e060:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <MlmeIndication+0x9c>)
 800e062:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	789b      	ldrb	r3, [r3, #2]
 800e068:	b25a      	sxtb	r2, r3
 800e06a:	4b1f      	ldr	r3, [pc, #124]	; (800e0e8 <MlmeIndication+0x9c>)
 800e06c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e074:	b25a      	sxtb	r2, r3
 800e076:	4b1c      	ldr	r3, [pc, #112]	; (800e0e8 <MlmeIndication+0x9c>)
 800e078:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e080:	4b19      	ldr	r3, [pc, #100]	; (800e0e8 <MlmeIndication+0x9c>)
 800e082:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	78da      	ldrb	r2, [r3, #3]
 800e088:	4b17      	ldr	r3, [pc, #92]	; (800e0e8 <MlmeIndication+0x9c>)
 800e08a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4a15      	ldr	r2, [pc, #84]	; (800e0e8 <MlmeIndication+0x9c>)
 800e092:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b0a      	cmp	r3, #10
 800e09a:	d009      	beq.n	800e0b0 <MlmeIndication+0x64>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b0e      	cmp	r3, #14
 800e0a2:	d005      	beq.n	800e0b0 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e0a4:	4b11      	ldr	r3, [pc, #68]	; (800e0ec <MlmeIndication+0xa0>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0aa:	490f      	ldr	r1, [pc, #60]	; (800e0e8 <MlmeIndication+0x9c>)
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	2003      	movs	r0, #3
 800e0b4:	f000 f896 	bl	800e1e4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b0e      	cmp	r3, #14
 800e0be:	d00a      	beq.n	800e0d6 <MlmeIndication+0x8a>
 800e0c0:	2b0e      	cmp	r3, #14
 800e0c2:	dc0a      	bgt.n	800e0da <MlmeIndication+0x8e>
 800e0c4:	2b06      	cmp	r3, #6
 800e0c6:	d002      	beq.n	800e0ce <MlmeIndication+0x82>
 800e0c8:	2b0a      	cmp	r3, #10
 800e0ca:	d008      	beq.n	800e0de <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e0cc:	e005      	b.n	800e0da <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800e0ce:	4b08      	ldr	r3, [pc, #32]	; (800e0f0 <MlmeIndication+0xa4>)
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	701a      	strb	r2, [r3, #0]
        break;
 800e0d4:	e004      	b.n	800e0e0 <MlmeIndication+0x94>
        break;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <MlmeIndication+0x94>
        break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <MlmeIndication+0x94>
        break;
 800e0de:	bf00      	nop
    }
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	200000ac 	.word	0x200000ac
 800e0ec:	2000054c 	.word	0x2000054c
 800e0f0:	20000578 	.word	0x20000578

0800e0f4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d103      	bne.n	800e112 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800e10a:	f000 fa03 	bl	800e514 <LmhpCompliancePackageFactory>
 800e10e:	60f8      	str	r0, [r7, #12]
            break;
 800e110:	e000      	b.n	800e114 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800e112:	bf00      	nop
        }
    }
    if( package != NULL )
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d035      	beq.n	800e186 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	491d      	ldr	r1, [pc, #116]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	4a1b      	ldr	r2, [pc, #108]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e12c:	4a1a      	ldr	r2, [pc, #104]	; (800e198 <LmHandlerPackageRegister+0xa4>)
 800e12e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e130:	4b1a      	ldr	r3, [pc, #104]	; (800e19c <LmHandlerPackageRegister+0xa8>)
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	4917      	ldr	r1, [pc, #92]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e138:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e13c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e13e:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e140:	4b16      	ldr	r3, [pc, #88]	; (800e19c <LmHandlerPackageRegister+0xa8>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	79fb      	ldrb	r3, [r7, #7]
 800e146:	4913      	ldr	r1, [pc, #76]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e14c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e14e:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	4a10      	ldr	r2, [pc, #64]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e158:	4a11      	ldr	r2, [pc, #68]	; (800e1a0 <LmHandlerPackageRegister+0xac>)
 800e15a:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e15c:	4b0f      	ldr	r3, [pc, #60]	; (800e19c <LmHandlerPackageRegister+0xa8>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	490c      	ldr	r1, [pc, #48]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e168:	6992      	ldr	r2, [r2, #24]
 800e16a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	4a09      	ldr	r2, [pc, #36]	; (800e194 <LmHandlerPackageRegister+0xa0>)
 800e170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	4a0b      	ldr	r2, [pc, #44]	; (800e1a4 <LmHandlerPackageRegister+0xb0>)
 800e178:	6851      	ldr	r1, [r2, #4]
 800e17a:	4a0a      	ldr	r2, [pc, #40]	; (800e1a4 <LmHandlerPackageRegister+0xb0>)
 800e17c:	7852      	ldrb	r2, [r2, #1]
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e182:	2300      	movs	r3, #0
 800e184:	e001      	b.n	800e18a <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e186:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20000524 	.word	0x20000524
 800e198:	0800d915 	.word	0x0800d915
 800e19c:	2000054c 	.word	0x2000054c
 800e1a0:	0800dbdd 	.word	0x0800dbdd
 800e1a4:	200000c0 	.word	0x200000c0

0800e1a8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d80e      	bhi.n	800e1d6 <LmHandlerPackageIsInitialized+0x2e>
 800e1b8:	79fb      	ldrb	r3, [r7, #7]
 800e1ba:	4a09      	ldr	r2, [pc, #36]	; (800e1e0 <LmHandlerPackageIsInitialized+0x38>)
 800e1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e1c6:	79fb      	ldrb	r3, [r7, #7]
 800e1c8:	4a05      	ldr	r2, [pc, #20]	; (800e1e0 <LmHandlerPackageIsInitialized+0x38>)
 800e1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	4798      	blx	r3
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	e000      	b.n	800e1d8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e1d6:	2300      	movs	r3, #0
    }
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20000524 	.word	0x20000524

0800e1e4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	6039      	str	r1, [r7, #0]
 800e1ee:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73fb      	strb	r3, [r7, #15]
 800e1f4:	e069      	b.n	800e2ca <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800e1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fa:	4a38      	ldr	r2, [pc, #224]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d051      	beq.n	800e2a8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800e204:	79fb      	ldrb	r3, [r7, #7]
 800e206:	2b03      	cmp	r3, #3
 800e208:	d850      	bhi.n	800e2ac <LmHandlerPackagesNotify+0xc8>
 800e20a:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <LmHandlerPackagesNotify+0x2c>)
 800e20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e210:	0800e221 	.word	0x0800e221
 800e214:	0800e243 	.word	0x0800e243
 800e218:	0800e265 	.word	0x0800e265
 800e21c:	0800e287 	.word	0x0800e287
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e224:	4a2d      	ldr	r2, [pc, #180]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d03f      	beq.n	800e2b0 <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e234:	4a29      	ldr	r2, [pc, #164]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	6838      	ldr	r0, [r7, #0]
 800e23e:	4798      	blx	r3
                    }
                    break;
 800e240:	e036      	b.n	800e2b0 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e246:	4a25      	ldr	r2, [pc, #148]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24c:	69db      	ldr	r3, [r3, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d030      	beq.n	800e2b4 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e256:	4a21      	ldr	r2, [pc, #132]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	6838      	ldr	r0, [r7, #0]
 800e260:	4798      	blx	r3
                    }
                    break;
 800e262:	e027      	b.n	800e2b4 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e268:	4a1c      	ldr	r2, [pc, #112]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d021      	beq.n	800e2b8 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e278:	4a18      	ldr	r2, [pc, #96]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e27e:	6a1b      	ldr	r3, [r3, #32]
 800e280:	6838      	ldr	r0, [r7, #0]
 800e282:	4798      	blx	r3
                    }
                    break;
 800e284:	e018      	b.n	800e2b8 <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e28a:	4a14      	ldr	r2, [pc, #80]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e292:	2b00      	cmp	r3, #0
 800e294:	d012      	beq.n	800e2bc <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e29a:	4a10      	ldr	r2, [pc, #64]	; (800e2dc <LmHandlerPackagesNotify+0xf8>)
 800e29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a2:	6838      	ldr	r0, [r7, #0]
 800e2a4:	4798      	blx	r3
                    }
                    break;
 800e2a6:	e009      	b.n	800e2bc <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800e2a8:	bf00      	nop
 800e2aa:	e008      	b.n	800e2be <LmHandlerPackagesNotify+0xda>
                    break;
 800e2ac:	bf00      	nop
 800e2ae:	e006      	b.n	800e2be <LmHandlerPackagesNotify+0xda>
                    break;
 800e2b0:	bf00      	nop
 800e2b2:	e004      	b.n	800e2be <LmHandlerPackagesNotify+0xda>
                    break;
 800e2b4:	bf00      	nop
 800e2b6:	e002      	b.n	800e2be <LmHandlerPackagesNotify+0xda>
                    break;
 800e2b8:	bf00      	nop
 800e2ba:	e000      	b.n	800e2be <LmHandlerPackagesNotify+0xda>
                    break;
 800e2bc:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	73fb      	strb	r3, [r7, #15]
 800e2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	dd91      	ble.n	800e1f6 <LmHandlerPackagesNotify+0x12>
    }
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000524 	.word	0x20000524

0800e2e0 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	71fb      	strb	r3, [r7, #7]
 800e2ea:	e018      	b.n	800e31e <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800e2ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2f0:	4a0f      	ldr	r2, [pc, #60]	; (800e330 <LmHandlerPackageIsTxPending+0x50>)
 800e2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2fe:	4a0c      	ldr	r2, [pc, #48]	; (800e330 <LmHandlerPackageIsTxPending+0x50>)
 800e300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	4798      	blx	r3
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e30e:	2301      	movs	r3, #1
 800e310:	e00a      	b.n	800e328 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e316:	b2db      	uxtb	r3, r3
 800e318:	3301      	adds	r3, #1
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	71fb      	strb	r3, [r7, #7]
 800e31e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e322:	2b04      	cmp	r3, #4
 800e324:	dde2      	ble.n	800e2ec <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20000524 	.word	0x20000524

0800e334 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e33a:	2300      	movs	r3, #0
 800e33c:	71fb      	strb	r3, [r7, #7]
 800e33e:	e022      	b.n	800e386 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e344:	4a14      	ldr	r2, [pc, #80]	; (800e398 <LmHandlerPackagesProcess+0x64>)
 800e346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d015      	beq.n	800e37a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e352:	4a11      	ldr	r2, [pc, #68]	; (800e398 <LmHandlerPackagesProcess+0x64>)
 800e354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e358:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00d      	beq.n	800e37a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff ff21 	bl	800e1a8 <LmHandlerPackageIsInitialized>
 800e366:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d006      	beq.n	800e37a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e370:	4a09      	ldr	r2, [pc, #36]	; (800e398 <LmHandlerPackagesProcess+0x64>)
 800e372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	3301      	adds	r3, #1
 800e382:	b2db      	uxtb	r3, r3
 800e384:	71fb      	strb	r3, [r7, #7]
 800e386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e38a:	2b04      	cmp	r3, #4
 800e38c:	ddd8      	ble.n	800e340 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e38e:	bf00      	nop
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	20000524 	.word	0x20000524

0800e39c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	6039      	str	r1, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b2:	e00e      	b.n	800e3d2 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <LmHandlerGetVersion+0x24>
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d004      	beq.n	800e3c8 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800e3be:	e007      	b.n	800e3d0 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	4a06      	ldr	r2, [pc, #24]	; (800e3dc <LmHandlerGetVersion+0x40>)
 800e3c4:	601a      	str	r2, [r3, #0]
            break;
 800e3c6:	e003      	b.n	800e3d0 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	4a05      	ldr	r2, [pc, #20]	; (800e3e0 <LmHandlerGetVersion+0x44>)
 800e3cc:	601a      	str	r2, [r3, #0]
            break;
 800e3ce:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bc80      	pop	{r7}
 800e3da:	4770      	bx	lr
 800e3dc:	01000400 	.word	0x01000400
 800e3e0:	02010001 	.word	0x02010001

0800e3e4 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800e3e8:	f005 fb4e 	bl	8013a88 <LoRaMacDeInitialization>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d101      	bne.n	800e3f6 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e001      	b.n	800e3fa <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e3f6:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800e402:	f004 fa87 	bl	8012914 <LoRaMacHalt>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e40c:	2300      	movs	r3, #0
 800e40e:	e001      	b.n	800e414 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e410:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e414:	4618      	mov	r0, r3
 800e416:	bd80      	pop	{r7, pc}

0800e418 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08e      	sub	sp, #56	; 0x38
 800e41c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e41e:	2300      	movs	r3, #0
 800e420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800e428:	f7ff ffe9 	bl	800e3fe <LmHandlerHalt>
 800e42c:	4603      	mov	r3, r0
 800e42e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800e432:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e436:	2b00      	cmp	r3, #0
 800e438:	d12f      	bne.n	800e49a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e43a:	f000 f84f 	bl	800e4dc <NvmDataMgmtStoreBegin>
 800e43e:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	f113 0f02 	cmn.w	r3, #2
 800e446:	d103      	bne.n	800e450 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e448:	23f8      	movs	r3, #248	; 0xf8
 800e44a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e44e:	e01c      	b.n	800e48a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800e450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e452:	2b00      	cmp	r3, #0
 800e454:	d104      	bne.n	800e460 <LmHandlerNvmDataStore+0x48>
 800e456:	4b1b      	ldr	r3, [pc, #108]	; (800e4c4 <LmHandlerNvmDataStore+0xac>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d103      	bne.n	800e468 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e460:	23ff      	movs	r3, #255	; 0xff
 800e462:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e466:	e010      	b.n	800e48a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800e468:	2327      	movs	r3, #39	; 0x27
 800e46a:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800e46c:	1d3b      	adds	r3, r7, #4
 800e46e:	4618      	mov	r0, r3
 800e470:	f004 fb18 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800e478:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 800e47c:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800e47e:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <LmHandlerNvmDataStore+0xac>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e488:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e48a:	f000 f82f 	bl	800e4ec <NvmDataMgmtStoreEnd>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e494:	23ff      	movs	r3, #255	; 0xff
 800e496:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800e49a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d109      	bne.n	800e4b6 <LmHandlerNvmDataStore+0x9e>
 800e4a2:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <LmHandlerNvmDataStore+0xac>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	69db      	ldr	r3, [r3, #28]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d004      	beq.n	800e4b6 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e4ac:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <LmHandlerNvmDataStore+0xac>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	4798      	blx	r3
    }

    return lmhStatus;
 800e4b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3738      	adds	r7, #56	; 0x38
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	2000054c 	.word	0x2000054c

0800e4c8 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e4d2:	bf00      	nop
 800e4d4:	370c      	adds	r7, #12
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bc80      	pop	{r7}
 800e4da:	4770      	bx	lr

0800e4dc <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800e4e0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bc80      	pop	{r7}
 800e4ea:	4770      	bx	lr

0800e4ec <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800e4f0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bc80      	pop	{r7}
 800e4fa:	4770      	bx	lr

0800e4fc <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e500:	2220      	movs	r2, #32
 800e502:	2100      	movs	r1, #0
 800e504:	4802      	ldr	r0, [pc, #8]	; (800e510 <ClassBStatusReset+0x14>)
 800e506:	f009 ff25 	bl	8018354 <memset1>
}
 800e50a:	bf00      	nop
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	20000684 	.word	0x20000684

0800e514 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e518:	4b02      	ldr	r3, [pc, #8]	; (800e524 <LmhpCompliancePackageFactory+0x10>)
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bc80      	pop	{r7}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	200000c8 	.word	0x200000c8

0800e528 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af02      	add	r7, sp, #8
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d018      	beq.n	800e56e <LmhpComplianceInit+0x46>
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d015      	beq.n	800e56e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800e542:	4a19      	ldr	r2, [pc, #100]	; (800e5a8 <LmhpComplianceInit+0x80>)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e548:	4a18      	ldr	r2, [pc, #96]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e54e:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e554:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e556:	2201      	movs	r2, #1
 800e558:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e55a:	2300      	movs	r3, #0
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	4b14      	ldr	r3, [pc, #80]	; (800e5b0 <LmhpComplianceInit+0x88>)
 800e560:	2200      	movs	r2, #0
 800e562:	f04f 31ff 	mov.w	r1, #4294967295
 800e566:	4813      	ldr	r0, [pc, #76]	; (800e5b4 <LmhpComplianceInit+0x8c>)
 800e568:	f00d ff60 	bl	801c42c <UTIL_TIMER_Create>
 800e56c:	e005      	b.n	800e57a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e56e:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <LmhpComplianceInit+0x80>)
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e574:	4b0d      	ldr	r3, [pc, #52]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e576:	2200      	movs	r2, #0
 800e578:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e57a:	4b0c      	ldr	r3, [pc, #48]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e580:	f7ff ffbc 	bl	800e4fc <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e584:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e586:	2200      	movs	r2, #0
 800e588:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e58a:	4b08      	ldr	r3, [pc, #32]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e590:	4b06      	ldr	r3, [pc, #24]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e592:	2200      	movs	r2, #0
 800e594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e598:	4b04      	ldr	r3, [pc, #16]	; (800e5ac <LmhpComplianceInit+0x84>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800e5a0:	bf00      	nop
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	200006a8 	.word	0x200006a8
 800e5ac:	20000670 	.word	0x20000670
 800e5b0:	0800ee9d 	.word	0x0800ee9d
 800e5b4:	200006ac 	.word	0x200006ac

0800e5b8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e5bc:	4b02      	ldr	r3, [pc, #8]	; (800e5c8 <LmhpComplianceIsInitialized+0x10>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bc80      	pop	{r7}
 800e5c6:	4770      	bx	lr
 800e5c8:	20000670 	.word	0x20000670

0800e5cc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e5d0:	4b02      	ldr	r3, [pc, #8]	; (800e5dc <LmhpComplianceIsTxPending+0x10>)
 800e5d2:	785b      	ldrb	r3, [r3, #1]
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bc80      	pop	{r7}
 800e5da:	4770      	bx	lr
 800e5dc:	20000670 	.word	0x20000670

0800e5e0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e5e6:	4b33      	ldr	r3, [pc, #204]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e5e8:	785b      	ldrb	r3, [r3, #1]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d03f      	beq.n	800e66e <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e5ee:	f00e f8db 	bl	801c7a8 <UTIL_TIMER_GetCurrentTime>
 800e5f2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e5f4:	4b2f      	ldr	r3, [pc, #188]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e5f6:	685c      	ldr	r4, [r3, #4]
 800e5f8:	f7ff f982 	bl	800d900 <LmHandlerGetDutyCycleWaitTime>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	4423      	add	r3, r4
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	429a      	cmp	r2, r3
 800e604:	d942      	bls.n	800e68c <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e606:	4b2b      	ldr	r3, [pc, #172]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e608:	7a9b      	ldrb	r3, [r3, #10]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d03e      	beq.n	800e68c <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800e60e:	23e0      	movs	r3, #224	; 0xe0
 800e610:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e612:	4b28      	ldr	r3, [pc, #160]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e614:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800e616:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e618:	4b26      	ldr	r3, [pc, #152]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e61a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800e61c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e61e:	23ff      	movs	r3, #255	; 0xff
 800e620:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e622:	4b24      	ldr	r3, [pc, #144]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e624:	7a19      	ldrb	r1, [r3, #8]
 800e626:	463b      	mov	r3, r7
 800e628:	2201      	movs	r2, #1
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fa10 	bl	800da50 <LmHandlerSend>
 800e630:	4603      	mov	r3, r0
 800e632:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800e634:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e638:	f113 0f02 	cmn.w	r3, #2
 800e63c:	d004      	beq.n	800e648 <LmhpComplianceProcess+0x68>
 800e63e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e642:	f113 0f06 	cmn.w	r3, #6
 800e646:	d108      	bne.n	800e65a <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800e648:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e64c:	481a      	ldr	r0, [pc, #104]	; (800e6b8 <LmhpComplianceProcess+0xd8>)
 800e64e:	f00e f801 	bl	801c654 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800e652:	4819      	ldr	r0, [pc, #100]	; (800e6b8 <LmhpComplianceProcess+0xd8>)
 800e654:	f00d ff20 	bl	801c498 <UTIL_TIMER_Start>
 800e658:	e005      	b.n	800e666 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800e65a:	4b16      	ldr	r3, [pc, #88]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e660:	4b14      	ldr	r3, [pc, #80]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e662:	2200      	movs	r2, #0
 800e664:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800e666:	4a13      	ldr	r2, [pc, #76]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6053      	str	r3, [r2, #4]
 800e66c:	e00e      	b.n	800e68c <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e66e:	4b11      	ldr	r3, [pc, #68]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e674:	2b00      	cmp	r3, #0
 800e676:	d009      	beq.n	800e68c <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e678:	4b0e      	ldr	r3, [pc, #56]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e680:	4b0c      	ldr	r3, [pc, #48]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e682:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fad0 	bl	800dc2c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e68c:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e68e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00a      	beq.n	800e6ac <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e696:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <LmhpComplianceProcess+0xd4>)
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800e69e:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <LmhpComplianceProcess+0xdc>)
 800e6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d002      	beq.n	800e6ac <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800e6a6:	4b05      	ldr	r3, [pc, #20]	; (800e6bc <LmhpComplianceProcess+0xdc>)
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6aa:	4798      	blx	r3
        }
    }
}
 800e6ac:	bf00      	nop
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}
 800e6b4:	20000670 	.word	0x20000670
 800e6b8:	200006ac 	.word	0x200006ac
 800e6bc:	200000c8 	.word	0x200000c8

0800e6c0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e6c0:	b5b0      	push	{r4, r5, r7, lr}
 800e6c2:	b0a4      	sub	sp, #144	; 0x90
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e6ce:	4bce      	ldr	r3, [pc, #824]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	f083 0301 	eor.w	r3, r3, #1
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f040 83b5 	bne.w	800ee48 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	78db      	ldrb	r3, [r3, #3]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d103      	bne.n	800e6ee <LmhpComplianceOnMcpsIndication+0x2e>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	7b9b      	ldrb	r3, [r3, #14]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d005      	beq.n	800e6fa <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e6ee:	4bc6      	ldr	r3, [pc, #792]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6f0:	8a1b      	ldrh	r3, [r3, #16]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	4bc4      	ldr	r3, [pc, #784]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6f8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7b5b      	ldrb	r3, [r3, #13]
 800e6fe:	f083 0301 	eor.w	r3, r3, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	f040 83a1 	bne.w	800ee4c <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	78db      	ldrb	r3, [r3, #3]
 800e70e:	2be0      	cmp	r3, #224	; 0xe0
 800e710:	f040 839e 	bne.w	800ee50 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e714:	4bbc      	ldr	r3, [pc, #752]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e716:	2200      	movs	r2, #0
 800e718:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e722:	1c59      	adds	r1, r3, #1
 800e724:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e728:	4413      	add	r3, r2
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b7f      	cmp	r3, #127	; 0x7f
 800e72e:	f200 836e 	bhi.w	800ee0e <LmhpComplianceOnMcpsIndication+0x74e>
 800e732:	a201      	add	r2, pc, #4	; (adr r2, 800e738 <LmhpComplianceOnMcpsIndication+0x78>)
 800e734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e738:	0800e939 	.word	0x0800e939
 800e73c:	0800e97d 	.word	0x0800e97d
 800e740:	0800e987 	.word	0x0800e987
 800e744:	0800e993 	.word	0x0800e993
 800e748:	0800e9b5 	.word	0x0800e9b5
 800e74c:	0800e9e3 	.word	0x0800e9e3
 800e750:	0800ea11 	.word	0x0800ea11
 800e754:	0800ea6f 	.word	0x0800ea6f
 800e758:	0800eac7 	.word	0x0800eac7
 800e75c:	0800eb33 	.word	0x0800eb33
 800e760:	0800eb83 	.word	0x0800eb83
 800e764:	0800ee0f 	.word	0x0800ee0f
 800e768:	0800ee0f 	.word	0x0800ee0f
 800e76c:	0800ee0f 	.word	0x0800ee0f
 800e770:	0800ee0f 	.word	0x0800ee0f
 800e774:	0800ee0f 	.word	0x0800ee0f
 800e778:	0800ee0f 	.word	0x0800ee0f
 800e77c:	0800ee0f 	.word	0x0800ee0f
 800e780:	0800ee0f 	.word	0x0800ee0f
 800e784:	0800ee0f 	.word	0x0800ee0f
 800e788:	0800ee0f 	.word	0x0800ee0f
 800e78c:	0800ee0f 	.word	0x0800ee0f
 800e790:	0800ee0f 	.word	0x0800ee0f
 800e794:	0800ee0f 	.word	0x0800ee0f
 800e798:	0800ee0f 	.word	0x0800ee0f
 800e79c:	0800ee0f 	.word	0x0800ee0f
 800e7a0:	0800ee0f 	.word	0x0800ee0f
 800e7a4:	0800ee0f 	.word	0x0800ee0f
 800e7a8:	0800ee0f 	.word	0x0800ee0f
 800e7ac:	0800ee0f 	.word	0x0800ee0f
 800e7b0:	0800ee0f 	.word	0x0800ee0f
 800e7b4:	0800ee0f 	.word	0x0800ee0f
 800e7b8:	0800eb8b 	.word	0x0800eb8b
 800e7bc:	0800eb9d 	.word	0x0800eb9d
 800e7c0:	0800eba5 	.word	0x0800eba5
 800e7c4:	0800ee0f 	.word	0x0800ee0f
 800e7c8:	0800ee0f 	.word	0x0800ee0f
 800e7cc:	0800ee0f 	.word	0x0800ee0f
 800e7d0:	0800ee0f 	.word	0x0800ee0f
 800e7d4:	0800ee0f 	.word	0x0800ee0f
 800e7d8:	0800ee0f 	.word	0x0800ee0f
 800e7dc:	0800ee0f 	.word	0x0800ee0f
 800e7e0:	0800ee0f 	.word	0x0800ee0f
 800e7e4:	0800ee0f 	.word	0x0800ee0f
 800e7e8:	0800ee0f 	.word	0x0800ee0f
 800e7ec:	0800ee0f 	.word	0x0800ee0f
 800e7f0:	0800ee0f 	.word	0x0800ee0f
 800e7f4:	0800ee0f 	.word	0x0800ee0f
 800e7f8:	0800ee0f 	.word	0x0800ee0f
 800e7fc:	0800ee0f 	.word	0x0800ee0f
 800e800:	0800ee0f 	.word	0x0800ee0f
 800e804:	0800ee0f 	.word	0x0800ee0f
 800e808:	0800ee0f 	.word	0x0800ee0f
 800e80c:	0800ee0f 	.word	0x0800ee0f
 800e810:	0800ee0f 	.word	0x0800ee0f
 800e814:	0800ee0f 	.word	0x0800ee0f
 800e818:	0800ee0f 	.word	0x0800ee0f
 800e81c:	0800ee0f 	.word	0x0800ee0f
 800e820:	0800ee0f 	.word	0x0800ee0f
 800e824:	0800ee0f 	.word	0x0800ee0f
 800e828:	0800ee0f 	.word	0x0800ee0f
 800e82c:	0800ee0f 	.word	0x0800ee0f
 800e830:	0800ee0f 	.word	0x0800ee0f
 800e834:	0800ee0f 	.word	0x0800ee0f
 800e838:	0800ee0f 	.word	0x0800ee0f
 800e83c:	0800ee0f 	.word	0x0800ee0f
 800e840:	0800ee0f 	.word	0x0800ee0f
 800e844:	0800ee0f 	.word	0x0800ee0f
 800e848:	0800ee0f 	.word	0x0800ee0f
 800e84c:	0800ee0f 	.word	0x0800ee0f
 800e850:	0800ee0f 	.word	0x0800ee0f
 800e854:	0800ee0f 	.word	0x0800ee0f
 800e858:	0800ee0f 	.word	0x0800ee0f
 800e85c:	0800ee0f 	.word	0x0800ee0f
 800e860:	0800ee0f 	.word	0x0800ee0f
 800e864:	0800ee0f 	.word	0x0800ee0f
 800e868:	0800ee0f 	.word	0x0800ee0f
 800e86c:	0800ee0f 	.word	0x0800ee0f
 800e870:	0800ee0f 	.word	0x0800ee0f
 800e874:	0800ee0f 	.word	0x0800ee0f
 800e878:	0800ee0f 	.word	0x0800ee0f
 800e87c:	0800ee0f 	.word	0x0800ee0f
 800e880:	0800ee0f 	.word	0x0800ee0f
 800e884:	0800ee0f 	.word	0x0800ee0f
 800e888:	0800ee0f 	.word	0x0800ee0f
 800e88c:	0800ee0f 	.word	0x0800ee0f
 800e890:	0800ee0f 	.word	0x0800ee0f
 800e894:	0800ee0f 	.word	0x0800ee0f
 800e898:	0800ee0f 	.word	0x0800ee0f
 800e89c:	0800ee0f 	.word	0x0800ee0f
 800e8a0:	0800ee0f 	.word	0x0800ee0f
 800e8a4:	0800ee0f 	.word	0x0800ee0f
 800e8a8:	0800ee0f 	.word	0x0800ee0f
 800e8ac:	0800ee0f 	.word	0x0800ee0f
 800e8b0:	0800ee0f 	.word	0x0800ee0f
 800e8b4:	0800ee0f 	.word	0x0800ee0f
 800e8b8:	0800ee0f 	.word	0x0800ee0f
 800e8bc:	0800ee0f 	.word	0x0800ee0f
 800e8c0:	0800ee0f 	.word	0x0800ee0f
 800e8c4:	0800ee0f 	.word	0x0800ee0f
 800e8c8:	0800ee0f 	.word	0x0800ee0f
 800e8cc:	0800ee0f 	.word	0x0800ee0f
 800e8d0:	0800ee0f 	.word	0x0800ee0f
 800e8d4:	0800ee0f 	.word	0x0800ee0f
 800e8d8:	0800ee0f 	.word	0x0800ee0f
 800e8dc:	0800ee0f 	.word	0x0800ee0f
 800e8e0:	0800ee0f 	.word	0x0800ee0f
 800e8e4:	0800ee0f 	.word	0x0800ee0f
 800e8e8:	0800ee0f 	.word	0x0800ee0f
 800e8ec:	0800ee0f 	.word	0x0800ee0f
 800e8f0:	0800ee0f 	.word	0x0800ee0f
 800e8f4:	0800ee0f 	.word	0x0800ee0f
 800e8f8:	0800ee0f 	.word	0x0800ee0f
 800e8fc:	0800ee0f 	.word	0x0800ee0f
 800e900:	0800ee0f 	.word	0x0800ee0f
 800e904:	0800ee0f 	.word	0x0800ee0f
 800e908:	0800ee0f 	.word	0x0800ee0f
 800e90c:	0800ee0f 	.word	0x0800ee0f
 800e910:	0800ee0f 	.word	0x0800ee0f
 800e914:	0800ee0f 	.word	0x0800ee0f
 800e918:	0800ee0f 	.word	0x0800ee0f
 800e91c:	0800ee0f 	.word	0x0800ee0f
 800e920:	0800ee0f 	.word	0x0800ee0f
 800e924:	0800ee0f 	.word	0x0800ee0f
 800e928:	0800ee0f 	.word	0x0800ee0f
 800e92c:	0800ebd7 	.word	0x0800ebd7
 800e930:	0800ec87 	.word	0x0800ec87
 800e934:	0800ecb9 	.word	0x0800ecb9
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e938:	4b33      	ldr	r3, [pc, #204]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	4b32      	ldr	r3, [pc, #200]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e93e:	7a9b      	ldrb	r3, [r3, #10]
 800e940:	1c59      	adds	r1, r3, #1
 800e942:	b2c8      	uxtb	r0, r1
 800e944:	4930      	ldr	r1, [pc, #192]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e946:	7288      	strb	r0, [r1, #10]
 800e948:	4413      	add	r3, r2
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e94e:	4b2e      	ldr	r3, [pc, #184]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e950:	68da      	ldr	r2, [r3, #12]
 800e952:	4b2d      	ldr	r3, [pc, #180]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e954:	7a9b      	ldrb	r3, [r3, #10]
 800e956:	1c59      	adds	r1, r3, #1
 800e958:	b2c8      	uxtb	r0, r1
 800e95a:	492b      	ldr	r1, [pc, #172]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e95c:	7288      	strb	r0, [r1, #10]
 800e95e:	4413      	add	r3, r2
 800e960:	2206      	movs	r2, #6
 800e962:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e964:	4b28      	ldr	r3, [pc, #160]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e966:	68da      	ldr	r2, [r3, #12]
 800e968:	4b27      	ldr	r3, [pc, #156]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e96a:	7a9b      	ldrb	r3, [r3, #10]
 800e96c:	1c59      	adds	r1, r3, #1
 800e96e:	b2c8      	uxtb	r0, r1
 800e970:	4925      	ldr	r1, [pc, #148]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e972:	7288      	strb	r0, [r1, #10]
 800e974:	4413      	add	r3, r2
 800e976:	2201      	movs	r2, #1
 800e978:	701a      	strb	r2, [r3, #0]
        break;
 800e97a:	e251      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800e97c:	4b22      	ldr	r3, [pc, #136]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e97e:	2201      	movs	r2, #1
 800e980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800e984:	e24c      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e986:	4b21      	ldr	r3, [pc, #132]	; (800ea0c <LmhpComplianceOnMcpsIndication+0x34c>)
 800e988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98a:	2101      	movs	r1, #1
 800e98c:	2002      	movs	r0, #2
 800e98e:	4798      	blx	r3
        break;
 800e990:	e246      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	689a      	ldr	r2, [r3, #8]
 800e996:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e99a:	1c59      	adds	r1, r3, #1
 800e99c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e9a0:	4413      	add	r3, r2
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	4b18      	ldr	r3, [pc, #96]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e9a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800e9aa:	4b17      	ldr	r3, [pc, #92]	; (800ea08 <LmhpComplianceOnMcpsIndication+0x348>)
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800e9b2:	e235      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e9c0:	1c59      	adds	r1, r3, #1
 800e9c2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e9c6:	4413      	add	r3, r2
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	bf14      	ite	ne
 800e9ce:	2301      	movne	r3, #1
 800e9d0:	2300      	moveq	r3, #0
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f004 fa08 	bl	8012df0 <LoRaMacMibSetRequestConfirm>
        break;
 800e9e0:	e21e      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689a      	ldr	r2, [r3, #8]
 800e9e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e9ea:	1c59      	adds	r1, r3, #1
 800e9ec:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e9f0:	4413      	add	r3, r2
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	bf14      	ite	ne
 800e9f8:	2301      	movne	r3, #1
 800e9fa:	2300      	moveq	r3, #0
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f005 f824 	bl	8013a4c <LoRaMacTestSetDutyCycleOn>
        break;
 800ea04:	e20c      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
 800ea06:	bf00      	nop
 800ea08:	20000670 	.word	0x20000670
 800ea0c:	200000c8 	.word	0x200000c8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800ea10:	4ba5      	ldr	r3, [pc, #660]	; (800eca8 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800ea12:	f107 040c 	add.w	r4, r7, #12
 800ea16:	461d      	mov	r5, r3
 800ea18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ea24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	689a      	ldr	r2, [r3, #8]
 800ea2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ea30:	1c59      	adds	r1, r3, #1
 800ea32:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ea36:	4413      	add	r3, r2
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800ea3e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800ea42:	2b0a      	cmp	r3, #10
 800ea44:	f200 81e5 	bhi.w	800ee12 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800ea48:	4b98      	ldr	r3, [pc, #608]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 81df 	beq.w	800ee12 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800ea54:	4b95      	ldr	r3, [pc, #596]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685a      	ldr	r2, [r3, #4]
 800ea5a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	3390      	adds	r3, #144	; 0x90
 800ea62:	443b      	add	r3, r7
 800ea64:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	4790      	blx	r2
            }
        }
        break;
 800ea6c:	e1d1      	b.n	800ee12 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	689a      	ldr	r2, [r3, #8]
 800ea72:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ea76:	1c59      	adds	r1, r3, #1
 800ea78:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ea7c:	4413      	add	r3, r2
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800ea84:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d004      	beq.n	800ea96 <LmhpComplianceOnMcpsIndication+0x3d6>
 800ea8c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	f040 81c0 	bne.w	800ee16 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800ea96:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	bf14      	ite	ne
 800ea9e:	2301      	movne	r3, #1
 800eaa0:	2300      	moveq	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4b82      	ldr	r3, [pc, #520]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eaa8:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800eaaa:	4b80      	ldr	r3, [pc, #512]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f000 81b0 	beq.w	800ee16 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800eab6:	4b7d      	ldr	r3, [pc, #500]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	4a7c      	ldr	r2, [pc, #496]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eabe:	7a12      	ldrb	r2, [r2, #8]
 800eac0:	4610      	mov	r0, r2
 800eac2:	4798      	blx	r3
            }
        }
        break;
 800eac4:	e1a7      	b.n	800ee16 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800eac6:	4b7a      	ldr	r3, [pc, #488]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eac8:	68da      	ldr	r2, [r3, #12]
 800eaca:	4b79      	ldr	r3, [pc, #484]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eacc:	7a9b      	ldrb	r3, [r3, #10]
 800eace:	1c59      	adds	r1, r3, #1
 800ead0:	b2c8      	uxtb	r0, r1
 800ead2:	4977      	ldr	r1, [pc, #476]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ead4:	7288      	strb	r0, [r1, #10]
 800ead6:	4413      	add	r3, r2
 800ead8:	2208      	movs	r2, #8
 800eada:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800eadc:	2301      	movs	r3, #1
 800eade:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800eae2:	e019      	b.n	800eb18 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800eaec:	1c59      	adds	r1, r3, #1
 800eaee:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800eaf2:	4413      	add	r3, r2
 800eaf4:	781a      	ldrb	r2, [r3, #0]
 800eaf6:	4b6e      	ldr	r3, [pc, #440]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eaf8:	68d9      	ldr	r1, [r3, #12]
 800eafa:	4b6d      	ldr	r3, [pc, #436]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eafc:	7a9b      	ldrb	r3, [r3, #10]
 800eafe:	1c58      	adds	r0, r3, #1
 800eb00:	b2c4      	uxtb	r4, r0
 800eb02:	486b      	ldr	r0, [pc, #428]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb04:	7284      	strb	r4, [r0, #10]
 800eb06:	440b      	add	r3, r1
 800eb08:	3201      	adds	r2, #1
 800eb0a:	b2d2      	uxtb	r2, r2
 800eb0c:	701a      	strb	r2, [r3, #0]
             i++ )
 800eb0e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800eb12:	3301      	adds	r3, #1
 800eb14:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800eb18:	4b65      	ldr	r3, [pc, #404]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb1a:	7a5a      	ldrb	r2, [r3, #9]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7b1b      	ldrb	r3, [r3, #12]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	bf28      	it	cs
 800eb24:	4613      	movcs	r3, r2
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d3d9      	bcc.n	800eae4 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800eb30:	e176      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800eb32:	4b5f      	ldr	r3, [pc, #380]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb34:	68da      	ldr	r2, [r3, #12]
 800eb36:	4b5e      	ldr	r3, [pc, #376]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb38:	7a9b      	ldrb	r3, [r3, #10]
 800eb3a:	1c59      	adds	r1, r3, #1
 800eb3c:	b2c8      	uxtb	r0, r1
 800eb3e:	495c      	ldr	r1, [pc, #368]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb40:	7288      	strb	r0, [r1, #10]
 800eb42:	4413      	add	r3, r2
 800eb44:	2209      	movs	r2, #9
 800eb46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800eb48:	4b59      	ldr	r3, [pc, #356]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb4a:	8a18      	ldrh	r0, [r3, #16]
 800eb4c:	4b58      	ldr	r3, [pc, #352]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb4e:	68da      	ldr	r2, [r3, #12]
 800eb50:	4b57      	ldr	r3, [pc, #348]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb52:	7a9b      	ldrb	r3, [r3, #10]
 800eb54:	1c59      	adds	r1, r3, #1
 800eb56:	b2cc      	uxtb	r4, r1
 800eb58:	4955      	ldr	r1, [pc, #340]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb5a:	728c      	strb	r4, [r1, #10]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	b2c2      	uxtb	r2, r0
 800eb60:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800eb62:	4b53      	ldr	r3, [pc, #332]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb64:	8a1b      	ldrh	r3, [r3, #16]
 800eb66:	0a1b      	lsrs	r3, r3, #8
 800eb68:	b298      	uxth	r0, r3
 800eb6a:	4b51      	ldr	r3, [pc, #324]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb6c:	68da      	ldr	r2, [r3, #12]
 800eb6e:	4b50      	ldr	r3, [pc, #320]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb70:	7a9b      	ldrb	r3, [r3, #10]
 800eb72:	1c59      	adds	r1, r3, #1
 800eb74:	b2cc      	uxtb	r4, r1
 800eb76:	494e      	ldr	r1, [pc, #312]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb78:	728c      	strb	r4, [r1, #10]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	b2c2      	uxtb	r2, r0
 800eb7e:	701a      	strb	r2, [r3, #0]
        break;
 800eb80:	e14e      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800eb82:	4b4b      	ldr	r3, [pc, #300]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	821a      	strh	r2, [r3, #16]
        break;
 800eb88:	e14a      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800eb8a:	2304      	movs	r3, #4
 800eb8c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800eb90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eb94:	4618      	mov	r0, r3
 800eb96:	f004 fc9b 	bl	80134d0 <LoRaMacMlmeRequest>
        break;
 800eb9a:	e141      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800eb9c:	4b45      	ldr	r3, [pc, #276]	; (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	4798      	blx	r3
        break;
 800eba2:	e13d      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	689a      	ldr	r2, [r3, #8]
 800eba8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ebac:	1c59      	adds	r1, r3, #1
 800ebae:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ebb2:	4413      	add	r3, r2
 800ebb4:	781a      	ldrb	r2, [r3, #0]
 800ebb6:	4b3e      	ldr	r3, [pc, #248]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebb8:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800ebba:	4b3c      	ldr	r3, [pc, #240]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 812a 	beq.w	800ee1a <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800ebc6:	4b39      	ldr	r3, [pc, #228]	; (800ecac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	4a38      	ldr	r2, [pc, #224]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebce:	7d52      	ldrb	r2, [r2, #21]
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	4798      	blx	r3
        }
        break;
 800ebd4:	e121      	b.n	800ee1a <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	7b1b      	ldrb	r3, [r3, #12]
 800ebda:	2b07      	cmp	r3, #7
 800ebdc:	f040 811f 	bne.w	800ee1e <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800ebe0:	2305      	movs	r3, #5
 800ebe2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ebee:	4413      	add	r3, r2
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	b21a      	sxth	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6899      	ldr	r1, [r3, #8]
 800ebf8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	440b      	add	r3, r1
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	021b      	lsls	r3, r3, #8
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	4313      	orrs	r3, r2
 800ec08:	b21b      	sxth	r3, r3
 800ec0a:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800ec0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800ec10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec14:	3302      	adds	r3, #2
 800ec16:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	689a      	ldr	r2, [r3, #8]
 800ec1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec22:	4413      	add	r3, r2
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	4619      	mov	r1, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689a      	ldr	r2, [r3, #8]
 800ec2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec30:	3301      	adds	r3, #1
 800ec32:	4413      	add	r3, r2
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	021b      	lsls	r3, r3, #8
 800ec38:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6899      	ldr	r1, [r3, #8]
 800ec40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec44:	3302      	adds	r3, #2
 800ec46:	440b      	add	r3, r1
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ec50:	2364      	movs	r3, #100	; 0x64
 800ec52:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800ec56:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800ec58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec5c:	3303      	adds	r3, #3
 800ec5e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	689a      	ldr	r2, [r3, #8]
 800ec66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ec6a:	1c59      	adds	r1, r3, #1
 800ec6c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ec70:	4413      	add	r3, r2
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	b25b      	sxtb	r3, r3
 800ec76:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800ec7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f004 fc26 	bl	80134d0 <LoRaMacMlmeRequest>
        }
        break;
 800ec84:	e0cb      	b.n	800ee1e <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ec86:	2339      	movs	r3, #57	; 0x39
 800ec88:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ec92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ec96:	4618      	mov	r0, r3
 800ec98:	f004 f8aa 	bl	8012df0 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800ec9c:	4b04      	ldr	r3, [pc, #16]	; (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800eca4:	e0bc      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
 800eca6:	bf00      	nop
 800eca8:	0801d58c 	.word	0x0801d58c
 800ecac:	200006a8 	.word	0x200006a8
 800ecb0:	20000670 	.word	0x20000670
 800ecb4:	200000c8 	.word	0x200000c8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800ecb8:	232a      	movs	r3, #42	; 0x2a
 800ecba:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800ecbc:	f107 030c 	add.w	r3, r7, #12
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f003 feef 	bl	8012aa4 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ecce:	4b62      	ldr	r3, [pc, #392]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	4b61      	ldr	r3, [pc, #388]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecd4:	7a9b      	ldrb	r3, [r3, #10]
 800ecd6:	1c59      	adds	r1, r3, #1
 800ecd8:	b2c8      	uxtb	r0, r1
 800ecda:	495f      	ldr	r1, [pc, #380]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecdc:	7288      	strb	r0, [r1, #10]
 800ecde:	4413      	add	r3, r2
 800ece0:	227f      	movs	r2, #127	; 0x7f
 800ece2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ece4:	4b5d      	ldr	r3, [pc, #372]	; (800ee5c <LmhpComplianceOnMcpsIndication+0x79c>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	4b5b      	ldr	r3, [pc, #364]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecea:	68d9      	ldr	r1, [r3, #12]
 800ecec:	4b5a      	ldr	r3, [pc, #360]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecee:	7a9b      	ldrb	r3, [r3, #10]
 800ecf0:	1c58      	adds	r0, r3, #1
 800ecf2:	b2c4      	uxtb	r4, r0
 800ecf4:	4858      	ldr	r0, [pc, #352]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ecf6:	7284      	strb	r4, [r0, #10]
 800ecf8:	440b      	add	r3, r1
 800ecfa:	78d2      	ldrb	r2, [r2, #3]
 800ecfc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ecfe:	4b57      	ldr	r3, [pc, #348]	; (800ee5c <LmhpComplianceOnMcpsIndication+0x79c>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	4b55      	ldr	r3, [pc, #340]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed04:	68d9      	ldr	r1, [r3, #12]
 800ed06:	4b54      	ldr	r3, [pc, #336]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed08:	7a9b      	ldrb	r3, [r3, #10]
 800ed0a:	1c58      	adds	r0, r3, #1
 800ed0c:	b2c4      	uxtb	r4, r0
 800ed0e:	4852      	ldr	r0, [pc, #328]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed10:	7284      	strb	r4, [r0, #10]
 800ed12:	440b      	add	r3, r1
 800ed14:	7892      	ldrb	r2, [r2, #2]
 800ed16:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800ed18:	4b50      	ldr	r3, [pc, #320]	; (800ee5c <LmhpComplianceOnMcpsIndication+0x79c>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4b4e      	ldr	r3, [pc, #312]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed1e:	68d9      	ldr	r1, [r3, #12]
 800ed20:	4b4d      	ldr	r3, [pc, #308]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed22:	7a9b      	ldrb	r3, [r3, #10]
 800ed24:	1c58      	adds	r0, r3, #1
 800ed26:	b2c4      	uxtb	r4, r0
 800ed28:	484b      	ldr	r0, [pc, #300]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed2a:	7284      	strb	r4, [r0, #10]
 800ed2c:	440b      	add	r3, r1
 800ed2e:	7852      	ldrb	r2, [r2, #1]
 800ed30:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800ed32:	4b4a      	ldr	r3, [pc, #296]	; (800ee5c <LmhpComplianceOnMcpsIndication+0x79c>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	4b48      	ldr	r3, [pc, #288]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed38:	68d9      	ldr	r1, [r3, #12]
 800ed3a:	4b47      	ldr	r3, [pc, #284]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed3c:	7a9b      	ldrb	r3, [r3, #10]
 800ed3e:	1c58      	adds	r0, r3, #1
 800ed40:	b2c4      	uxtb	r4, r0
 800ed42:	4845      	ldr	r0, [pc, #276]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed44:	7284      	strb	r4, [r0, #10]
 800ed46:	440b      	add	r3, r1
 800ed48:	7812      	ldrb	r2, [r2, #0]
 800ed4a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ed4c:	4b42      	ldr	r3, [pc, #264]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed4e:	68da      	ldr	r2, [r3, #12]
 800ed50:	4b41      	ldr	r3, [pc, #260]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed52:	7a9b      	ldrb	r3, [r3, #10]
 800ed54:	1c59      	adds	r1, r3, #1
 800ed56:	b2c8      	uxtb	r0, r1
 800ed58:	493f      	ldr	r1, [pc, #252]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed5a:	7288      	strb	r0, [r1, #10]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ed62:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ed64:	4b3c      	ldr	r3, [pc, #240]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed66:	68da      	ldr	r2, [r3, #12]
 800ed68:	4b3b      	ldr	r3, [pc, #236]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed6a:	7a9b      	ldrb	r3, [r3, #10]
 800ed6c:	1c59      	adds	r1, r3, #1
 800ed6e:	b2c8      	uxtb	r0, r1
 800ed70:	4939      	ldr	r1, [pc, #228]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed72:	7288      	strb	r0, [r1, #10]
 800ed74:	4413      	add	r3, r2
 800ed76:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800ed7a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ed7c:	4b36      	ldr	r3, [pc, #216]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	4b35      	ldr	r3, [pc, #212]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed82:	7a9b      	ldrb	r3, [r3, #10]
 800ed84:	1c59      	adds	r1, r3, #1
 800ed86:	b2c8      	uxtb	r0, r1
 800ed88:	4933      	ldr	r1, [pc, #204]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed8a:	7288      	strb	r0, [r1, #10]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800ed92:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800ed94:	4b30      	ldr	r3, [pc, #192]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed96:	68da      	ldr	r2, [r3, #12]
 800ed98:	4b2f      	ldr	r3, [pc, #188]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ed9a:	7a9b      	ldrb	r3, [r3, #10]
 800ed9c:	1c59      	adds	r1, r3, #1
 800ed9e:	b2c8      	uxtb	r0, r1
 800eda0:	492d      	ldr	r1, [pc, #180]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800eda2:	7288      	strb	r0, [r1, #10]
 800eda4:	4413      	add	r3, r2
 800eda6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800edaa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800edac:	4b2a      	ldr	r3, [pc, #168]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edae:	68da      	ldr	r2, [r3, #12]
 800edb0:	4b29      	ldr	r3, [pc, #164]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edb2:	7a9b      	ldrb	r3, [r3, #10]
 800edb4:	1c59      	adds	r1, r3, #1
 800edb6:	b2c8      	uxtb	r0, r1
 800edb8:	4927      	ldr	r1, [pc, #156]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edba:	7288      	strb	r0, [r1, #10]
 800edbc:	4413      	add	r3, r2
 800edbe:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800edc2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800edc4:	4b24      	ldr	r3, [pc, #144]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	4b23      	ldr	r3, [pc, #140]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edca:	7a9b      	ldrb	r3, [r3, #10]
 800edcc:	1c59      	adds	r1, r3, #1
 800edce:	b2c8      	uxtb	r0, r1
 800edd0:	4921      	ldr	r1, [pc, #132]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edd2:	7288      	strb	r0, [r1, #10]
 800edd4:	4413      	add	r3, r2
 800edd6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800edda:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800eddc:	4b1e      	ldr	r3, [pc, #120]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edde:	68da      	ldr	r2, [r3, #12]
 800ede0:	4b1d      	ldr	r3, [pc, #116]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ede2:	7a9b      	ldrb	r3, [r3, #10]
 800ede4:	1c59      	adds	r1, r3, #1
 800ede6:	b2c8      	uxtb	r0, r1
 800ede8:	491b      	ldr	r1, [pc, #108]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edea:	7288      	strb	r0, [r1, #10]
 800edec:	4413      	add	r3, r2
 800edee:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800edf2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800edf4:	4b18      	ldr	r3, [pc, #96]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	4b17      	ldr	r3, [pc, #92]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800edfa:	7a9b      	ldrb	r3, [r3, #10]
 800edfc:	1c59      	adds	r1, r3, #1
 800edfe:	b2c8      	uxtb	r0, r1
 800ee00:	4915      	ldr	r1, [pc, #84]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ee02:	7288      	strb	r0, [r1, #10]
 800ee04:	4413      	add	r3, r2
 800ee06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee0a:	701a      	strb	r2, [r3, #0]
        break;
 800ee0c:	e008      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800ee0e:	bf00      	nop
 800ee10:	e006      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ee12:	bf00      	nop
 800ee14:	e004      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ee16:	bf00      	nop
 800ee18:	e002      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ee1a:	bf00      	nop
 800ee1c:	e000      	b.n	800ee20 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ee1e:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ee22:	7a9b      	ldrb	r3, [r3, #10]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d008      	beq.n	800ee3a <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800ee28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ee2c:	480c      	ldr	r0, [pc, #48]	; (800ee60 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ee2e:	f00d fc11 	bl	801c654 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800ee32:	480b      	ldr	r0, [pc, #44]	; (800ee60 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ee34:	f00d fb30 	bl	801c498 <UTIL_TIMER_Start>
 800ee38:	e00b      	b.n	800ee52 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800ee3a:	4809      	ldr	r0, [pc, #36]	; (800ee60 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ee3c:	f00d fb9a 	bl	801c574 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800ee40:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <LmhpComplianceOnMcpsIndication+0x798>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	705a      	strb	r2, [r3, #1]
 800ee46:	e004      	b.n	800ee52 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ee48:	bf00      	nop
 800ee4a:	e002      	b.n	800ee52 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ee4c:	bf00      	nop
 800ee4e:	e000      	b.n	800ee52 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ee50:	bf00      	nop
    }
}
 800ee52:	3790      	adds	r7, #144	; 0x90
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bdb0      	pop	{r4, r5, r7, pc}
 800ee58:	20000670 	.word	0x20000670
 800ee5c:	200006a8 	.word	0x200006a8
 800ee60:	200006ac 	.word	0x200006ac

0800ee64 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800ee6c:	bf00      	nop
    }
}
 800ee6e:	bf00      	nop
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bc80      	pop	{r7}
 800ee76:	4770      	bx	lr

0800ee78 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <LmhpComplianceOnMlmeIndication+0x20>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f083 0301 	eor.w	r3, r3, #1
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
    {
        return;
 800ee8c:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bc80      	pop	{r7}
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	20000670 	.word	0x20000670

0800ee9c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800eea4:	4b04      	ldr	r3, [pc, #16]	; (800eeb8 <OnProcessTimer+0x1c>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800eeaa:	4b04      	ldr	r3, [pc, #16]	; (800eebc <OnProcessTimer+0x20>)
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	4798      	blx	r3
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	20000670 	.word	0x20000670
 800eebc:	200000c8 	.word	0x200000c8

0800eec0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800eec0:	b590      	push	{r4, r7, lr}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800eec6:	f00d fc6f 	bl	801c7a8 <UTIL_TIMER_GetCurrentTime>
 800eeca:	4603      	mov	r3, r0
 800eecc:	4a16      	ldr	r2, [pc, #88]	; (800ef28 <OnRadioTxDone+0x68>)
 800eece:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800eed0:	4c16      	ldr	r4, [pc, #88]	; (800ef2c <OnRadioTxDone+0x6c>)
 800eed2:	463b      	mov	r3, r7
 800eed4:	4618      	mov	r0, r3
 800eed6:	f00c fde1 	bl	801ba9c <SysTimeGet>
 800eeda:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800eede:	463a      	mov	r2, r7
 800eee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eee4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800eee8:	4a11      	ldr	r2, [pc, #68]	; (800ef30 <OnRadioTxDone+0x70>)
 800eeea:	7813      	ldrb	r3, [r2, #0]
 800eeec:	f043 0320 	orr.w	r3, r3, #32
 800eef0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eef2:	4b0e      	ldr	r3, [pc, #56]	; (800ef2c <OnRadioTxDone+0x6c>)
 800eef4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00a      	beq.n	800ef12 <OnRadioTxDone+0x52>
 800eefc:	4b0b      	ldr	r3, [pc, #44]	; (800ef2c <OnRadioTxDone+0x6c>)
 800eefe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d004      	beq.n	800ef12 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef08:	4b08      	ldr	r3, [pc, #32]	; (800ef2c <OnRadioTxDone+0x6c>)
 800ef0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ef12:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <OnRadioTxDone+0x74>)
 800ef14:	2201      	movs	r2, #1
 800ef16:	2100      	movs	r1, #0
 800ef18:	2002      	movs	r0, #2
 800ef1a:	f00d fd35 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800ef1e:	bf00      	nop
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd90      	pop	{r4, r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20001790 	.word	0x20001790
 800ef2c:	200006c4 	.word	0x200006c4
 800ef30:	2000178c 	.word	0x2000178c
 800ef34:	0801d5b8 	.word	0x0801d5b8

0800ef38 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	4608      	mov	r0, r1
 800ef42:	4611      	mov	r1, r2
 800ef44:	461a      	mov	r2, r3
 800ef46:	4603      	mov	r3, r0
 800ef48:	817b      	strh	r3, [r7, #10]
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	813b      	strh	r3, [r7, #8]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ef52:	f00d fc29 	bl	801c7a8 <UTIL_TIMER_GetCurrentTime>
 800ef56:	4603      	mov	r3, r0
 800ef58:	4a18      	ldr	r2, [pc, #96]	; (800efbc <OnRadioRxDone+0x84>)
 800ef5a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800ef5c:	4a17      	ldr	r2, [pc, #92]	; (800efbc <OnRadioRxDone+0x84>)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <OnRadioRxDone+0x84>)
 800ef64:	897b      	ldrh	r3, [r7, #10]
 800ef66:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ef68:	4a14      	ldr	r2, [pc, #80]	; (800efbc <OnRadioRxDone+0x84>)
 800ef6a:	893b      	ldrh	r3, [r7, #8]
 800ef6c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ef6e:	4a13      	ldr	r2, [pc, #76]	; (800efbc <OnRadioRxDone+0x84>)
 800ef70:	79fb      	ldrb	r3, [r7, #7]
 800ef72:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ef74:	4a12      	ldr	r2, [pc, #72]	; (800efc0 <OnRadioRxDone+0x88>)
 800ef76:	7813      	ldrb	r3, [r2, #0]
 800ef78:	f043 0310 	orr.w	r3, r3, #16
 800ef7c:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ef7e:	4a10      	ldr	r2, [pc, #64]	; (800efc0 <OnRadioRxDone+0x88>)
 800ef80:	7813      	ldrb	r3, [r2, #0]
 800ef82:	f043 0301 	orr.w	r3, r3, #1
 800ef86:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef88:	4b0e      	ldr	r3, [pc, #56]	; (800efc4 <OnRadioRxDone+0x8c>)
 800ef8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <OnRadioRxDone+0x70>
 800ef92:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <OnRadioRxDone+0x8c>)
 800ef94:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef9e:	4b09      	ldr	r3, [pc, #36]	; (800efc4 <OnRadioRxDone+0x8c>)
 800efa0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <OnRadioRxDone+0x90>)
 800efaa:	2201      	movs	r2, #1
 800efac:	2100      	movs	r1, #0
 800efae:	2002      	movs	r0, #2
 800efb0:	f00d fcea 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	20001794 	.word	0x20001794
 800efc0:	2000178c 	.word	0x2000178c
 800efc4:	200006c4 	.word	0x200006c4
 800efc8:	0801d5c8 	.word	0x0801d5c8

0800efcc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800efd0:	4a0e      	ldr	r2, [pc, #56]	; (800f00c <OnRadioTxTimeout+0x40>)
 800efd2:	7813      	ldrb	r3, [r2, #0]
 800efd4:	f043 0308 	orr.w	r3, r3, #8
 800efd8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800efda:	4b0d      	ldr	r3, [pc, #52]	; (800f010 <OnRadioTxTimeout+0x44>)
 800efdc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00a      	beq.n	800effa <OnRadioTxTimeout+0x2e>
 800efe4:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <OnRadioTxTimeout+0x44>)
 800efe6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efea:	691b      	ldr	r3, [r3, #16]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d004      	beq.n	800effa <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eff0:	4b07      	ldr	r3, [pc, #28]	; (800f010 <OnRadioTxTimeout+0x44>)
 800eff2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800effa:	4b06      	ldr	r3, [pc, #24]	; (800f014 <OnRadioTxTimeout+0x48>)
 800effc:	2201      	movs	r2, #1
 800effe:	2100      	movs	r1, #0
 800f000:	2002      	movs	r0, #2
 800f002:	f00d fcc1 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800f006:	bf00      	nop
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	2000178c 	.word	0x2000178c
 800f010:	200006c4 	.word	0x200006c4
 800f014:	0801d5d8 	.word	0x0801d5d8

0800f018 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f01c:	4a0b      	ldr	r2, [pc, #44]	; (800f04c <OnRadioRxError+0x34>)
 800f01e:	7813      	ldrb	r3, [r2, #0]
 800f020:	f043 0304 	orr.w	r3, r3, #4
 800f024:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f026:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <OnRadioRxError+0x38>)
 800f028:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00a      	beq.n	800f046 <OnRadioRxError+0x2e>
 800f030:	4b07      	ldr	r3, [pc, #28]	; (800f050 <OnRadioRxError+0x38>)
 800f032:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d004      	beq.n	800f046 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f03c:	4b04      	ldr	r3, [pc, #16]	; (800f050 <OnRadioRxError+0x38>)
 800f03e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	4798      	blx	r3
    }
}
 800f046:	bf00      	nop
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	2000178c 	.word	0x2000178c
 800f050:	200006c4 	.word	0x200006c4

0800f054 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f058:	4a0e      	ldr	r2, [pc, #56]	; (800f094 <OnRadioRxTimeout+0x40>)
 800f05a:	7813      	ldrb	r3, [r2, #0]
 800f05c:	f043 0302 	orr.w	r3, r3, #2
 800f060:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f062:	4b0d      	ldr	r3, [pc, #52]	; (800f098 <OnRadioRxTimeout+0x44>)
 800f064:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00a      	beq.n	800f082 <OnRadioRxTimeout+0x2e>
 800f06c:	4b0a      	ldr	r3, [pc, #40]	; (800f098 <OnRadioRxTimeout+0x44>)
 800f06e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d004      	beq.n	800f082 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f078:	4b07      	ldr	r3, [pc, #28]	; (800f098 <OnRadioRxTimeout+0x44>)
 800f07a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f082:	4b06      	ldr	r3, [pc, #24]	; (800f09c <OnRadioRxTimeout+0x48>)
 800f084:	2201      	movs	r2, #1
 800f086:	2100      	movs	r1, #0
 800f088:	2002      	movs	r0, #2
 800f08a:	f00d fc7d 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 800f08e:	bf00      	nop
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	2000178c 	.word	0x2000178c
 800f098:	200006c4 	.word	0x200006c4
 800f09c:	0801d5e8 	.word	0x0801d5e8

0800f0a0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f0a4:	4b08      	ldr	r3, [pc, #32]	; (800f0c8 <UpdateRxSlotIdleState+0x28>)
 800f0a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d004      	beq.n	800f0b8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f0ae:	4b07      	ldr	r3, [pc, #28]	; (800f0cc <UpdateRxSlotIdleState+0x2c>)
 800f0b0:	2206      	movs	r2, #6
 800f0b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f0b6:	e003      	b.n	800f0c0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f0b8:	4b04      	ldr	r3, [pc, #16]	; (800f0cc <UpdateRxSlotIdleState+0x2c>)
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800f0c0:	bf00      	nop
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bc80      	pop	{r7}
 800f0c6:	4770      	bx	lr
 800f0c8:	20000be4 	.word	0x20000be4
 800f0cc:	200006c4 	.word	0x200006c4

0800f0d0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08e      	sub	sp, #56	; 0x38
 800f0d4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f0d6:	4b3e      	ldr	r3, [pc, #248]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f0d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d002      	beq.n	800f0e6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f0e0:	4b3c      	ldr	r3, [pc, #240]	; (800f1d4 <ProcessRadioTxDone+0x104>)
 800f0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e4:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f0e6:	4b3c      	ldr	r3, [pc, #240]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f0e8:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	483b      	ldr	r0, [pc, #236]	; (800f1dc <ProcessRadioTxDone+0x10c>)
 800f0f0:	f00d fab0 	bl	801c654 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f0f4:	4839      	ldr	r0, [pc, #228]	; (800f1dc <ProcessRadioTxDone+0x10c>)
 800f0f6:	f00d f9cf 	bl	801c498 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f0fa:	4b37      	ldr	r3, [pc, #220]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f0fc:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f100:	4619      	mov	r1, r3
 800f102:	4837      	ldr	r0, [pc, #220]	; (800f1e0 <ProcessRadioTxDone+0x110>)
 800f104:	f00d faa6 	bl	801c654 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f108:	4835      	ldr	r0, [pc, #212]	; (800f1e0 <ProcessRadioTxDone+0x110>)
 800f10a:	f00d f9c5 	bl	801c498 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800f10e:	4b32      	ldr	r3, [pc, #200]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f110:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f114:	2b00      	cmp	r3, #0
 800f116:	d01a      	beq.n	800f14e <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f118:	2315      	movs	r3, #21
 800f11a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f11e:	4b2c      	ldr	r3, [pc, #176]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f124:	f107 0220 	add.w	r2, r7, #32
 800f128:	4611      	mov	r1, r2
 800f12a:	4618      	mov	r0, r3
 800f12c:	f006 fd20 	bl	8015b70 <RegionGetPhyParam>
 800f130:	4603      	mov	r3, r0
 800f132:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f134:	4b28      	ldr	r3, [pc, #160]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f136:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	4413      	add	r3, r2
 800f13e:	4619      	mov	r1, r3
 800f140:	4828      	ldr	r0, [pc, #160]	; (800f1e4 <ProcessRadioTxDone+0x114>)
 800f142:	f00d fa87 	bl	801c654 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f146:	4827      	ldr	r0, [pc, #156]	; (800f1e4 <ProcessRadioTxDone+0x114>)
 800f148:	f00d f9a6 	bl	801c498 <UTIL_TIMER_Start>
 800f14c:	e003      	b.n	800f156 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f14e:	4b22      	ldr	r3, [pc, #136]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f156:	4b24      	ldr	r3, [pc, #144]	; (800f1e8 <ProcessRadioTxDone+0x118>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a1d      	ldr	r2, [pc, #116]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f15c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f15e:	4b1e      	ldr	r3, [pc, #120]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f160:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800f164:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f166:	4b20      	ldr	r3, [pc, #128]	; (800f1e8 <ProcessRadioTxDone+0x118>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f16c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f170:	4618      	mov	r0, r3
 800f172:	f00c fccb 	bl	801bb0c <SysTimeGetMcuTime>
 800f176:	4638      	mov	r0, r7
 800f178:	4b15      	ldr	r3, [pc, #84]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f17a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800f17e:	9200      	str	r2, [sp, #0]
 800f180:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f184:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f188:	ca06      	ldmia	r2, {r1, r2}
 800f18a:	f00c fc20 	bl	801b9ce <SysTimeSub>
 800f18e:	f107 0314 	add.w	r3, r7, #20
 800f192:	463a      	mov	r2, r7
 800f194:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f198:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <ProcessRadioTxDone+0x108>)
 800f19e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800f1a2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f1a8:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f1aa:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f1b6:	4b06      	ldr	r3, [pc, #24]	; (800f1d0 <ProcessRadioTxDone+0x100>)
 800f1b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1bc:	f107 0208 	add.w	r2, r7, #8
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f006 fcec 	bl	8015ba0 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f1c8:	bf00      	nop
 800f1ca:	3730      	adds	r7, #48	; 0x30
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	20000be4 	.word	0x20000be4
 800f1d4:	0801dc3c 	.word	0x0801dc3c
 800f1d8:	200006c4 	.word	0x200006c4
 800f1dc:	20000a44 	.word	0x20000a44
 800f1e0:	20000a5c 	.word	0x20000a5c
 800f1e4:	20000ac8 	.word	0x20000ac8
 800f1e8:	20001790 	.word	0x20001790

0800f1ec <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f1f0:	4b10      	ldr	r3, [pc, #64]	; (800f234 <PrepareRxDoneAbort+0x48>)
 800f1f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fa:	4a0e      	ldr	r2, [pc, #56]	; (800f234 <PrepareRxDoneAbort+0x48>)
 800f1fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800f200:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <PrepareRxDoneAbort+0x48>)
 800f202:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f20a:	2000      	movs	r0, #0
 800f20c:	f001 f99c 	bl	8010548 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f210:	4a08      	ldr	r2, [pc, #32]	; (800f234 <PrepareRxDoneAbort+0x48>)
 800f212:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f216:	f043 0302 	orr.w	r3, r3, #2
 800f21a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f21e:	4a05      	ldr	r2, [pc, #20]	; (800f234 <PrepareRxDoneAbort+0x48>)
 800f220:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f224:	f043 0320 	orr.w	r3, r3, #32
 800f228:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800f22c:	f7ff ff38 	bl	800f0a0 <UpdateRxSlotIdleState>
}
 800f230:	bf00      	nop
 800f232:	bd80      	pop	{r7, pc}
 800f234:	200006c4 	.word	0x200006c4

0800f238 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f238:	b590      	push	{r4, r7, lr}
 800f23a:	b0a7      	sub	sp, #156	; 0x9c
 800f23c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f23e:	2312      	movs	r3, #18
 800f240:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f244:	4bbd      	ldr	r3, [pc, #756]	; (800f53c <ProcessRadioRxDone+0x304>)
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800f24c:	4bbb      	ldr	r3, [pc, #748]	; (800f53c <ProcessRadioRxDone+0x304>)
 800f24e:	891b      	ldrh	r3, [r3, #8]
 800f250:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800f254:	4bb9      	ldr	r3, [pc, #740]	; (800f53c <ProcessRadioRxDone+0x304>)
 800f256:	895b      	ldrh	r3, [r3, #10]
 800f258:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800f25c:	4bb7      	ldr	r3, [pc, #732]	; (800f53c <ProcessRadioRxDone+0x304>)
 800f25e:	7b1b      	ldrb	r3, [r3, #12]
 800f260:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800f26a:	2300      	movs	r3, #0
 800f26c:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f26e:	4bb4      	ldr	r3, [pc, #720]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f270:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f27e:	2301      	movs	r3, #1
 800f280:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f284:	4aaf      	ldr	r2, [pc, #700]	; (800f544 <ProcessRadioRxDone+0x30c>)
 800f286:	7813      	ldrb	r3, [r2, #0]
 800f288:	f36f 0300 	bfc	r3, #0, #1
 800f28c:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f28e:	4bae      	ldr	r3, [pc, #696]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f290:	2200      	movs	r2, #0
 800f292:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800f296:	4aac      	ldr	r2, [pc, #688]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f298:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800f29c:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800f2a0:	4aa9      	ldr	r2, [pc, #676]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2a6:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f2aa:	4ba7      	ldr	r3, [pc, #668]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2ac:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800f2b0:	4ba5      	ldr	r3, [pc, #660]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2b2:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800f2b6:	4ba4      	ldr	r3, [pc, #656]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800f2be:	4ba2      	ldr	r3, [pc, #648]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800f2c6:	4ba0      	ldr	r3, [pc, #640]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800f2ce:	4b9e      	ldr	r3, [pc, #632]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800f2d6:	4b9c      	ldr	r3, [pc, #624]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800f2de:	4b9a      	ldr	r3, [pc, #616]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800f2e6:	4b98      	ldr	r3, [pc, #608]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f2ee:	4b96      	ldr	r3, [pc, #600]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f2f6:	4b94      	ldr	r3, [pc, #592]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800f2fe:	4b92      	ldr	r3, [pc, #584]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f300:	2200      	movs	r2, #0
 800f302:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f306:	4b90      	ldr	r3, [pc, #576]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f30e:	4b8e      	ldr	r3, [pc, #568]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f310:	2200      	movs	r2, #0
 800f312:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f316:	4b8d      	ldr	r3, [pc, #564]	; (800f54c <ProcessRadioRxDone+0x314>)
 800f318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f31c:	4b8a      	ldr	r3, [pc, #552]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f31e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f326:	488a      	ldr	r0, [pc, #552]	; (800f550 <ProcessRadioRxDone+0x318>)
 800f328:	f00d f924 	bl	801c574 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f32c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f330:	4619      	mov	r1, r3
 800f332:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800f336:	f004 fccf 	bl	8013cd8 <LoRaMacClassBRxBeacon>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00b      	beq.n	800f358 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f340:	4a81      	ldr	r2, [pc, #516]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f342:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800f346:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f34a:	4a7f      	ldr	r2, [pc, #508]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f34c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f350:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800f354:	f000 bc22 	b.w	800fb9c <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f358:	4b79      	ldr	r3, [pc, #484]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f35a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d11e      	bne.n	800f3a0 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f362:	f004 fccc 	bl	8013cfe <LoRaMacClassBIsPingExpected>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00a      	beq.n	800f382 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f36c:	2000      	movs	r0, #0
 800f36e:	f004 fc7d 	bl	8013c6c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f372:	2000      	movs	r0, #0
 800f374:	f004 fc9e 	bl	8013cb4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f378:	4b73      	ldr	r3, [pc, #460]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f37a:	2204      	movs	r2, #4
 800f37c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800f380:	e00e      	b.n	800f3a0 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f382:	f004 fcc3 	bl	8013d0c <LoRaMacClassBIsMulticastExpected>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d009      	beq.n	800f3a0 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f38c:	2000      	movs	r0, #0
 800f38e:	f004 fc77 	bl	8013c80 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f392:	2000      	movs	r0, #0
 800f394:	f004 fc97 	bl	8013cc6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f398:	4b6b      	ldr	r3, [pc, #428]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f39a:	2205      	movs	r2, #5
 800f39c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f3a0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f3b0:	4413      	add	r3, r2
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800f3b8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f3bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	2b06      	cmp	r3, #6
 800f3c6:	f200 83bd 	bhi.w	800fb44 <ProcessRadioRxDone+0x90c>
 800f3ca:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <ProcessRadioRxDone+0x198>)
 800f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d0:	0800f3ed 	.word	0x0800f3ed
 800f3d4:	0800fb45 	.word	0x0800fb45
 800f3d8:	0800f581 	.word	0x0800f581
 800f3dc:	0800fb45 	.word	0x0800fb45
 800f3e0:	0800f579 	.word	0x0800f579
 800f3e4:	0800fb45 	.word	0x0800fb45
 800f3e8:	0800fad7 	.word	0x0800fad7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f3ec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f3f0:	2b10      	cmp	r3, #16
 800f3f2:	d806      	bhi.n	800f402 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3f4:	4b54      	ldr	r3, [pc, #336]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f3fc:	f7ff fef6 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f400:	e3cc      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800f402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f406:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800f408:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f410:	4b4b      	ldr	r3, [pc, #300]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f412:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d006      	beq.n	800f428 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f41a:	4b4b      	ldr	r3, [pc, #300]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f41c:	2201      	movs	r2, #1
 800f41e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f422:	f7ff fee3 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f426:	e3b9      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f428:	f7fe f86c 	bl	800d504 <SecureElementGetJoinEui>
 800f42c:	4601      	mov	r1, r0
 800f42e:	f107 030c 	add.w	r3, r7, #12
 800f432:	461a      	mov	r2, r3
 800f434:	20ff      	movs	r0, #255	; 0xff
 800f436:	f005 fe1f 	bl	8015078 <LoRaMacCryptoHandleJoinAccept>
 800f43a:	4603      	mov	r3, r0
 800f43c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f440:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f444:	2b00      	cmp	r3, #0
 800f446:	f040 8085 	bne.w	800f554 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f44a:	7d7b      	ldrb	r3, [r7, #21]
 800f44c:	461a      	mov	r2, r3
 800f44e:	4b3c      	ldr	r3, [pc, #240]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f450:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f454:	4b3a      	ldr	r3, [pc, #232]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f456:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f45a:	7dbb      	ldrb	r3, [r7, #22]
 800f45c:	021b      	lsls	r3, r3, #8
 800f45e:	4313      	orrs	r3, r2
 800f460:	4a37      	ldr	r2, [pc, #220]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f462:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f466:	4b36      	ldr	r3, [pc, #216]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f468:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	041b      	lsls	r3, r3, #16
 800f470:	4313      	orrs	r3, r2
 800f472:	4a33      	ldr	r2, [pc, #204]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f474:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	4a31      	ldr	r2, [pc, #196]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f47c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f480:	7f3b      	ldrb	r3, [r7, #28]
 800f482:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f486:	b2db      	uxtb	r3, r3
 800f488:	461a      	mov	r2, r3
 800f48a:	4b2d      	ldr	r3, [pc, #180]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f48c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f490:	7f3b      	ldrb	r3, [r7, #28]
 800f492:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f496:	b2db      	uxtb	r3, r3
 800f498:	461a      	mov	r2, r3
 800f49a:	4b29      	ldr	r3, [pc, #164]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f49c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f4a0:	7f3b      	ldrb	r3, [r7, #28]
 800f4a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	4b25      	ldr	r3, [pc, #148]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f4b0:	7f7b      	ldrb	r3, [r7, #29]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	4b22      	ldr	r3, [pc, #136]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4b6:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f4b8:	4b21      	ldr	r3, [pc, #132]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f4c0:	4b1f      	ldr	r3, [pc, #124]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f4c6:	4b1e      	ldr	r3, [pc, #120]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4ce:	fb02 f303 	mul.w	r3, r2, r3
 800f4d2:	4a1b      	ldr	r2, [pc, #108]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4d4:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4d6:	4b1a      	ldr	r3, [pc, #104]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4de:	4a18      	ldr	r2, [pc, #96]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4e0:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f4e2:	4b17      	ldr	r3, [pc, #92]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f4ea:	f107 030c 	add.w	r3, r7, #12
 800f4ee:	3312      	adds	r3, #18
 800f4f0:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f4f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	3b11      	subs	r3, #17
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f500:	4b11      	ldr	r3, [pc, #68]	; (800f548 <ProcessRadioRxDone+0x310>)
 800f502:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800f506:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f50a:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f50c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f510:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f006 fb7c 	bl	8015c14 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f51c:	4b08      	ldr	r3, [pc, #32]	; (800f540 <ProcessRadioRxDone+0x308>)
 800f51e:	2202      	movs	r2, #2
 800f520:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f524:	2001      	movs	r0, #1
 800f526:	f005 f8cf 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d01b      	beq.n	800f568 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f530:	2101      	movs	r1, #1
 800f532:	2000      	movs	r0, #0
 800f534:	f005 f83c 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>
 800f538:	e016      	b.n	800f568 <ProcessRadioRxDone+0x330>
 800f53a:	bf00      	nop
 800f53c:	20001794 	.word	0x20001794
 800f540:	20000be4 	.word	0x20000be4
 800f544:	2000178c 	.word	0x2000178c
 800f548:	200006c4 	.word	0x200006c4
 800f54c:	0801dc3c 	.word	0x0801dc3c
 800f550:	20000a5c 	.word	0x20000a5c
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f554:	2001      	movs	r0, #1
 800f556:	f005 f8b7 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d003      	beq.n	800f568 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f560:	2101      	movs	r1, #1
 800f562:	2007      	movs	r0, #7
 800f564:	f005 f824 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f568:	4ab9      	ldr	r2, [pc, #740]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f56a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f56e:	f043 0308 	orr.w	r3, r3, #8
 800f572:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800f576:	e2ec      	b.n	800fb52 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f578:	4bb5      	ldr	r3, [pc, #724]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f580:	4bb4      	ldr	r3, [pc, #720]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f582:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f586:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f58a:	4bb1      	ldr	r3, [pc, #708]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f58c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800f590:	b25b      	sxtb	r3, r3
 800f592:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f596:	230d      	movs	r3, #13
 800f598:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f59c:	4bad      	ldr	r3, [pc, #692]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f59e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f5a6:	230e      	movs	r3, #14
 800f5a8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f5ac:	4ba9      	ldr	r3, [pc, #676]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f5ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f006 fad9 	bl	8015b70 <RegionGetPhyParam>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f5c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f5c6:	3b0d      	subs	r3, #13
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	b21b      	sxth	r3, r3
 800f5cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5d0:	b21a      	sxth	r2, r3
 800f5d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5d4:	b21b      	sxth	r3, r3
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	dc03      	bgt.n	800f5e2 <ProcessRadioRxDone+0x3aa>
 800f5da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f5de:	2b0b      	cmp	r3, #11
 800f5e0:	d806      	bhi.n	800f5f0 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f5e2:	4b9b      	ldr	r3, [pc, #620]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f5ea:	f7ff fdff 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f5ee:	e2d5      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800f5f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f5f4:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800f5f6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f600:	4b95      	ldr	r3, [pc, #596]	; (800f858 <ProcessRadioRxDone+0x620>)
 800f602:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f604:	23ff      	movs	r3, #255	; 0xff
 800f606:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f60a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f60e:	4618      	mov	r0, r3
 800f610:	f006 f831 	bl	8015676 <LoRaMacParserData>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d006      	beq.n	800f628 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f61a:	4b8d      	ldr	r3, [pc, #564]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f622:	f7ff fde3 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f626:	e2b9      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f628:	4b8a      	ldr	r3, [pc, #552]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f62a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d132      	bne.n	800f698 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f632:	f004 fb64 	bl	8013cfe <LoRaMacClassBIsPingExpected>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d014      	beq.n	800f666 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f63c:	2000      	movs	r0, #0
 800f63e:	f004 fb15 	bl	8013c6c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f642:	2000      	movs	r0, #0
 800f644:	f004 fb36 	bl	8013cb4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f648:	4b81      	ldr	r3, [pc, #516]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f64a:	2204      	movs	r2, #4
 800f64c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f652:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f656:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f004 fbd6 	bl	8013e10 <LoRaMacClassBSetFPendingBit>
 800f664:	e018      	b.n	800f698 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f666:	f004 fb51 	bl	8013d0c <LoRaMacClassBIsMulticastExpected>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d013      	beq.n	800f698 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f670:	2000      	movs	r0, #0
 800f672:	f004 fb05 	bl	8013c80 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f676:	2000      	movs	r0, #0
 800f678:	f004 fb25 	bl	8013cc6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f67c:	4b74      	ldr	r3, [pc, #464]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f67e:	2205      	movs	r2, #5
 800f680:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f68a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	4619      	mov	r1, r3
 800f692:	4610      	mov	r0, r2
 800f694:	f004 fbbc 	bl	8013e10 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f69a:	4a6d      	ldr	r2, [pc, #436]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f69c:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f6a0:	1dba      	adds	r2, r7, #6
 800f6a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f002 fd13 	bl	80120d4 <DetermineFrameType>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d006      	beq.n	800f6c2 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6b4:	4b66      	ldr	r3, [pc, #408]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f6bc:	f7ff fd96 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f6c0:	e26c      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800f6d2:	e049      	b.n	800f768 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6d4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f6d8:	4a5e      	ldr	r2, [pc, #376]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f6da:	212c      	movs	r1, #44	; 0x2c
 800f6dc:	fb01 f303 	mul.w	r3, r1, r3
 800f6e0:	4413      	add	r3, r2
 800f6e2:	33dc      	adds	r3, #220	; 0xdc
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d138      	bne.n	800f75e <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f6ec:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f6f0:	4a58      	ldr	r2, [pc, #352]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f6f2:	212c      	movs	r1, #44	; 0x2c
 800f6f4:	fb01 f303 	mul.w	r3, r1, r3
 800f6f8:	4413      	add	r3, r2
 800f6fa:	33da      	adds	r3, #218	; 0xda
 800f6fc:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d02d      	beq.n	800f75e <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800f702:	2301      	movs	r3, #1
 800f704:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f708:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f70c:	4a51      	ldr	r2, [pc, #324]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f70e:	212c      	movs	r1, #44	; 0x2c
 800f710:	fb01 f303 	mul.w	r3, r1, r3
 800f714:	4413      	add	r3, r2
 800f716:	33db      	adds	r3, #219	; 0xdb
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f71e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f722:	4a4c      	ldr	r2, [pc, #304]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f724:	212c      	movs	r1, #44	; 0x2c
 800f726:	fb01 f303 	mul.w	r3, r1, r3
 800f72a:	4413      	add	r3, r2
 800f72c:	33f8      	adds	r3, #248	; 0xf8
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f734:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f738:	4a46      	ldr	r2, [pc, #280]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f73a:	212c      	movs	r1, #44	; 0x2c
 800f73c:	fb01 f303 	mul.w	r3, r1, r3
 800f740:	4413      	add	r3, r2
 800f742:	33dc      	adds	r3, #220	; 0xdc
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f74a:	4b42      	ldr	r3, [pc, #264]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f74c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f750:	2b02      	cmp	r3, #2
 800f752:	d10e      	bne.n	800f772 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f754:	4b3e      	ldr	r3, [pc, #248]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f756:	2203      	movs	r2, #3
 800f758:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800f75c:	e009      	b.n	800f772 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f75e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f762:	3301      	adds	r3, #1
 800f764:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800f768:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0b1      	beq.n	800f6d4 <ProcessRadioRxDone+0x49c>
 800f770:	e000      	b.n	800f774 <ProcessRadioRxDone+0x53c>
                    break;
 800f772:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f774:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d117      	bne.n	800f7ac <ProcessRadioRxDone+0x574>
 800f77c:	79bb      	ldrb	r3, [r7, #6]
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d10d      	bne.n	800f79e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f782:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f786:	f003 0320 	and.w	r3, r3, #32
 800f78a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d106      	bne.n	800f79e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f790:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f798:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f79e:	4b2c      	ldr	r3, [pc, #176]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f7a6:	f7ff fd21 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f7aa:	e1f7      	b.n	800fb9c <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f7ac:	79b9      	ldrb	r1, [r7, #6]
 800f7ae:	4c29      	ldr	r4, [pc, #164]	; (800f854 <ProcessRadioRxDone+0x61c>)
 800f7b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f7b4:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800f7b8:	f107 0308 	add.w	r3, r7, #8
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	1dfb      	adds	r3, r7, #7
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800f7c6:	f000 fee7 	bl	8010598 <GetFCntDown>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f7d0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d017      	beq.n	800f808 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f7d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f7dc:	2b07      	cmp	r3, #7
 800f7de:	d104      	bne.n	800f7ea <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f7e0:	4b1b      	ldr	r3, [pc, #108]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f7e2:	2208      	movs	r2, #8
 800f7e4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800f7e8:	e003      	b.n	800f7f2 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7ea:	4b19      	ldr	r3, [pc, #100]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	4a16      	ldr	r2, [pc, #88]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f7f6:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	4a14      	ldr	r2, [pc, #80]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f7fe:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800f802:	f7ff fcf3 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f806:	e1c9      	b.n	800fb9c <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f808:	79fa      	ldrb	r2, [r7, #7]
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800f810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	460b      	mov	r3, r1
 800f818:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f81c:	f005 fd78 	bl	8015310 <LoRaMacCryptoUnsecureMessage>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f826:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d016      	beq.n	800f85c <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f82e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f832:	2b02      	cmp	r3, #2
 800f834:	d104      	bne.n	800f840 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f836:	4b06      	ldr	r3, [pc, #24]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f838:	220a      	movs	r2, #10
 800f83a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800f83e:	e003      	b.n	800f848 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f840:	4b03      	ldr	r3, [pc, #12]	; (800f850 <ProcessRadioRxDone+0x618>)
 800f842:	220b      	movs	r2, #11
 800f844:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800f848:	f7ff fcd0 	bl	800f1ec <PrepareRxDoneAbort>
                return;
 800f84c:	e1a6      	b.n	800fb9c <ProcessRadioRxDone+0x964>
 800f84e:	bf00      	nop
 800f850:	200006c4 	.word	0x200006c4
 800f854:	20000be4 	.word	0x20000be4
 800f858:	200008fc 	.word	0x200008fc
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f85c:	4bb5      	ldr	r3, [pc, #724]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800f864:	4ab3      	ldr	r2, [pc, #716]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f866:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f86a:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f86e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f872:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f876:	b2db      	uxtb	r3, r3
 800f878:	461a      	mov	r2, r3
 800f87a:	4bae      	ldr	r3, [pc, #696]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f87c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800f880:	4bac      	ldr	r3, [pc, #688]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f882:	2200      	movs	r2, #0
 800f884:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800f888:	4baa      	ldr	r3, [pc, #680]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	4aa8      	ldr	r2, [pc, #672]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f894:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	4aa6      	ldr	r2, [pc, #664]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f89c:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f8a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f8a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	bf14      	ite	ne
 800f8ae:	2301      	movne	r3, #1
 800f8b0:	2300      	moveq	r3, #0
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b9f      	ldr	r3, [pc, #636]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f8b6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f8ba:	4b9e      	ldr	r3, [pc, #632]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f8c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f8c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	bf14      	ite	ne
 800f8d0:	2301      	movne	r3, #1
 800f8d2:	2300      	moveq	r3, #0
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	4b97      	ldr	r3, [pc, #604]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f8d8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f8dc:	4b95      	ldr	r3, [pc, #596]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f8de:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d004      	beq.n	800f8f0 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f8e6:	4b93      	ldr	r3, [pc, #588]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f8e8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d106      	bne.n	800f8fe <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f8f0:	4b91      	ldr	r3, [pc, #580]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f8f6:	4b90      	ldr	r3, [pc, #576]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f8fe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f902:	2b01      	cmp	r3, #1
 800f904:	d104      	bne.n	800f910 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f906:	4b8b      	ldr	r3, [pc, #556]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f908:	2202      	movs	r2, #2
 800f90a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800f90e:	e034      	b.n	800f97a <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f910:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f914:	f023 031f 	bic.w	r3, r3, #31
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2ba0      	cmp	r3, #160	; 0xa0
 800f91c:	d125      	bne.n	800f96a <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f91e:	4b86      	ldr	r3, [pc, #536]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f920:	2201      	movs	r2, #1
 800f922:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f926:	4b84      	ldr	r3, [pc, #528]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f928:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f932:	4a81      	ldr	r2, [pc, #516]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f934:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f936:	4b7f      	ldr	r3, [pc, #508]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f93e:	4b7d      	ldr	r3, [pc, #500]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f940:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f944:	2b00      	cmp	r3, #0
 800f946:	d018      	beq.n	800f97a <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f948:	4b7a      	ldr	r3, [pc, #488]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f94a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d013      	beq.n	800f97a <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f952:	4b79      	ldr	r3, [pc, #484]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f958:	4a76      	ldr	r2, [pc, #472]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f95a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f95e:	4b77      	ldr	r3, [pc, #476]	; (800fb3c <ProcessRadioRxDone+0x904>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a74      	ldr	r2, [pc, #464]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f964:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800f968:	e007      	b.n	800f97a <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f96a:	4b73      	ldr	r3, [pc, #460]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f972:	4b70      	ldr	r3, [pc, #448]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f974:	2200      	movs	r2, #0
 800f976:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f97a:	4b6e      	ldr	r3, [pc, #440]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f97c:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f980:	4a6c      	ldr	r2, [pc, #432]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f982:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800f986:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800f98a:	4618      	mov	r0, r3
 800f98c:	f001 ff88 	bl	80118a0 <RemoveMacCommands>

            switch( fType )
 800f990:	79bb      	ldrb	r3, [r7, #6]
 800f992:	2b03      	cmp	r3, #3
 800f994:	d873      	bhi.n	800fa7e <ProcessRadioRxDone+0x846>
 800f996:	a201      	add	r2, pc, #4	; (adr r2, 800f99c <ProcessRadioRxDone+0x764>)
 800f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99c:	0800f9ad 	.word	0x0800f9ad
 800f9a0:	0800f9fd 	.word	0x0800f9fd
 800f9a4:	0800fa33 	.word	0x0800fa33
 800f9a8:	0800fa59 	.word	0x0800fa59
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f9ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f9b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	461c      	mov	r4, r3
 800f9b8:	4b5e      	ldr	r3, [pc, #376]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f9ba:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f9be:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800f9c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f9c6:	f102 0010 	add.w	r0, r2, #16
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4622      	mov	r2, r4
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	f000 ff45 	bl	8010860 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f9d6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f9da:	4b56      	ldr	r3, [pc, #344]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f9dc:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f9e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9e2:	4a54      	ldr	r2, [pc, #336]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f9e4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f9e8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f9ec:	4b51      	ldr	r3, [pc, #324]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f9ee:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f9f2:	4b50      	ldr	r3, [pc, #320]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800f9fa:	e047      	b.n	800fa8c <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f9fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fa00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	461c      	mov	r4, r3
 800fa08:	4b4a      	ldr	r3, [pc, #296]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa0a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800fa0e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800fa12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fa16:	f102 0010 	add.w	r0, r2, #16
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4622      	mov	r2, r4
 800fa20:	2100      	movs	r1, #0
 800fa22:	f000 ff1d 	bl	8010860 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa26:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800fa2a:	4b42      	ldr	r3, [pc, #264]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa2c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800fa30:	e02c      	b.n	800fa8c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fa32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa34:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800fa38:	4b3e      	ldr	r3, [pc, #248]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa3a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800fa3e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	460b      	mov	r3, r1
 800fa46:	2100      	movs	r1, #0
 800fa48:	f000 ff0a 	bl	8010860 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa4c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800fa50:	4b38      	ldr	r3, [pc, #224]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa52:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800fa56:	e019      	b.n	800fa8c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa58:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800fa5c:	4b35      	ldr	r3, [pc, #212]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa5e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fa62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa64:	4a33      	ldr	r2, [pc, #204]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa66:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fa6a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800fa6e:	4b31      	ldr	r3, [pc, #196]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa70:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800fa74:	4b2f      	ldr	r3, [pc, #188]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa76:	2201      	movs	r2, #1
 800fa78:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800fa7c:	e006      	b.n	800fa8c <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa7e:	4b2d      	ldr	r3, [pc, #180]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fa80:	2201      	movs	r2, #1
 800fa82:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800fa86:	f7ff fbb1 	bl	800f1ec <PrepareRxDoneAbort>
                    break;
 800fa8a:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800fa8c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800fa90:	2be0      	cmp	r3, #224	; 0xe0
 800fa92:	d118      	bne.n	800fac6 <ProcessRadioRxDone+0x88e>
 800fa94:	4b28      	ldr	r3, [pc, #160]	; (800fb38 <ProcessRadioRxDone+0x900>)
 800fa96:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800fa9a:	f083 0301 	eor.w	r3, r3, #1
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d010      	beq.n	800fac6 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faa4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800faa8:	4b22      	ldr	r3, [pc, #136]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800faaa:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800faae:	4b21      	ldr	r3, [pc, #132]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800fab6:	4b1f      	ldr	r3, [pc, #124]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fab8:	2200      	movs	r2, #0
 800faba:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800fabe:	4b1d      	ldr	r3, [pc, #116]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fac6:	4a1b      	ldr	r2, [pc, #108]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fac8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800facc:	f043 0302 	orr.w	r3, r3, #2
 800fad0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800fad4:	e03d      	b.n	800fb52 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fad6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800fada:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fade:	18d1      	adds	r1, r2, r3
 800fae0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	b29b      	uxth	r3, r3
 800faee:	461a      	mov	r2, r3
 800faf0:	4813      	ldr	r0, [pc, #76]	; (800fb40 <ProcessRadioRxDone+0x908>)
 800faf2:	f008 fbf4 	bl	80182de <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800faf6:	4b0f      	ldr	r3, [pc, #60]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800faf8:	2203      	movs	r2, #3
 800fafa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fafe:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fb06:	4b0b      	ldr	r3, [pc, #44]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fb08:	4a0d      	ldr	r2, [pc, #52]	; (800fb40 <ProcessRadioRxDone+0x908>)
 800fb0a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fb0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	4b05      	ldr	r3, [pc, #20]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fb1e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb22:	4a04      	ldr	r2, [pc, #16]	; (800fb34 <ProcessRadioRxDone+0x8fc>)
 800fb24:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fb28:	f043 0302 	orr.w	r3, r3, #2
 800fb2c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800fb30:	e00f      	b.n	800fb52 <ProcessRadioRxDone+0x91a>
 800fb32:	bf00      	nop
 800fb34:	200006c4 	.word	0x200006c4
 800fb38:	20000be4 	.word	0x20000be4
 800fb3c:	20001794 	.word	0x20001794
 800fb40:	200008fc 	.word	0x200008fc
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb44:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800fb4c:	f7ff fb4e 	bl	800f1ec <PrepareRxDoneAbort>
            break;
 800fb50:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb52:	4b14      	ldr	r3, [pc, #80]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb54:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800fb5c:	4b11      	ldr	r3, [pc, #68]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb5e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d10c      	bne.n	800fb80 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb68:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d007      	beq.n	800fb80 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800fb70:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb72:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d002      	beq.n	800fb80 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	f000 fce4 	bl	8010548 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800fb80:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb82:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	d006      	beq.n	800fb98 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fb8a:	4a06      	ldr	r2, [pc, #24]	; (800fba4 <ProcessRadioRxDone+0x96c>)
 800fb8c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fb90:	f043 0320 	orr.w	r3, r3, #32
 800fb94:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fb98:	f7ff fa82 	bl	800f0a0 <UpdateRxSlotIdleState>
}
 800fb9c:	3794      	adds	r7, #148	; 0x94
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd90      	pop	{r4, r7, pc}
 800fba2:	bf00      	nop
 800fba4:	200006c4 	.word	0x200006c4

0800fba8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fbac:	4b11      	ldr	r3, [pc, #68]	; (800fbf4 <ProcessRadioTxTimeout+0x4c>)
 800fbae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d002      	beq.n	800fbbc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fbb6:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <ProcessRadioTxTimeout+0x50>)
 800fbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbba:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fbbc:	f7ff fa70 	bl	800f0a0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fbc0:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <ProcessRadioTxTimeout+0x54>)
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fbc8:	2002      	movs	r0, #2
 800fbca:	f004 fd49 	bl	8014660 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fbce:	4b0b      	ldr	r3, [pc, #44]	; (800fbfc <ProcessRadioTxTimeout+0x54>)
 800fbd0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d003      	beq.n	800fbe0 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800fbd8:	4b08      	ldr	r3, [pc, #32]	; (800fbfc <ProcessRadioTxTimeout+0x54>)
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fbe0:	4a06      	ldr	r2, [pc, #24]	; (800fbfc <ProcessRadioTxTimeout+0x54>)
 800fbe2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fbe6:	f043 0320 	orr.w	r3, r3, #32
 800fbea:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800fbee:	bf00      	nop
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	20000be4 	.word	0x20000be4
 800fbf8:	0801dc3c 	.word	0x0801dc3c
 800fbfc:	200006c4 	.word	0x200006c4

0800fc00 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4603      	mov	r3, r0
 800fc08:	460a      	mov	r2, r1
 800fc0a:	71fb      	strb	r3, [r7, #7]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fc10:	2300      	movs	r3, #0
 800fc12:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc14:	4b3d      	ldr	r3, [pc, #244]	; (800fd0c <HandleRadioRxErrorTimeout+0x10c>)
 800fc16:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d002      	beq.n	800fc24 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fc1e:	4b3c      	ldr	r3, [pc, #240]	; (800fd10 <HandleRadioRxErrorTimeout+0x110>)
 800fc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc22:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fc24:	f004 f864 	bl	8013cf0 <LoRaMacClassBIsBeaconExpected>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d007      	beq.n	800fc3e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fc2e:	2002      	movs	r0, #2
 800fc30:	f004 f812 	bl	8013c58 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fc34:	2000      	movs	r0, #0
 800fc36:	f004 f834 	bl	8013ca2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc3e:	4b33      	ldr	r3, [pc, #204]	; (800fd0c <HandleRadioRxErrorTimeout+0x10c>)
 800fc40:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d119      	bne.n	800fc7c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc48:	f004 f859 	bl	8013cfe <LoRaMacClassBIsPingExpected>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d007      	beq.n	800fc62 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc52:	2000      	movs	r0, #0
 800fc54:	f004 f80a 	bl	8013c6c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fc58:	2000      	movs	r0, #0
 800fc5a:	f004 f82b 	bl	8013cb4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc62:	f004 f853 	bl	8013d0c <LoRaMacClassBIsMulticastExpected>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d007      	beq.n	800fc7c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f004 f807 	bl	8013c80 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fc72:	2000      	movs	r0, #0
 800fc74:	f004 f827 	bl	8013cc6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	f083 0301 	eor.w	r3, r3, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d03b      	beq.n	800fd00 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fc88:	4b22      	ldr	r3, [pc, #136]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fc8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d122      	bne.n	800fcd8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fc92:	4b20      	ldr	r3, [pc, #128]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fc94:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fc9c:	4a1d      	ldr	r2, [pc, #116]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f004 fcda 	bl	8014660 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fcac:	4b17      	ldr	r3, [pc, #92]	; (800fd0c <HandleRadioRxErrorTimeout+0x10c>)
 800fcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f00c fd8b 	bl	801c7cc <UTIL_TIMER_GetElapsedTime>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b16      	ldr	r3, [pc, #88]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fcba:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d31e      	bcc.n	800fd00 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fcc2:	4815      	ldr	r0, [pc, #84]	; (800fd18 <HandleRadioRxErrorTimeout+0x118>)
 800fcc4:	f00c fc56 	bl	801c574 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fcc8:	4a12      	ldr	r2, [pc, #72]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fcca:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fcce:	f043 0320 	orr.w	r3, r3, #32
 800fcd2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800fcd6:	e013      	b.n	800fd00 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fcd8:	4b0e      	ldr	r3, [pc, #56]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fcda:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d003      	beq.n	800fcea <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fce2:	4a0c      	ldr	r2, [pc, #48]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fce4:	79bb      	ldrb	r3, [r7, #6]
 800fce6:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fcea:	79bb      	ldrb	r3, [r7, #6]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f004 fcb7 	bl	8014660 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800fcf2:	4a08      	ldr	r2, [pc, #32]	; (800fd14 <HandleRadioRxErrorTimeout+0x114>)
 800fcf4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fcf8:	f043 0320 	orr.w	r3, r3, #32
 800fcfc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fd00:	f7ff f9ce 	bl	800f0a0 <UpdateRxSlotIdleState>
}
 800fd04:	bf00      	nop
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	20000be4 	.word	0x20000be4
 800fd10:	0801dc3c 	.word	0x0801dc3c
 800fd14:	200006c4 	.word	0x200006c4
 800fd18:	20000a5c 	.word	0x20000a5c

0800fd1c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fd20:	2106      	movs	r1, #6
 800fd22:	2005      	movs	r0, #5
 800fd24:	f7ff ff6c 	bl	800fc00 <HandleRadioRxErrorTimeout>
}
 800fd28:	bf00      	nop
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fd30:	2104      	movs	r1, #4
 800fd32:	2003      	movs	r0, #3
 800fd34:	f7ff ff64 	bl	800fc00 <HandleRadioRxErrorTimeout>
}
 800fd38:	bf00      	nop
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd42:	f3ef 8310 	mrs	r3, PRIMASK
 800fd46:	607b      	str	r3, [r7, #4]
  return(result);
 800fd48:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fd4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd4c:	b672      	cpsid	i
}
 800fd4e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800fd50:	4b1d      	ldr	r3, [pc, #116]	; (800fdc8 <LoRaMacHandleIrqEvents+0x8c>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fd56:	4b1c      	ldr	r3, [pc, #112]	; (800fdc8 <LoRaMacHandleIrqEvents+0x8c>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	601a      	str	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	f383 8810 	msr	PRIMASK, r3
}
 800fd66:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d027      	beq.n	800fdbe <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800fd6e:	783b      	ldrb	r3, [r7, #0]
 800fd70:	f003 0320 	and.w	r3, r3, #32
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d001      	beq.n	800fd7e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800fd7a:	f7ff f9a9 	bl	800f0d0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fd7e:	783b      	ldrb	r3, [r7, #0]
 800fd80:	f003 0310 	and.w	r3, r3, #16
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800fd8a:	f7ff fa55 	bl	800f238 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fd8e:	783b      	ldrb	r3, [r7, #0]
 800fd90:	f003 0308 	and.w	r3, r3, #8
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800fd9a:	f7ff ff05 	bl	800fba8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fd9e:	783b      	ldrb	r3, [r7, #0]
 800fda0:	f003 0304 	and.w	r3, r3, #4
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d001      	beq.n	800fdae <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800fdaa:	f7ff ffb7 	bl	800fd1c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fdae:	783b      	ldrb	r3, [r7, #0]
 800fdb0:	f003 0302 	and.w	r3, r3, #2
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d001      	beq.n	800fdbe <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800fdba:	f7ff ffb7 	bl	800fd2c <ProcessRadioRxTimeout>
        }
    }
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	2000178c 	.word	0x2000178c

0800fdcc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800fdcc:	b480      	push	{r7}
 800fdce:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800fdd0:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <LoRaMacIsBusy+0x38>)
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	f003 0301 	and.w	r3, r3, #1
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <LoRaMacIsBusy+0x16>
    {
        return true;
 800fdde:	2301      	movs	r3, #1
 800fde0:	e00c      	b.n	800fdfc <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fde2:	4b09      	ldr	r3, [pc, #36]	; (800fe08 <LoRaMacIsBusy+0x3c>)
 800fde4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d106      	bne.n	800fdfa <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fdec:	4b06      	ldr	r3, [pc, #24]	; (800fe08 <LoRaMacIsBusy+0x3c>)
 800fdee:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d101      	bne.n	800fdfa <LoRaMacIsBusy+0x2e>
    {
        return false;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	e000      	b.n	800fdfc <LoRaMacIsBusy+0x30>
    }
    return true;
 800fdfa:	2301      	movs	r3, #1
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bc80      	pop	{r7}
 800fe02:	4770      	bx	lr
 800fe04:	2000178c 	.word	0x2000178c
 800fe08:	200006c4 	.word	0x200006c4

0800fe0c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800fe16:	4a04      	ldr	r2, [pc, #16]	; (800fe28 <LoRaMacEnableRequests+0x1c>)
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800fe1e:	bf00      	nop
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bc80      	pop	{r7}
 800fe26:	4770      	bx	lr
 800fe28:	200006c4 	.word	0x200006c4

0800fe2c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800fe32:	4b2c      	ldr	r3, [pc, #176]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe34:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fe38:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800fe3a:	4b2a      	ldr	r3, [pc, #168]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe3c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d14a      	bne.n	800feda <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fe44:	4b27      	ldr	r3, [pc, #156]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe46:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d006      	beq.n	800fe62 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800fe54:	4a23      	ldr	r2, [pc, #140]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe56:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fe5a:	f36f 0300 	bfc	r3, #0, #1
 800fe5e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fe62:	4b20      	ldr	r3, [pc, #128]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe64:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fe68:	f003 0304 	and.w	r3, r3, #4
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d006      	beq.n	800fe80 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800fe72:	4a1c      	ldr	r2, [pc, #112]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe74:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fe78:	f36f 0382 	bfc	r3, #2, #1
 800fe7c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fe80:	2001      	movs	r0, #1
 800fe82:	f7ff ffc3 	bl	800fe0c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800fe86:	793b      	ldrb	r3, [r7, #4]
 800fe88:	f003 0301 	and.w	r3, r3, #1
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d005      	beq.n	800fe9e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800fe92:	4b14      	ldr	r3, [pc, #80]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fe94:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4813      	ldr	r0, [pc, #76]	; (800fee8 <LoRaMacHandleRequestEvents+0xbc>)
 800fe9c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800fe9e:	793b      	ldrb	r3, [r7, #4]
 800fea0:	f003 0304 	and.w	r3, r3, #4
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00e      	beq.n	800fec8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800feaa:	4810      	ldr	r0, [pc, #64]	; (800feec <LoRaMacHandleRequestEvents+0xc0>)
 800feac:	f004 fc26 	bl	80146fc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800feb0:	f004 fc70 	bl	8014794 <LoRaMacConfirmQueueGetCnt>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d006      	beq.n	800fec8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800feba:	4a0a      	ldr	r2, [pc, #40]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800febc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fec0:	f043 0304 	orr.w	r3, r3, #4
 800fec4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800fec8:	f003 ff3e 	bl	8013d48 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800fecc:	4a05      	ldr	r2, [pc, #20]	; (800fee4 <LoRaMacHandleRequestEvents+0xb8>)
 800fece:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fed2:	f36f 1345 	bfc	r3, #5, #1
 800fed6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800feda:	bf00      	nop
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	200006c4 	.word	0x200006c4
 800fee8:	20000b08 	.word	0x20000b08
 800feec:	20000b1c 	.word	0x20000b1c

0800fef0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800fef6:	4b07      	ldr	r3, [pc, #28]	; (800ff14 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800fef8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d105      	bne.n	800ff0c <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ff00:	2300      	movs	r3, #0
 800ff02:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ff04:	1dfb      	adds	r3, r7, #7
 800ff06:	4618      	mov	r0, r3
 800ff08:	f004 f9de 	bl	80142c8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800ff0c:	bf00      	nop
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	200006c4 	.word	0x200006c4

0800ff18 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ff1c:	4b16      	ldr	r3, [pc, #88]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ff22:	f003 0308 	and.w	r3, r3, #8
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00d      	beq.n	800ff48 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ff2c:	4a12      	ldr	r2, [pc, #72]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff2e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ff32:	f36f 03c3 	bfc	r3, #3, #1
 800ff36:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ff3a:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff3c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	490e      	ldr	r1, [pc, #56]	; (800ff7c <LoRaMacHandleIndicationEvents+0x64>)
 800ff44:	480e      	ldr	r0, [pc, #56]	; (800ff80 <LoRaMacHandleIndicationEvents+0x68>)
 800ff46:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ff48:	4b0b      	ldr	r3, [pc, #44]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff4a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ff4e:	f003 0302 	and.w	r3, r3, #2
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00d      	beq.n	800ff74 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ff58:	4a07      	ldr	r2, [pc, #28]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff5a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ff5e:	f36f 0341 	bfc	r3, #1, #1
 800ff62:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ff66:	4b04      	ldr	r3, [pc, #16]	; (800ff78 <LoRaMacHandleIndicationEvents+0x60>)
 800ff68:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	4903      	ldr	r1, [pc, #12]	; (800ff7c <LoRaMacHandleIndicationEvents+0x64>)
 800ff70:	4804      	ldr	r0, [pc, #16]	; (800ff84 <LoRaMacHandleIndicationEvents+0x6c>)
 800ff72:	4798      	blx	r3
    }
}
 800ff74:	bf00      	nop
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	200006c4 	.word	0x200006c4
 800ff7c:	20000b54 	.word	0x20000b54
 800ff80:	20000b30 	.word	0x20000b30
 800ff84:	20000ae8 	.word	0x20000ae8

0800ff88 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ff8e:	4b2a      	ldr	r3, [pc, #168]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800ff90:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ff94:	f003 0301 	and.w	r3, r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d048      	beq.n	8010030 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ffa6:	4b24      	ldr	r3, [pc, #144]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800ffa8:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d004      	beq.n	800ffba <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ffb0:	4b21      	ldr	r3, [pc, #132]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800ffb2:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ffb6:	2b03      	cmp	r3, #3
 800ffb8:	d104      	bne.n	800ffc4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ffba:	f002 f8ed 	bl	8012198 <CheckRetransUnconfirmedUplink>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	71fb      	strb	r3, [r7, #7]
 800ffc2:	e010      	b.n	800ffe6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ffc4:	4b1c      	ldr	r3, [pc, #112]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800ffc6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d10b      	bne.n	800ffe6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ffce:	4b1a      	ldr	r3, [pc, #104]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800ffd0:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d004      	beq.n	800ffe2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ffd8:	f002 f90a 	bl	80121f0 <CheckRetransConfirmedUplink>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	71fb      	strb	r3, [r7, #7]
 800ffe0:	e001      	b.n	800ffe6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ffe6:	79fb      	ldrb	r3, [r7, #7]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00d      	beq.n	8010008 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ffec:	4813      	ldr	r0, [pc, #76]	; (801003c <LoRaMacHandleMcpsRequest+0xb4>)
 800ffee:	f00c fac1 	bl	801c574 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fff2:	4b11      	ldr	r3, [pc, #68]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800fff4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fff8:	f023 0320 	bic.w	r3, r3, #32
 800fffc:	4a0e      	ldr	r2, [pc, #56]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 800fffe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8010002:	f002 f92f 	bl	8012264 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010006:	e013      	b.n	8010030 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8010008:	79bb      	ldrb	r3, [r7, #6]
 801000a:	f083 0301 	eor.w	r3, r3, #1
 801000e:	b2db      	uxtb	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00d      	beq.n	8010030 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010014:	4a08      	ldr	r2, [pc, #32]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 8010016:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801001a:	f36f 1345 	bfc	r3, #5, #1
 801001e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 8010022:	4b05      	ldr	r3, [pc, #20]	; (8010038 <LoRaMacHandleMcpsRequest+0xb0>)
 8010024:	2200      	movs	r2, #0
 8010026:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 801002a:	2000      	movs	r0, #0
 801002c:	f000 f9c8 	bl	80103c0 <OnTxDelayedTimerEvent>
}
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	200006c4 	.word	0x200006c4
 801003c:	20000a2c 	.word	0x20000a2c

08010040 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010044:	4b18      	ldr	r3, [pc, #96]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 8010046:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 801004a:	f003 0304 	and.w	r3, r3, #4
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d026      	beq.n	80100a2 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010054:	2001      	movs	r0, #1
 8010056:	f004 fb37 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d012      	beq.n	8010086 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010060:	2001      	movs	r0, #1
 8010062:	f004 fad3 	bl	801460c <LoRaMacConfirmQueueGetStatus>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d103      	bne.n	8010074 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 801006c:	4b0e      	ldr	r3, [pc, #56]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 801006e:	2200      	movs	r2, #0
 8010070:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010074:	4b0c      	ldr	r3, [pc, #48]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 8010076:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801007a:	f023 0302 	bic.w	r3, r3, #2
 801007e:	4a0a      	ldr	r2, [pc, #40]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 8010080:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010084:	e00d      	b.n	80100a2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010086:	2005      	movs	r0, #5
 8010088:	f004 fb1e 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d007      	beq.n	80100a2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010092:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 8010094:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010098:	f023 0302 	bic.w	r3, r3, #2
 801009c:	4a02      	ldr	r2, [pc, #8]	; (80100a8 <LoRaMacHandleMlmeRequest+0x68>)
 801009e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80100a2:	bf00      	nop
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	200006c4 	.word	0x200006c4

080100ac <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80100b0:	200b      	movs	r0, #11
 80100b2:	f004 fb09 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d019      	beq.n	80100f0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80100bc:	4b0e      	ldr	r3, [pc, #56]	; (80100f8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80100be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d111      	bne.n	80100f0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80100cc:	4b0a      	ldr	r3, [pc, #40]	; (80100f8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80100ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80100d2:	f003 0304 	and.w	r3, r3, #4
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d009      	beq.n	80100f0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80100dc:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80100de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80100e2:	f023 0302 	bic.w	r3, r3, #2
 80100e6:	4a04      	ldr	r2, [pc, #16]	; (80100f8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80100e8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	200006c4 	.word	0x200006c4

080100fc <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	4603      	mov	r3, r0
 8010104:	71fb      	strb	r3, [r7, #7]
 8010106:	460b      	mov	r3, r1
 8010108:	71bb      	strb	r3, [r7, #6]
 801010a:	4613      	mov	r3, r2
 801010c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00a      	beq.n	801012a <CheckForMinimumAbpDatarate+0x2e>
 8010114:	79bb      	ldrb	r3, [r7, #6]
 8010116:	2b01      	cmp	r3, #1
 8010118:	d107      	bne.n	801012a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801011a:	797b      	ldrb	r3, [r7, #5]
 801011c:	f083 0301 	eor.w	r3, r3, #1
 8010120:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8010126:	2301      	movs	r3, #1
 8010128:	e000      	b.n	801012c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	bc80      	pop	{r7}
 8010134:	4770      	bx	lr
	...

08010138 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010138:	b480      	push	{r7}
 801013a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801013c:	4b0d      	ldr	r3, [pc, #52]	; (8010174 <LoRaMacCheckForRxAbort+0x3c>)
 801013e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00f      	beq.n	801016a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801014a:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <LoRaMacCheckForRxAbort+0x3c>)
 801014c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010154:	4a07      	ldr	r2, [pc, #28]	; (8010174 <LoRaMacCheckForRxAbort+0x3c>)
 8010156:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801015a:	4b06      	ldr	r3, [pc, #24]	; (8010174 <LoRaMacCheckForRxAbort+0x3c>)
 801015c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010160:	f023 0302 	bic.w	r3, r3, #2
 8010164:	4a03      	ldr	r2, [pc, #12]	; (8010174 <LoRaMacCheckForRxAbort+0x3c>)
 8010166:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801016a:	bf00      	nop
 801016c:	46bd      	mov	sp, r7
 801016e:	bc80      	pop	{r7}
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	200006c4 	.word	0x200006c4

08010178 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010184:	2300      	movs	r3, #0
 8010186:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010188:	4b50      	ldr	r3, [pc, #320]	; (80102cc <LoRaMacHandleNvm+0x154>)
 801018a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801018e:	2b00      	cmp	r3, #0
 8010190:	f040 8098 	bne.w	80102c4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2124      	movs	r1, #36	; 0x24
 8010198:	4618      	mov	r0, r3
 801019a:	f008 f8f5 	bl	8018388 <Crc32>
 801019e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d006      	beq.n	80101b8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80101b0:	89fb      	ldrh	r3, [r7, #14]
 80101b2:	f043 0301 	orr.w	r3, r3, #1
 80101b6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	3328      	adds	r3, #40	; 0x28
 80101bc:	2114      	movs	r1, #20
 80101be:	4618      	mov	r0, r3
 80101c0:	f008 f8e2 	bl	8018388 <Crc32>
 80101c4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d006      	beq.n	80101de <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80101d6:	89fb      	ldrh	r3, [r7, #14]
 80101d8:	f043 0302 	orr.w	r3, r3, #2
 80101dc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3340      	adds	r3, #64	; 0x40
 80101e2:	21e0      	movs	r1, #224	; 0xe0
 80101e4:	4618      	mov	r0, r3
 80101e6:	f008 f8cf 	bl	8018388 <Crc32>
 80101ea:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d007      	beq.n	8010208 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010200:	89fb      	ldrh	r3, [r7, #14]
 8010202:	f043 0304 	orr.w	r3, r3, #4
 8010206:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801020e:	21bc      	movs	r1, #188	; 0xbc
 8010210:	4618      	mov	r0, r3
 8010212:	f008 f8b9 	bl	8018388 <Crc32>
 8010216:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	429a      	cmp	r2, r3
 8010222:	d007      	beq.n	8010234 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 801022c:	89fb      	ldrh	r3, [r7, #14]
 801022e:	f043 0308 	orr.w	r3, r3, #8
 8010232:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801023a:	2110      	movs	r1, #16
 801023c:	4618      	mov	r0, r3
 801023e:	f008 f8a3 	bl	8018388 <Crc32>
 8010242:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	429a      	cmp	r2, r3
 801024e:	d007      	beq.n	8010260 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010258:	89fb      	ldrh	r3, [r7, #14]
 801025a:	f043 0310 	orr.w	r3, r3, #16
 801025e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010266:	f44f 715e 	mov.w	r1, #888	; 0x378
 801026a:	4618      	mov	r0, r3
 801026c:	f008 f88c 	bl	8018388 <Crc32>
 8010270:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	429a      	cmp	r2, r3
 801027c:	d007      	beq.n	801028e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010286:	89fb      	ldrh	r3, [r7, #14]
 8010288:	f043 0320 	orr.w	r3, r3, #32
 801028c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8010294:	2114      	movs	r1, #20
 8010296:	4618      	mov	r0, r3
 8010298:	f008 f876 	bl	8018388 <Crc32>
 801029c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d007      	beq.n	80102ba <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80102b2:	89fb      	ldrh	r3, [r7, #14]
 80102b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102b8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80102ba:	89fb      	ldrh	r3, [r7, #14]
 80102bc:	4618      	mov	r0, r3
 80102be:	f002 f80d 	bl	80122dc <CallNvmDataChangeCallback>
 80102c2:	e000      	b.n	80102c6 <LoRaMacHandleNvm+0x14e>
        return;
 80102c4:	bf00      	nop
}
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	200006c4 	.word	0x200006c4

080102d0 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00d      	beq.n	80102fc <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80102e0:	6838      	ldr	r0, [r7, #0]
 80102e2:	f00c fa73 	bl	801c7cc <UTIL_TIMER_GetElapsedTime>
 80102e6:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d905      	bls.n	80102fc <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80102f0:	4b05      	ldr	r3, [pc, #20]	; (8010308 <LoRaMacHandleResponseTimeout+0x38>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80102f8:	2301      	movs	r3, #1
 80102fa:	e000      	b.n	80102fe <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	20000be4 	.word	0x20000be4

0801030c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010312:	2300      	movs	r3, #0
 8010314:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010316:	f7ff fd11 	bl	800fd3c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 801031a:	f003 fd84 	bl	8013e26 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 801031e:	4b26      	ldr	r3, [pc, #152]	; (80103b8 <LoRaMacProcess+0xac>)
 8010320:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010324:	f003 0320 	and.w	r3, r3, #32
 8010328:	b2db      	uxtb	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d025      	beq.n	801037a <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801032e:	2000      	movs	r0, #0
 8010330:	f7ff fd6c 	bl	800fe0c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010334:	f7ff ff00 	bl	8010138 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010338:	f001 ffee 	bl	8012318 <IsRequestPending>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d006      	beq.n	8010350 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010342:	f7ff feb3 	bl	80100ac <LoRaMacCheckForBeaconAcquisition>
 8010346:	4603      	mov	r3, r0
 8010348:	461a      	mov	r2, r3
 801034a:	79fb      	ldrb	r3, [r7, #7]
 801034c:	4313      	orrs	r3, r2
 801034e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d103      	bne.n	801035e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010356:	f7ff fe73 	bl	8010040 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801035a:	f7ff fe15 	bl	800ff88 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801035e:	f7ff fd65 	bl	800fe2c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8010362:	f7ff fdc5 	bl	800fef0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010366:	2001      	movs	r0, #1
 8010368:	f7ff fd50 	bl	800fe0c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801036c:	4a12      	ldr	r2, [pc, #72]	; (80103b8 <LoRaMacProcess+0xac>)
 801036e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010376:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 801037a:	f7ff fdcd 	bl	800ff18 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801037e:	4b0e      	ldr	r3, [pc, #56]	; (80103b8 <LoRaMacProcess+0xac>)
 8010380:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010384:	2b02      	cmp	r3, #2
 8010386:	d101      	bne.n	801038c <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8010388:	f001 fbe0 	bl	8011b4c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <LoRaMacProcess+0xac>)
 801038e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	d009      	beq.n	80103b0 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801039c:	4a06      	ldr	r2, [pc, #24]	; (80103b8 <LoRaMacProcess+0xac>)
 801039e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80103a2:	f36f 1386 	bfc	r3, #6, #1
 80103a6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 80103aa:	4804      	ldr	r0, [pc, #16]	; (80103bc <LoRaMacProcess+0xb0>)
 80103ac:	f7ff fee4 	bl	8010178 <LoRaMacHandleNvm>
    }
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	200006c4 	.word	0x200006c4
 80103bc:	20000be4 	.word	0x20000be4

080103c0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80103c8:	481e      	ldr	r0, [pc, #120]	; (8010444 <OnTxDelayedTimerEvent+0x84>)
 80103ca:	f00c f8d3 	bl	801c574 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80103ce:	4b1e      	ldr	r3, [pc, #120]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 80103d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103d4:	f023 0320 	bic.w	r3, r3, #32
 80103d8:	4a1b      	ldr	r2, [pc, #108]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 80103da:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80103de:	4b1b      	ldr	r3, [pc, #108]	; (801044c <OnTxDelayedTimerEvent+0x8c>)
 80103e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103e4:	4a18      	ldr	r2, [pc, #96]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 80103e6:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 80103ea:	4611      	mov	r1, r2
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7ff ff6f 	bl	80102d0 <LoRaMacHandleResponseTimeout>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d11e      	bne.n	8010436 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80103f8:	2001      	movs	r0, #1
 80103fa:	f001 f92d 	bl	8011658 <ScheduleTx>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d01a      	beq.n	801043a <OnTxDelayedTimerEvent+0x7a>
 8010404:	2b0b      	cmp	r3, #11
 8010406:	d018      	beq.n	801043a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010408:	4b10      	ldr	r3, [pc, #64]	; (801044c <OnTxDelayedTimerEvent+0x8c>)
 801040a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801040e:	b2da      	uxtb	r2, r3
 8010410:	4b0d      	ldr	r3, [pc, #52]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 8010412:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010416:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 8010418:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 801041c:	4b0a      	ldr	r3, [pc, #40]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 801041e:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010422:	4b09      	ldr	r3, [pc, #36]	; (8010448 <OnTxDelayedTimerEvent+0x88>)
 8010424:	2209      	movs	r2, #9
 8010426:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801042a:	2009      	movs	r0, #9
 801042c:	f004 f918 	bl	8014660 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010430:	f001 ff18 	bl	8012264 <StopRetransmission>
            break;
 8010434:	e002      	b.n	801043c <OnTxDelayedTimerEvent+0x7c>
        return;
 8010436:	bf00      	nop
 8010438:	e000      	b.n	801043c <OnTxDelayedTimerEvent+0x7c>
            break;
 801043a:	bf00      	nop
        }
    }
}
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	20000a2c 	.word	0x20000a2c
 8010448:	200006c4 	.word	0x200006c4
 801044c:	20000be4 	.word	0x20000be4

08010450 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010458:	4b17      	ldr	r3, [pc, #92]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 801045a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 801045e:	4b16      	ldr	r3, [pc, #88]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 8010460:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010464:	4b15      	ldr	r3, [pc, #84]	; (80104bc <OnRxWindow1TimerEvent+0x6c>)
 8010466:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801046a:	b25a      	sxtb	r2, r3
 801046c:	4b12      	ldr	r3, [pc, #72]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 801046e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010472:	4b12      	ldr	r3, [pc, #72]	; (80104bc <OnRxWindow1TimerEvent+0x6c>)
 8010474:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 801047a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801047e:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <OnRxWindow1TimerEvent+0x6c>)
 8010480:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010484:	4b0c      	ldr	r3, [pc, #48]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 8010486:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801048a:	4b0b      	ldr	r3, [pc, #44]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 801048c:	2200      	movs	r2, #0
 801048e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010492:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 8010494:	2200      	movs	r2, #0
 8010496:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801049a:	4b08      	ldr	r3, [pc, #32]	; (80104bc <OnRxWindow1TimerEvent+0x6c>)
 801049c:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80104a0:	4b05      	ldr	r3, [pc, #20]	; (80104b8 <OnRxWindow1TimerEvent+0x68>)
 80104a2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80104a6:	4906      	ldr	r1, [pc, #24]	; (80104c0 <OnRxWindow1TimerEvent+0x70>)
 80104a8:	4806      	ldr	r0, [pc, #24]	; (80104c4 <OnRxWindow1TimerEvent+0x74>)
 80104aa:	f001 fb1b 	bl	8011ae4 <RxWindowSetup>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	200006c4 	.word	0x200006c4
 80104bc:	20000be4 	.word	0x20000be4
 80104c0:	20000a7c 	.word	0x20000a7c
 80104c4:	20000a44 	.word	0x20000a44

080104c8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80104d0:	4b19      	ldr	r3, [pc, #100]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 80104d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d029      	beq.n	801052e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80104da:	4b17      	ldr	r3, [pc, #92]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 80104dc:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 80104e0:	4b15      	ldr	r3, [pc, #84]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 80104e2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80104e6:	4b15      	ldr	r3, [pc, #84]	; (801053c <OnRxWindow2TimerEvent+0x74>)
 80104e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104ea:	4a13      	ldr	r2, [pc, #76]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 80104ec:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80104f0:	4b12      	ldr	r3, [pc, #72]	; (801053c <OnRxWindow2TimerEvent+0x74>)
 80104f2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80104f6:	4b10      	ldr	r3, [pc, #64]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 80104f8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80104fc:	4b0f      	ldr	r3, [pc, #60]	; (801053c <OnRxWindow2TimerEvent+0x74>)
 80104fe:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010502:	4b0d      	ldr	r3, [pc, #52]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 8010504:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010508:	4b0b      	ldr	r3, [pc, #44]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 801050a:	2200      	movs	r2, #0
 801050c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010510:	4b09      	ldr	r3, [pc, #36]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 8010512:	2201      	movs	r2, #1
 8010514:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010518:	4b08      	ldr	r3, [pc, #32]	; (801053c <OnRxWindow2TimerEvent+0x74>)
 801051a:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801051e:	4b06      	ldr	r3, [pc, #24]	; (8010538 <OnRxWindow2TimerEvent+0x70>)
 8010520:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010524:	4906      	ldr	r1, [pc, #24]	; (8010540 <OnRxWindow2TimerEvent+0x78>)
 8010526:	4807      	ldr	r0, [pc, #28]	; (8010544 <OnRxWindow2TimerEvent+0x7c>)
 8010528:	f001 fadc 	bl	8011ae4 <RxWindowSetup>
 801052c:	e000      	b.n	8010530 <OnRxWindow2TimerEvent+0x68>
        return;
 801052e:	bf00      	nop
}
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	200006c4 	.word	0x200006c4
 801053c:	20000be4 	.word	0x20000be4
 8010540:	20000a94 	.word	0x20000a94
 8010544:	20000a5c 	.word	0x20000a5c

08010548 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010550:	480f      	ldr	r0, [pc, #60]	; (8010590 <OnRetransmitTimeoutTimerEvent+0x48>)
 8010552:	f00c f80f 	bl	801c574 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010556:	4b0f      	ldr	r3, [pc, #60]	; (8010594 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010558:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010560:	4b0c      	ldr	r3, [pc, #48]	; (8010594 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010562:	2201      	movs	r2, #1
 8010564:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010568:	4b0a      	ldr	r3, [pc, #40]	; (8010594 <OnRetransmitTimeoutTimerEvent+0x4c>)
 801056a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00a      	beq.n	8010588 <OnRetransmitTimeoutTimerEvent+0x40>
 8010572:	4b08      	ldr	r3, [pc, #32]	; (8010594 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010574:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d004      	beq.n	8010588 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801057e:	4b05      	ldr	r3, [pc, #20]	; (8010594 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010580:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	4798      	blx	r3
    }
}
 8010588:	bf00      	nop
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	20000ac8 	.word	0x20000ac8
 8010594:	200006c4 	.word	0x200006c4

08010598 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	60ba      	str	r2, [r7, #8]
 80105a0:	607b      	str	r3, [r7, #4]
 80105a2:	4603      	mov	r3, r0
 80105a4:	73fb      	strb	r3, [r7, #15]
 80105a6:	460b      	mov	r3, r1
 80105a8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <GetFCntDown+0x24>
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <GetFCntDown+0x24>
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105bc:	2309      	movs	r3, #9
 80105be:	e028      	b.n	8010612 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d016      	beq.n	80105f4 <GetFCntDown+0x5c>
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d118      	bne.n	80105fc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80105ca:	79bb      	ldrb	r3, [r7, #6]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d10d      	bne.n	80105ec <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <GetFCntDown+0x44>
 80105d6:	7bbb      	ldrb	r3, [r7, #14]
 80105d8:	2b03      	cmp	r3, #3
 80105da:	d103      	bne.n	80105e4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	2202      	movs	r2, #2
 80105e0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80105e2:	e00d      	b.n	8010600 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	2201      	movs	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]
            break;
 80105ea:	e009      	b.n	8010600 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	2203      	movs	r2, #3
 80105f0:	701a      	strb	r2, [r3, #0]
            break;
 80105f2:	e005      	b.n	8010600 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	2204      	movs	r2, #4
 80105f8:	701a      	strb	r2, [r3, #0]
            break;
 80105fa:	e001      	b.n	8010600 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80105fc:	2305      	movs	r3, #5
 80105fe:	e008      	b.n	8010612 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	7818      	ldrb	r0, [r3, #0]
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	89db      	ldrh	r3, [r3, #14]
 8010608:	69fa      	ldr	r2, [r7, #28]
 801060a:	4619      	mov	r1, r3
 801060c:	f004 fc52 	bl	8014eb4 <LoRaMacCryptoGetFCntDown>
 8010610:	4603      	mov	r3, r0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
	...

0801061c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801061c:	b5b0      	push	{r4, r5, r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	4603      	mov	r3, r0
 8010624:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010626:	2303      	movs	r3, #3
 8010628:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801062a:	4b62      	ldr	r3, [pc, #392]	; (80107b4 <SwitchClass+0x198>)
 801062c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010630:	2b02      	cmp	r3, #2
 8010632:	f000 80a7 	beq.w	8010784 <SwitchClass+0x168>
 8010636:	2b02      	cmp	r3, #2
 8010638:	f300 80b6 	bgt.w	80107a8 <SwitchClass+0x18c>
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <SwitchClass+0x2c>
 8010640:	2b01      	cmp	r3, #1
 8010642:	f000 8091 	beq.w	8010768 <SwitchClass+0x14c>
 8010646:	e0af      	b.n	80107a8 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d107      	bne.n	801065e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801064e:	4b59      	ldr	r3, [pc, #356]	; (80107b4 <SwitchClass+0x198>)
 8010650:	4a58      	ldr	r2, [pc, #352]	; (80107b4 <SwitchClass+0x198>)
 8010652:	336c      	adds	r3, #108	; 0x6c
 8010654:	3264      	adds	r2, #100	; 0x64
 8010656:	e892 0003 	ldmia.w	r2, {r0, r1}
 801065a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d10c      	bne.n	801067e <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010664:	79fb      	ldrb	r3, [r7, #7]
 8010666:	4618      	mov	r0, r3
 8010668:	f003 fb74 	bl	8013d54 <LoRaMacClassBSwitchClass>
 801066c:	4603      	mov	r3, r0
 801066e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010670:	7bfb      	ldrb	r3, [r7, #15]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d103      	bne.n	801067e <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010676:	4a4f      	ldr	r2, [pc, #316]	; (80107b4 <SwitchClass+0x198>)
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 801067e:	79fb      	ldrb	r3, [r7, #7]
 8010680:	2b02      	cmp	r3, #2
 8010682:	f040 808c 	bne.w	801079e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010686:	4a4b      	ldr	r2, [pc, #300]	; (80107b4 <SwitchClass+0x198>)
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801068e:	4a4a      	ldr	r2, [pc, #296]	; (80107b8 <SwitchClass+0x19c>)
 8010690:	4b49      	ldr	r3, [pc, #292]	; (80107b8 <SwitchClass+0x19c>)
 8010692:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010696:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801069e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80106a2:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80106a6:	4b44      	ldr	r3, [pc, #272]	; (80107b8 <SwitchClass+0x19c>)
 80106a8:	2202      	movs	r2, #2
 80106aa:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80106ae:	2300      	movs	r3, #0
 80106b0:	73bb      	strb	r3, [r7, #14]
 80106b2:	e049      	b.n	8010748 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80106b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106b8:	4a3e      	ldr	r2, [pc, #248]	; (80107b4 <SwitchClass+0x198>)
 80106ba:	212c      	movs	r1, #44	; 0x2c
 80106bc:	fb01 f303 	mul.w	r3, r1, r3
 80106c0:	4413      	add	r3, r2
 80106c2:	33da      	adds	r3, #218	; 0xda
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d038      	beq.n	801073c <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80106ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106ce:	4a39      	ldr	r2, [pc, #228]	; (80107b4 <SwitchClass+0x198>)
 80106d0:	212c      	movs	r1, #44	; 0x2c
 80106d2:	fb01 f303 	mul.w	r3, r1, r3
 80106d6:	4413      	add	r3, r2
 80106d8:	33f0      	adds	r3, #240	; 0xf0
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4a35      	ldr	r2, [pc, #212]	; (80107b4 <SwitchClass+0x198>)
 80106de:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80106e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106e4:	4a33      	ldr	r2, [pc, #204]	; (80107b4 <SwitchClass+0x198>)
 80106e6:	212c      	movs	r1, #44	; 0x2c
 80106e8:	fb01 f303 	mul.w	r3, r1, r3
 80106ec:	4413      	add	r3, r2
 80106ee:	33f4      	adds	r3, #244	; 0xf4
 80106f0:	f993 3000 	ldrsb.w	r3, [r3]
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	4b2f      	ldr	r3, [pc, #188]	; (80107b4 <SwitchClass+0x198>)
 80106f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80106fc:	4b2e      	ldr	r3, [pc, #184]	; (80107b8 <SwitchClass+0x19c>)
 80106fe:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010702:	4b2d      	ldr	r3, [pc, #180]	; (80107b8 <SwitchClass+0x19c>)
 8010704:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010708:	4b2a      	ldr	r3, [pc, #168]	; (80107b4 <SwitchClass+0x198>)
 801070a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801070c:	4a2a      	ldr	r2, [pc, #168]	; (80107b8 <SwitchClass+0x19c>)
 801070e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010712:	4b28      	ldr	r3, [pc, #160]	; (80107b4 <SwitchClass+0x198>)
 8010714:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010718:	4b27      	ldr	r3, [pc, #156]	; (80107b8 <SwitchClass+0x19c>)
 801071a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801071e:	4b25      	ldr	r3, [pc, #148]	; (80107b4 <SwitchClass+0x198>)
 8010720:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010724:	4b24      	ldr	r3, [pc, #144]	; (80107b8 <SwitchClass+0x19c>)
 8010726:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801072a:	4b23      	ldr	r3, [pc, #140]	; (80107b8 <SwitchClass+0x19c>)
 801072c:	2203      	movs	r2, #3
 801072e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010732:	4b21      	ldr	r3, [pc, #132]	; (80107b8 <SwitchClass+0x19c>)
 8010734:	2201      	movs	r2, #1
 8010736:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 801073a:	e009      	b.n	8010750 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010740:	b2db      	uxtb	r3, r3
 8010742:	3301      	adds	r3, #1
 8010744:	b2db      	uxtb	r3, r3
 8010746:	73bb      	strb	r3, [r7, #14]
 8010748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801074c:	2b00      	cmp	r3, #0
 801074e:	ddb1      	ble.n	80106b4 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010750:	4b19      	ldr	r3, [pc, #100]	; (80107b8 <SwitchClass+0x19c>)
 8010752:	2200      	movs	r2, #0
 8010754:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010758:	4b18      	ldr	r3, [pc, #96]	; (80107bc <SwitchClass+0x1a0>)
 801075a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801075e:	f001 f9f5 	bl	8011b4c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010762:	2300      	movs	r3, #0
 8010764:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010766:	e01a      	b.n	801079e <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010768:	79fb      	ldrb	r3, [r7, #7]
 801076a:	4618      	mov	r0, r3
 801076c:	f003 faf2 	bl	8013d54 <LoRaMacClassBSwitchClass>
 8010770:	4603      	mov	r3, r0
 8010772:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010774:	7bfb      	ldrb	r3, [r7, #15]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d113      	bne.n	80107a2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801077a:	4a0e      	ldr	r2, [pc, #56]	; (80107b4 <SwitchClass+0x198>)
 801077c:	79fb      	ldrb	r3, [r7, #7]
 801077e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010782:	e00e      	b.n	80107a2 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010784:	79fb      	ldrb	r3, [r7, #7]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10d      	bne.n	80107a6 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801078a:	4a0a      	ldr	r2, [pc, #40]	; (80107b4 <SwitchClass+0x198>)
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010792:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <SwitchClass+0x1a0>)
 8010794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010796:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801079c:	e003      	b.n	80107a6 <SwitchClass+0x18a>
            break;
 801079e:	bf00      	nop
 80107a0:	e002      	b.n	80107a8 <SwitchClass+0x18c>
            break;
 80107a2:	bf00      	nop
 80107a4:	e000      	b.n	80107a8 <SwitchClass+0x18c>
            break;
 80107a6:	bf00      	nop
        }
    }

    return status;
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3710      	adds	r7, #16
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bdb0      	pop	{r4, r5, r7, pc}
 80107b2:	bf00      	nop
 80107b4:	20000be4 	.word	0x20000be4
 80107b8:	200006c4 	.word	0x200006c4
 80107bc:	0801dc3c 	.word	0x0801dc3c

080107c0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b086      	sub	sp, #24
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80107ca:	4b10      	ldr	r3, [pc, #64]	; (801080c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80107cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80107d0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80107d6:	230d      	movs	r3, #13
 80107d8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80107da:	4b0c      	ldr	r3, [pc, #48]	; (801080c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80107dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d001      	beq.n	80107e8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80107e4:	230e      	movs	r3, #14
 80107e6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107e8:	4b08      	ldr	r3, [pc, #32]	; (801080c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80107ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107ee:	f107 0210 	add.w	r2, r7, #16
 80107f2:	4611      	mov	r1, r2
 80107f4:	4618      	mov	r0, r3
 80107f6:	f005 f9bb 	bl	8015b70 <RegionGetPhyParam>
 80107fa:	4603      	mov	r3, r0
 80107fc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	b2db      	uxtb	r3, r3
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	20000be4 	.word	0x20000be4

08010810 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	4603      	mov	r3, r0
 8010818:	71fb      	strb	r3, [r7, #7]
 801081a:	460b      	mov	r3, r1
 801081c:	71bb      	strb	r3, [r7, #6]
 801081e:	4613      	mov	r3, r2
 8010820:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010822:	2300      	movs	r3, #0
 8010824:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801082a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff ffc6 	bl	80107c0 <GetMaxAppPayloadWithoutFOptsLength>
 8010834:	4603      	mov	r3, r0
 8010836:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010838:	79fb      	ldrb	r3, [r7, #7]
 801083a:	b29a      	uxth	r2, r3
 801083c:	797b      	ldrb	r3, [r7, #5]
 801083e:	b29b      	uxth	r3, r3
 8010840:	4413      	add	r3, r2
 8010842:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010844:	89ba      	ldrh	r2, [r7, #12]
 8010846:	89fb      	ldrh	r3, [r7, #14]
 8010848:	429a      	cmp	r2, r3
 801084a:	d804      	bhi.n	8010856 <ValidatePayloadLength+0x46>
 801084c:	89bb      	ldrh	r3, [r7, #12]
 801084e:	2bff      	cmp	r3, #255	; 0xff
 8010850:	d801      	bhi.n	8010856 <ValidatePayloadLength+0x46>
    {
        return true;
 8010852:	2301      	movs	r3, #1
 8010854:	e000      	b.n	8010858 <ValidatePayloadLength+0x48>
    }
    return false;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b0a5      	sub	sp, #148	; 0x94
 8010864:	af02      	add	r7, sp, #8
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	4608      	mov	r0, r1
 801086a:	4611      	mov	r1, r2
 801086c:	461a      	mov	r2, r3
 801086e:	4603      	mov	r3, r0
 8010870:	70fb      	strb	r3, [r7, #3]
 8010872:	460b      	mov	r3, r1
 8010874:	70bb      	strb	r3, [r7, #2]
 8010876:	4613      	mov	r3, r2
 8010878:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801087a:	2300      	movs	r3, #0
 801087c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010880:	2300      	movs	r3, #0
 8010882:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010886:	2300      	movs	r3, #0
 8010888:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 801088c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 84ab 	beq.w	80111ec <ProcessMacCommands+0x98c>
 8010896:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801089a:	2b01      	cmp	r3, #1
 801089c:	f040 84ac 	bne.w	80111f8 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80108a0:	f000 bca4 	b.w	80111ec <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80108a4:	78fb      	ldrb	r3, [r7, #3]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4413      	add	r3, r2
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f003 fd33 	bl	8014318 <LoRaMacCommandsGetCmdSize>
 80108b2:	4603      	mov	r3, r0
 80108b4:	461a      	mov	r2, r3
 80108b6:	78fb      	ldrb	r3, [r7, #3]
 80108b8:	441a      	add	r2, r3
 80108ba:	78bb      	ldrb	r3, [r7, #2]
 80108bc:	429a      	cmp	r2, r3
 80108be:	f300 849d 	bgt.w	80111fc <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80108c2:	78fb      	ldrb	r3, [r7, #3]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	70fa      	strb	r2, [r7, #3]
 80108c8:	461a      	mov	r2, r3
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	3b02      	subs	r3, #2
 80108d2:	2b11      	cmp	r3, #17
 80108d4:	f200 8494 	bhi.w	8011200 <ProcessMacCommands+0x9a0>
 80108d8:	a201      	add	r2, pc, #4	; (adr r2, 80108e0 <ProcessMacCommands+0x80>)
 80108da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108de:	bf00      	nop
 80108e0:	08010929 	.word	0x08010929
 80108e4:	0801096b 	.word	0x0801096b
 80108e8:	08010ae7 	.word	0x08010ae7
 80108ec:	08010b25 	.word	0x08010b25
 80108f0:	08010c1d 	.word	0x08010c1d
 80108f4:	08010c6d 	.word	0x08010c6d
 80108f8:	08010d29 	.word	0x08010d29
 80108fc:	08010d7f 	.word	0x08010d7f
 8010900:	08010e63 	.word	0x08010e63
 8010904:	08011201 	.word	0x08011201
 8010908:	08011201 	.word	0x08011201
 801090c:	08010f0d 	.word	0x08010f0d
 8010910:	08011201 	.word	0x08011201
 8010914:	08011201 	.word	0x08011201
 8010918:	0801102d 	.word	0x0801102d
 801091c:	08011061 	.word	0x08011061
 8010920:	080110f1 	.word	0x080110f1
 8010924:	08011167 	.word	0x08011167
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010928:	2004      	movs	r0, #4
 801092a:	f003 fecd 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	f000 845b 	beq.w	80111ec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010936:	2104      	movs	r1, #4
 8010938:	2000      	movs	r0, #0
 801093a:	f003 fe39 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801093e:	78fb      	ldrb	r3, [r7, #3]
 8010940:	1c5a      	adds	r2, r3, #1
 8010942:	70fa      	strb	r2, [r7, #3]
 8010944:	461a      	mov	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4413      	add	r3, r2
 801094a:	781a      	ldrb	r2, [r3, #0]
 801094c:	4bb0      	ldr	r3, [pc, #704]	; (8010c10 <ProcessMacCommands+0x3b0>)
 801094e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010952:	78fb      	ldrb	r3, [r7, #3]
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	70fa      	strb	r2, [r7, #3]
 8010958:	461a      	mov	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4413      	add	r3, r2
 801095e:	781a      	ldrb	r2, [r3, #0]
 8010960:	4bab      	ldr	r3, [pc, #684]	; (8010c10 <ProcessMacCommands+0x3b0>)
 8010962:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 8010966:	f000 bc41 	b.w	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801096a:	2300      	movs	r3, #0
 801096c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010970:	2300      	movs	r3, #0
 8010972:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801097c:	2300      	movs	r3, #0
 801097e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 8010982:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010986:	f083 0301 	eor.w	r3, r3, #1
 801098a:	b2db      	uxtb	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 80a5 	beq.w	8010adc <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8010992:	2301      	movs	r3, #1
 8010994:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010998:	78fb      	ldrb	r3, [r7, #3]
 801099a:	3b01      	subs	r3, #1
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	4413      	add	r3, r2
 80109a0:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80109a2:	4b9c      	ldr	r3, [pc, #624]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109a4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80109a8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80109ac:	4b99      	ldr	r3, [pc, #612]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80109b2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80109b6:	4b97      	ldr	r3, [pc, #604]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80109bc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80109c0:	4b94      	ldr	r3, [pc, #592]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109c2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80109c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80109ca:	4b92      	ldr	r3, [pc, #584]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80109d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80109d4:	4b8f      	ldr	r3, [pc, #572]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109d6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80109da:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80109dc:	4b8d      	ldr	r3, [pc, #564]	; (8010c14 <ProcessMacCommands+0x3b4>)
 80109de:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d008      	beq.n	80109f8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80109e6:	78ba      	ldrb	r2, [r7, #2]
 80109e8:	78fb      	ldrb	r3, [r7, #3]
 80109ea:	1ad3      	subs	r3, r2, r3
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	3301      	adds	r3, #1
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80109f6:	e002      	b.n	80109fe <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80109f8:	2305      	movs	r3, #5
 80109fa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80109fe:	4b85      	ldr	r3, [pc, #532]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a00:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010a04:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010a08:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8010a0c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	f005 f964 	bl	8015cea <RegionLinkAdrReq>
 8010a22:	4603      	mov	r3, r0
 8010a24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010a28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010a2c:	f003 0307 	and.w	r3, r3, #7
 8010a30:	2b07      	cmp	r3, #7
 8010a32:	d119      	bne.n	8010a68 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010a34:	4b77      	ldr	r3, [pc, #476]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a36:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8010a3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	da03      	bge.n	8010a4a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010a42:	4b74      	ldr	r3, [pc, #464]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010a4a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010a4e:	4b71      	ldr	r3, [pc, #452]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010a54:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010a58:	4b6e      	ldr	r3, [pc, #440]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010a5e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010a62:	4b6c      	ldr	r3, [pc, #432]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010a64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010a6e:	e00b      	b.n	8010a88 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010a70:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010a74:	2201      	movs	r2, #1
 8010a76:	4619      	mov	r1, r3
 8010a78:	2003      	movs	r0, #3
 8010a7a:	f003 fafd 	bl	8014078 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010a7e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010a82:	3301      	adds	r3, #1
 8010a84:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010a88:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010a8c:	4a62      	ldr	r2, [pc, #392]	; (8010c18 <ProcessMacCommands+0x3b8>)
 8010a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a92:	089b      	lsrs	r3, r3, #2
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d3e8      	bcc.n	8010a70 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010a9e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8010aa2:	78fb      	ldrb	r3, [r7, #3]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010aac:	78fa      	ldrb	r2, [r7, #3]
 8010aae:	78bb      	ldrb	r3, [r7, #2]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d20a      	bcs.n	8010aca <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8010ab4:	78fb      	ldrb	r3, [r7, #3]
 8010ab6:	1c5a      	adds	r2, r3, #1
 8010ab8:	70fa      	strb	r2, [r7, #3]
 8010aba:	461a      	mov	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	4413      	add	r3, r2
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	f43f af68 	beq.w	8010998 <ProcessMacCommands+0x138>
 8010ac8:	e000      	b.n	8010acc <ProcessMacCommands+0x26c>
                            break;
 8010aca:	bf00      	nop

                    if( macIndex < commandsSize )
 8010acc:	78fa      	ldrb	r2, [r7, #3]
 8010ace:	78bb      	ldrb	r3, [r7, #2]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d206      	bcs.n	8010ae2 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8010ad4:	78fb      	ldrb	r3, [r7, #3]
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010ada:	e002      	b.n	8010ae2 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8010adc:	78fb      	ldrb	r3, [r7, #3]
 8010ade:	3304      	adds	r3, #4
 8010ae0:	70fb      	strb	r3, [r7, #3]
                break;
 8010ae2:	bf00      	nop
 8010ae4:	e382      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010ae6:	78fb      	ldrb	r3, [r7, #3]
 8010ae8:	1c5a      	adds	r2, r3, #1
 8010aea:	70fa      	strb	r2, [r7, #3]
 8010aec:	461a      	mov	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4413      	add	r3, r2
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	f003 030f 	and.w	r3, r3, #15
 8010af8:	b2da      	uxtb	r2, r3
 8010afa:	4b46      	ldr	r3, [pc, #280]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010afc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010b00:	4b44      	ldr	r3, [pc, #272]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010b02:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010b06:	461a      	mov	r2, r3
 8010b08:	2301      	movs	r3, #1
 8010b0a:	4093      	lsls	r3, r2
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	4b41      	ldr	r3, [pc, #260]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010b10:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010b14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010b18:	2200      	movs	r2, #0
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	2004      	movs	r0, #4
 8010b1e:	f003 faab 	bl	8014078 <LoRaMacCommandsAddCmd>
                break;
 8010b22:	e363      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010b24:	2307      	movs	r3, #7
 8010b26:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010b2a:	78fb      	ldrb	r3, [r7, #3]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	4413      	add	r3, r2
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	091b      	lsrs	r3, r3, #4
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	b25b      	sxtb	r3, r3
 8010b38:	f003 0307 	and.w	r3, r3, #7
 8010b3c:	b25b      	sxtb	r3, r3
 8010b3e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010b42:	78fb      	ldrb	r3, [r7, #3]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	4413      	add	r3, r2
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	b25b      	sxtb	r3, r3
 8010b4c:	f003 030f 	and.w	r3, r3, #15
 8010b50:	b25b      	sxtb	r3, r3
 8010b52:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8010b56:	78fb      	ldrb	r3, [r7, #3]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010b5c:	78fb      	ldrb	r3, [r7, #3]
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	70fa      	strb	r2, [r7, #3]
 8010b62:	461a      	mov	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4413      	add	r3, r2
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	70fa      	strb	r2, [r7, #3]
 8010b72:	461a      	mov	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4413      	add	r3, r2
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	021a      	lsls	r2, r3, #8
 8010b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010b82:	78fb      	ldrb	r3, [r7, #3]
 8010b84:	1c5a      	adds	r2, r3, #1
 8010b86:	70fa      	strb	r2, [r7, #3]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	041a      	lsls	r2, r3, #16
 8010b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b94:	4313      	orrs	r3, r2
 8010b96:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b9a:	2264      	movs	r2, #100	; 0x64
 8010b9c:	fb02 f303 	mul.w	r3, r2, r3
 8010ba0:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010ba2:	4b1c      	ldr	r3, [pc, #112]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ba8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010bac:	4611      	mov	r1, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f005 f8b5 	bl	8015d1e <RegionRxParamSetupReq>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010bba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010bbe:	f003 0307 	and.w	r3, r3, #7
 8010bc2:	2b07      	cmp	r3, #7
 8010bc4:	d117      	bne.n	8010bf6 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010bc6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	4b11      	ldr	r3, [pc, #68]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010bce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010bd2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	4b0e      	ldr	r3, [pc, #56]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010bda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be0:	4a0c      	ldr	r2, [pc, #48]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010be2:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be6:	4a0b      	ldr	r2, [pc, #44]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010be8:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010bea:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4b08      	ldr	r3, [pc, #32]	; (8010c14 <ProcessMacCommands+0x3b4>)
 8010bf2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8010bf6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010bfa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010bfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c02:	2201      	movs	r2, #1
 8010c04:	4619      	mov	r1, r3
 8010c06:	2005      	movs	r0, #5
 8010c08:	f003 fa36 	bl	8014078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010c0c:	bf00      	nop
 8010c0e:	e2ed      	b.n	80111ec <ProcessMacCommands+0x98c>
 8010c10:	200006c4 	.word	0x200006c4
 8010c14:	20000be4 	.word	0x20000be4
 8010c18:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010c1c:	23ff      	movs	r3, #255	; 0xff
 8010c1e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010c22:	4bb7      	ldr	r3, [pc, #732]	; (8010f00 <ProcessMacCommands+0x6a0>)
 8010c24:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00d      	beq.n	8010c48 <ProcessMacCommands+0x3e8>
 8010c2c:	4bb4      	ldr	r3, [pc, #720]	; (8010f00 <ProcessMacCommands+0x6a0>)
 8010c2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d007      	beq.n	8010c48 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010c38:	4bb1      	ldr	r3, [pc, #708]	; (8010f00 <ProcessMacCommands+0x6a0>)
 8010c3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4798      	blx	r3
 8010c42:	4603      	mov	r3, r0
 8010c44:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010c48:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010c4c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010c50:	787b      	ldrb	r3, [r7, #1]
 8010c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010c5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c60:	2202      	movs	r2, #2
 8010c62:	4619      	mov	r1, r3
 8010c64:	2006      	movs	r0, #6
 8010c66:	f003 fa07 	bl	8014078 <LoRaMacCommandsAddCmd>
                break;
 8010c6a:	e2bf      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010c72:	78fb      	ldrb	r3, [r7, #3]
 8010c74:	1c5a      	adds	r2, r3, #1
 8010c76:	70fa      	strb	r2, [r7, #3]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	b25b      	sxtb	r3, r3
 8010c82:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8010c86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010c8a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010c8c:	78fb      	ldrb	r3, [r7, #3]
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	70fa      	strb	r2, [r7, #3]
 8010c92:	461a      	mov	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4413      	add	r3, r2
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c9c:	78fb      	ldrb	r3, [r7, #3]
 8010c9e:	1c5a      	adds	r2, r3, #1
 8010ca0:	70fa      	strb	r2, [r7, #3]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	021a      	lsls	r2, r3, #8
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010cb2:	78fb      	ldrb	r3, [r7, #3]
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	70fa      	strb	r2, [r7, #3]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	041a      	lsls	r2, r3, #16
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cca:	2264      	movs	r2, #100	; 0x64
 8010ccc:	fb02 f303 	mul.w	r3, r2, r3
 8010cd0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010cd6:	78fb      	ldrb	r3, [r7, #3]
 8010cd8:	1c5a      	adds	r2, r3, #1
 8010cda:	70fa      	strb	r2, [r7, #3]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	b25b      	sxtb	r3, r3
 8010ce6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010cea:	4b86      	ldr	r3, [pc, #536]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cf0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f005 f824 	bl	8015d44 <RegionNewChannelReq>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010d04:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010d08:	b25b      	sxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	db0a      	blt.n	8010d24 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8010d0e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010d12:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010d16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	2007      	movs	r0, #7
 8010d20:	f003 f9aa 	bl	8014078 <LoRaMacCommandsAddCmd>
                }
                break;
 8010d24:	bf00      	nop
 8010d26:	e261      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	1c5a      	adds	r2, r3, #1
 8010d2c:	70fa      	strb	r2, [r7, #3]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4413      	add	r3, r2
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	f003 030f 	and.w	r3, r3, #15
 8010d3a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8010d3e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d104      	bne.n	8010d50 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8010d46:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010d50:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d58:	fb02 f303 	mul.w	r3, r2, r3
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	4b69      	ldr	r3, [pc, #420]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010d60:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010d62:	4b68      	ldr	r3, [pc, #416]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010d6a:	4a66      	ldr	r2, [pc, #408]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010d6c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010d6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d72:	2200      	movs	r2, #0
 8010d74:	4619      	mov	r1, r3
 8010d76:	2008      	movs	r0, #8
 8010d78:	f003 f97e 	bl	8014078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010d7c:	e236      	b.n	80111ec <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010d7e:	78fb      	ldrb	r3, [r7, #3]
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	70fa      	strb	r2, [r7, #3]
 8010d84:	461a      	mov	r2, r3
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4413      	add	r3, r2
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010d9c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010da0:	f003 0320 	and.w	r3, r3, #32
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010da8:	2301      	movs	r3, #1
 8010daa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010dae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010db2:	f003 0310 	and.w	r3, r3, #16
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010dc4:	f003 030f 	and.w	r3, r3, #15
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010dce:	4b4d      	ldr	r3, [pc, #308]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010dd8:	4611      	mov	r1, r2
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f004 ffc5 	bl	8015d6a <RegionTxParamSetupReq>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010de6:	d03a      	beq.n	8010e5e <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010de8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010dec:	4b45      	ldr	r3, [pc, #276]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010df2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010df6:	4b43      	ldr	r3, [pc, #268]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010df8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010dfc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010e00:	461a      	mov	r2, r3
 8010e02:	4b41      	ldr	r3, [pc, #260]	; (8010f08 <ProcessMacCommands+0x6a8>)
 8010e04:	5c9b      	ldrb	r3, [r3, r2]
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ef fce0 	bl	80007cc <__aeabi_ui2f>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4a3d      	ldr	r2, [pc, #244]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010e10:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010e12:	2302      	movs	r3, #2
 8010e14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e18:	4b3a      	ldr	r3, [pc, #232]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010e1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e22:	4b38      	ldr	r3, [pc, #224]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010e2c:	4611      	mov	r1, r2
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f004 fe9e 	bl	8015b70 <RegionGetPhyParam>
 8010e34:	4603      	mov	r3, r0
 8010e36:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3a:	b25a      	sxtb	r2, r3
 8010e3c:	4b31      	ldr	r3, [pc, #196]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010e3e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010e42:	4293      	cmp	r3, r2
 8010e44:	bfb8      	it	lt
 8010e46:	4613      	movlt	r3, r2
 8010e48:	b25a      	sxtb	r2, r3
 8010e4a:	4b2e      	ldr	r3, [pc, #184]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010e50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e54:	2200      	movs	r2, #0
 8010e56:	4619      	mov	r1, r3
 8010e58:	2009      	movs	r0, #9
 8010e5a:	f003 f90d 	bl	8014078 <LoRaMacCommandsAddCmd>
                }
                break;
 8010e5e:	bf00      	nop
 8010e60:	e1c4      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010e62:	2303      	movs	r3, #3
 8010e64:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010e68:	78fb      	ldrb	r3, [r7, #3]
 8010e6a:	1c5a      	adds	r2, r3, #1
 8010e6c:	70fa      	strb	r2, [r7, #3]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	4413      	add	r3, r2
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010e7a:	78fb      	ldrb	r3, [r7, #3]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	70fa      	strb	r2, [r7, #3]
 8010e80:	461a      	mov	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4413      	add	r3, r2
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010e8a:	78fb      	ldrb	r3, [r7, #3]
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	70fa      	strb	r2, [r7, #3]
 8010e90:	461a      	mov	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4413      	add	r3, r2
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	021a      	lsls	r2, r3, #8
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010ea0:	78fb      	ldrb	r3, [r7, #3]
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	70fa      	strb	r2, [r7, #3]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	4413      	add	r3, r2
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	041a      	lsls	r2, r3, #16
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	2264      	movs	r2, #100	; 0x64
 8010eba:	fb02 f303 	mul.w	r3, r2, r3
 8010ebe:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010ec0:	4b10      	ldr	r3, [pc, #64]	; (8010f04 <ProcessMacCommands+0x6a4>)
 8010ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ec6:	f107 0220 	add.w	r2, r7, #32
 8010eca:	4611      	mov	r1, r2
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f004 ff5f 	bl	8015d90 <RegionDlChannelReq>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010eda:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010ede:	b25b      	sxtb	r3, r3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	db0a      	blt.n	8010efa <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 8010ee4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010ee8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010eec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	200a      	movs	r0, #10
 8010ef6:	f003 f8bf 	bl	8014078 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8010efa:	bf00      	nop
 8010efc:	e176      	b.n	80111ec <ProcessMacCommands+0x98c>
 8010efe:	bf00      	nop
 8010f00:	200006c4 	.word	0x200006c4
 8010f04:	20000be4 	.word	0x20000be4
 8010f08:	0801dba8 	.word	0x0801dba8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010f0c:	2009      	movs	r0, #9
 8010f0e:	f003 fbdb 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 8084 	beq.w	8011022 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010f1a:	2109      	movs	r1, #9
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	f003 fb47 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010f22:	f107 0318 	add.w	r3, r7, #24
 8010f26:	2200      	movs	r2, #0
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010f2c:	f107 0310 	add.w	r3, r7, #16
 8010f30:	2200      	movs	r2, #0
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010f36:	f107 0308 	add.w	r3, r7, #8
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
 8010f3e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	70fa      	strb	r2, [r7, #3]
 8010f46:	461a      	mov	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010f50:	78fb      	ldrb	r3, [r7, #3]
 8010f52:	1c5a      	adds	r2, r3, #1
 8010f54:	70fa      	strb	r2, [r7, #3]
 8010f56:	461a      	mov	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	021a      	lsls	r2, r3, #8
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	4313      	orrs	r3, r2
 8010f64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010f66:	78fb      	ldrb	r3, [r7, #3]
 8010f68:	1c5a      	adds	r2, r3, #1
 8010f6a:	70fa      	strb	r2, [r7, #3]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4413      	add	r3, r2
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	041a      	lsls	r2, r3, #16
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	70fa      	strb	r2, [r7, #3]
 8010f82:	461a      	mov	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4413      	add	r3, r2
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	061a      	lsls	r2, r3, #24
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010f92:	78fb      	ldrb	r3, [r7, #3]
 8010f94:	1c5a      	adds	r2, r3, #1
 8010f96:	70fa      	strb	r2, [r7, #3]
 8010f98:	461a      	mov	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	b21b      	sxth	r3, r3
 8010fa2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010fa4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010fa8:	461a      	mov	r2, r3
 8010faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010fae:	fb02 f303 	mul.w	r3, r2, r3
 8010fb2:	121b      	asrs	r3, r3, #8
 8010fb4:	b21b      	sxth	r3, r3
 8010fb6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010fb8:	f107 0310 	add.w	r3, r7, #16
 8010fbc:	f107 0218 	add.w	r2, r7, #24
 8010fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fc4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010fc8:	693a      	ldr	r2, [r7, #16]
 8010fca:	4b8f      	ldr	r3, [pc, #572]	; (8011208 <ProcessMacCommands+0x9a8>)
 8010fcc:	4413      	add	r3, r2
 8010fce:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010fd0:	f107 0308 	add.w	r3, r7, #8
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f00a fd61 	bl	801ba9c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010fda:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010fde:	4b8b      	ldr	r3, [pc, #556]	; (801120c <ProcessMacCommands+0x9ac>)
 8010fe0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010fe4:	9200      	str	r2, [sp, #0]
 8010fe6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8010fea:	f107 0210 	add.w	r2, r7, #16
 8010fee:	ca06      	ldmia	r2, {r1, r2}
 8010ff0:	f00a fced 	bl	801b9ce <SysTimeSub>
 8010ff4:	f107 0010 	add.w	r0, r7, #16
 8010ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ffe:	f107 0208 	add.w	r2, r7, #8
 8011002:	ca06      	ldmia	r2, {r1, r2}
 8011004:	f00a fcaa 	bl	801b95c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011008:	f107 0310 	add.w	r3, r7, #16
 801100c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011010:	f00a fd16 	bl	801ba40 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011014:	f002 fedc 	bl	8013dd0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011018:	4b7c      	ldr	r3, [pc, #496]	; (801120c <ProcessMacCommands+0x9ac>)
 801101a:	2201      	movs	r2, #1
 801101c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8011020:	e0e4      	b.n	80111ec <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011022:	4b7a      	ldr	r3, [pc, #488]	; (801120c <ProcessMacCommands+0x9ac>)
 8011024:	2200      	movs	r2, #0
 8011026:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 801102a:	e0df      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801102c:	200c      	movs	r0, #12
 801102e:	f003 fb4b 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	f000 80d9 	beq.w	80111ec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801103a:	210c      	movs	r1, #12
 801103c:	2000      	movs	r0, #0
 801103e:	f003 fab7 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011042:	4b72      	ldr	r3, [pc, #456]	; (801120c <ProcessMacCommands+0x9ac>)
 8011044:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8011048:	2b04      	cmp	r3, #4
 801104a:	f000 80cf 	beq.w	80111ec <ProcessMacCommands+0x98c>
 801104e:	4b6f      	ldr	r3, [pc, #444]	; (801120c <ProcessMacCommands+0x9ac>)
 8011050:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8011054:	2b05      	cmp	r3, #5
 8011056:	f000 80c9 	beq.w	80111ec <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801105a:	f002 fe9a 	bl	8013d92 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801105e:	e0c5      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011060:	2303      	movs	r3, #3
 8011062:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011066:	2300      	movs	r3, #0
 8011068:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801106a:	78fb      	ldrb	r3, [r7, #3]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	70fa      	strb	r2, [r7, #3]
 8011070:	461a      	mov	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	4413      	add	r3, r2
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	1c5a      	adds	r2, r3, #1
 801107e:	70fa      	strb	r2, [r7, #3]
 8011080:	461a      	mov	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4413      	add	r3, r2
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	021b      	lsls	r3, r3, #8
 801108a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801108c:	4313      	orrs	r3, r2
 801108e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011090:	78fb      	ldrb	r3, [r7, #3]
 8011092:	1c5a      	adds	r2, r3, #1
 8011094:	70fa      	strb	r2, [r7, #3]
 8011096:	461a      	mov	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	4413      	add	r3, r2
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	041b      	lsls	r3, r3, #16
 80110a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80110a2:	4313      	orrs	r3, r2
 80110a4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80110a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110a8:	2264      	movs	r2, #100	; 0x64
 80110aa:	fb02 f303 	mul.w	r3, r2, r3
 80110ae:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80110b0:	78fb      	ldrb	r3, [r7, #3]
 80110b2:	1c5a      	adds	r2, r3, #1
 80110b4:	70fa      	strb	r2, [r7, #3]
 80110b6:	461a      	mov	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4413      	add	r3, r2
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 030f 	and.w	r3, r3, #15
 80110c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80110c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80110cc:	4618      	mov	r0, r3
 80110ce:	f002 fe66 	bl	8013d9e <LoRaMacClassBPingSlotChannelReq>
 80110d2:	4603      	mov	r3, r0
 80110d4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80110d8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80110dc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80110e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80110e4:	2201      	movs	r2, #1
 80110e6:	4619      	mov	r1, r3
 80110e8:	2011      	movs	r0, #17
 80110ea:	f002 ffc5 	bl	8014078 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80110ee:	e07d      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80110f0:	200d      	movs	r0, #13
 80110f2:	f003 fae9 	bl	80146c8 <LoRaMacConfirmQueueIsCmdActive>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d077      	beq.n	80111ec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80110fc:	210d      	movs	r1, #13
 80110fe:	2000      	movs	r0, #0
 8011100:	f003 fa56 	bl	80145b0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	70fa      	strb	r2, [r7, #3]
 8011116:	461a      	mov	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4413      	add	r3, r2
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011122:	78fb      	ldrb	r3, [r7, #3]
 8011124:	1c5a      	adds	r2, r3, #1
 8011126:	70fa      	strb	r2, [r7, #3]
 8011128:	461a      	mov	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4413      	add	r3, r2
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	021b      	lsls	r3, r3, #8
 8011132:	b21a      	sxth	r2, r3
 8011134:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8011138:	4313      	orrs	r3, r2
 801113a:	b21b      	sxth	r3, r3
 801113c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	1c5a      	adds	r2, r3, #1
 8011144:	70fa      	strb	r2, [r7, #3]
 8011146:	461a      	mov	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4413      	add	r3, r2
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011152:	4b2f      	ldr	r3, [pc, #188]	; (8011210 <ProcessMacCommands+0x9b0>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801115a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801115e:	4618      	mov	r0, r3
 8011160:	f002 fe29 	bl	8013db6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011164:	e042      	b.n	80111ec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011166:	2300      	movs	r3, #0
 8011168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801116c:	78fb      	ldrb	r3, [r7, #3]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	70fa      	strb	r2, [r7, #3]
 8011172:	461a      	mov	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4413      	add	r3, r2
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801117e:	78fb      	ldrb	r3, [r7, #3]
 8011180:	1c5a      	adds	r2, r3, #1
 8011182:	70fa      	strb	r2, [r7, #3]
 8011184:	461a      	mov	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4413      	add	r3, r2
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	021b      	lsls	r3, r3, #8
 801118e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011192:	4313      	orrs	r3, r2
 8011194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	70fa      	strb	r2, [r7, #3]
 801119e:	461a      	mov	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	041b      	lsls	r3, r3, #16
 80111a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80111ac:	4313      	orrs	r3, r2
 80111ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80111b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80111b6:	2264      	movs	r2, #100	; 0x64
 80111b8:	fb02 f303 	mul.w	r3, r2, r3
 80111bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80111c0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80111c4:	f002 fe0a 	bl	8013ddc <LoRaMacClassBBeaconFreqReq>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d003      	beq.n	80111d6 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 80111ce:	2301      	movs	r3, #1
 80111d0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80111d4:	e002      	b.n	80111dc <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80111dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111e0:	2201      	movs	r2, #1
 80111e2:	4619      	mov	r1, r3
 80111e4:	2013      	movs	r0, #19
 80111e6:	f002 ff47 	bl	8014078 <LoRaMacCommandsAddCmd>
                }
                break;
 80111ea:	bf00      	nop
    while( macIndex < commandsSize )
 80111ec:	78fa      	ldrb	r2, [r7, #3]
 80111ee:	78bb      	ldrb	r3, [r7, #2]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	f4ff ab57 	bcc.w	80108a4 <ProcessMacCommands+0x44>
 80111f6:	e004      	b.n	8011202 <ProcessMacCommands+0x9a2>
        return;
 80111f8:	bf00      	nop
 80111fa:	e002      	b.n	8011202 <ProcessMacCommands+0x9a2>
            return;
 80111fc:	bf00      	nop
 80111fe:	e000      	b.n	8011202 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011200:	bf00      	nop
        }
    }
}
 8011202:	378c      	adds	r7, #140	; 0x8c
 8011204:	46bd      	mov	sp, r7
 8011206:	bd90      	pop	{r4, r7, pc}
 8011208:	12d53d80 	.word	0x12d53d80
 801120c:	200006c4 	.word	0x200006c4
 8011210:	20001794 	.word	0x20001794

08011214 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b08e      	sub	sp, #56	; 0x38
 8011218:	af02      	add	r7, sp, #8
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	461a      	mov	r2, r3
 8011220:	460b      	mov	r3, r1
 8011222:	72fb      	strb	r3, [r7, #11]
 8011224:	4613      	mov	r3, r2
 8011226:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011228:	2303      	movs	r3, #3
 801122a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801122e:	4b66      	ldr	r3, [pc, #408]	; (80113c8 <Send+0x1b4>)
 8011230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011234:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011238:	4b63      	ldr	r3, [pc, #396]	; (80113c8 <Send+0x1b4>)
 801123a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801123e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011242:	4b61      	ldr	r3, [pc, #388]	; (80113c8 <Send+0x1b4>)
 8011244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011246:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011248:	4b5f      	ldr	r3, [pc, #380]	; (80113c8 <Send+0x1b4>)
 801124a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011252:	2307      	movs	r3, #7
 8011254:	e0b4      	b.n	80113c0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011256:	4b5c      	ldr	r3, [pc, #368]	; (80113c8 <Send+0x1b4>)
 8011258:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011260:	4b59      	ldr	r3, [pc, #356]	; (80113c8 <Send+0x1b4>)
 8011262:	2200      	movs	r2, #0
 8011264:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011266:	2300      	movs	r3, #0
 8011268:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801126c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011270:	f36f 0303 	bfc	r3, #0, #4
 8011274:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011278:	4b53      	ldr	r3, [pc, #332]	; (80113c8 <Send+0x1b4>)
 801127a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801127e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011282:	f362 13c7 	bfi	r3, r2, #7, #1
 8011286:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801128a:	4b4f      	ldr	r3, [pc, #316]	; (80113c8 <Send+0x1b4>)
 801128c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011290:	2b01      	cmp	r3, #1
 8011292:	d106      	bne.n	80112a2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011298:	f043 0310 	orr.w	r3, r3, #16
 801129c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80112a0:	e005      	b.n	80112ae <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80112a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112a6:	f36f 1304 	bfc	r3, #4, #1
 80112aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80112ae:	4b46      	ldr	r3, [pc, #280]	; (80113c8 <Send+0x1b4>)
 80112b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d005      	beq.n	80112c4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80112b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112bc:	f043 0320 	orr.w	r3, r3, #32
 80112c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 80112c4:	2301      	movs	r3, #1
 80112c6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80112c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	bf14      	ite	ne
 80112d6:	2301      	movne	r3, #1
 80112d8:	2300      	moveq	r3, #0
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80112de:	4b3a      	ldr	r3, [pc, #232]	; (80113c8 <Send+0x1b4>)
 80112e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112e2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80112e4:	4b39      	ldr	r3, [pc, #228]	; (80113cc <Send+0x1b8>)
 80112e6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80112ea:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80112ec:	4b37      	ldr	r3, [pc, #220]	; (80113cc <Send+0x1b8>)
 80112ee:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80112f2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80112f4:	4b34      	ldr	r3, [pc, #208]	; (80113c8 <Send+0x1b4>)
 80112f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80112fa:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80112fe:	4b32      	ldr	r3, [pc, #200]	; (80113c8 <Send+0x1b4>)
 8011300:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011304:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011308:	4b2f      	ldr	r3, [pc, #188]	; (80113c8 <Send+0x1b4>)
 801130a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801130e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011312:	4b2d      	ldr	r3, [pc, #180]	; (80113c8 <Send+0x1b4>)
 8011314:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801131c:	4b2a      	ldr	r3, [pc, #168]	; (80113c8 <Send+0x1b4>)
 801131e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011326:	f107 0014 	add.w	r0, r7, #20
 801132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	4b27      	ldr	r3, [pc, #156]	; (80113d0 <Send+0x1bc>)
 8011332:	4a28      	ldr	r2, [pc, #160]	; (80113d4 <Send+0x1c0>)
 8011334:	4928      	ldr	r1, [pc, #160]	; (80113d8 <Send+0x1c4>)
 8011336:	f002 fbcb 	bl	8013ad0 <LoRaMacAdrCalcNext>
 801133a:	4603      	mov	r3, r0
 801133c:	461a      	mov	r2, r3
 801133e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011342:	f362 1386 	bfi	r3, r2, #6, #1
 8011346:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801134a:	7afa      	ldrb	r2, [r7, #11]
 801134c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011350:	893b      	ldrh	r3, [r7, #8]
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 fc42 	bl	8011be0 <PrepareFrame>
 801135c:	4603      	mov	r3, r0
 801135e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011366:	2b00      	cmp	r3, #0
 8011368:	d003      	beq.n	8011372 <Send+0x15e>
 801136a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801136e:	2b0a      	cmp	r3, #10
 8011370:	d107      	bne.n	8011382 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011372:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011376:	4618      	mov	r0, r3
 8011378:	f000 f96e 	bl	8011658 <ScheduleTx>
 801137c:	4603      	mov	r3, r0
 801137e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00a      	beq.n	80113a0 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801138a:	4a0f      	ldr	r2, [pc, #60]	; (80113c8 <Send+0x1b4>)
 801138c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011390:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011394:	4a0c      	ldr	r2, [pc, #48]	; (80113c8 <Send+0x1b4>)
 8011396:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801139a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 801139e:	e00d      	b.n	80113bc <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80113a0:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <Send+0x1b4>)
 80113a2:	2200      	movs	r2, #0
 80113a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	4a07      	ldr	r2, [pc, #28]	; (80113c8 <Send+0x1b4>)
 80113ac:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80113ae:	f002 fedb 	bl	8014168 <LoRaMacCommandsRemoveNoneStickyCmds>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113b8:	2313      	movs	r3, #19
 80113ba:	e001      	b.n	80113c0 <Send+0x1ac>
        }
    }
    return status;
 80113bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3730      	adds	r7, #48	; 0x30
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	20000be4 	.word	0x20000be4
 80113cc:	200006c4 	.word	0x200006c4
 80113d0:	20000c44 	.word	0x20000c44
 80113d4:	20000c1c 	.word	0x20000c1c
 80113d8:	20000c1d 	.word	0x20000c1d

080113dc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	4603      	mov	r3, r0
 80113e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80113ee:	2301      	movs	r3, #1
 80113f0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	2bff      	cmp	r3, #255	; 0xff
 80113f6:	d129      	bne.n	801144c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80113f8:	2000      	movs	r0, #0
 80113fa:	f7ff f90f 	bl	801061c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80113fe:	4b1a      	ldr	r3, [pc, #104]	; (8011468 <SendReJoinReq+0x8c>)
 8011400:	2200      	movs	r2, #0
 8011402:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011406:	4b18      	ldr	r3, [pc, #96]	; (8011468 <SendReJoinReq+0x8c>)
 8011408:	4a18      	ldr	r2, [pc, #96]	; (801146c <SendReJoinReq+0x90>)
 801140a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801140e:	4b16      	ldr	r3, [pc, #88]	; (8011468 <SendReJoinReq+0x8c>)
 8011410:	22ff      	movs	r2, #255	; 0xff
 8011412:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011416:	7b3b      	ldrb	r3, [r7, #12]
 8011418:	f36f 1347 	bfc	r3, #5, #3
 801141c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801141e:	7b3a      	ldrb	r2, [r7, #12]
 8011420:	4b11      	ldr	r3, [pc, #68]	; (8011468 <SendReJoinReq+0x8c>)
 8011422:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011426:	f7fc f86d 	bl	800d504 <SecureElementGetJoinEui>
 801142a:	4603      	mov	r3, r0
 801142c:	2208      	movs	r2, #8
 801142e:	4619      	mov	r1, r3
 8011430:	480f      	ldr	r0, [pc, #60]	; (8011470 <SendReJoinReq+0x94>)
 8011432:	f006 ff54 	bl	80182de <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011436:	f7fc f843 	bl	800d4c0 <SecureElementGetDevEui>
 801143a:	4603      	mov	r3, r0
 801143c:	2208      	movs	r2, #8
 801143e:	4619      	mov	r1, r3
 8011440:	480c      	ldr	r0, [pc, #48]	; (8011474 <SendReJoinReq+0x98>)
 8011442:	f006 ff4c 	bl	80182de <memcpy1>

            allowDelayedTx = false;
 8011446:	2300      	movs	r3, #0
 8011448:	73fb      	strb	r3, [r7, #15]

            break;
 801144a:	e002      	b.n	8011452 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801144c:	2302      	movs	r3, #2
 801144e:	73bb      	strb	r3, [r7, #14]
            break;
 8011450:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011452:	7bfb      	ldrb	r3, [r7, #15]
 8011454:	4618      	mov	r0, r3
 8011456:	f000 f8ff 	bl	8011658 <ScheduleTx>
 801145a:	4603      	mov	r3, r0
 801145c:	73bb      	strb	r3, [r7, #14]
    return status;
 801145e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	200006c4 	.word	0x200006c4
 801146c:	200006c6 	.word	0x200006c6
 8011470:	200007d2 	.word	0x200007d2
 8011474:	200007da 	.word	0x200007da

08011478 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801147c:	f002 fc38 	bl	8013cf0 <LoRaMacClassBIsBeaconExpected>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011486:	230e      	movs	r3, #14
 8011488:	e013      	b.n	80114b2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801148a:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <CheckForClassBCollision+0x40>)
 801148c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011490:	2b01      	cmp	r3, #1
 8011492:	d10d      	bne.n	80114b0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011494:	f002 fc33 	bl	8013cfe <LoRaMacClassBIsPingExpected>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801149e:	230f      	movs	r3, #15
 80114a0:	e007      	b.n	80114b2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80114a2:	f002 fc33 	bl	8013d0c <LoRaMacClassBIsMulticastExpected>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d001      	beq.n	80114b0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80114ac:	230f      	movs	r3, #15
 80114ae:	e000      	b.n	80114b2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	20000be4 	.word	0x20000be4

080114bc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80114bc:	b590      	push	{r4, r7, lr}
 80114be:	b083      	sub	sp, #12
 80114c0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80114c2:	4b2d      	ldr	r3, [pc, #180]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114c4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80114c8:	4b2b      	ldr	r3, [pc, #172]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80114ce:	4b2a      	ldr	r3, [pc, #168]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114d0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 80114d4:	4b28      	ldr	r3, [pc, #160]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114d6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80114da:	4b27      	ldr	r3, [pc, #156]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80114e0:	b25b      	sxtb	r3, r3
 80114e2:	f004 fc9a 	bl	8015e1a <RegionApplyDrOffset>
 80114e6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80114e8:	b259      	sxtb	r1, r3
 80114ea:	4b23      	ldr	r3, [pc, #140]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114f0:	4b21      	ldr	r3, [pc, #132]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 80114f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114f4:	4821      	ldr	r0, [pc, #132]	; (801157c <ComputeRxWindowParameters+0xc0>)
 80114f6:	9000      	str	r0, [sp, #0]
 80114f8:	4620      	mov	r0, r4
 80114fa:	f004 fbb0 	bl	8015c5e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80114fe:	4b1e      	ldr	r3, [pc, #120]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011500:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011504:	4b1c      	ldr	r3, [pc, #112]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011506:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801150a:	b259      	sxtb	r1, r3
 801150c:	4b1a      	ldr	r3, [pc, #104]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 801150e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011512:	4b19      	ldr	r3, [pc, #100]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011516:	4c1a      	ldr	r4, [pc, #104]	; (8011580 <ComputeRxWindowParameters+0xc4>)
 8011518:	9400      	str	r4, [sp, #0]
 801151a:	f004 fba0 	bl	8015c5e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801151e:	4b16      	ldr	r3, [pc, #88]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011522:	4a18      	ldr	r2, [pc, #96]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 8011524:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011528:	4413      	add	r3, r2
 801152a:	4a16      	ldr	r2, [pc, #88]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 801152c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011530:	4b11      	ldr	r3, [pc, #68]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011534:	4a13      	ldr	r2, [pc, #76]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 8011536:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801153a:	4413      	add	r3, r2
 801153c:	4a11      	ldr	r2, [pc, #68]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 801153e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011542:	4b0d      	ldr	r3, [pc, #52]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011544:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011548:	2b00      	cmp	r3, #0
 801154a:	d111      	bne.n	8011570 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801154c:	4b0a      	ldr	r3, [pc, #40]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 801154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011550:	4a0c      	ldr	r2, [pc, #48]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 8011552:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011556:	4413      	add	r3, r2
 8011558:	4a0a      	ldr	r2, [pc, #40]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 801155a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801155e:	4b06      	ldr	r3, [pc, #24]	; (8011578 <ComputeRxWindowParameters+0xbc>)
 8011560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011562:	4a08      	ldr	r2, [pc, #32]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 8011564:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011568:	4413      	add	r3, r2
 801156a:	4a06      	ldr	r2, [pc, #24]	; (8011584 <ComputeRxWindowParameters+0xc8>)
 801156c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011570:	bf00      	nop
 8011572:	3704      	adds	r7, #4
 8011574:	46bd      	mov	sp, r7
 8011576:	bd90      	pop	{r4, r7, pc}
 8011578:	20000be4 	.word	0x20000be4
 801157c:	20000a7c 	.word	0x20000a7c
 8011580:	20000a94 	.word	0x20000a94
 8011584:	200006c4 	.word	0x200006c4

08011588 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801158e:	2300      	movs	r3, #0
 8011590:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011592:	4b13      	ldr	r3, [pc, #76]	; (80115e0 <VerifyTxFrame+0x58>)
 8011594:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d01b      	beq.n	80115d4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801159c:	1d3b      	adds	r3, r7, #4
 801159e:	4618      	mov	r0, r3
 80115a0:	f002 fe28 	bl	80141f4 <LoRaMacCommandsGetSizeSerializedCmds>
 80115a4:	4603      	mov	r3, r0
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115aa:	2313      	movs	r3, #19
 80115ac:	e013      	b.n	80115d6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80115ae:	4b0d      	ldr	r3, [pc, #52]	; (80115e4 <VerifyTxFrame+0x5c>)
 80115b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80115b4:	4a0a      	ldr	r2, [pc, #40]	; (80115e0 <VerifyTxFrame+0x58>)
 80115b6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	b2d2      	uxtb	r2, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff f926 	bl	8010810 <ValidatePayloadLength>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f083 0301 	eor.w	r3, r3, #1
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d001      	beq.n	80115d4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80115d0:	2308      	movs	r3, #8
 80115d2:	e000      	b.n	80115d6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	20000be4 	.word	0x20000be4
 80115e4:	200006c4 	.word	0x200006c4

080115e8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80115ee:	4b18      	ldr	r3, [pc, #96]	; (8011650 <SerializeTxFrame+0x68>)
 80115f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <SerializeTxFrame+0x16>
 80115f8:	2b04      	cmp	r3, #4
 80115fa:	d011      	beq.n	8011620 <SerializeTxFrame+0x38>
 80115fc:	e021      	b.n	8011642 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80115fe:	4815      	ldr	r0, [pc, #84]	; (8011654 <SerializeTxFrame+0x6c>)
 8011600:	f004 f92d 	bl	801585e <LoRaMacSerializerJoinRequest>
 8011604:	4603      	mov	r3, r0
 8011606:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011608:	79fb      	ldrb	r3, [r7, #7]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801160e:	2311      	movs	r3, #17
 8011610:	e01a      	b.n	8011648 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011612:	4b0f      	ldr	r3, [pc, #60]	; (8011650 <SerializeTxFrame+0x68>)
 8011614:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011618:	b29a      	uxth	r2, r3
 801161a:	4b0d      	ldr	r3, [pc, #52]	; (8011650 <SerializeTxFrame+0x68>)
 801161c:	801a      	strh	r2, [r3, #0]
            break;
 801161e:	e012      	b.n	8011646 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011620:	480c      	ldr	r0, [pc, #48]	; (8011654 <SerializeTxFrame+0x6c>)
 8011622:	f004 f99e 	bl	8015962 <LoRaMacSerializerData>
 8011626:	4603      	mov	r3, r0
 8011628:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801162a:	79fb      	ldrb	r3, [r7, #7]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d001      	beq.n	8011634 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011630:	2311      	movs	r3, #17
 8011632:	e009      	b.n	8011648 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011634:	4b06      	ldr	r3, [pc, #24]	; (8011650 <SerializeTxFrame+0x68>)
 8011636:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801163a:	b29a      	uxth	r2, r3
 801163c:	4b04      	ldr	r3, [pc, #16]	; (8011650 <SerializeTxFrame+0x68>)
 801163e:	801a      	strh	r2, [r3, #0]
            break;
 8011640:	e001      	b.n	8011646 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011642:	2303      	movs	r3, #3
 8011644:	e000      	b.n	8011648 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	200006c4 	.word	0x200006c4
 8011654:	200007cc 	.word	0x200007cc

08011658 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b090      	sub	sp, #64	; 0x40
 801165c:	af02      	add	r7, sp, #8
 801165e:	4603      	mov	r3, r0
 8011660:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011662:	2303      	movs	r3, #3
 8011664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011668:	f7ff ff06 	bl	8011478 <CheckForClassBCollision>
 801166c:	4603      	mov	r3, r0
 801166e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <ScheduleTx+0x28>
    {
        return status;
 801167a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801167e:	e08f      	b.n	80117a0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011680:	f000 f8f4 	bl	801186c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011684:	f7ff ffb0 	bl	80115e8 <SerializeTxFrame>
 8011688:	4603      	mov	r3, r0
 801168a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801168e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011692:	2b00      	cmp	r3, #0
 8011694:	d002      	beq.n	801169c <ScheduleTx+0x44>
    {
        return status;
 8011696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801169a:	e081      	b.n	80117a0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801169c:	4b42      	ldr	r3, [pc, #264]	; (80117a8 <ScheduleTx+0x150>)
 801169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116a0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80116a2:	4b41      	ldr	r3, [pc, #260]	; (80117a8 <ScheduleTx+0x150>)
 80116a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80116a8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80116aa:	4b3f      	ldr	r3, [pc, #252]	; (80117a8 <ScheduleTx+0x150>)
 80116ac:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80116b0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80116b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116b6:	4618      	mov	r0, r3
 80116b8:	f00a fa28 	bl	801bb0c <SysTimeGetMcuTime>
 80116bc:	4638      	mov	r0, r7
 80116be:	4b3a      	ldr	r3, [pc, #232]	; (80117a8 <ScheduleTx+0x150>)
 80116c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80116c4:	9200      	str	r2, [sp, #0]
 80116c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80116ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80116ce:	ca06      	ldmia	r2, {r1, r2}
 80116d0:	f00a f97d 	bl	801b9ce <SysTimeSub>
 80116d4:	f107 0320 	add.w	r3, r7, #32
 80116d8:	463a      	mov	r2, r7
 80116da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116de:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80116e2:	4b31      	ldr	r3, [pc, #196]	; (80117a8 <ScheduleTx+0x150>)
 80116e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80116e8:	2300      	movs	r3, #0
 80116ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80116ee:	2301      	movs	r3, #1
 80116f0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80116f2:	4b2e      	ldr	r3, [pc, #184]	; (80117ac <ScheduleTx+0x154>)
 80116f4:	881b      	ldrh	r3, [r3, #0]
 80116f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80116f8:	4b2b      	ldr	r3, [pc, #172]	; (80117a8 <ScheduleTx+0x150>)
 80116fa:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d104      	bne.n	801170c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011702:	2301      	movs	r3, #1
 8011704:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011708:	2300      	movs	r3, #0
 801170a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801170c:	4b26      	ldr	r3, [pc, #152]	; (80117a8 <ScheduleTx+0x150>)
 801170e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011712:	f107 0114 	add.w	r1, r7, #20
 8011716:	4b26      	ldr	r3, [pc, #152]	; (80117b0 <ScheduleTx+0x158>)
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	4b26      	ldr	r3, [pc, #152]	; (80117b4 <ScheduleTx+0x15c>)
 801171c:	4a26      	ldr	r2, [pc, #152]	; (80117b8 <ScheduleTx+0x160>)
 801171e:	f004 fb64 	bl	8015dea <RegionNextChannel>
 8011722:	4603      	mov	r3, r0
 8011724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801172c:	2b00      	cmp	r3, #0
 801172e:	d022      	beq.n	8011776 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011734:	2b0b      	cmp	r3, #11
 8011736:	d11b      	bne.n	8011770 <ScheduleTx+0x118>
 8011738:	7bfb      	ldrb	r3, [r7, #15]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d018      	beq.n	8011770 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801173e:	4b1b      	ldr	r3, [pc, #108]	; (80117ac <ScheduleTx+0x154>)
 8011740:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011744:	2b00      	cmp	r3, #0
 8011746:	d011      	beq.n	801176c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011748:	4b18      	ldr	r3, [pc, #96]	; (80117ac <ScheduleTx+0x154>)
 801174a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801174e:	f043 0320 	orr.w	r3, r3, #32
 8011752:	4a16      	ldr	r2, [pc, #88]	; (80117ac <ScheduleTx+0x154>)
 8011754:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011758:	4b14      	ldr	r3, [pc, #80]	; (80117ac <ScheduleTx+0x154>)
 801175a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801175e:	4619      	mov	r1, r3
 8011760:	4816      	ldr	r0, [pc, #88]	; (80117bc <ScheduleTx+0x164>)
 8011762:	f00a ff77 	bl	801c654 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011766:	4815      	ldr	r0, [pc, #84]	; (80117bc <ScheduleTx+0x164>)
 8011768:	f00a fe96 	bl	801c498 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	e017      	b.n	80117a0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011774:	e014      	b.n	80117a0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011776:	f7ff fea1 	bl	80114bc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801177a:	f7ff ff05 	bl	8011588 <VerifyTxFrame>
 801177e:	4603      	mov	r3, r0
 8011780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <ScheduleTx+0x13a>
    {
        return status;
 801178c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011790:	e006      	b.n	80117a0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011792:	4b06      	ldr	r3, [pc, #24]	; (80117ac <ScheduleTx+0x154>)
 8011794:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8011798:	4618      	mov	r0, r3
 801179a:	f000 fb3d 	bl	8011e18 <SendFrameOnChannel>
 801179e:	4603      	mov	r3, r0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3738      	adds	r7, #56	; 0x38
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20000be4 	.word	0x20000be4
 80117ac:	200006c4 	.word	0x200006c4
 80117b0:	20000c14 	.word	0x20000c14
 80117b4:	20000b5c 	.word	0x20000b5c
 80117b8:	20000ae3 	.word	0x20000ae3
 80117bc:	20000a2c 	.word	0x20000a2c

080117c0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	4603      	mov	r3, r0
 80117c8:	460a      	mov	r2, r1
 80117ca:	71fb      	strb	r3, [r7, #7]
 80117cc:	4613      	mov	r3, r2
 80117ce:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80117d0:	2312      	movs	r3, #18
 80117d2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80117d8:	4b22      	ldr	r3, [pc, #136]	; (8011864 <SecureFrame+0xa4>)
 80117da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d002      	beq.n	80117e8 <SecureFrame+0x28>
 80117e2:	2b04      	cmp	r3, #4
 80117e4:	d011      	beq.n	801180a <SecureFrame+0x4a>
 80117e6:	e036      	b.n	8011856 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80117e8:	481f      	ldr	r0, [pc, #124]	; (8011868 <SecureFrame+0xa8>)
 80117ea:	f003 fc07 	bl	8014ffc <LoRaMacCryptoPrepareJoinRequest>
 80117ee:	4603      	mov	r3, r0
 80117f0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80117f2:	7bfb      	ldrb	r3, [r7, #15]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d001      	beq.n	80117fc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80117f8:	2311      	movs	r3, #17
 80117fa:	e02f      	b.n	801185c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80117fc:	4b19      	ldr	r3, [pc, #100]	; (8011864 <SecureFrame+0xa4>)
 80117fe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011802:	b29a      	uxth	r2, r3
 8011804:	4b17      	ldr	r3, [pc, #92]	; (8011864 <SecureFrame+0xa4>)
 8011806:	801a      	strh	r2, [r3, #0]
            break;
 8011808:	e027      	b.n	801185a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801180a:	f107 0308 	add.w	r3, r7, #8
 801180e:	4618      	mov	r0, r3
 8011810:	f003 fb38 	bl	8014e84 <LoRaMacCryptoGetFCntUp>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d001      	beq.n	801181e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801181a:	2312      	movs	r3, #18
 801181c:	e01e      	b.n	801185c <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 801181e:	4b11      	ldr	r3, [pc, #68]	; (8011864 <SecureFrame+0xa4>)
 8011820:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d002      	beq.n	801182e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	3b01      	subs	r3, #1
 801182c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801182e:	68b8      	ldr	r0, [r7, #8]
 8011830:	79ba      	ldrb	r2, [r7, #6]
 8011832:	79f9      	ldrb	r1, [r7, #7]
 8011834:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <SecureFrame+0xa8>)
 8011836:	f003 fcf3 	bl	8015220 <LoRaMacCryptoSecureMessage>
 801183a:	4603      	mov	r3, r0
 801183c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801183e:	7bfb      	ldrb	r3, [r7, #15]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011844:	2311      	movs	r3, #17
 8011846:	e009      	b.n	801185c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011848:	4b06      	ldr	r3, [pc, #24]	; (8011864 <SecureFrame+0xa4>)
 801184a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801184e:	b29a      	uxth	r2, r3
 8011850:	4b04      	ldr	r3, [pc, #16]	; (8011864 <SecureFrame+0xa4>)
 8011852:	801a      	strh	r2, [r3, #0]
            break;
 8011854:	e001      	b.n	801185a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011856:	2303      	movs	r3, #3
 8011858:	e000      	b.n	801185c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801185a:	2300      	movs	r3, #0
}
 801185c:	4618      	mov	r0, r3
 801185e:	3710      	adds	r7, #16
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	200006c4 	.word	0x200006c4
 8011868:	200007cc 	.word	0x200007cc

0801186c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801186c:	b480      	push	{r7}
 801186e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011870:	4b09      	ldr	r3, [pc, #36]	; (8011898 <CalculateBackOff+0x2c>)
 8011872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011874:	2b00      	cmp	r3, #0
 8011876:	d10a      	bne.n	801188e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011878:	4b07      	ldr	r3, [pc, #28]	; (8011898 <CalculateBackOff+0x2c>)
 801187a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 801187e:	3b01      	subs	r3, #1
 8011880:	4a06      	ldr	r2, [pc, #24]	; (801189c <CalculateBackOff+0x30>)
 8011882:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 8011886:	fb02 f303 	mul.w	r3, r2, r3
 801188a:	4a03      	ldr	r2, [pc, #12]	; (8011898 <CalculateBackOff+0x2c>)
 801188c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801188e:	bf00      	nop
 8011890:	46bd      	mov	sp, r7
 8011892:	bc80      	pop	{r7}
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	20000be4 	.word	0x20000be4
 801189c:	200006c4 	.word	0x200006c4

080118a0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	7139      	strb	r1, [r7, #4]
 80118aa:	71fb      	strb	r3, [r7, #7]
 80118ac:	4613      	mov	r3, r2
 80118ae:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d002      	beq.n	80118bc <RemoveMacCommands+0x1c>
 80118b6:	79fb      	ldrb	r3, [r7, #7]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d10d      	bne.n	80118d8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80118bc:	79bb      	ldrb	r3, [r7, #6]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d108      	bne.n	80118d4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80118c2:	793b      	ldrb	r3, [r7, #4]
 80118c4:	f003 0320 	and.w	r3, r3, #32
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d004      	beq.n	80118d8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80118ce:	f002 fc6f 	bl	80141b0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80118d2:	e001      	b.n	80118d8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80118d4:	f002 fc6c 	bl	80141b0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80118d8:	bf00      	nop
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80118e0:	b5b0      	push	{r4, r5, r7, lr}
 80118e2:	b090      	sub	sp, #64	; 0x40
 80118e4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80118e6:	4b70      	ldr	r3, [pc, #448]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80118ee:	4b6e      	ldr	r3, [pc, #440]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80118f4:	4b6d      	ldr	r3, [pc, #436]	; (8011aac <ResetMacParameters+0x1cc>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80118fc:	4b6b      	ldr	r3, [pc, #428]	; (8011aac <ResetMacParameters+0x1cc>)
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8011904:	4b69      	ldr	r3, [pc, #420]	; (8011aac <ResetMacParameters+0x1cc>)
 8011906:	2200      	movs	r2, #0
 8011908:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801190c:	4b66      	ldr	r3, [pc, #408]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801190e:	2200      	movs	r2, #0
 8011910:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011914:	4b64      	ldr	r3, [pc, #400]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011916:	2201      	movs	r2, #1
 8011918:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801191c:	4b62      	ldr	r3, [pc, #392]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801191e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011922:	4b61      	ldr	r3, [pc, #388]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011928:	4b5f      	ldr	r3, [pc, #380]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801192a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801192e:	4b5e      	ldr	r3, [pc, #376]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011934:	4b5c      	ldr	r3, [pc, #368]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011936:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801193a:	4b5b      	ldr	r3, [pc, #364]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801193c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011940:	4b59      	ldr	r3, [pc, #356]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011942:	4a59      	ldr	r2, [pc, #356]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011944:	3364      	adds	r3, #100	; 0x64
 8011946:	32a8      	adds	r2, #168	; 0xa8
 8011948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801194c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011950:	4b55      	ldr	r3, [pc, #340]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011952:	4a55      	ldr	r2, [pc, #340]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011954:	336c      	adds	r3, #108	; 0x6c
 8011956:	32b0      	adds	r2, #176	; 0xb0
 8011958:	e892 0003 	ldmia.w	r2, {r0, r1}
 801195c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011960:	4b51      	ldr	r3, [pc, #324]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011962:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011966:	4b50      	ldr	r3, [pc, #320]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801196c:	4b4e      	ldr	r3, [pc, #312]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801196e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8011972:	4b4d      	ldr	r3, [pc, #308]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011974:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011978:	4b4b      	ldr	r3, [pc, #300]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801197a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801197e:	4a4a      	ldr	r2, [pc, #296]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011980:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011982:	4b49      	ldr	r3, [pc, #292]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011988:	4a47      	ldr	r2, [pc, #284]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801198a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 801198c:	4b47      	ldr	r3, [pc, #284]	; (8011aac <ResetMacParameters+0x1cc>)
 801198e:	2200      	movs	r2, #0
 8011990:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8011994:	4b44      	ldr	r3, [pc, #272]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011996:	2200      	movs	r2, #0
 8011998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801199c:	4b42      	ldr	r3, [pc, #264]	; (8011aa8 <ResetMacParameters+0x1c8>)
 801199e:	2200      	movs	r2, #0
 80119a0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 80119a4:	4b40      	ldr	r3, [pc, #256]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80119ac:	2301      	movs	r3, #1
 80119ae:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80119b0:	4b3f      	ldr	r3, [pc, #252]	; (8011ab0 <ResetMacParameters+0x1d0>)
 80119b2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80119b4:	4b3f      	ldr	r3, [pc, #252]	; (8011ab4 <ResetMacParameters+0x1d4>)
 80119b6:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80119b8:	4b3f      	ldr	r3, [pc, #252]	; (8011ab8 <ResetMacParameters+0x1d8>)
 80119ba:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80119bc:	4b3a      	ldr	r3, [pc, #232]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80119be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119c2:	1d3a      	adds	r2, r7, #4
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f004 f8fb 	bl	8015bc2 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80119cc:	4b37      	ldr	r3, [pc, #220]	; (8011aac <ResetMacParameters+0x1cc>)
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80119d4:	4b35      	ldr	r3, [pc, #212]	; (8011aac <ResetMacParameters+0x1cc>)
 80119d6:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 80119da:	4b34      	ldr	r3, [pc, #208]	; (8011aac <ResetMacParameters+0x1cc>)
 80119dc:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80119e0:	4b31      	ldr	r3, [pc, #196]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80119e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119e4:	4a31      	ldr	r2, [pc, #196]	; (8011aac <ResetMacParameters+0x1cc>)
 80119e6:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80119ea:	4b2f      	ldr	r3, [pc, #188]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80119ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80119f0:	4b2e      	ldr	r3, [pc, #184]	; (8011aac <ResetMacParameters+0x1cc>)
 80119f2:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80119f6:	4b2c      	ldr	r3, [pc, #176]	; (8011aa8 <ResetMacParameters+0x1c8>)
 80119f8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80119fc:	4b2b      	ldr	r3, [pc, #172]	; (8011aac <ResetMacParameters+0x1cc>)
 80119fe:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011a02:	4b2a      	ldr	r3, [pc, #168]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011a0a:	4b28      	ldr	r3, [pc, #160]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011a12:	4b25      	ldr	r3, [pc, #148]	; (8011aa8 <ResetMacParameters+0x1c8>)
 8011a14:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011a18:	4b24      	ldr	r3, [pc, #144]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a1a:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011a1e:	4a23      	ldr	r2, [pc, #140]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a20:	4b22      	ldr	r3, [pc, #136]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a22:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8011a26:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8011a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a32:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011a36:	4b1d      	ldr	r3, [pc, #116]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011a3e:	4b1b      	ldr	r3, [pc, #108]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a40:	2202      	movs	r2, #2
 8011a42:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011a4e:	4b17      	ldr	r3, [pc, #92]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a50:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d009      	beq.n	8011a6c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011a58:	4b14      	ldr	r3, [pc, #80]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011a62:	4b12      	ldr	r3, [pc, #72]	; (8011aac <ResetMacParameters+0x1cc>)
 8011a64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a68:	691b      	ldr	r3, [r3, #16]
 8011a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011a6c:	4b13      	ldr	r3, [pc, #76]	; (8011abc <ResetMacParameters+0x1dc>)
 8011a6e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011a70:	4b13      	ldr	r3, [pc, #76]	; (8011ac0 <ResetMacParameters+0x1e0>)
 8011a72:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011a74:	4b13      	ldr	r3, [pc, #76]	; (8011ac4 <ResetMacParameters+0x1e4>)
 8011a76:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011a78:	4b13      	ldr	r3, [pc, #76]	; (8011ac8 <ResetMacParameters+0x1e8>)
 8011a7a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011a7c:	4b13      	ldr	r3, [pc, #76]	; (8011acc <ResetMacParameters+0x1ec>)
 8011a7e:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011a80:	4b13      	ldr	r3, [pc, #76]	; (8011ad0 <ResetMacParameters+0x1f0>)
 8011a82:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011a84:	4b13      	ldr	r3, [pc, #76]	; (8011ad4 <ResetMacParameters+0x1f4>)
 8011a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011a88:	4b13      	ldr	r3, [pc, #76]	; (8011ad8 <ResetMacParameters+0x1f8>)
 8011a8a:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011a8c:	4b13      	ldr	r3, [pc, #76]	; (8011adc <ResetMacParameters+0x1fc>)
 8011a8e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011a90:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011a94:	f107 0314 	add.w	r3, r7, #20
 8011a98:	4a11      	ldr	r2, [pc, #68]	; (8011ae0 <ResetMacParameters+0x200>)
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f002 f8d1 	bl	8013c42 <LoRaMacClassBInit>
}
 8011aa0:	bf00      	nop
 8011aa2:	3740      	adds	r7, #64	; 0x40
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8011aa8:	20000be4 	.word	0x20000be4
 8011aac:	200006c4 	.word	0x200006c4
 8011ab0:	20000dc8 	.word	0x20000dc8
 8011ab4:	20000ddc 	.word	0x20000ddc
 8011ab8:	200016fc 	.word	0x200016fc
 8011abc:	20000b30 	.word	0x20000b30
 8011ac0:	20000ae8 	.word	0x20000ae8
 8011ac4:	20000b1c 	.word	0x20000b1c
 8011ac8:	20000b59 	.word	0x20000b59
 8011acc:	20000cb8 	.word	0x20000cb8
 8011ad0:	20000c24 	.word	0x20000c24
 8011ad4:	20000c28 	.word	0x20000c28
 8011ad8:	20000cbc 	.word	0x20000cbc
 8011adc:	20000d00 	.word	0x20000d00
 8011ae0:	20001158 	.word	0x20001158

08011ae4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f00a fd40 	bl	801c574 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011af4:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <RxWindowSetup+0x58>)
 8011af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011afa:	4b11      	ldr	r3, [pc, #68]	; (8011b40 <RxWindowSetup+0x5c>)
 8011afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b00:	4a10      	ldr	r2, [pc, #64]	; (8011b44 <RxWindowSetup+0x60>)
 8011b02:	6839      	ldr	r1, [r7, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f004 f8c4 	bl	8015c92 <RegionRxConfig>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d010      	beq.n	8011b32 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011b10:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <RxWindowSetup+0x64>)
 8011b12:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 8011b16:	4b0c      	ldr	r3, [pc, #48]	; (8011b48 <RxWindowSetup+0x64>)
 8011b18:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011b1c:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <RxWindowSetup+0x58>)
 8011b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b20:	4a07      	ldr	r2, [pc, #28]	; (8011b40 <RxWindowSetup+0x5c>)
 8011b22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011b24:	4610      	mov	r0, r2
 8011b26:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	7cda      	ldrb	r2, [r3, #19]
 8011b2c:	4b06      	ldr	r3, [pc, #24]	; (8011b48 <RxWindowSetup+0x64>)
 8011b2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8011b32:	bf00      	nop
 8011b34:	3708      	adds	r7, #8
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	0801dc3c 	.word	0x0801dc3c
 8011b40:	20000be4 	.word	0x20000be4
 8011b44:	20000aec 	.word	0x20000aec
 8011b48:	200006c4 	.word	0x200006c4

08011b4c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011b4c:	b590      	push	{r4, r7, lr}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b52:	4b1e      	ldr	r3, [pc, #120]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011b58:	4b1c      	ldr	r3, [pc, #112]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b5e:	b259      	sxtb	r1, r3
 8011b60:	4b1a      	ldr	r3, [pc, #104]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b62:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011b66:	4b19      	ldr	r3, [pc, #100]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b6a:	4c19      	ldr	r4, [pc, #100]	; (8011bd0 <OpenContinuousRxCWindow+0x84>)
 8011b6c:	9400      	str	r4, [sp, #0]
 8011b6e:	f004 f876 	bl	8015c5e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011b72:	4b18      	ldr	r3, [pc, #96]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011b74:	2202      	movs	r2, #2
 8011b76:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011b7a:	4b14      	ldr	r3, [pc, #80]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b7c:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011b80:	4b14      	ldr	r3, [pc, #80]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011b82:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011b86:	4b13      	ldr	r3, [pc, #76]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011b88:	2201      	movs	r2, #1
 8011b8a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011b8e:	4b0f      	ldr	r3, [pc, #60]	; (8011bcc <OpenContinuousRxCWindow+0x80>)
 8011b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b94:	4a10      	ldr	r2, [pc, #64]	; (8011bd8 <OpenContinuousRxCWindow+0x8c>)
 8011b96:	490e      	ldr	r1, [pc, #56]	; (8011bd0 <OpenContinuousRxCWindow+0x84>)
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f004 f87a 	bl	8015c92 <RegionRxConfig>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00f      	beq.n	8011bc4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011ba4:	4b0b      	ldr	r3, [pc, #44]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011ba6:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 8011baa:	4b0a      	ldr	r3, [pc, #40]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011bac:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8011bb0:	4b0a      	ldr	r3, [pc, #40]	; (8011bdc <OpenContinuousRxCWindow+0x90>)
 8011bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011bb8:	4b06      	ldr	r3, [pc, #24]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011bba:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8011bbe:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <OpenContinuousRxCWindow+0x88>)
 8011bc0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8011bc4:	bf00      	nop
 8011bc6:	3704      	adds	r7, #4
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd90      	pop	{r4, r7, pc}
 8011bcc:	20000be4 	.word	0x20000be4
 8011bd0:	20000aac 	.word	0x20000aac
 8011bd4:	200006c4 	.word	0x200006c4
 8011bd8:	20000aec 	.word	0x20000aec
 8011bdc:	0801dc3c 	.word	0x0801dc3c

08011be0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b088      	sub	sp, #32
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	603b      	str	r3, [r7, #0]
 8011bec:	4613      	mov	r3, r2
 8011bee:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011bf0:	4b82      	ldr	r3, [pc, #520]	; (8011dfc <PrepareFrame+0x21c>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011bf6:	4b81      	ldr	r3, [pc, #516]	; (8011dfc <PrepareFrame+0x21c>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d101      	bne.n	8011c14 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011c10:	2300      	movs	r3, #0
 8011c12:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c16:	461a      	mov	r2, r3
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	4879      	ldr	r0, [pc, #484]	; (8011e00 <PrepareFrame+0x220>)
 8011c1c:	f006 fb5f 	bl	80182de <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011c20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	4b75      	ldr	r3, [pc, #468]	; (8011dfc <PrepareFrame+0x21c>)
 8011c26:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	781a      	ldrb	r2, [r3, #0]
 8011c2e:	4b73      	ldr	r3, [pc, #460]	; (8011dfc <PrepareFrame+0x21c>)
 8011c30:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	2b07      	cmp	r3, #7
 8011c3e:	f000 80b9 	beq.w	8011db4 <PrepareFrame+0x1d4>
 8011c42:	2b07      	cmp	r3, #7
 8011c44:	f300 80d0 	bgt.w	8011de8 <PrepareFrame+0x208>
 8011c48:	2b02      	cmp	r3, #2
 8011c4a:	d006      	beq.n	8011c5a <PrepareFrame+0x7a>
 8011c4c:	2b04      	cmp	r3, #4
 8011c4e:	f040 80cb 	bne.w	8011de8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011c52:	4b6a      	ldr	r3, [pc, #424]	; (8011dfc <PrepareFrame+0x21c>)
 8011c54:	2201      	movs	r2, #1
 8011c56:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011c5a:	4b68      	ldr	r3, [pc, #416]	; (8011dfc <PrepareFrame+0x21c>)
 8011c5c:	2204      	movs	r2, #4
 8011c5e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011c62:	4b66      	ldr	r3, [pc, #408]	; (8011dfc <PrepareFrame+0x21c>)
 8011c64:	4a67      	ldr	r2, [pc, #412]	; (8011e04 <PrepareFrame+0x224>)
 8011c66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c6a:	4b64      	ldr	r3, [pc, #400]	; (8011dfc <PrepareFrame+0x21c>)
 8011c6c:	22ff      	movs	r2, #255	; 0xff
 8011c6e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	781a      	ldrb	r2, [r3, #0]
 8011c76:	4b61      	ldr	r3, [pc, #388]	; (8011dfc <PrepareFrame+0x21c>)
 8011c78:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011c7c:	4a5f      	ldr	r2, [pc, #380]	; (8011dfc <PrepareFrame+0x21c>)
 8011c7e:	79fb      	ldrb	r3, [r7, #7]
 8011c80:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011c84:	4b60      	ldr	r3, [pc, #384]	; (8011e08 <PrepareFrame+0x228>)
 8011c86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011c8a:	4a5c      	ldr	r2, [pc, #368]	; (8011dfc <PrepareFrame+0x21c>)
 8011c8c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	781a      	ldrb	r2, [r3, #0]
 8011c94:	4b59      	ldr	r3, [pc, #356]	; (8011dfc <PrepareFrame+0x21c>)
 8011c96:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011c9a:	4b58      	ldr	r3, [pc, #352]	; (8011dfc <PrepareFrame+0x21c>)
 8011c9c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8011ca0:	4b56      	ldr	r3, [pc, #344]	; (8011dfc <PrepareFrame+0x21c>)
 8011ca2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011ca6:	4b55      	ldr	r3, [pc, #340]	; (8011dfc <PrepareFrame+0x21c>)
 8011ca8:	4a55      	ldr	r2, [pc, #340]	; (8011e00 <PrepareFrame+0x220>)
 8011caa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011cae:	f107 0318 	add.w	r3, r7, #24
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f003 f8e6 	bl	8014e84 <LoRaMacCryptoGetFCntUp>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011cbe:	2312      	movs	r3, #18
 8011cc0:	e098      	b.n	8011df4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	4b4d      	ldr	r3, [pc, #308]	; (8011dfc <PrepareFrame+0x21c>)
 8011cc8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011ccc:	4b4b      	ldr	r3, [pc, #300]	; (8011dfc <PrepareFrame+0x21c>)
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011cd4:	4b49      	ldr	r3, [pc, #292]	; (8011dfc <PrepareFrame+0x21c>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	4a47      	ldr	r2, [pc, #284]	; (8011dfc <PrepareFrame+0x21c>)
 8011ce0:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011ce4:	f107 0314 	add.w	r3, r7, #20
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f002 fa83 	bl	80141f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cf4:	2313      	movs	r3, #19
 8011cf6:	e07d      	b.n	8011df4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d076      	beq.n	8011dec <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011cfe:	4b42      	ldr	r3, [pc, #264]	; (8011e08 <PrepareFrame+0x228>)
 8011d00:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fe fd5b 	bl	80107c0 <GetMaxAppPayloadWithoutFOptsLength>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011d0e:	4b3b      	ldr	r3, [pc, #236]	; (8011dfc <PrepareFrame+0x21c>)
 8011d10:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d01d      	beq.n	8011d54 <PrepareFrame+0x174>
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2b0f      	cmp	r3, #15
 8011d1c:	d81a      	bhi.n	8011d54 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011d1e:	f107 0314 	add.w	r3, r7, #20
 8011d22:	4a3a      	ldr	r2, [pc, #232]	; (8011e0c <PrepareFrame+0x22c>)
 8011d24:	4619      	mov	r1, r3
 8011d26:	200f      	movs	r0, #15
 8011d28:	f002 fa7a 	bl	8014220 <LoRaMacCommandsSerializeCmds>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d32:	2313      	movs	r3, #19
 8011d34:	e05e      	b.n	8011df4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	f003 030f 	and.w	r3, r3, #15
 8011d3c:	b2d9      	uxtb	r1, r3
 8011d3e:	68ba      	ldr	r2, [r7, #8]
 8011d40:	7813      	ldrb	r3, [r2, #0]
 8011d42:	f361 0303 	bfi	r3, r1, #0, #4
 8011d46:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	781a      	ldrb	r2, [r3, #0]
 8011d4c:	4b2b      	ldr	r3, [pc, #172]	; (8011dfc <PrepareFrame+0x21c>)
 8011d4e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011d52:	e04b      	b.n	8011dec <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011d54:	4b29      	ldr	r3, [pc, #164]	; (8011dfc <PrepareFrame+0x21c>)
 8011d56:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d010      	beq.n	8011d80 <PrepareFrame+0x1a0>
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b0f      	cmp	r3, #15
 8011d62:	d90d      	bls.n	8011d80 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011d64:	7ffb      	ldrb	r3, [r7, #31]
 8011d66:	f107 0114 	add.w	r1, r7, #20
 8011d6a:	4a29      	ldr	r2, [pc, #164]	; (8011e10 <PrepareFrame+0x230>)
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f002 fa57 	bl	8014220 <LoRaMacCommandsSerializeCmds>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d001      	beq.n	8011d7c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d78:	2313      	movs	r3, #19
 8011d7a:	e03b      	b.n	8011df4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011d7c:	230a      	movs	r3, #10
 8011d7e:	e039      	b.n	8011df4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011d80:	7ffb      	ldrb	r3, [r7, #31]
 8011d82:	f107 0114 	add.w	r1, r7, #20
 8011d86:	4a22      	ldr	r2, [pc, #136]	; (8011e10 <PrepareFrame+0x230>)
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f002 fa49 	bl	8014220 <LoRaMacCommandsSerializeCmds>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d94:	2313      	movs	r3, #19
 8011d96:	e02d      	b.n	8011df4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011d98:	4b18      	ldr	r3, [pc, #96]	; (8011dfc <PrepareFrame+0x21c>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011da0:	4b16      	ldr	r3, [pc, #88]	; (8011dfc <PrepareFrame+0x21c>)
 8011da2:	4a1b      	ldr	r2, [pc, #108]	; (8011e10 <PrepareFrame+0x230>)
 8011da4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	4b13      	ldr	r3, [pc, #76]	; (8011dfc <PrepareFrame+0x21c>)
 8011dae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8011db2:	e01b      	b.n	8011dec <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d01a      	beq.n	8011df0 <PrepareFrame+0x210>
 8011dba:	4b10      	ldr	r3, [pc, #64]	; (8011dfc <PrepareFrame+0x21c>)
 8011dbc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d015      	beq.n	8011df0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011dc4:	4813      	ldr	r0, [pc, #76]	; (8011e14 <PrepareFrame+0x234>)
 8011dc6:	4b0d      	ldr	r3, [pc, #52]	; (8011dfc <PrepareFrame+0x21c>)
 8011dc8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	461a      	mov	r2, r3
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	f006 fa84 	bl	80182de <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011dd6:	4b09      	ldr	r3, [pc, #36]	; (8011dfc <PrepareFrame+0x21c>)
 8011dd8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	3301      	adds	r3, #1
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	4b06      	ldr	r3, [pc, #24]	; (8011dfc <PrepareFrame+0x21c>)
 8011de4:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011de6:	e003      	b.n	8011df0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011de8:	2302      	movs	r3, #2
 8011dea:	e003      	b.n	8011df4 <PrepareFrame+0x214>
            break;
 8011dec:	bf00      	nop
 8011dee:	e000      	b.n	8011df2 <PrepareFrame+0x212>
            break;
 8011df0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3720      	adds	r7, #32
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	200006c4 	.word	0x200006c4
 8011e00:	200007fc 	.word	0x200007fc
 8011e04:	200006c6 	.word	0x200006c6
 8011e08:	20000be4 	.word	0x20000be4
 8011e0c:	200007dc 	.word	0x200007dc
 8011e10:	20000b64 	.word	0x20000b64
 8011e14:	200006c7 	.word	0x200006c7

08011e18 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08a      	sub	sp, #40	; 0x28
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	4603      	mov	r3, r0
 8011e20:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e22:	2303      	movs	r3, #3
 8011e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011e2c:	79fb      	ldrb	r3, [r7, #7]
 8011e2e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e30:	4b4a      	ldr	r3, [pc, #296]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e32:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011e36:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011e38:	4b48      	ldr	r3, [pc, #288]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e3a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011e3e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011e40:	4b46      	ldr	r3, [pc, #280]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e44:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011e46:	4b45      	ldr	r3, [pc, #276]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e4a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011e4c:	4b44      	ldr	r3, [pc, #272]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011e52:	4b42      	ldr	r3, [pc, #264]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e54:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011e58:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011e5a:	4b40      	ldr	r3, [pc, #256]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e5c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011e60:	f107 020f 	add.w	r2, r7, #15
 8011e64:	f107 0110 	add.w	r1, r7, #16
 8011e68:	4b3e      	ldr	r3, [pc, #248]	; (8011f64 <SendFrameOnChannel+0x14c>)
 8011e6a:	f003 ff27 	bl	8015cbc <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e6e:	4b3c      	ldr	r3, [pc, #240]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e70:	2201      	movs	r2, #1
 8011e72:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e76:	4b39      	ldr	r3, [pc, #228]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011e78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	4b38      	ldr	r3, [pc, #224]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e80:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011e84:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011e88:	4b35      	ldr	r3, [pc, #212]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e8a:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	4a33      	ldr	r2, [pc, #204]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e92:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011e96:	4b32      	ldr	r3, [pc, #200]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e98:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8011e9c:	4a30      	ldr	r2, [pc, #192]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011e9e:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011ea2:	4b2f      	ldr	r3, [pc, #188]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011ea4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8011ea8:	4a2d      	ldr	r2, [pc, #180]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011eaa:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011eae:	f001 ff34 	bl	8013d1a <LoRaMacClassBIsBeaconModeActive>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00b      	beq.n	8011ed0 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011eb8:	4b29      	ldr	r3, [pc, #164]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011eba:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f001 ff96 	bl	8013df0 <LoRaMacClassBIsUplinkCollision>
 8011ec4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011ec6:	6a3b      	ldr	r3, [r7, #32]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d001      	beq.n	8011ed0 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011ecc:	2310      	movs	r3, #16
 8011ece:	e040      	b.n	8011f52 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011ed0:	4b22      	ldr	r3, [pc, #136]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011ed2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d101      	bne.n	8011ede <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011eda:	f001 ff93 	bl	8013e04 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011ede:	f001 ff2d 	bl	8013d3c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011ee2:	4b1e      	ldr	r3, [pc, #120]	; (8011f5c <SendFrameOnChannel+0x144>)
 8011ee4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	4a1d      	ldr	r2, [pc, #116]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011eec:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7ff fc64 	bl	80117c0 <SecureFrame>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d002      	beq.n	8011f0c <SendFrameOnChannel+0xf4>
    {
        return status;
 8011f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f0a:	e022      	b.n	8011f52 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011f0c:	4b14      	ldr	r3, [pc, #80]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f12:	f043 0302 	orr.w	r3, r3, #2
 8011f16:	4a12      	ldr	r2, [pc, #72]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f18:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011f1c:	4b10      	ldr	r3, [pc, #64]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f1e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011f22:	3301      	adds	r3, #1
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	4b0e      	ldr	r3, [pc, #56]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f28:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011f2c:	4b0c      	ldr	r3, [pc, #48]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f2e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8011f32:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f34:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8011f38:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011f40:	4b09      	ldr	r3, [pc, #36]	; (8011f68 <SendFrameOnChannel+0x150>)
 8011f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f44:	4a06      	ldr	r2, [pc, #24]	; (8011f60 <SendFrameOnChannel+0x148>)
 8011f46:	8812      	ldrh	r2, [r2, #0]
 8011f48:	b2d2      	uxtb	r2, r2
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4807      	ldr	r0, [pc, #28]	; (8011f6c <SendFrameOnChannel+0x154>)
 8011f4e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011f50:	2300      	movs	r3, #0
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3728      	adds	r7, #40	; 0x28
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	20000be4 	.word	0x20000be4
 8011f60:	200006c4 	.word	0x200006c4
 8011f64:	20000ae4 	.word	0x20000ae4
 8011f68:	0801dc3c 	.word	0x0801dc3c
 8011f6c:	200006c6 	.word	0x200006c6

08011f70 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	80fb      	strh	r3, [r7, #6]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011f80:	4b09      	ldr	r3, [pc, #36]	; (8011fa8 <SetTxContinuousWave+0x38>)
 8011f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f84:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011f88:	88fa      	ldrh	r2, [r7, #6]
 8011f8a:	6838      	ldr	r0, [r7, #0]
 8011f8c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011f8e:	4b07      	ldr	r3, [pc, #28]	; (8011fac <SetTxContinuousWave+0x3c>)
 8011f90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f94:	f043 0302 	orr.w	r3, r3, #2
 8011f98:	4a04      	ldr	r2, [pc, #16]	; (8011fac <SetTxContinuousWave+0x3c>)
 8011f9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011f9e:	2300      	movs	r3, #0
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	0801dc3c 	.word	0x0801dc3c
 8011fac:	200006c4 	.word	0x200006c4

08011fb0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011fba:	4b3e      	ldr	r3, [pc, #248]	; (80120b4 <RestoreNvmData+0x104>)
 8011fbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d001      	beq.n	8011fc8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e071      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011fc8:	2124      	movs	r1, #36	; 0x24
 8011fca:	483b      	ldr	r0, [pc, #236]	; (80120b8 <RestoreNvmData+0x108>)
 8011fcc:	f006 f9dc 	bl	8018388 <Crc32>
 8011fd0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8011fd2:	4b39      	ldr	r3, [pc, #228]	; (80120b8 <RestoreNvmData+0x108>)
 8011fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d001      	beq.n	8011fe0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011fdc:	2317      	movs	r3, #23
 8011fde:	e065      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8011fe0:	2114      	movs	r1, #20
 8011fe2:	4836      	ldr	r0, [pc, #216]	; (80120bc <RestoreNvmData+0x10c>)
 8011fe4:	f006 f9d0 	bl	8018388 <Crc32>
 8011fe8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011fea:	4b33      	ldr	r3, [pc, #204]	; (80120b8 <RestoreNvmData+0x108>)
 8011fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d001      	beq.n	8011ff8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011ff4:	2317      	movs	r3, #23
 8011ff6:	e059      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011ff8:	21e0      	movs	r1, #224	; 0xe0
 8011ffa:	4831      	ldr	r0, [pc, #196]	; (80120c0 <RestoreNvmData+0x110>)
 8011ffc:	f006 f9c4 	bl	8018388 <Crc32>
 8012000:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012002:	4b2d      	ldr	r3, [pc, #180]	; (80120b8 <RestoreNvmData+0x108>)
 8012004:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	429a      	cmp	r2, r3
 801200c:	d001      	beq.n	8012012 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801200e:	2317      	movs	r3, #23
 8012010:	e04c      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012012:	21bc      	movs	r1, #188	; 0xbc
 8012014:	482b      	ldr	r0, [pc, #172]	; (80120c4 <RestoreNvmData+0x114>)
 8012016:	f006 f9b7 	bl	8018388 <Crc32>
 801201a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801201c:	4b26      	ldr	r3, [pc, #152]	; (80120b8 <RestoreNvmData+0x108>)
 801201e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	429a      	cmp	r2, r3
 8012026:	d001      	beq.n	801202c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012028:	2317      	movs	r3, #23
 801202a:	e03f      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801202c:	2110      	movs	r1, #16
 801202e:	4826      	ldr	r0, [pc, #152]	; (80120c8 <RestoreNvmData+0x118>)
 8012030:	f006 f9aa 	bl	8018388 <Crc32>
 8012034:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012036:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <RestoreNvmData+0x108>)
 8012038:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	429a      	cmp	r2, r3
 8012040:	d001      	beq.n	8012046 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012042:	2317      	movs	r3, #23
 8012044:	e032      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012046:	2114      	movs	r1, #20
 8012048:	4820      	ldr	r0, [pc, #128]	; (80120cc <RestoreNvmData+0x11c>)
 801204a:	f006 f99d 	bl	8018388 <Crc32>
 801204e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8012050:	4b19      	ldr	r3, [pc, #100]	; (80120b8 <RestoreNvmData+0x108>)
 8012052:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	429a      	cmp	r2, r3
 801205a:	d001      	beq.n	8012060 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801205c:	2317      	movs	r3, #23
 801205e:	e025      	b.n	80120ac <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012060:	f240 528c 	movw	r2, #1420	; 0x58c
 8012064:	4914      	ldr	r1, [pc, #80]	; (80120b8 <RestoreNvmData+0x108>)
 8012066:	481a      	ldr	r0, [pc, #104]	; (80120d0 <RestoreNvmData+0x120>)
 8012068:	f006 f939 	bl	80182de <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801206c:	f240 528c 	movw	r2, #1420	; 0x58c
 8012070:	2100      	movs	r1, #0
 8012072:	4811      	ldr	r0, [pc, #68]	; (80120b8 <RestoreNvmData+0x108>)
 8012074:	f006 f96e 	bl	8018354 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012078:	4b0e      	ldr	r3, [pc, #56]	; (80120b4 <RestoreNvmData+0x104>)
 801207a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 801207e:	4b0d      	ldr	r3, [pc, #52]	; (80120b4 <RestoreNvmData+0x104>)
 8012080:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012084:	4b12      	ldr	r3, [pc, #72]	; (80120d0 <RestoreNvmData+0x120>)
 8012086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012088:	4a0a      	ldr	r2, [pc, #40]	; (80120b4 <RestoreNvmData+0x104>)
 801208a:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801208e:	4b10      	ldr	r3, [pc, #64]	; (80120d0 <RestoreNvmData+0x120>)
 8012090:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012094:	4b07      	ldr	r3, [pc, #28]	; (80120b4 <RestoreNvmData+0x104>)
 8012096:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801209a:	4b06      	ldr	r3, [pc, #24]	; (80120b4 <RestoreNvmData+0x104>)
 801209c:	2201      	movs	r2, #1
 801209e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120a2:	4b04      	ldr	r3, [pc, #16]	; (80120b4 <RestoreNvmData+0x104>)
 80120a4:	2202      	movs	r2, #2
 80120a6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3708      	adds	r7, #8
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}
 80120b4:	200006c4 	.word	0x200006c4
 80120b8:	20001170 	.word	0x20001170
 80120bc:	20001198 	.word	0x20001198
 80120c0:	200011b0 	.word	0x200011b0
 80120c4:	20001294 	.word	0x20001294
 80120c8:	20001354 	.word	0x20001354
 80120cc:	200016e4 	.word	0x200016e4
 80120d0:	20000be4 	.word	0x20000be4

080120d4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80120d4:	b480      	push	{r7}
 80120d6:	b083      	sub	sp, #12
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d002      	beq.n	80120ea <DetermineFrameType+0x16>
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120ea:	2303      	movs	r3, #3
 80120ec:	e03b      	b.n	8012166 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	7b1b      	ldrb	r3, [r3, #12]
 80120f2:	f003 030f 	and.w	r3, r3, #15
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d008      	beq.n	801210e <DetermineFrameType+0x3a>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d003      	beq.n	801210e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	2200      	movs	r2, #0
 801210a:	701a      	strb	r2, [r3, #0]
 801210c:	e02a      	b.n	8012164 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012114:	2b00      	cmp	r3, #0
 8012116:	d103      	bne.n	8012120 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2201      	movs	r2, #1
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	e021      	b.n	8012164 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	7b1b      	ldrb	r3, [r3, #12]
 8012124:	f003 030f 	and.w	r3, r3, #15
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d108      	bne.n	8012140 <DetermineFrameType+0x6c>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d103      	bne.n	8012140 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	2202      	movs	r2, #2
 801213c:	701a      	strb	r2, [r3, #0]
 801213e:	e011      	b.n	8012164 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	7b1b      	ldrb	r3, [r3, #12]
 8012144:	f003 030f 	and.w	r3, r3, #15
 8012148:	b2db      	uxtb	r3, r3
 801214a:	2b00      	cmp	r3, #0
 801214c:	d108      	bne.n	8012160 <DetermineFrameType+0x8c>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d003      	beq.n	8012160 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2203      	movs	r2, #3
 801215c:	701a      	strb	r2, [r3, #0]
 801215e:	e001      	b.n	8012164 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012160:	2318      	movs	r3, #24
 8012162:	e000      	b.n	8012166 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012164:	2300      	movs	r3, #0
}
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	bc80      	pop	{r7}
 801216e:	4770      	bx	lr

08012170 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	460a      	mov	r2, r1
 801217a:	71fb      	strb	r3, [r7, #7]
 801217c:	4613      	mov	r3, r2
 801217e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8012180:	79fa      	ldrb	r2, [r7, #7]
 8012182:	79bb      	ldrb	r3, [r7, #6]
 8012184:	429a      	cmp	r2, r3
 8012186:	d301      	bcc.n	801218c <CheckRetrans+0x1c>
    {
        return true;
 8012188:	2301      	movs	r3, #1
 801218a:	e000      	b.n	801218e <CheckRetrans+0x1e>
    }
    return false;
 801218c:	2300      	movs	r3, #0
}
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	bc80      	pop	{r7}
 8012196:	4770      	bx	lr

08012198 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801219c:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <CheckRetransUnconfirmedUplink+0x50>)
 801219e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80121a2:	4a12      	ldr	r2, [pc, #72]	; (80121ec <CheckRetransUnconfirmedUplink+0x54>)
 80121a4:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80121a8:	4611      	mov	r1, r2
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff ffe0 	bl	8012170 <CheckRetrans>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d001      	beq.n	80121ba <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80121b6:	2301      	movs	r3, #1
 80121b8:	e014      	b.n	80121e4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80121ba:	4b0b      	ldr	r3, [pc, #44]	; (80121e8 <CheckRetransUnconfirmedUplink+0x50>)
 80121bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80121c0:	f003 0302 	and.w	r3, r3, #2
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00b      	beq.n	80121e2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80121ca:	4b07      	ldr	r3, [pc, #28]	; (80121e8 <CheckRetransUnconfirmedUplink+0x50>)
 80121cc:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d004      	beq.n	80121de <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80121d4:	4b04      	ldr	r3, [pc, #16]	; (80121e8 <CheckRetransUnconfirmedUplink+0x50>)
 80121d6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d101      	bne.n	80121e2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80121de:	2301      	movs	r3, #1
 80121e0:	e000      	b.n	80121e4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	200006c4 	.word	0x200006c4
 80121ec:	20000be4 	.word	0x20000be4

080121f0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80121f4:	4b10      	ldr	r3, [pc, #64]	; (8012238 <CheckRetransConfirmedUplink+0x48>)
 80121f6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80121fa:	4a10      	ldr	r2, [pc, #64]	; (801223c <CheckRetransConfirmedUplink+0x4c>)
 80121fc:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff ffb4 	bl	8012170 <CheckRetrans>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801220e:	2301      	movs	r3, #1
 8012210:	e00f      	b.n	8012232 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012212:	4b09      	ldr	r3, [pc, #36]	; (8012238 <CheckRetransConfirmedUplink+0x48>)
 8012214:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8012218:	f003 0302 	and.w	r3, r3, #2
 801221c:	b2db      	uxtb	r3, r3
 801221e:	2b00      	cmp	r3, #0
 8012220:	d006      	beq.n	8012230 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012222:	4b05      	ldr	r3, [pc, #20]	; (8012238 <CheckRetransConfirmedUplink+0x48>)
 8012224:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801222c:	2301      	movs	r3, #1
 801222e:	e000      	b.n	8012232 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	200006c4 	.word	0x200006c4
 801223c:	20000be4 	.word	0x20000be4

08012240 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224e:	d002      	beq.n	8012256 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	3301      	adds	r3, #1
 8012254:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012256:	687b      	ldr	r3, [r7, #4]
}
 8012258:	4618      	mov	r0, r3
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	bc80      	pop	{r7}
 8012260:	4770      	bx	lr
	...

08012264 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012268:	4b1a      	ldr	r3, [pc, #104]	; (80122d4 <StopRetransmission+0x70>)
 801226a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 801226e:	f003 0302 	and.w	r3, r3, #2
 8012272:	b2db      	uxtb	r3, r3
 8012274:	2b00      	cmp	r3, #0
 8012276:	d009      	beq.n	801228c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012278:	4b16      	ldr	r3, [pc, #88]	; (80122d4 <StopRetransmission+0x70>)
 801227a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801227e:	2b00      	cmp	r3, #0
 8012280:	d011      	beq.n	80122a6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012282:	4b14      	ldr	r3, [pc, #80]	; (80122d4 <StopRetransmission+0x70>)
 8012284:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012288:	2b01      	cmp	r3, #1
 801228a:	d00c      	beq.n	80122a6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801228c:	4b12      	ldr	r3, [pc, #72]	; (80122d8 <StopRetransmission+0x74>)
 801228e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012292:	2b00      	cmp	r3, #0
 8012294:	d007      	beq.n	80122a6 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012296:	4b10      	ldr	r3, [pc, #64]	; (80122d8 <StopRetransmission+0x74>)
 8012298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801229a:	4618      	mov	r0, r3
 801229c:	f7ff ffd0 	bl	8012240 <IncreaseAdrAckCounter>
 80122a0:	4603      	mov	r3, r0
 80122a2:	4a0d      	ldr	r2, [pc, #52]	; (80122d8 <StopRetransmission+0x74>)
 80122a4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80122a6:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <StopRetransmission+0x70>)
 80122a8:	2200      	movs	r2, #0
 80122aa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 80122ae:	4b09      	ldr	r3, [pc, #36]	; (80122d4 <StopRetransmission+0x70>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80122b6:	4b07      	ldr	r3, [pc, #28]	; (80122d4 <StopRetransmission+0x70>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80122be:	4b05      	ldr	r3, [pc, #20]	; (80122d4 <StopRetransmission+0x70>)
 80122c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80122c4:	f023 0302 	bic.w	r3, r3, #2
 80122c8:	4a02      	ldr	r2, [pc, #8]	; (80122d4 <StopRetransmission+0x70>)
 80122ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80122ce:	2301      	movs	r3, #1
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	200006c4 	.word	0x200006c4
 80122d8:	20000be4 	.word	0x20000be4

080122dc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	4603      	mov	r3, r0
 80122e4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80122e6:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <CallNvmDataChangeCallback+0x38>)
 80122e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00c      	beq.n	801230a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80122f0:	4b08      	ldr	r3, [pc, #32]	; (8012314 <CallNvmDataChangeCallback+0x38>)
 80122f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80122f6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d006      	beq.n	801230a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80122fc:	4b05      	ldr	r3, [pc, #20]	; (8012314 <CallNvmDataChangeCallback+0x38>)
 80122fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	88fa      	ldrh	r2, [r7, #6]
 8012306:	4610      	mov	r0, r2
 8012308:	4798      	blx	r3
    }
}
 801230a:	bf00      	nop
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	200006c4 	.word	0x200006c4

08012318 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012318:	b480      	push	{r7}
 801231a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801231c:	4b0b      	ldr	r3, [pc, #44]	; (801234c <IsRequestPending+0x34>)
 801231e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8012322:	f003 0304 	and.w	r3, r3, #4
 8012326:	b2db      	uxtb	r3, r3
 8012328:	2b00      	cmp	r3, #0
 801232a:	d107      	bne.n	801233c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801232c:	4b07      	ldr	r3, [pc, #28]	; (801234c <IsRequestPending+0x34>)
 801232e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012338:	2b00      	cmp	r3, #0
 801233a:	d001      	beq.n	8012340 <IsRequestPending+0x28>
    {
        return 1;
 801233c:	2301      	movs	r3, #1
 801233e:	e000      	b.n	8012342 <IsRequestPending+0x2a>
    }
    return 0;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	46bd      	mov	sp, r7
 8012346:	bc80      	pop	{r7}
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop
 801234c:	200006c4 	.word	0x200006c4

08012350 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012350:	b590      	push	{r4, r7, lr}
 8012352:	b091      	sub	sp, #68	; 0x44
 8012354:	af02      	add	r7, sp, #8
 8012356:	6178      	str	r0, [r7, #20]
 8012358:	6139      	str	r1, [r7, #16]
 801235a:	4613      	mov	r3, r2
 801235c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d002      	beq.n	801236a <LoRaMacInitialization+0x1a>
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d101      	bne.n	801236e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801236a:	2303      	movs	r3, #3
 801236c:	e27c      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00b      	beq.n	801238e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801237a:	2b00      	cmp	r3, #0
 801237c:	d007      	beq.n	801238e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012382:	2b00      	cmp	r3, #0
 8012384:	d003      	beq.n	801238e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801238a:	2b00      	cmp	r3, #0
 801238c:	d101      	bne.n	8012392 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801238e:	2303      	movs	r3, #3
 8012390:	e26a      	b.n	8012868 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	4618      	mov	r0, r3
 8012396:	f003 fbdb 	bl	8015b50 <RegionIsActive>
 801239a:	4603      	mov	r3, r0
 801239c:	f083 0301 	eor.w	r3, r3, #1
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80123a6:	2309      	movs	r3, #9
 80123a8:	e25e      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80123aa:	6978      	ldr	r0, [r7, #20]
 80123ac:	f002 f882 	bl	80144b4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80123b0:	f240 528c 	movw	r2, #1420	; 0x58c
 80123b4:	2100      	movs	r1, #0
 80123b6:	48c7      	ldr	r0, [pc, #796]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123b8:	f005 ffcc 	bl	8018354 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80123bc:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80123c0:	2100      	movs	r1, #0
 80123c2:	48c5      	ldr	r0, [pc, #788]	; (80126d8 <LoRaMacInitialization+0x388>)
 80123c4:	f005 ffc6 	bl	8018354 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80123c8:	4ac2      	ldr	r2, [pc, #776]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123ca:	7bfb      	ldrb	r3, [r7, #15]
 80123cc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80123d0:	4bc0      	ldr	r3, [pc, #768]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123d2:	2200      	movs	r2, #0
 80123d4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80123d8:	4bbe      	ldr	r3, [pc, #760]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123da:	2200      	movs	r2, #0
 80123dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80123e0:	4bbc      	ldr	r3, [pc, #752]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123e2:	4abe      	ldr	r2, [pc, #760]	; (80126dc <LoRaMacInitialization+0x38c>)
 80123e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80123e8:	2300      	movs	r3, #0
 80123ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80123ee:	4bbc      	ldr	r3, [pc, #752]	; (80126e0 <LoRaMacInitialization+0x390>)
 80123f0:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80123f2:	4bbc      	ldr	r3, [pc, #752]	; (80126e4 <LoRaMacInitialization+0x394>)
 80123f4:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80123f6:	4bbc      	ldr	r3, [pc, #752]	; (80126e8 <LoRaMacInitialization+0x398>)
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80123fa:	4bb6      	ldr	r3, [pc, #728]	; (80126d4 <LoRaMacInitialization+0x384>)
 80123fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012400:	f107 021c 	add.w	r2, r7, #28
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f003 fbdb 	bl	8015bc2 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801240c:	230f      	movs	r3, #15
 801240e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012412:	4bb0      	ldr	r3, [pc, #704]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012418:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801241c:	4611      	mov	r1, r2
 801241e:	4618      	mov	r0, r3
 8012420:	f003 fba6 	bl	8015b70 <RegionGetPhyParam>
 8012424:	4603      	mov	r3, r0
 8012426:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242a:	2b00      	cmp	r3, #0
 801242c:	bf14      	ite	ne
 801242e:	2301      	movne	r3, #1
 8012430:	2300      	moveq	r3, #0
 8012432:	b2da      	uxtb	r2, r3
 8012434:	4ba7      	ldr	r3, [pc, #668]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012436:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801243a:	230a      	movs	r3, #10
 801243c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012440:	4ba4      	ldr	r3, [pc, #656]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012446:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801244a:	4611      	mov	r1, r2
 801244c:	4618      	mov	r0, r3
 801244e:	f003 fb8f 	bl	8015b70 <RegionGetPhyParam>
 8012452:	4603      	mov	r3, r0
 8012454:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012458:	b25a      	sxtb	r2, r3
 801245a:	4b9e      	ldr	r3, [pc, #632]	; (80126d4 <LoRaMacInitialization+0x384>)
 801245c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012460:	2306      	movs	r3, #6
 8012462:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012466:	4b9b      	ldr	r3, [pc, #620]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801246c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012470:	4611      	mov	r1, r2
 8012472:	4618      	mov	r0, r3
 8012474:	f003 fb7c 	bl	8015b70 <RegionGetPhyParam>
 8012478:	4603      	mov	r3, r0
 801247a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247e:	b25a      	sxtb	r2, r3
 8012480:	4b94      	ldr	r3, [pc, #592]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012482:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012486:	2310      	movs	r3, #16
 8012488:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801248c:	4b91      	ldr	r3, [pc, #580]	; (80126d4 <LoRaMacInitialization+0x384>)
 801248e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012492:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012496:	4611      	mov	r1, r2
 8012498:	4618      	mov	r0, r3
 801249a:	f003 fb69 	bl	8015b70 <RegionGetPhyParam>
 801249e:	4603      	mov	r3, r0
 80124a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80124a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a4:	4a8b      	ldr	r2, [pc, #556]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80124aa:	2311      	movs	r3, #17
 80124ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124b0:	4b88      	ldr	r3, [pc, #544]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80124ba:	4611      	mov	r1, r2
 80124bc:	4618      	mov	r0, r3
 80124be:	f003 fb57 	bl	8015b70 <RegionGetPhyParam>
 80124c2:	4603      	mov	r3, r0
 80124c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	4a82      	ldr	r2, [pc, #520]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80124ce:	2312      	movs	r3, #18
 80124d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124d4:	4b7f      	ldr	r3, [pc, #508]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80124de:	4611      	mov	r1, r2
 80124e0:	4618      	mov	r0, r3
 80124e2:	f003 fb45 	bl	8015b70 <RegionGetPhyParam>
 80124e6:	4603      	mov	r3, r0
 80124e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80124ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ec:	4a79      	ldr	r2, [pc, #484]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80124f2:	2313      	movs	r3, #19
 80124f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124f8:	4b76      	ldr	r3, [pc, #472]	; (80126d4 <LoRaMacInitialization+0x384>)
 80124fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f003 fb33 	bl	8015b70 <RegionGetPhyParam>
 801250a:	4603      	mov	r3, r0
 801250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	4a70      	ldr	r2, [pc, #448]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012512:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012516:	2314      	movs	r3, #20
 8012518:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801251c:	4b6d      	ldr	r3, [pc, #436]	; (80126d4 <LoRaMacInitialization+0x384>)
 801251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012522:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012526:	4611      	mov	r1, r2
 8012528:	4618      	mov	r0, r3
 801252a:	f003 fb21 	bl	8015b70 <RegionGetPhyParam>
 801252e:	4603      	mov	r3, r0
 8012530:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	4a67      	ldr	r2, [pc, #412]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012536:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801253a:	2316      	movs	r3, #22
 801253c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012540:	4b64      	ldr	r3, [pc, #400]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012546:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801254a:	4611      	mov	r1, r2
 801254c:	4618      	mov	r0, r3
 801254e:	f003 fb0f 	bl	8015b70 <RegionGetPhyParam>
 8012552:	4603      	mov	r3, r0
 8012554:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012558:	b2da      	uxtb	r2, r3
 801255a:	4b5e      	ldr	r3, [pc, #376]	; (80126d4 <LoRaMacInitialization+0x384>)
 801255c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012560:	2317      	movs	r3, #23
 8012562:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012566:	4b5b      	ldr	r3, [pc, #364]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801256c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012570:	4611      	mov	r1, r2
 8012572:	4618      	mov	r0, r3
 8012574:	f003 fafc 	bl	8015b70 <RegionGetPhyParam>
 8012578:	4603      	mov	r3, r0
 801257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257e:	4a55      	ldr	r2, [pc, #340]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012580:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012586:	4a53      	ldr	r2, [pc, #332]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012588:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801258c:	2318      	movs	r3, #24
 801258e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012592:	4b50      	ldr	r3, [pc, #320]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012598:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801259c:	4611      	mov	r1, r2
 801259e:	4618      	mov	r0, r3
 80125a0:	f003 fae6 	bl	8015b70 <RegionGetPhyParam>
 80125a4:	4603      	mov	r3, r0
 80125a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80125a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125aa:	b2da      	uxtb	r2, r3
 80125ac:	4b49      	ldr	r3, [pc, #292]	; (80126d4 <LoRaMacInitialization+0x384>)
 80125ae:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	4b47      	ldr	r3, [pc, #284]	; (80126d4 <LoRaMacInitialization+0x384>)
 80125b8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80125bc:	231d      	movs	r3, #29
 80125be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125c2:	4b44      	ldr	r3, [pc, #272]	; (80126d4 <LoRaMacInitialization+0x384>)
 80125c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f003 face 	bl	8015b70 <RegionGetPhyParam>
 80125d4:	4603      	mov	r3, r0
 80125d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80125d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125da:	b2da      	uxtb	r2, r3
 80125dc:	4b3d      	ldr	r3, [pc, #244]	; (80126d4 <LoRaMacInitialization+0x384>)
 80125de:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80125e2:	231e      	movs	r3, #30
 80125e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125e8:	4b3a      	ldr	r3, [pc, #232]	; (80126d4 <LoRaMacInitialization+0x384>)
 80125ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f003 fabb 	bl	8015b70 <RegionGetPhyParam>
 80125fa:	4603      	mov	r3, r0
 80125fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80125fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012600:	b2da      	uxtb	r2, r3
 8012602:	4b34      	ldr	r3, [pc, #208]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012604:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012608:	231f      	movs	r3, #31
 801260a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801260e:	4b31      	ldr	r3, [pc, #196]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012614:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012618:	4611      	mov	r1, r2
 801261a:	4618      	mov	r0, r3
 801261c:	f003 faa8 	bl	8015b70 <RegionGetPhyParam>
 8012620:	4603      	mov	r3, r0
 8012622:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	4a2b      	ldr	r2, [pc, #172]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012628:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801262c:	2320      	movs	r3, #32
 801262e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012632:	4b28      	ldr	r3, [pc, #160]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012638:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801263c:	4611      	mov	r1, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f003 fa96 	bl	8015b70 <RegionGetPhyParam>
 8012644:	4603      	mov	r3, r0
 8012646:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264a:	4a22      	ldr	r2, [pc, #136]	; (80126d4 <LoRaMacInitialization+0x384>)
 801264c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012650:	230b      	movs	r3, #11
 8012652:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012656:	4b1f      	ldr	r3, [pc, #124]	; (80126d4 <LoRaMacInitialization+0x384>)
 8012658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801265c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f003 fa84 	bl	8015b70 <RegionGetPhyParam>
 8012668:	4603      	mov	r3, r0
 801266a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 801266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266e:	b29a      	uxth	r2, r3
 8012670:	4b19      	ldr	r3, [pc, #100]	; (80126d8 <LoRaMacInitialization+0x388>)
 8012672:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012676:	230c      	movs	r3, #12
 8012678:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801267c:	4b15      	ldr	r3, [pc, #84]	; (80126d4 <LoRaMacInitialization+0x384>)
 801267e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012682:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012686:	4611      	mov	r1, r2
 8012688:	4618      	mov	r0, r3
 801268a:	f003 fa71 	bl	8015b70 <RegionGetPhyParam>
 801268e:	4603      	mov	r3, r0
 8012690:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8012692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012694:	b29a      	uxth	r2, r3
 8012696:	4b10      	ldr	r3, [pc, #64]	; (80126d8 <LoRaMacInitialization+0x388>)
 8012698:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801269c:	4b0d      	ldr	r3, [pc, #52]	; (80126d4 <LoRaMacInitialization+0x384>)
 801269e:	2201      	movs	r2, #1
 80126a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80126a4:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126a6:	220a      	movs	r2, #10
 80126a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80126ac:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126ae:	2206      	movs	r2, #6
 80126b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80126b4:	4b07      	ldr	r3, [pc, #28]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126ba:	4a06      	ldr	r2, [pc, #24]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126bc:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80126be:	4b05      	ldr	r3, [pc, #20]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126c0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80126c4:	4b03      	ldr	r3, [pc, #12]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80126ca:	4b02      	ldr	r3, [pc, #8]	; (80126d4 <LoRaMacInitialization+0x384>)
 80126cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126d0:	e00c      	b.n	80126ec <LoRaMacInitialization+0x39c>
 80126d2:	bf00      	nop
 80126d4:	20000be4 	.word	0x20000be4
 80126d8:	200006c4 	.word	0x200006c4
 80126dc:	01000400 	.word	0x01000400
 80126e0:	20000dc8 	.word	0x20000dc8
 80126e4:	20000ddc 	.word	0x20000ddc
 80126e8:	200016fc 	.word	0x200016fc
 80126ec:	4a60      	ldr	r2, [pc, #384]	; (8012870 <LoRaMacInitialization+0x520>)
 80126ee:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80126f0:	4b5f      	ldr	r3, [pc, #380]	; (8012870 <LoRaMacInitialization+0x520>)
 80126f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80126f6:	4a5e      	ldr	r2, [pc, #376]	; (8012870 <LoRaMacInitialization+0x520>)
 80126f8:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80126fa:	4b5d      	ldr	r3, [pc, #372]	; (8012870 <LoRaMacInitialization+0x520>)
 80126fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012700:	4a5b      	ldr	r2, [pc, #364]	; (8012870 <LoRaMacInitialization+0x520>)
 8012702:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012704:	4b5a      	ldr	r3, [pc, #360]	; (8012870 <LoRaMacInitialization+0x520>)
 8012706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801270a:	4a59      	ldr	r2, [pc, #356]	; (8012870 <LoRaMacInitialization+0x520>)
 801270c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801270e:	4b58      	ldr	r3, [pc, #352]	; (8012870 <LoRaMacInitialization+0x520>)
 8012710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012714:	4a56      	ldr	r2, [pc, #344]	; (8012870 <LoRaMacInitialization+0x520>)
 8012716:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012718:	4b55      	ldr	r3, [pc, #340]	; (8012870 <LoRaMacInitialization+0x520>)
 801271a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801271e:	4b54      	ldr	r3, [pc, #336]	; (8012870 <LoRaMacInitialization+0x520>)
 8012720:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012724:	4b52      	ldr	r3, [pc, #328]	; (8012870 <LoRaMacInitialization+0x520>)
 8012726:	2201      	movs	r2, #1
 8012728:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801272c:	4a51      	ldr	r2, [pc, #324]	; (8012874 <LoRaMacInitialization+0x524>)
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012734:	f7ff f8d4 	bl	80118e0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012738:	4b4d      	ldr	r3, [pc, #308]	; (8012870 <LoRaMacInitialization+0x520>)
 801273a:	2201      	movs	r2, #1
 801273c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012740:	4a4c      	ldr	r2, [pc, #304]	; (8012874 <LoRaMacInitialization+0x524>)
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012748:	4b4a      	ldr	r3, [pc, #296]	; (8012874 <LoRaMacInitialization+0x524>)
 801274a:	2200      	movs	r2, #0
 801274c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8012750:	4b48      	ldr	r3, [pc, #288]	; (8012874 <LoRaMacInitialization+0x524>)
 8012752:	2201      	movs	r2, #1
 8012754:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012758:	4b45      	ldr	r3, [pc, #276]	; (8012870 <LoRaMacInitialization+0x520>)
 801275a:	2200      	movs	r2, #0
 801275c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801275e:	4b44      	ldr	r3, [pc, #272]	; (8012870 <LoRaMacInitialization+0x520>)
 8012760:	2200      	movs	r2, #0
 8012762:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012764:	2300      	movs	r3, #0
 8012766:	9300      	str	r3, [sp, #0]
 8012768:	4b43      	ldr	r3, [pc, #268]	; (8012878 <LoRaMacInitialization+0x528>)
 801276a:	2200      	movs	r2, #0
 801276c:	f04f 31ff 	mov.w	r1, #4294967295
 8012770:	4842      	ldr	r0, [pc, #264]	; (801287c <LoRaMacInitialization+0x52c>)
 8012772:	f009 fe5b 	bl	801c42c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012776:	2300      	movs	r3, #0
 8012778:	9300      	str	r3, [sp, #0]
 801277a:	4b41      	ldr	r3, [pc, #260]	; (8012880 <LoRaMacInitialization+0x530>)
 801277c:	2200      	movs	r2, #0
 801277e:	f04f 31ff 	mov.w	r1, #4294967295
 8012782:	4840      	ldr	r0, [pc, #256]	; (8012884 <LoRaMacInitialization+0x534>)
 8012784:	f009 fe52 	bl	801c42c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012788:	2300      	movs	r3, #0
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	4b3e      	ldr	r3, [pc, #248]	; (8012888 <LoRaMacInitialization+0x538>)
 801278e:	2200      	movs	r2, #0
 8012790:	f04f 31ff 	mov.w	r1, #4294967295
 8012794:	483d      	ldr	r0, [pc, #244]	; (801288c <LoRaMacInitialization+0x53c>)
 8012796:	f009 fe49 	bl	801c42c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801279a:	2300      	movs	r3, #0
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	4b3c      	ldr	r3, [pc, #240]	; (8012890 <LoRaMacInitialization+0x540>)
 80127a0:	2200      	movs	r2, #0
 80127a2:	f04f 31ff 	mov.w	r1, #4294967295
 80127a6:	483b      	ldr	r0, [pc, #236]	; (8012894 <LoRaMacInitialization+0x544>)
 80127a8:	f009 fe40 	bl	801c42c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80127ac:	4c30      	ldr	r4, [pc, #192]	; (8012870 <LoRaMacInitialization+0x520>)
 80127ae:	463b      	mov	r3, r7
 80127b0:	4618      	mov	r0, r3
 80127b2:	f009 f9ab 	bl	801bb0c <SysTimeGetMcuTime>
 80127b6:	f504 7388 	add.w	r3, r4, #272	; 0x110
 80127ba:	463a      	mov	r2, r7
 80127bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127c0:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80127c4:	4b34      	ldr	r3, [pc, #208]	; (8012898 <LoRaMacInitialization+0x548>)
 80127c6:	2200      	movs	r2, #0
 80127c8:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80127ca:	4b2a      	ldr	r3, [pc, #168]	; (8012874 <LoRaMacInitialization+0x524>)
 80127cc:	4a33      	ldr	r2, [pc, #204]	; (801289c <LoRaMacInitialization+0x54c>)
 80127ce:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80127d2:	4b28      	ldr	r3, [pc, #160]	; (8012874 <LoRaMacInitialization+0x524>)
 80127d4:	4a32      	ldr	r2, [pc, #200]	; (80128a0 <LoRaMacInitialization+0x550>)
 80127d6:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80127da:	4b26      	ldr	r3, [pc, #152]	; (8012874 <LoRaMacInitialization+0x524>)
 80127dc:	4a31      	ldr	r2, [pc, #196]	; (80128a4 <LoRaMacInitialization+0x554>)
 80127de:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80127e2:	4b24      	ldr	r3, [pc, #144]	; (8012874 <LoRaMacInitialization+0x524>)
 80127e4:	4a30      	ldr	r2, [pc, #192]	; (80128a8 <LoRaMacInitialization+0x558>)
 80127e6:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80127ea:	4b22      	ldr	r3, [pc, #136]	; (8012874 <LoRaMacInitialization+0x524>)
 80127ec:	4a2f      	ldr	r2, [pc, #188]	; (80128ac <LoRaMacInitialization+0x55c>)
 80127ee:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80127f2:	4b2f      	ldr	r3, [pc, #188]	; (80128b0 <LoRaMacInitialization+0x560>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	482f      	ldr	r0, [pc, #188]	; (80128b4 <LoRaMacInitialization+0x564>)
 80127f8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	689b      	ldr	r3, [r3, #8]
 80127fe:	4619      	mov	r1, r3
 8012800:	482d      	ldr	r0, [pc, #180]	; (80128b8 <LoRaMacInitialization+0x568>)
 8012802:	f7fa fb87 	bl	800cf14 <SecureElementInit>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d001      	beq.n	8012810 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801280c:	2311      	movs	r3, #17
 801280e:	e02b      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012810:	4817      	ldr	r0, [pc, #92]	; (8012870 <LoRaMacInitialization+0x520>)
 8012812:	f002 fafb 	bl	8014e0c <LoRaMacCryptoInit>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d001      	beq.n	8012820 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801281c:	2311      	movs	r3, #17
 801281e:	e023      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012820:	f001 fc1a 	bl	8014058 <LoRaMacCommandsInit>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801282a:	2313      	movs	r3, #19
 801282c:	e01c      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801282e:	4823      	ldr	r0, [pc, #140]	; (80128bc <LoRaMacInitialization+0x56c>)
 8012830:	f002 fb8c 	bl	8014f4c <LoRaMacCryptoSetMulticastReference>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d001      	beq.n	801283e <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801283a:	2311      	movs	r3, #17
 801283c:	e014      	b.n	8012868 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801283e:	4b1c      	ldr	r3, [pc, #112]	; (80128b0 <LoRaMacInitialization+0x560>)
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	4798      	blx	r3
 8012844:	4603      	mov	r3, r0
 8012846:	4618      	mov	r0, r3
 8012848:	f005 fd24 	bl	8018294 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801284c:	4b18      	ldr	r3, [pc, #96]	; (80128b0 <LoRaMacInitialization+0x560>)
 801284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012850:	4a07      	ldr	r2, [pc, #28]	; (8012870 <LoRaMacInitialization+0x520>)
 8012852:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012856:	4610      	mov	r0, r2
 8012858:	4798      	blx	r3
    Radio.Sleep( );
 801285a:	4b15      	ldr	r3, [pc, #84]	; (80128b0 <LoRaMacInitialization+0x560>)
 801285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801285e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012860:	2001      	movs	r0, #1
 8012862:	f7fd fad3 	bl	800fe0c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	373c      	adds	r7, #60	; 0x3c
 801286c:	46bd      	mov	sp, r7
 801286e:	bd90      	pop	{r4, r7, pc}
 8012870:	20000be4 	.word	0x20000be4
 8012874:	200006c4 	.word	0x200006c4
 8012878:	080103c1 	.word	0x080103c1
 801287c:	20000a2c 	.word	0x20000a2c
 8012880:	08010451 	.word	0x08010451
 8012884:	20000a44 	.word	0x20000a44
 8012888:	080104c9 	.word	0x080104c9
 801288c:	20000a5c 	.word	0x20000a5c
 8012890:	08010549 	.word	0x08010549
 8012894:	20000ac8 	.word	0x20000ac8
 8012898:	2000178c 	.word	0x2000178c
 801289c:	0800eec1 	.word	0x0800eec1
 80128a0:	0800ef39 	.word	0x0800ef39
 80128a4:	0800f019 	.word	0x0800f019
 80128a8:	0800efcd 	.word	0x0800efcd
 80128ac:	0800f055 	.word	0x0800f055
 80128b0:	0801dc3c 	.word	0x0801dc3c
 80128b4:	20000a10 	.word	0x20000a10
 80128b8:	20000d08 	.word	0x20000d08
 80128bc:	20000cbc 	.word	0x20000cbc

080128c0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80128c0:	b480      	push	{r7}
 80128c2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80128c4:	4b04      	ldr	r3, [pc, #16]	; (80128d8 <LoRaMacStart+0x18>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80128cc:	2300      	movs	r3, #0
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bc80      	pop	{r7}
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	200006c4 	.word	0x200006c4

080128dc <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80128e0:	f7fd fa74 	bl	800fdcc <LoRaMacIsBusy>
 80128e4:	4603      	mov	r3, r0
 80128e6:	f083 0301 	eor.w	r3, r3, #1
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80128f0:	4b07      	ldr	r3, [pc, #28]	; (8012910 <LoRaMacStop+0x34>)
 80128f2:	2201      	movs	r2, #1
 80128f4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80128f8:	2300      	movs	r3, #0
 80128fa:	e007      	b.n	801290c <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80128fc:	4b04      	ldr	r3, [pc, #16]	; (8012910 <LoRaMacStop+0x34>)
 80128fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012902:	2b01      	cmp	r3, #1
 8012904:	d101      	bne.n	801290a <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012906:	2300      	movs	r3, #0
 8012908:	e000      	b.n	801290c <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801290a:	2301      	movs	r3, #1
}
 801290c:	4618      	mov	r0, r3
 801290e:	bd80      	pop	{r7, pc}
 8012910:	200006c4 	.word	0x200006c4

08012914 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012918:	4812      	ldr	r0, [pc, #72]	; (8012964 <LoRaMacHalt+0x50>)
 801291a:	f009 fe2b 	bl	801c574 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801291e:	4812      	ldr	r0, [pc, #72]	; (8012968 <LoRaMacHalt+0x54>)
 8012920:	f009 fe28 	bl	801c574 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012924:	4811      	ldr	r0, [pc, #68]	; (801296c <LoRaMacHalt+0x58>)
 8012926:	f009 fe25 	bl	801c574 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801292a:	4811      	ldr	r0, [pc, #68]	; (8012970 <LoRaMacHalt+0x5c>)
 801292c:	f009 fe22 	bl	801c574 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012930:	f001 fa04 	bl	8013d3c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012934:	4b0f      	ldr	r3, [pc, #60]	; (8012974 <LoRaMacHalt+0x60>)
 8012936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012938:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801293a:	4b0f      	ldr	r3, [pc, #60]	; (8012978 <LoRaMacHalt+0x64>)
 801293c:	2200      	movs	r2, #0
 801293e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012942:	480e      	ldr	r0, [pc, #56]	; (801297c <LoRaMacHalt+0x68>)
 8012944:	f7fd fc18 	bl	8010178 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012948:	f240 528c 	movw	r2, #1420	; 0x58c
 801294c:	490b      	ldr	r1, [pc, #44]	; (801297c <LoRaMacHalt+0x68>)
 801294e:	480c      	ldr	r0, [pc, #48]	; (8012980 <LoRaMacHalt+0x6c>)
 8012950:	f005 fcc5 	bl	80182de <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012954:	4b08      	ldr	r3, [pc, #32]	; (8012978 <LoRaMacHalt+0x64>)
 8012956:	2201      	movs	r2, #1
 8012958:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	20000a2c 	.word	0x20000a2c
 8012968:	20000a44 	.word	0x20000a44
 801296c:	20000a5c 	.word	0x20000a5c
 8012970:	20000ac8 	.word	0x20000ac8
 8012974:	0801dc3c 	.word	0x0801dc3c
 8012978:	200006c4 	.word	0x200006c4
 801297c:	20000be4 	.word	0x20000be4
 8012980:	20001170 	.word	0x20001170

08012984 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012984:	b590      	push	{r4, r7, lr}
 8012986:	b08d      	sub	sp, #52	; 0x34
 8012988:	af02      	add	r7, sp, #8
 801298a:	4603      	mov	r3, r0
 801298c:	6039      	str	r1, [r7, #0]
 801298e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012990:	4b42      	ldr	r3, [pc, #264]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 8012992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012994:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012996:	4b41      	ldr	r3, [pc, #260]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 8012998:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 801299c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801299e:	4b3f      	ldr	r3, [pc, #252]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129a0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 80129a4:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80129a6:	4b3e      	ldr	r3, [pc, #248]	; (8012aa0 <LoRaMacQueryTxPossible+0x11c>)
 80129a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80129ac:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d101      	bne.n	80129bc <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129b8:	2303      	movs	r3, #3
 80129ba:	e06b      	b.n	8012a94 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80129bc:	2300      	movs	r3, #0
 80129be:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80129c0:	4b36      	ldr	r3, [pc, #216]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80129c6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80129c8:	4b34      	ldr	r3, [pc, #208]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129cc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80129ce:	4b34      	ldr	r3, [pc, #208]	; (8012aa0 <LoRaMacQueryTxPossible+0x11c>)
 80129d0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80129d4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80129d6:	4b32      	ldr	r3, [pc, #200]	; (8012aa0 <LoRaMacQueryTxPossible+0x11c>)
 80129d8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80129dc:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80129de:	4b2f      	ldr	r3, [pc, #188]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80129e4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80129e8:	4b2c      	ldr	r3, [pc, #176]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129ea:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80129ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80129f2:	4b2b      	ldr	r3, [pc, #172]	; (8012aa0 <LoRaMacQueryTxPossible+0x11c>)
 80129f4:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80129f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80129fc:	4b27      	ldr	r3, [pc, #156]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 80129fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012a06:	4b25      	ldr	r3, [pc, #148]	; (8012a9c <LoRaMacQueryTxPossible+0x118>)
 8012a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012a10:	f107 040d 	add.w	r4, r7, #13
 8012a14:	f107 020e 	add.w	r2, r7, #14
 8012a18:	f107 010f 	add.w	r1, r7, #15
 8012a1c:	f107 0014 	add.w	r0, r7, #20
 8012a20:	f107 0310 	add.w	r3, r7, #16
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	4623      	mov	r3, r4
 8012a28:	f001 f852 	bl	8013ad0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7fd fec5 	bl	80107c0 <GetMaxAppPayloadWithoutFOptsLength>
 8012a36:	4603      	mov	r3, r0
 8012a38:	461a      	mov	r2, r3
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012a3e:	f107 0308 	add.w	r3, r7, #8
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 fbd6 	bl	80141f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a4e:	2313      	movs	r3, #19
 8012a50:	e020      	b.n	8012a94 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	2b0f      	cmp	r3, #15
 8012a56:	d819      	bhi.n	8012a8c <LoRaMacQueryTxPossible+0x108>
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	785b      	ldrb	r3, [r3, #1]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d313      	bcc.n	8012a8c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	785a      	ldrb	r2, [r3, #1]
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	785b      	ldrb	r3, [r3, #1]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	79fa      	ldrb	r2, [r7, #7]
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	4413      	add	r3, r2
 8012a80:	4299      	cmp	r1, r3
 8012a82:	d301      	bcc.n	8012a88 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	e005      	b.n	8012a94 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012a88:	2308      	movs	r3, #8
 8012a8a:	e003      	b.n	8012a94 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012a92:	2308      	movs	r3, #8
    }
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	372c      	adds	r7, #44	; 0x2c
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd90      	pop	{r4, r7, pc}
 8012a9c:	20000be4 	.word	0x20000be4
 8012aa0:	200006c4 	.word	0x200006c4

08012aa4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b087      	sub	sp, #28
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012aac:	2300      	movs	r3, #0
 8012aae:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d101      	bne.n	8012aba <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	e191      	b.n	8012dde <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b39      	cmp	r3, #57	; 0x39
 8012ac0:	f200 8186 	bhi.w	8012dd0 <LoRaMacMibGetRequestConfirm+0x32c>
 8012ac4:	a201      	add	r2, pc, #4	; (adr r2, 8012acc <LoRaMacMibGetRequestConfirm+0x28>)
 8012ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aca:	bf00      	nop
 8012acc:	08012bb5 	.word	0x08012bb5
 8012ad0:	08012bc1 	.word	0x08012bc1
 8012ad4:	08012bcd 	.word	0x08012bcd
 8012ad8:	08012bd9 	.word	0x08012bd9
 8012adc:	08012be5 	.word	0x08012be5
 8012ae0:	08012bf1 	.word	0x08012bf1
 8012ae4:	08012bfd 	.word	0x08012bfd
 8012ae8:	08012dd1 	.word	0x08012dd1
 8012aec:	08012dd1 	.word	0x08012dd1
 8012af0:	08012dd1 	.word	0x08012dd1
 8012af4:	08012dd1 	.word	0x08012dd1
 8012af8:	08012dd1 	.word	0x08012dd1
 8012afc:	08012dd1 	.word	0x08012dd1
 8012b00:	08012dd1 	.word	0x08012dd1
 8012b04:	08012dd1 	.word	0x08012dd1
 8012b08:	08012c09 	.word	0x08012c09
 8012b0c:	08012c15 	.word	0x08012c15
 8012b10:	08012c21 	.word	0x08012c21
 8012b14:	08012c43 	.word	0x08012c43
 8012b18:	08012c55 	.word	0x08012c55
 8012b1c:	08012c67 	.word	0x08012c67
 8012b20:	08012c79 	.word	0x08012c79
 8012b24:	08012cad 	.word	0x08012cad
 8012b28:	08012c8b 	.word	0x08012c8b
 8012b2c:	08012ccf 	.word	0x08012ccf
 8012b30:	08012cdb 	.word	0x08012cdb
 8012b34:	08012ce5 	.word	0x08012ce5
 8012b38:	08012cef 	.word	0x08012cef
 8012b3c:	08012cf9 	.word	0x08012cf9
 8012b40:	08012d03 	.word	0x08012d03
 8012b44:	08012d0d 	.word	0x08012d0d
 8012b48:	08012d39 	.word	0x08012d39
 8012b4c:	08012d45 	.word	0x08012d45
 8012b50:	08012d5d 	.word	0x08012d5d
 8012b54:	08012d51 	.word	0x08012d51
 8012b58:	08012d69 	.word	0x08012d69
 8012b5c:	08012d73 	.word	0x08012d73
 8012b60:	08012d7f 	.word	0x08012d7f
 8012b64:	08012d99 	.word	0x08012d99
 8012b68:	08012d89 	.word	0x08012d89
 8012b6c:	08012d91 	.word	0x08012d91
 8012b70:	08012dd1 	.word	0x08012dd1
 8012b74:	08012da5 	.word	0x08012da5
 8012b78:	08012dd1 	.word	0x08012dd1
 8012b7c:	08012dd1 	.word	0x08012dd1
 8012b80:	08012dd1 	.word	0x08012dd1
 8012b84:	08012dd1 	.word	0x08012dd1
 8012b88:	08012dd1 	.word	0x08012dd1
 8012b8c:	08012dd1 	.word	0x08012dd1
 8012b90:	08012dd1 	.word	0x08012dd1
 8012b94:	08012dd1 	.word	0x08012dd1
 8012b98:	08012dd1 	.word	0x08012dd1
 8012b9c:	08012dd1 	.word	0x08012dd1
 8012ba0:	08012dd1 	.word	0x08012dd1
 8012ba4:	08012dd1 	.word	0x08012dd1
 8012ba8:	08012dd1 	.word	0x08012dd1
 8012bac:	08012db9 	.word	0x08012db9
 8012bb0:	08012dc5 	.word	0x08012dc5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012bb4:	4b8c      	ldr	r3, [pc, #560]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012bb6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	711a      	strb	r2, [r3, #4]
            break;
 8012bbe:	e10d      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012bc0:	4b89      	ldr	r3, [pc, #548]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012bc2:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	711a      	strb	r2, [r3, #4]
            break;
 8012bca:	e107      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012bcc:	f7fa fc78 	bl	800d4c0 <SecureElementGetDevEui>
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	605a      	str	r2, [r3, #4]
            break;
 8012bd6:	e101      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012bd8:	f7fa fc94 	bl	800d504 <SecureElementGetJoinEui>
 8012bdc:	4602      	mov	r2, r0
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	605a      	str	r2, [r3, #4]
            break;
 8012be2:	e0fb      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012be4:	4b80      	ldr	r3, [pc, #512]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012be6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	711a      	strb	r2, [r3, #4]
            break;
 8012bee:	e0f5      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012bf0:	4b7d      	ldr	r3, [pc, #500]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012bf2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	605a      	str	r2, [r3, #4]
            break;
 8012bfa:	e0ef      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8012bfc:	4b7a      	ldr	r3, [pc, #488]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012bfe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	605a      	str	r2, [r3, #4]
            break;
 8012c06:	e0e9      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012c08:	4b77      	ldr	r3, [pc, #476]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c0a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	711a      	strb	r2, [r3, #4]
            break;
 8012c12:	e0e3      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012c14:	4b74      	ldr	r3, [pc, #464]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c16:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	711a      	strb	r2, [r3, #4]
            break;
 8012c1e:	e0dd      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012c20:	231c      	movs	r3, #28
 8012c22:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c24:	4b70      	ldr	r3, [pc, #448]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c2a:	f107 0210 	add.w	r2, r7, #16
 8012c2e:	4611      	mov	r1, r2
 8012c30:	4618      	mov	r0, r3
 8012c32:	f002 ff9d 	bl	8015b70 <RegionGetPhyParam>
 8012c36:	4603      	mov	r3, r0
 8012c38:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	605a      	str	r2, [r3, #4]
            break;
 8012c40:	e0cc      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	4a68      	ldr	r2, [pc, #416]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c46:	3304      	adds	r3, #4
 8012c48:	3264      	adds	r2, #100	; 0x64
 8012c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c4e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012c52:	e0c3      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	4a64      	ldr	r2, [pc, #400]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c58:	3304      	adds	r3, #4
 8012c5a:	32a8      	adds	r2, #168	; 0xa8
 8012c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c60:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012c64:	e0ba      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4a5f      	ldr	r2, [pc, #380]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	326c      	adds	r2, #108	; 0x6c
 8012c6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c72:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012c76:	e0b1      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4a5b      	ldr	r2, [pc, #364]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	32b0      	adds	r2, #176	; 0xb0
 8012c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c84:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012c88:	e0a8      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012c8a:	231a      	movs	r3, #26
 8012c8c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c8e:	4b56      	ldr	r3, [pc, #344]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c94:	f107 0210 	add.w	r2, r7, #16
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f002 ff68 	bl	8015b70 <RegionGetPhyParam>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012ca4:	68fa      	ldr	r2, [r7, #12]
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	605a      	str	r2, [r3, #4]
            break;
 8012caa:	e097      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012cac:	2319      	movs	r3, #25
 8012cae:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cb0:	4b4d      	ldr	r3, [pc, #308]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cb6:	f107 0210 	add.w	r2, r7, #16
 8012cba:	4611      	mov	r1, r2
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f002 ff57 	bl	8015b70 <RegionGetPhyParam>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012cc6:	68fa      	ldr	r2, [r7, #12]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	605a      	str	r2, [r3, #4]
            break;
 8012ccc:	e086      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012cce:	4b46      	ldr	r3, [pc, #280]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cd0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	711a      	strb	r2, [r3, #4]
            break;
 8012cd8:	e080      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012cda:	4b43      	ldr	r3, [pc, #268]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]
            break;
 8012ce2:	e07b      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012ce4:	4b40      	ldr	r3, [pc, #256]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	605a      	str	r2, [r3, #4]
            break;
 8012cec:	e076      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012cee:	4b3e      	ldr	r3, [pc, #248]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	605a      	str	r2, [r3, #4]
            break;
 8012cf6:	e071      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012cf8:	4b3b      	ldr	r3, [pc, #236]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	605a      	str	r2, [r3, #4]
            break;
 8012d00:	e06c      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012d02:	4b39      	ldr	r3, [pc, #228]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	605a      	str	r2, [r3, #4]
            break;
 8012d0a:	e067      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d10:	4b35      	ldr	r3, [pc, #212]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d12:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012d16:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d18:	4b33      	ldr	r3, [pc, #204]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d1e:	f107 0210 	add.w	r2, r7, #16
 8012d22:	4611      	mov	r1, r2
 8012d24:	4618      	mov	r0, r3
 8012d26:	f002 ff23 	bl	8015b70 <RegionGetPhyParam>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	b25a      	sxtb	r2, r3
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	711a      	strb	r2, [r3, #4]
            break;
 8012d36:	e051      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012d38:	4b2b      	ldr	r3, [pc, #172]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d3a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	711a      	strb	r2, [r3, #4]
            break;
 8012d42:	e04b      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012d44:	4b28      	ldr	r3, [pc, #160]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d46:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	711a      	strb	r2, [r3, #4]
            break;
 8012d4e:	e045      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012d50:	4b25      	ldr	r3, [pc, #148]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d52:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	711a      	strb	r2, [r3, #4]
            break;
 8012d5a:	e03f      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012d5c:	4b22      	ldr	r3, [pc, #136]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d5e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	711a      	strb	r2, [r3, #4]
            break;
 8012d66:	e039      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012d68:	4b1f      	ldr	r3, [pc, #124]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	605a      	str	r2, [r3, #4]
            break;
 8012d70:	e034      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012d72:	4b1d      	ldr	r3, [pc, #116]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d74:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	711a      	strb	r2, [r3, #4]
            break;
 8012d7c:	e02e      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012d7e:	4b1a      	ldr	r3, [pc, #104]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	605a      	str	r2, [r3, #4]
            break;
 8012d86:	e029      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a17      	ldr	r2, [pc, #92]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d8c:	605a      	str	r2, [r3, #4]
            break;
 8012d8e:	e025      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a16      	ldr	r2, [pc, #88]	; (8012dec <LoRaMacMibGetRequestConfirm+0x348>)
 8012d94:	605a      	str	r2, [r3, #4]
            break;
 8012d96:	e021      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012d98:	4b13      	ldr	r3, [pc, #76]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	605a      	str	r2, [r3, #4]
            break;
 8012da2:	e01b      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	4a10      	ldr	r2, [pc, #64]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012da8:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8012dac:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012dae:	687c      	ldr	r4, [r7, #4]
 8012db0:	f003 f854 	bl	8015e5c <RegionGetVersion>
 8012db4:	60a0      	str	r0, [r4, #8]
            break;
 8012db6:	e011      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012db8:	4b0b      	ldr	r3, [pc, #44]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012dba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	605a      	str	r2, [r3, #4]
            break;
 8012dc2:	e00b      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012dc4:	4b08      	ldr	r3, [pc, #32]	; (8012de8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012dc6:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	711a      	strb	r2, [r3, #4]
            break;
 8012dce:	e005      	b.n	8012ddc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 ffca 	bl	8013d6a <LoRaMacClassBMibGetRequestConfirm>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	75fb      	strb	r3, [r7, #23]
            break;
 8012dda:	bf00      	nop
        }
    }
    return status;
 8012ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	371c      	adds	r7, #28
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd90      	pop	{r4, r7, pc}
 8012de6:	bf00      	nop
 8012de8:	20000be4 	.word	0x20000be4
 8012dec:	20001170 	.word	0x20001170

08012df0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d101      	bne.n	8012e06 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e02:	2303      	movs	r3, #3
 8012e04:	e35c      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012e06:	4bb9      	ldr	r3, [pc, #740]	; (80130ec <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012e08:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012e0c:	f003 0302 	and.w	r3, r3, #2
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012e14:	2301      	movs	r3, #1
 8012e16:	e353      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b39      	cmp	r3, #57	; 0x39
 8012e1e:	f200 8323 	bhi.w	8013468 <LoRaMacMibSetRequestConfirm+0x678>
 8012e22:	a201      	add	r2, pc, #4	; (adr r2, 8012e28 <LoRaMacMibSetRequestConfirm+0x38>)
 8012e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e28:	08012f11 	.word	0x08012f11
 8012e2c:	08012f21 	.word	0x08012f21
 8012e30:	08012f3b 	.word	0x08012f3b
 8012e34:	08012f53 	.word	0x08012f53
 8012e38:	08012f6b 	.word	0x08012f6b
 8012e3c:	08012f77 	.word	0x08012f77
 8012e40:	08012f83 	.word	0x08012f83
 8012e44:	08012f8f 	.word	0x08012f8f
 8012e48:	08012fb5 	.word	0x08012fb5
 8012e4c:	08012fdb 	.word	0x08012fdb
 8012e50:	08013001 	.word	0x08013001
 8012e54:	08013027 	.word	0x08013027
 8012e58:	0801304d 	.word	0x0801304d
 8012e5c:	08013073 	.word	0x08013073
 8012e60:	08013099 	.word	0x08013099
 8012e64:	080130bf 	.word	0x080130bf
 8012e68:	080130df 	.word	0x080130df
 8012e6c:	08013469 	.word	0x08013469
 8012e70:	080130f9 	.word	0x080130f9
 8012e74:	08013169 	.word	0x08013169
 8012e78:	080131a9 	.word	0x080131a9
 8012e7c:	0801320b 	.word	0x0801320b
 8012e80:	0801327b 	.word	0x0801327b
 8012e84:	0801324b 	.word	0x0801324b
 8012e88:	080132ab 	.word	0x080132ab
 8012e8c:	080132cd 	.word	0x080132cd
 8012e90:	080132d7 	.word	0x080132d7
 8012e94:	080132e1 	.word	0x080132e1
 8012e98:	080132eb 	.word	0x080132eb
 8012e9c:	080132f5 	.word	0x080132f5
 8012ea0:	08013469 	.word	0x08013469
 8012ea4:	080132ff 	.word	0x080132ff
 8012ea8:	08013331 	.word	0x08013331
 8012eac:	0801339d 	.word	0x0801339d
 8012eb0:	0801336b 	.word	0x0801336b
 8012eb4:	080133d9 	.word	0x080133d9
 8012eb8:	080133ef 	.word	0x080133ef
 8012ebc:	08013407 	.word	0x08013407
 8012ec0:	08013411 	.word	0x08013411
 8012ec4:	0801341d 	.word	0x0801341d
 8012ec8:	08013469 	.word	0x08013469
 8012ecc:	08013427 	.word	0x08013427
 8012ed0:	08013469 	.word	0x08013469
 8012ed4:	08013469 	.word	0x08013469
 8012ed8:	08013469 	.word	0x08013469
 8012edc:	08013469 	.word	0x08013469
 8012ee0:	08013469 	.word	0x08013469
 8012ee4:	08013469 	.word	0x08013469
 8012ee8:	08013469 	.word	0x08013469
 8012eec:	08013469 	.word	0x08013469
 8012ef0:	08013469 	.word	0x08013469
 8012ef4:	08013469 	.word	0x08013469
 8012ef8:	08013469 	.word	0x08013469
 8012efc:	08013469 	.word	0x08013469
 8012f00:	08013469 	.word	0x08013469
 8012f04:	08013469 	.word	0x08013469
 8012f08:	08013451 	.word	0x08013451
 8012f0c:	0801345d 	.word	0x0801345d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	791b      	ldrb	r3, [r3, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7fd fb81 	bl	801061c <SwitchClass>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	75fb      	strb	r3, [r7, #23]
            break;
 8012f1e:	e2c4      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	791b      	ldrb	r3, [r3, #4]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d005      	beq.n	8012f34 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	791a      	ldrb	r2, [r3, #4]
 8012f2c:	4b70      	ldr	r3, [pc, #448]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012f2e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012f32:	e2ba      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f34:	2303      	movs	r3, #3
 8012f36:	75fb      	strb	r3, [r7, #23]
            break;
 8012f38:	e2b7      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fa faa6 	bl	800d490 <SecureElementSetDevEui>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f000 8294 	beq.w	8013474 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f4c:	2303      	movs	r3, #3
 8012f4e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012f50:	e290      	b.n	8013474 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fa fabc 	bl	800d4d4 <SecureElementSetJoinEui>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f000 828a 	beq.w	8013478 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f64:	2303      	movs	r3, #3
 8012f66:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012f68:	e286      	b.n	8013478 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	791a      	ldrb	r2, [r3, #4]
 8012f6e:	4b60      	ldr	r3, [pc, #384]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012f70:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8012f74:	e299      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	4a5d      	ldr	r2, [pc, #372]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012f7c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8012f80:	e293      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	4a5a      	ldr	r2, [pc, #360]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012f88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8012f8c:	e28d      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d00b      	beq.n	8012fae <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	f001 fffd 	bl	8014f9c <LoRaMacCryptoSetKey>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f000 8269 	beq.w	801347c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012faa:	2311      	movs	r3, #17
 8012fac:	e288      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fae:	2303      	movs	r3, #3
 8012fb0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012fb2:	e263      	b.n	801347c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d00b      	beq.n	8012fd4 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	2001      	movs	r0, #1
 8012fc4:	f001 ffea 	bl	8014f9c <LoRaMacCryptoSetKey>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f000 8258 	beq.w	8013480 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fd0:	2311      	movs	r3, #17
 8012fd2:	e275      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fd4:	2303      	movs	r3, #3
 8012fd6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012fd8:	e252      	b.n	8013480 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d00b      	beq.n	8012ffa <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	2002      	movs	r0, #2
 8012fea:	f001 ffd7 	bl	8014f9c <LoRaMacCryptoSetKey>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	f000 8247 	beq.w	8013484 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ff6:	2311      	movs	r3, #17
 8012ff8:	e262      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ffa:	2303      	movs	r3, #3
 8012ffc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012ffe:	e241      	b.n	8013484 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d00b      	beq.n	8013020 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	4619      	mov	r1, r3
 801300e:	2003      	movs	r0, #3
 8013010:	f001 ffc4 	bl	8014f9c <LoRaMacCryptoSetKey>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	f000 8236 	beq.w	8013488 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801301c:	2311      	movs	r3, #17
 801301e:	e24f      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013020:	2303      	movs	r3, #3
 8013022:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013024:	e230      	b.n	8013488 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00b      	beq.n	8013046 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	4619      	mov	r1, r3
 8013034:	207f      	movs	r0, #127	; 0x7f
 8013036:	f001 ffb1 	bl	8014f9c <LoRaMacCryptoSetKey>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	f000 8225 	beq.w	801348c <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013042:	2311      	movs	r3, #17
 8013044:	e23c      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013046:	2303      	movs	r3, #3
 8013048:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801304a:	e21f      	b.n	801348c <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00b      	beq.n	801306c <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	4619      	mov	r1, r3
 801305a:	2080      	movs	r0, #128	; 0x80
 801305c:	f001 ff9e 	bl	8014f9c <LoRaMacCryptoSetKey>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	f000 8214 	beq.w	8013490 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013068:	2311      	movs	r3, #17
 801306a:	e229      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801306c:	2303      	movs	r3, #3
 801306e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013070:	e20e      	b.n	8013490 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00b      	beq.n	8013092 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	4619      	mov	r1, r3
 8013080:	2081      	movs	r0, #129	; 0x81
 8013082:	f001 ff8b 	bl	8014f9c <LoRaMacCryptoSetKey>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	f000 8203 	beq.w	8013494 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801308e:	2311      	movs	r3, #17
 8013090:	e216      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013092:	2303      	movs	r3, #3
 8013094:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013096:	e1fd      	b.n	8013494 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00b      	beq.n	80130b8 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	4619      	mov	r1, r3
 80130a6:	2082      	movs	r0, #130	; 0x82
 80130a8:	f001 ff78 	bl	8014f9c <LoRaMacCryptoSetKey>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 81f2 	beq.w	8013498 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130b4:	2311      	movs	r3, #17
 80130b6:	e203      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130b8:	2303      	movs	r3, #3
 80130ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130bc:	e1ec      	b.n	8013498 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	791a      	ldrb	r2, [r3, #4]
 80130c2:	4b0b      	ldr	r3, [pc, #44]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 80130c4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80130c8:	4b0a      	ldr	r3, [pc, #40]	; (80130f4 <LoRaMacMibSetRequestConfirm+0x304>)
 80130ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130cc:	4a08      	ldr	r2, [pc, #32]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 80130ce:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80130d2:	4610      	mov	r0, r2
 80130d4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80130d6:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <LoRaMacMibSetRequestConfirm+0x304>)
 80130d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130da:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80130dc:	e1e5      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	791a      	ldrb	r2, [r3, #4]
 80130e2:	4b03      	ldr	r3, [pc, #12]	; (80130f0 <LoRaMacMibSetRequestConfirm+0x300>)
 80130e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80130e8:	e1df      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
 80130ea:	bf00      	nop
 80130ec:	200006c4 	.word	0x200006c4
 80130f0:	20000be4 	.word	0x20000be4
 80130f4:	0801dc3c 	.word	0x0801dc3c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	7a1b      	ldrb	r3, [r3, #8]
 80130fc:	b25b      	sxtb	r3, r3
 80130fe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013100:	4bb3      	ldr	r3, [pc, #716]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013102:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8013106:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013108:	4bb1      	ldr	r3, [pc, #708]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801310e:	f107 0108 	add.w	r1, r7, #8
 8013112:	2207      	movs	r2, #7
 8013114:	4618      	mov	r0, r3
 8013116:	f002 fd66 	bl	8015be6 <RegionVerify>
 801311a:	4603      	mov	r3, r0
 801311c:	f083 0301 	eor.w	r3, r3, #1
 8013120:	b2db      	uxtb	r3, r3
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013126:	2303      	movs	r3, #3
 8013128:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801312a:	e1be      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013132:	4ba7      	ldr	r3, [pc, #668]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013138:	f107 0108 	add.w	r1, r7, #8
 801313c:	2200      	movs	r2, #0
 801313e:	4618      	mov	r0, r3
 8013140:	f002 fd51 	bl	8015be6 <RegionVerify>
 8013144:	4603      	mov	r3, r0
 8013146:	f083 0301 	eor.w	r3, r3, #1
 801314a:	b2db      	uxtb	r3, r3
 801314c:	2b00      	cmp	r3, #0
 801314e:	d002      	beq.n	8013156 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013150:	2303      	movs	r3, #3
 8013152:	75fb      	strb	r3, [r7, #23]
            break;
 8013154:	e1a9      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013156:	4b9e      	ldr	r3, [pc, #632]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	3364      	adds	r3, #100	; 0x64
 801315c:	3204      	adds	r2, #4
 801315e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013162:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013166:	e1a0      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	7a1b      	ldrb	r3, [r3, #8]
 801316c:	b25b      	sxtb	r3, r3
 801316e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013170:	4b97      	ldr	r3, [pc, #604]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013172:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8013176:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013178:	4b95      	ldr	r3, [pc, #596]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801317a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801317e:	f107 0108 	add.w	r1, r7, #8
 8013182:	2207      	movs	r2, #7
 8013184:	4618      	mov	r0, r3
 8013186:	f002 fd2e 	bl	8015be6 <RegionVerify>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d008      	beq.n	80131a2 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013190:	4b8f      	ldr	r3, [pc, #572]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	33a8      	adds	r3, #168	; 0xa8
 8013196:	3204      	adds	r2, #4
 8013198:	e892 0003 	ldmia.w	r2, {r0, r1}
 801319c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80131a0:	e183      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131a2:	2303      	movs	r3, #3
 80131a4:	75fb      	strb	r3, [r7, #23]
            break;
 80131a6:	e180      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7a1b      	ldrb	r3, [r3, #8]
 80131ac:	b25b      	sxtb	r3, r3
 80131ae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80131b0:	4b87      	ldr	r3, [pc, #540]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131b2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80131b6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80131b8:	4b85      	ldr	r3, [pc, #532]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131be:	f107 0108 	add.w	r1, r7, #8
 80131c2:	2207      	movs	r2, #7
 80131c4:	4618      	mov	r0, r3
 80131c6:	f002 fd0e 	bl	8015be6 <RegionVerify>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d019      	beq.n	8013204 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80131d0:	4b7f      	ldr	r3, [pc, #508]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	336c      	adds	r3, #108	; 0x6c
 80131d6:	3204      	adds	r2, #4
 80131d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131dc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80131e0:	4b7b      	ldr	r3, [pc, #492]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131e6:	2b02      	cmp	r3, #2
 80131e8:	f040 8158 	bne.w	801349c <LoRaMacMibSetRequestConfirm+0x6ac>
 80131ec:	4b78      	ldr	r3, [pc, #480]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131ee:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f000 8152 	beq.w	801349c <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80131f8:	4b76      	ldr	r3, [pc, #472]	; (80133d4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80131fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fc:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80131fe:	f7fe fca5 	bl	8011b4c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013202:	e14b      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013204:	2303      	movs	r3, #3
 8013206:	75fb      	strb	r3, [r7, #23]
            break;
 8013208:	e148      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	7a1b      	ldrb	r3, [r3, #8]
 801320e:	b25b      	sxtb	r3, r3
 8013210:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013212:	4b6f      	ldr	r3, [pc, #444]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013214:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8013218:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801321a:	4b6d      	ldr	r3, [pc, #436]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801321c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013220:	f107 0108 	add.w	r1, r7, #8
 8013224:	2207      	movs	r2, #7
 8013226:	4618      	mov	r0, r3
 8013228:	f002 fcdd 	bl	8015be6 <RegionVerify>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d008      	beq.n	8013244 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013232:	4b67      	ldr	r3, [pc, #412]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	33b0      	adds	r3, #176	; 0xb0
 8013238:	3204      	adds	r2, #4
 801323a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801323e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013242:	e132      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013244:	2303      	movs	r3, #3
 8013246:	75fb      	strb	r3, [r7, #23]
            break;
 8013248:	e12f      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013250:	2301      	movs	r3, #1
 8013252:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013254:	4b5e      	ldr	r3, [pc, #376]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801325a:	f107 020c 	add.w	r2, r7, #12
 801325e:	4611      	mov	r1, r2
 8013260:	4618      	mov	r0, r3
 8013262:	f002 fce9 	bl	8015c38 <RegionChanMaskSet>
 8013266:	4603      	mov	r3, r0
 8013268:	f083 0301 	eor.w	r3, r3, #1
 801326c:	b2db      	uxtb	r3, r3
 801326e:	2b00      	cmp	r3, #0
 8013270:	f000 8116 	beq.w	80134a0 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013274:	2303      	movs	r3, #3
 8013276:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013278:	e112      	b.n	80134a0 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013280:	2300      	movs	r3, #0
 8013282:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013284:	4b52      	ldr	r3, [pc, #328]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801328a:	f107 020c 	add.w	r2, r7, #12
 801328e:	4611      	mov	r1, r2
 8013290:	4618      	mov	r0, r3
 8013292:	f002 fcd1 	bl	8015c38 <RegionChanMaskSet>
 8013296:	4603      	mov	r3, r0
 8013298:	f083 0301 	eor.w	r3, r3, #1
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	f000 8100 	beq.w	80134a4 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132a4:	2303      	movs	r3, #3
 80132a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80132a8:	e0fc      	b.n	80134a4 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	791b      	ldrb	r3, [r3, #4]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d009      	beq.n	80132c6 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80132b6:	2b0f      	cmp	r3, #15
 80132b8:	d805      	bhi.n	80132c6 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	791a      	ldrb	r2, [r3, #4]
 80132be:	4b44      	ldr	r3, [pc, #272]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132c4:	e0f1      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132c6:	2303      	movs	r3, #3
 80132c8:	75fb      	strb	r3, [r7, #23]
            break;
 80132ca:	e0ee      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	4a3f      	ldr	r2, [pc, #252]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132d2:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80132d4:	e0e9      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	4a3d      	ldr	r2, [pc, #244]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132dc:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80132de:	e0e4      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	4a3a      	ldr	r2, [pc, #232]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132e6:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80132e8:	e0df      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	4a38      	ldr	r2, [pc, #224]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132f0:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80132f2:	e0da      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	4a35      	ldr	r2, [pc, #212]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132fa:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80132fc:	e0d5      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013304:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013306:	4b32      	ldr	r3, [pc, #200]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801330c:	f107 0108 	add.w	r1, r7, #8
 8013310:	2206      	movs	r2, #6
 8013312:	4618      	mov	r0, r3
 8013314:	f002 fc67 	bl	8015be6 <RegionVerify>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d005      	beq.n	801332a <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801331e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013322:	4b2b      	ldr	r3, [pc, #172]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013324:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013328:	e0bf      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801332a:	2303      	movs	r3, #3
 801332c:	75fb      	strb	r3, [r7, #23]
            break;
 801332e:	e0bc      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013336:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013338:	4b25      	ldr	r3, [pc, #148]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801333a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801333e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013340:	4b23      	ldr	r3, [pc, #140]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013346:	f107 0108 	add.w	r1, r7, #8
 801334a:	2205      	movs	r2, #5
 801334c:	4618      	mov	r0, r3
 801334e:	f002 fc4a 	bl	8015be6 <RegionVerify>
 8013352:	4603      	mov	r3, r0
 8013354:	2b00      	cmp	r3, #0
 8013356:	d005      	beq.n	8013364 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013358:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801335c:	4b1c      	ldr	r3, [pc, #112]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801335e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013362:	e0a2      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013364:	2303      	movs	r3, #3
 8013366:	75fb      	strb	r3, [r7, #23]
            break;
 8013368:	e09f      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013370:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013372:	4b17      	ldr	r3, [pc, #92]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013378:	f107 0108 	add.w	r1, r7, #8
 801337c:	220a      	movs	r2, #10
 801337e:	4618      	mov	r0, r3
 8013380:	f002 fc31 	bl	8015be6 <RegionVerify>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d005      	beq.n	8013396 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801338a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801338e:	4b10      	ldr	r3, [pc, #64]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013390:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013394:	e089      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013396:	2303      	movs	r3, #3
 8013398:	75fb      	strb	r3, [r7, #23]
            break;
 801339a:	e086      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80133a2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80133a4:	4b0a      	ldr	r3, [pc, #40]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80133aa:	f107 0108 	add.w	r1, r7, #8
 80133ae:	2209      	movs	r2, #9
 80133b0:	4618      	mov	r0, r3
 80133b2:	f002 fc18 	bl	8015be6 <RegionVerify>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d005      	beq.n	80133c8 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80133bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80133c0:	4b03      	ldr	r3, [pc, #12]	; (80133d0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133c6:	e070      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133c8:	2303      	movs	r3, #3
 80133ca:	75fb      	strb	r3, [r7, #23]
            break;
 80133cc:	e06d      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
 80133ce:	bf00      	nop
 80133d0:	20000be4 	.word	0x20000be4
 80133d4:	0801dc3c 	.word	0x0801dc3c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	4a3a      	ldr	r2, [pc, #232]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80133de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80133e2:	4b39      	ldr	r3, [pc, #228]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80133e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80133e8:	4a37      	ldr	r2, [pc, #220]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80133ea:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80133ec:	e05d      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	791a      	ldrb	r2, [r3, #4]
 80133f2:	4b35      	ldr	r3, [pc, #212]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80133f4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80133f8:	4b33      	ldr	r3, [pc, #204]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80133fa:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80133fe:	4b32      	ldr	r3, [pc, #200]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8013404:	e051      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	4a2f      	ldr	r2, [pc, #188]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801340c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801340e:	e04c      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	4a2c      	ldr	r2, [pc, #176]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013416:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801341a:	e046      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801341c:	f7fe fdc8 	bl	8011fb0 <RestoreNvmData>
 8013420:	4603      	mov	r3, r0
 8013422:	75fb      	strb	r3, [r7, #23]
            break;
 8013424:	e041      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	799b      	ldrb	r3, [r3, #6]
 801342a:	2b01      	cmp	r3, #1
 801342c:	d80d      	bhi.n	801344a <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801342e:	4a26      	ldr	r2, [pc, #152]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6858      	ldr	r0, [r3, #4]
 801343c:	f001 fd12 	bl	8014e64 <LoRaMacCryptoSetLrWanVersion>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d030      	beq.n	80134a8 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013446:	2311      	movs	r3, #17
 8013448:	e03a      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801344a:	2303      	movs	r3, #3
 801344c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801344e:	e02b      	b.n	80134a8 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	4a1c      	ldr	r2, [pc, #112]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013456:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801345a:	e026      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	791a      	ldrb	r2, [r3, #4]
 8013460:	4b19      	ldr	r3, [pc, #100]	; (80134c8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013462:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8013466:	e020      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 fc88 	bl	8013d7e <LoRaMacMibClassBSetRequestConfirm>
 801346e:	4603      	mov	r3, r0
 8013470:	75fb      	strb	r3, [r7, #23]
            break;
 8013472:	e01a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013474:	bf00      	nop
 8013476:	e018      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013478:	bf00      	nop
 801347a:	e016      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801347c:	bf00      	nop
 801347e:	e014      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013480:	bf00      	nop
 8013482:	e012      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013484:	bf00      	nop
 8013486:	e010      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013488:	bf00      	nop
 801348a:	e00e      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801348c:	bf00      	nop
 801348e:	e00c      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013490:	bf00      	nop
 8013492:	e00a      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013494:	bf00      	nop
 8013496:	e008      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013498:	bf00      	nop
 801349a:	e006      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801349c:	bf00      	nop
 801349e:	e004      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80134a0:	bf00      	nop
 80134a2:	e002      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80134a4:	bf00      	nop
 80134a6:	e000      	b.n	80134aa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80134a8:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 80134aa:	7dfb      	ldrb	r3, [r7, #23]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d106      	bne.n	80134be <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80134b0:	4a06      	ldr	r2, [pc, #24]	; (80134cc <LoRaMacMibSetRequestConfirm+0x6dc>)
 80134b2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80134b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ba:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 80134be:	7dfb      	ldrb	r3, [r7, #23]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3718      	adds	r7, #24
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	20000be4 	.word	0x20000be4
 80134cc:	200006c4 	.word	0x200006c4

080134d0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b08a      	sub	sp, #40	; 0x28
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134d8:	2302      	movs	r3, #2
 80134da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80134de:	2300      	movs	r3, #0
 80134e0:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d101      	bne.n	80134ec <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80134e8:	2303      	movs	r3, #3
 80134ea:	e16c      	b.n	80137c6 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2200      	movs	r2, #0
 80134f0:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80134f2:	f7fc fc6b 	bl	800fdcc <LoRaMacIsBusy>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d001      	beq.n	8013500 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80134fc:	2301      	movs	r3, #1
 80134fe:	e162      	b.n	80137c6 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013500:	f001 f954 	bl	80147ac <LoRaMacConfirmQueueIsFull>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801350a:	2301      	movs	r3, #1
 801350c:	e15b      	b.n	80137c6 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801350e:	f001 f941 	bl	8014794 <LoRaMacConfirmQueueGetCnt>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d104      	bne.n	8013522 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013518:	2214      	movs	r2, #20
 801351a:	2100      	movs	r1, #0
 801351c:	48ac      	ldr	r0, [pc, #688]	; (80137d0 <LoRaMacMlmeRequest+0x300>)
 801351e:	f004 ff19 	bl	8018354 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013522:	4bac      	ldr	r3, [pc, #688]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 8013524:	2201      	movs	r2, #1
 8013526:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801352a:	4aaa      	ldr	r2, [pc, #680]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 801352c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013530:	f043 0304 	orr.w	r3, r3, #4
 8013534:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013540:	2301      	movs	r3, #1
 8013542:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013546:	2300      	movs	r3, #0
 8013548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 801354c:	2300      	movs	r3, #0
 801354e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	3b01      	subs	r3, #1
 8013558:	2b0c      	cmp	r3, #12
 801355a:	f200 8108 	bhi.w	801376e <LoRaMacMlmeRequest+0x29e>
 801355e:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <LoRaMacMlmeRequest+0x94>)
 8013560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013564:	08013599 	.word	0x08013599
 8013568:	0801376f 	.word	0x0801376f
 801356c:	0801376f 	.word	0x0801376f
 8013570:	0801366f 	.word	0x0801366f
 8013574:	08013691 	.word	0x08013691
 8013578:	0801376f 	.word	0x0801376f
 801357c:	0801376f 	.word	0x0801376f
 8013580:	0801376f 	.word	0x0801376f
 8013584:	080136af 	.word	0x080136af
 8013588:	0801376f 	.word	0x0801376f
 801358c:	0801373d 	.word	0x0801373d
 8013590:	080136d1 	.word	0x080136d1
 8013594:	0801371b 	.word	0x0801371b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013598:	4b8e      	ldr	r3, [pc, #568]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 801359a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801359e:	f003 0320 	and.w	r3, r3, #32
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80135a6:	2301      	movs	r3, #1
 80135a8:	e10d      	b.n	80137c6 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	791b      	ldrb	r3, [r3, #4]
 80135ae:	2b02      	cmp	r3, #2
 80135b0:	d12e      	bne.n	8013610 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 80135b2:	f7fe f995 	bl	80118e0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80135b6:	4b88      	ldr	r3, [pc, #544]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 80135b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	795b      	ldrb	r3, [r3, #5]
 80135c0:	b25b      	sxtb	r3, r3
 80135c2:	2200      	movs	r2, #0
 80135c4:	4619      	mov	r1, r3
 80135c6:	f002 fbf6 	bl	8015db6 <RegionAlternateDr>
 80135ca:	4603      	mov	r3, r0
 80135cc:	461a      	mov	r2, r3
 80135ce:	4b82      	ldr	r3, [pc, #520]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 80135d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80135d4:	2307      	movs	r3, #7
 80135d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 80135da:	20ff      	movs	r0, #255	; 0xff
 80135dc:	f7fd fefe 	bl	80113dc <SendReJoinReq>
 80135e0:	4603      	mov	r3, r0
 80135e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 80135e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 80c1 	beq.w	8013772 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80135f0:	4b79      	ldr	r3, [pc, #484]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 80135f2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	795b      	ldrb	r3, [r3, #5]
 80135fa:	b25b      	sxtb	r3, r3
 80135fc:	2201      	movs	r2, #1
 80135fe:	4619      	mov	r1, r3
 8013600:	f002 fbd9 	bl	8015db6 <RegionAlternateDr>
 8013604:	4603      	mov	r3, r0
 8013606:	461a      	mov	r2, r3
 8013608:	4b73      	ldr	r3, [pc, #460]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 801360a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801360e:	e0b0      	b.n	8013772 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	791b      	ldrb	r3, [r3, #4]
 8013614:	2b01      	cmp	r3, #1
 8013616:	f040 80ac 	bne.w	8013772 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801361a:	4b6f      	ldr	r3, [pc, #444]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 801361c:	2200      	movs	r2, #0
 801361e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013622:	2302      	movs	r3, #2
 8013624:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013626:	4b6c      	ldr	r3, [pc, #432]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 8013628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801362c:	f107 020c 	add.w	r2, r7, #12
 8013630:	4611      	mov	r1, r2
 8013632:	4618      	mov	r0, r3
 8013634:	f002 fac5 	bl	8015bc2 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	791a      	ldrb	r2, [r3, #4]
 801363c:	4b66      	ldr	r3, [pc, #408]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 801363e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013642:	2300      	movs	r3, #0
 8013644:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8013648:	2301      	movs	r3, #1
 801364a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 801364e:	4b61      	ldr	r3, [pc, #388]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 8013650:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013654:	691b      	ldr	r3, [r3, #16]
 8013656:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013658:	4a5e      	ldr	r2, [pc, #376]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 801365a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801365e:	f043 0320 	orr.w	r3, r3, #32
 8013662:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801366c:	e081      	b.n	8013772 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801366e:	2300      	movs	r3, #0
 8013670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013674:	f107 031c 	add.w	r3, r7, #28
 8013678:	2200      	movs	r2, #0
 801367a:	4619      	mov	r1, r3
 801367c:	2002      	movs	r0, #2
 801367e:	f000 fcfb 	bl	8014078 <LoRaMacCommandsAddCmd>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d076      	beq.n	8013776 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013688:	2313      	movs	r3, #19
 801368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801368e:	e072      	b.n	8013776 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	8898      	ldrh	r0, [r3, #4]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6899      	ldr	r1, [r3, #8]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	461a      	mov	r2, r3
 80136a2:	f7fe fc65 	bl	8011f70 <SetTxContinuousWave>
 80136a6:	4603      	mov	r3, r0
 80136a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80136ac:	e06a      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80136ae:	2300      	movs	r3, #0
 80136b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80136b4:	f107 031c 	add.w	r3, r7, #28
 80136b8:	2200      	movs	r2, #0
 80136ba:	4619      	mov	r1, r3
 80136bc:	200d      	movs	r0, #13
 80136be:	f000 fcdb 	bl	8014078 <LoRaMacCommandsAddCmd>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d058      	beq.n	801377a <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136c8:	2313      	movs	r3, #19
 80136ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80136ce:	e054      	b.n	801377a <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80136d0:	4b41      	ldr	r3, [pc, #260]	; (80137d8 <LoRaMacMlmeRequest+0x308>)
 80136d2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d151      	bne.n	801377e <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	791b      	ldrb	r3, [r3, #4]
 80136de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	791b      	ldrb	r3, [r3, #4]
 80136e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	4618      	mov	r0, r3
 80136ee:	f000 fb1b 	bl	8013d28 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80136f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80136f6:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80136fe:	f107 031c 	add.w	r3, r7, #28
 8013702:	2201      	movs	r2, #1
 8013704:	4619      	mov	r1, r3
 8013706:	2010      	movs	r0, #16
 8013708:	f000 fcb6 	bl	8014078 <LoRaMacCommandsAddCmd>
 801370c:	4603      	mov	r3, r0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d035      	beq.n	801377e <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013712:	2313      	movs	r3, #19
 8013714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8013718:	e031      	b.n	801377e <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013720:	f107 031c 	add.w	r3, r7, #28
 8013724:	2200      	movs	r2, #0
 8013726:	4619      	mov	r1, r3
 8013728:	2012      	movs	r0, #18
 801372a:	f000 fca5 	bl	8014078 <LoRaMacCommandsAddCmd>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	d026      	beq.n	8013782 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013734:	2313      	movs	r3, #19
 8013736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801373a:	e022      	b.n	8013782 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801373c:	2301      	movs	r3, #1
 801373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013742:	f000 faa7 	bl	8013c94 <LoRaMacClassBIsAcquisitionInProgress>
 8013746:	4603      	mov	r3, r0
 8013748:	f083 0301 	eor.w	r3, r3, #1
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d009      	beq.n	8013766 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013752:	2000      	movs	r0, #0
 8013754:	f000 fa80 	bl	8013c58 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013758:	2000      	movs	r0, #0
 801375a:	f000 faa2 	bl	8013ca2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801375e:	2300      	movs	r3, #0
 8013760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013764:	e00e      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8013766:	2301      	movs	r3, #1
 8013768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801376c:	e00a      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801376e:	bf00      	nop
 8013770:	e008      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013772:	bf00      	nop
 8013774:	e006      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013776:	bf00      	nop
 8013778:	e004      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
            break;
 801377a:	bf00      	nop
 801377c:	e002      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
            break;
 801377e:	bf00      	nop
 8013780:	e000      	b.n	8013784 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013782:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013784:	4b13      	ldr	r3, [pc, #76]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 8013786:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801378e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013792:	2b00      	cmp	r3, #0
 8013794:	d010      	beq.n	80137b8 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013796:	f000 fffd 	bl	8014794 <LoRaMacConfirmQueueGetCnt>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d110      	bne.n	80137c2 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 80137a0:	4b0c      	ldr	r3, [pc, #48]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80137a8:	4a0a      	ldr	r2, [pc, #40]	; (80137d4 <LoRaMacMlmeRequest+0x304>)
 80137aa:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80137ae:	f36f 0382 	bfc	r3, #2, #1
 80137b2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 80137b6:	e004      	b.n	80137c2 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80137b8:	f107 0320 	add.w	r3, r7, #32
 80137bc:	4618      	mov	r0, r3
 80137be:	f000 fe9b 	bl	80144f8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80137c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3728      	adds	r7, #40	; 0x28
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	20000b1c 	.word	0x20000b1c
 80137d4:	200006c4 	.word	0x200006c4
 80137d8:	20000be4 	.word	0x20000be4

080137dc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80137dc:	b5b0      	push	{r4, r5, r7, lr}
 80137de:	b092      	sub	sp, #72	; 0x48
 80137e0:	af02      	add	r7, sp, #8
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	460b      	mov	r3, r1
 80137e6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80137e8:	2302      	movs	r3, #2
 80137ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80137ee:	2300      	movs	r3, #0
 80137f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80137f4:	2300      	movs	r3, #0
 80137f6:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 80137fe:	2300      	movs	r3, #0
 8013800:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801380a:	2303      	movs	r3, #3
 801380c:	e113      	b.n	8013a36 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013814:	f7fc fada 	bl	800fdcc <LoRaMacIsBusy>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d001      	beq.n	8013822 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801381e:	2301      	movs	r3, #1
 8013820:	e109      	b.n	8013a36 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f107 040c 	add.w	r4, r7, #12
 8013828:	461d      	mov	r5, r3
 801382a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801382c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801382e:	682b      	ldr	r3, [r5, #0]
 8013830:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013832:	2300      	movs	r3, #0
 8013834:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013838:	2214      	movs	r2, #20
 801383a:	2100      	movs	r1, #0
 801383c:	4880      	ldr	r0, [pc, #512]	; (8013a40 <LoRaMacMcpsRequest+0x264>)
 801383e:	f004 fd89 	bl	8018354 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013842:	4b80      	ldr	r3, [pc, #512]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 8013844:	2201      	movs	r2, #1
 8013846:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801384a:	4b7f      	ldr	r3, [pc, #508]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801384c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013850:	2b02      	cmp	r3, #2
 8013852:	d111      	bne.n	8013878 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013854:	4b7c      	ldr	r3, [pc, #496]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013856:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801385a:	2b02      	cmp	r3, #2
 801385c:	d10c      	bne.n	8013878 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801385e:	4b7a      	ldr	r3, [pc, #488]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013860:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8013864:	f083 0301 	eor.w	r3, r3, #1
 8013868:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801386a:	2b00      	cmp	r3, #0
 801386c:	d004      	beq.n	8013878 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801386e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013870:	2b00      	cmp	r3, #0
 8013872:	d101      	bne.n	8013878 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013874:	2301      	movs	r3, #1
 8013876:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013878:	7b3b      	ldrb	r3, [r7, #12]
 801387a:	2b03      	cmp	r3, #3
 801387c:	d030      	beq.n	80138e0 <LoRaMacMcpsRequest+0x104>
 801387e:	2b03      	cmp	r3, #3
 8013880:	dc3f      	bgt.n	8013902 <LoRaMacMcpsRequest+0x126>
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <LoRaMacMcpsRequest+0xb0>
 8013886:	2b01      	cmp	r3, #1
 8013888:	d015      	beq.n	80138b6 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801388a:	e03a      	b.n	8013902 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801388c:	2301      	movs	r3, #1
 801388e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013896:	2202      	movs	r2, #2
 8013898:	f362 1347 	bfi	r3, r2, #5, #3
 801389c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80138a0:	7c3b      	ldrb	r3, [r7, #16]
 80138a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80138aa:	8b3b      	ldrh	r3, [r7, #24]
 80138ac:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80138ae:	7ebb      	ldrb	r3, [r7, #26]
 80138b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80138b4:	e026      	b.n	8013904 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80138b6:	2301      	movs	r3, #1
 80138b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80138bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80138c0:	2204      	movs	r2, #4
 80138c2:	f362 1347 	bfi	r3, r2, #5, #3
 80138c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 80138ca:	7c3b      	ldrb	r3, [r7, #16]
 80138cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80138d4:	8b3b      	ldrh	r3, [r7, #24]
 80138d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 80138d8:	7ebb      	ldrb	r3, [r7, #26]
 80138da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80138de:	e011      	b.n	8013904 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80138e0:	2301      	movs	r3, #1
 80138e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80138e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80138ea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80138ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80138f6:	8abb      	ldrh	r3, [r7, #20]
 80138f8:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 80138fa:	7dbb      	ldrb	r3, [r7, #22]
 80138fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013900:	e000      	b.n	8013904 <LoRaMacMcpsRequest+0x128>
            break;
 8013902:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013904:	2302      	movs	r3, #2
 8013906:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801390a:	4b4f      	ldr	r3, [pc, #316]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801390c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013910:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013914:	4b4c      	ldr	r3, [pc, #304]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801391a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801391e:	4611      	mov	r1, r2
 8013920:	4618      	mov	r0, r3
 8013922:	f002 f925 	bl	8015b70 <RegionGetPhyParam>
 8013926:	4603      	mov	r3, r0
 8013928:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392c:	b25b      	sxtb	r3, r3
 801392e:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8013932:	4293      	cmp	r3, r2
 8013934:	bfb8      	it	lt
 8013936:	4613      	movlt	r3, r2
 8013938:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801393c:	4b42      	ldr	r3, [pc, #264]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801393e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013942:	4a41      	ldr	r2, [pc, #260]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013944:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013948:	4a3f      	ldr	r2, [pc, #252]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801394a:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801394e:	4618      	mov	r0, r3
 8013950:	f7fc fbd4 	bl	80100fc <CheckForMinimumAbpDatarate>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d002      	beq.n	8013960 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8013960:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013964:	2b00      	cmp	r3, #0
 8013966:	d05f      	beq.n	8013a28 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013968:	4b37      	ldr	r3, [pc, #220]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801396a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801396e:	f083 0301 	eor.w	r3, r3, #1
 8013972:	b2db      	uxtb	r3, r3
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10e      	bne.n	8013996 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013978:	4b33      	ldr	r3, [pc, #204]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 801397a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801397e:	4a32      	ldr	r2, [pc, #200]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013980:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013984:	4a30      	ldr	r2, [pc, #192]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 8013986:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801398a:	4618      	mov	r0, r3
 801398c:	f7fc fbb6 	bl	80100fc <CheckForMinimumAbpDatarate>
 8013990:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013992:	2b00      	cmp	r3, #0
 8013994:	d01c      	beq.n	80139d0 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013996:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801399a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801399e:	4b2a      	ldr	r3, [pc, #168]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 80139a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80139a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80139a8:	4b27      	ldr	r3, [pc, #156]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 80139aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139ae:	f107 0120 	add.w	r1, r7, #32
 80139b2:	2205      	movs	r2, #5
 80139b4:	4618      	mov	r0, r3
 80139b6:	f002 f916 	bl	8015be6 <RegionVerify>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d005      	beq.n	80139cc <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80139c0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80139c4:	4b20      	ldr	r3, [pc, #128]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 80139c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80139ca:	e001      	b.n	80139d0 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80139cc:	2303      	movs	r3, #3
 80139ce:	e032      	b.n	8013a36 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80139d0:	4b1d      	ldr	r3, [pc, #116]	; (8013a48 <LoRaMacMcpsRequest+0x26c>)
 80139d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139d6:	4a1b      	ldr	r2, [pc, #108]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 80139d8:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 80139dc:	4611      	mov	r1, r2
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fc fc76 	bl	80102d0 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80139e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80139e6:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80139ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80139ee:	78fb      	ldrb	r3, [r7, #3]
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	4613      	mov	r3, r2
 80139f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139f6:	f7fd fc0d 	bl	8011214 <Send>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10b      	bne.n	8013a20 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013a08:	7b3a      	ldrb	r2, [r7, #12]
 8013a0a:	4b0e      	ldr	r3, [pc, #56]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 8013a0c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013a10:	4a0c      	ldr	r2, [pc, #48]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 8013a12:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013a16:	f043 0301 	orr.w	r3, r3, #1
 8013a1a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8013a1e:	e003      	b.n	8013a28 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013a20:	4b08      	ldr	r3, [pc, #32]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013a28:	4b06      	ldr	r3, [pc, #24]	; (8013a44 <LoRaMacMcpsRequest+0x268>)
 8013a2a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	611a      	str	r2, [r3, #16]

    return status;
 8013a32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3740      	adds	r7, #64	; 0x40
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a3e:	bf00      	nop
 8013a40:	20000b08 	.word	0x20000b08
 8013a44:	200006c4 	.word	0x200006c4
 8013a48:	20000be4 	.word	0x20000be4

08013a4c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	4603      	mov	r3, r0
 8013a54:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a56:	79fb      	ldrb	r3, [r7, #7]
 8013a58:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a5a:	4b0a      	ldr	r3, [pc, #40]	; (8013a84 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a60:	f107 010c 	add.w	r1, r7, #12
 8013a64:	220f      	movs	r2, #15
 8013a66:	4618      	mov	r0, r3
 8013a68:	f002 f8bd 	bl	8015be6 <RegionVerify>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d003      	beq.n	8013a7a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013a72:	4a04      	ldr	r2, [pc, #16]	; (8013a84 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013a74:	79fb      	ldrb	r3, [r7, #7]
 8013a76:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8013a7a:	bf00      	nop
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20000be4 	.word	0x20000be4

08013a88 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013a8c:	f7fe ff26 	bl	80128dc <LoRaMacStop>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d111      	bne.n	8013aba <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013a96:	480a      	ldr	r0, [pc, #40]	; (8013ac0 <LoRaMacDeInitialization+0x38>)
 8013a98:	f008 fd6c 	bl	801c574 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013a9c:	4809      	ldr	r0, [pc, #36]	; (8013ac4 <LoRaMacDeInitialization+0x3c>)
 8013a9e:	f008 fd69 	bl	801c574 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013aa2:	4809      	ldr	r0, [pc, #36]	; (8013ac8 <LoRaMacDeInitialization+0x40>)
 8013aa4:	f008 fd66 	bl	801c574 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013aa8:	f000 f948 	bl	8013d3c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013aac:	f7fd ff18 	bl	80118e0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013ab0:	4b06      	ldr	r3, [pc, #24]	; (8013acc <LoRaMacDeInitialization+0x44>)
 8013ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	e000      	b.n	8013abc <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013aba:	2301      	movs	r3, #1
    }
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	20000a2c 	.word	0x20000a2c
 8013ac4:	20000a44 	.word	0x20000a44
 8013ac8:	20000a5c 	.word	0x20000a5c
 8013acc:	0801dc3c 	.word	0x0801dc3c

08013ad0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b08c      	sub	sp, #48	; 0x30
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	7b1b      	ldrb	r3, [r3, #12]
 8013ae8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	7b5b      	ldrb	r3, [r3, #13]
 8013af0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	7b9b      	ldrb	r3, [r3, #14]
 8013af8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	685a      	ldr	r2, [r3, #4]
 8013b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b02:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	785b      	ldrb	r3, [r3, #1]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f000 8088 	beq.w	8013c1e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013b0e:	2302      	movs	r3, #2
 8013b10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	7bdb      	ldrb	r3, [r3, #15]
 8013b18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	7c1b      	ldrb	r3, [r3, #16]
 8013b20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b24:	4611      	mov	r1, r2
 8013b26:	4618      	mov	r0, r3
 8013b28:	f002 f822 	bl	8015b70 <RegionGetPhyParam>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013b30:	6a3b      	ldr	r3, [r7, #32]
 8013b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013b36:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8013b3a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	bfb8      	it	lt
 8013b42:	4613      	movlt	r3, r2
 8013b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	8912      	ldrh	r2, [r2, #8]
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d302      	bcc.n	8013b5a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013b54:	2301      	movs	r3, #1
 8013b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	68fa      	ldr	r2, [r7, #12]
 8013b60:	8912      	ldrh	r2, [r2, #8]
 8013b62:	4611      	mov	r1, r2
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	8952      	ldrh	r2, [r2, #10]
 8013b68:	440a      	add	r2, r1
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d30f      	bcc.n	8013b8e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013b6e:	230a      	movs	r3, #10
 8013b70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	7c1b      	ldrb	r3, [r3, #16]
 8013b78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f001 fff6 	bl	8015b70 <RegionGetPhyParam>
 8013b84:	4603      	mov	r3, r0
 8013b86:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	8912      	ldrh	r2, [r2, #8]
 8013b96:	4611      	mov	r1, r2
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	8952      	ldrh	r2, [r2, #10]
 8013b9c:	0052      	lsls	r2, r2, #1
 8013b9e:	440a      	add	r2, r1
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d33c      	bcc.n	8013c1e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	8912      	ldrh	r2, [r2, #8]
 8013bac:	1a9b      	subs	r3, r3, r2
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	8952      	ldrh	r2, [r2, #10]
 8013bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bb6:	fb01 f202 	mul.w	r2, r1, r2
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d12e      	bne.n	8013c1e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013bc0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013bc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d110      	bne.n	8013bee <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d009      	beq.n	8013be8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013bd4:	2302      	movs	r3, #2
 8013bd6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	7c1b      	ldrb	r3, [r3, #16]
 8013bdc:	f107 0210 	add.w	r2, r7, #16
 8013be0:	4611      	mov	r1, r2
 8013be2:	4618      	mov	r0, r3
 8013be4:	f001 ffed 	bl	8015bc2 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013be8:	2301      	movs	r3, #1
 8013bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013bee:	2321      	movs	r3, #33	; 0x21
 8013bf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8013bf4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013bf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	7bdb      	ldrb	r3, [r3, #15]
 8013c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	7c1b      	ldrb	r3, [r3, #16]
 8013c08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013c0c:	4611      	mov	r1, r2
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f001 ffae 	bl	8015b70 <RegionGetPhyParam>
 8013c14:	4603      	mov	r3, r0
 8013c16:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013c18:	6a3b      	ldr	r3, [r7, #32]
 8013c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013c24:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013c2c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013c34:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3730      	adds	r7, #48	; 0x30
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013c42:	b480      	push	{r7}
 8013c44:	b085      	sub	sp, #20
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	60f8      	str	r0, [r7, #12]
 8013c4a:	60b9      	str	r1, [r7, #8]
 8013c4c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c4e:	bf00      	nop
 8013c50:	3714      	adds	r7, #20
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bc80      	pop	{r7}
 8013c56:	4770      	bx	lr

08013c58 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013c58:	b480      	push	{r7}
 8013c5a:	b083      	sub	sp, #12
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	4603      	mov	r3, r0
 8013c60:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c62:	bf00      	nop
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bc80      	pop	{r7}
 8013c6a:	4770      	bx	lr

08013c6c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b083      	sub	sp, #12
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	4603      	mov	r3, r0
 8013c74:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c76:	bf00      	nop
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bc80      	pop	{r7}
 8013c7e:	4770      	bx	lr

08013c80 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	4603      	mov	r3, r0
 8013c88:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c8a:	bf00      	nop
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bc80      	pop	{r7}
 8013c92:	4770      	bx	lr

08013c94 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013c94:	b480      	push	{r7}
 8013c96:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013c98:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bc80      	pop	{r7}
 8013ca0:	4770      	bx	lr

08013ca2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013ca2:	b480      	push	{r7}
 8013ca4:	b083      	sub	sp, #12
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013caa:	bf00      	nop
 8013cac:	370c      	adds	r7, #12
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bc80      	pop	{r7}
 8013cb2:	4770      	bx	lr

08013cb4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cbc:	bf00      	nop
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bc80      	pop	{r7}
 8013cc4:	4770      	bx	lr

08013cc6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013cc6:	b480      	push	{r7}
 8013cc8:	b083      	sub	sp, #12
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cce:	bf00      	nop
 8013cd0:	370c      	adds	r7, #12
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bc80      	pop	{r7}
 8013cd6:	4770      	bx	lr

08013cd8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013ce4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bc80      	pop	{r7}
 8013cee:	4770      	bx	lr

08013cf0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013cf4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bc80      	pop	{r7}
 8013cfc:	4770      	bx	lr

08013cfe <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013cfe:	b480      	push	{r7}
 8013d00:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d02:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bc80      	pop	{r7}
 8013d0a:	4770      	bx	lr

08013d0c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d10:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bc80      	pop	{r7}
 8013d18:	4770      	bx	lr

08013d1a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d1e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bc80      	pop	{r7}
 8013d26:	4770      	bx	lr

08013d28 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	4603      	mov	r3, r0
 8013d30:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d32:	bf00      	nop
 8013d34:	370c      	adds	r7, #12
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bc80      	pop	{r7}
 8013d3a:	4770      	bx	lr

08013d3c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d40:	bf00      	nop
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bc80      	pop	{r7}
 8013d46:	4770      	bx	lr

08013d48 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013d48:	b480      	push	{r7}
 8013d4a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d4c:	bf00      	nop
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bc80      	pop	{r7}
 8013d52:	4770      	bx	lr

08013d54 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d5e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	370c      	adds	r7, #12
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bc80      	pop	{r7}
 8013d68:	4770      	bx	lr

08013d6a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d72:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bc80      	pop	{r7}
 8013d7c:	4770      	bx	lr

08013d7e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013d7e:	b480      	push	{r7}
 8013d80:	b083      	sub	sp, #12
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d86:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	370c      	adds	r7, #12
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bc80      	pop	{r7}
 8013d90:	4770      	bx	lr

08013d92 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013d92:	b480      	push	{r7}
 8013d94:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d96:	bf00      	nop
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bc80      	pop	{r7}
 8013d9c:	4770      	bx	lr

08013d9e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b083      	sub	sp, #12
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	4603      	mov	r3, r0
 8013da6:	6039      	str	r1, [r7, #0]
 8013da8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013daa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	370c      	adds	r7, #12
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bc80      	pop	{r7}
 8013db4:	4770      	bx	lr

08013db6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013db6:	b480      	push	{r7}
 8013db8:	b083      	sub	sp, #12
 8013dba:	af00      	add	r7, sp, #0
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	603a      	str	r2, [r7, #0]
 8013dc0:	80fb      	strh	r3, [r7, #6]
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dc6:	bf00      	nop
 8013dc8:	370c      	adds	r7, #12
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bc80      	pop	{r7}
 8013dce:	4770      	bx	lr

08013dd0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dd4:	bf00      	nop
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bc80      	pop	{r7}
 8013dda:	4770      	bx	lr

08013ddc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013de4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bc80      	pop	{r7}
 8013dee:	4770      	bx	lr

08013df0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013df8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	370c      	adds	r7, #12
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bc80      	pop	{r7}
 8013e02:	4770      	bx	lr

08013e04 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e04:	b480      	push	{r7}
 8013e06:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e08:	bf00      	nop
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bc80      	pop	{r7}
 8013e0e:	4770      	bx	lr

08013e10 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013e10:	b480      	push	{r7}
 8013e12:	b083      	sub	sp, #12
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e1c:	bf00      	nop
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bc80      	pop	{r7}
 8013e24:	4770      	bx	lr

08013e26 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013e26:	b480      	push	{r7}
 8013e28:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e2a:	bf00      	nop
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bc80      	pop	{r7}
 8013e30:	4770      	bx	lr

08013e32 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013e32:	b480      	push	{r7}
 8013e34:	b085      	sub	sp, #20
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e3e:	2300      	movs	r3, #0
 8013e40:	81fb      	strh	r3, [r7, #14]
 8013e42:	e00a      	b.n	8013e5a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013e44:	89fb      	ldrh	r3, [r7, #14]
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	4413      	add	r3, r2
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d001      	beq.n	8013e54 <IsSlotFree+0x22>
        {
            return false;
 8013e50:	2300      	movs	r3, #0
 8013e52:	e006      	b.n	8013e62 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e54:	89fb      	ldrh	r3, [r7, #14]
 8013e56:	3301      	adds	r3, #1
 8013e58:	81fb      	strh	r3, [r7, #14]
 8013e5a:	89fb      	ldrh	r3, [r7, #14]
 8013e5c:	2b0f      	cmp	r3, #15
 8013e5e:	d9f1      	bls.n	8013e44 <IsSlotFree+0x12>
        }
    }
    return true;
 8013e60:	2301      	movs	r3, #1
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3714      	adds	r7, #20
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bc80      	pop	{r7}
 8013e6a:	4770      	bx	lr

08013e6c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013e72:	2300      	movs	r3, #0
 8013e74:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013e76:	e007      	b.n	8013e88 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013e78:	79fb      	ldrb	r3, [r7, #7]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	2b20      	cmp	r3, #32
 8013e82:	d101      	bne.n	8013e88 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013e84:	2300      	movs	r3, #0
 8013e86:	e012      	b.n	8013eae <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013e88:	79fb      	ldrb	r3, [r7, #7]
 8013e8a:	011b      	lsls	r3, r3, #4
 8013e8c:	3308      	adds	r3, #8
 8013e8e:	4a0a      	ldr	r2, [pc, #40]	; (8013eb8 <MallocNewMacCommandSlot+0x4c>)
 8013e90:	4413      	add	r3, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff ffcd 	bl	8013e32 <IsSlotFree>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	f083 0301 	eor.w	r3, r3, #1
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d1e9      	bne.n	8013e78 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	011b      	lsls	r3, r3, #4
 8013ea8:	3308      	adds	r3, #8
 8013eaa:	4a03      	ldr	r2, [pc, #12]	; (8013eb8 <MallocNewMacCommandSlot+0x4c>)
 8013eac:	4413      	add	r3, r2
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	200017a4 	.word	0x200017a4

08013ebc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d101      	bne.n	8013ece <FreeMacCommandSlot+0x12>
    {
        return false;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	e005      	b.n	8013eda <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013ece:	2210      	movs	r2, #16
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f004 fa3e 	bl	8018354 <memset1>

    return true;
 8013ed8:	2301      	movs	r3, #1
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013ee2:	b480      	push	{r7}
 8013ee4:	b083      	sub	sp, #12
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d101      	bne.n	8013ef4 <LinkedListInit+0x12>
    {
        return false;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	e006      	b.n	8013f02 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	605a      	str	r2, [r3, #4]

    return true;
 8013f00:	2301      	movs	r3, #1
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	370c      	adds	r7, #12
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bc80      	pop	{r7}
 8013f0a:	4770      	bx	lr

08013f0c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d002      	beq.n	8013f22 <LinkedListAdd+0x16>
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d101      	bne.n	8013f26 <LinkedListAdd+0x1a>
    {
        return false;
 8013f22:	2300      	movs	r3, #0
 8013f24:	e015      	b.n	8013f52 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d102      	bne.n	8013f34 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	683a      	ldr	r2, [r7, #0]
 8013f32:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d003      	beq.n	8013f44 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	683a      	ldr	r2, [r7, #0]
 8013f42:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	2200      	movs	r2, #0
 8013f48:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	683a      	ldr	r2, [r7, #0]
 8013f4e:	605a      	str	r2, [r3, #4]

    return true;
 8013f50:	2301      	movs	r3, #1
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bc80      	pop	{r7}
 8013f5a:	4770      	bx	lr

08013f5c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b085      	sub	sp, #20
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d002      	beq.n	8013f72 <LinkedListGetPrevious+0x16>
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013f72:	2300      	movs	r3, #0
 8013f74:	e016      	b.n	8013fa4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013f7c:	683a      	ldr	r2, [r7, #0]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d00c      	beq.n	8013f9e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f84:	e002      	b.n	8013f8c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d007      	beq.n	8013fa2 <LinkedListGetPrevious+0x46>
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	683a      	ldr	r2, [r7, #0]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d1f4      	bne.n	8013f86 <LinkedListGetPrevious+0x2a>
 8013f9c:	e001      	b.n	8013fa2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3714      	adds	r7, #20
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bc80      	pop	{r7}
 8013fac:	4770      	bx	lr

08013fae <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fae:	b580      	push	{r7, lr}
 8013fb0:	b084      	sub	sp, #16
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
 8013fb6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d002      	beq.n	8013fc4 <LinkedListRemove+0x16>
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d101      	bne.n	8013fc8 <LinkedListRemove+0x1a>
    {
        return false;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	e020      	b.n	801400a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013fc8:	6839      	ldr	r1, [r7, #0]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7ff ffc6 	bl	8013f5c <LinkedListGetPrevious>
 8013fd0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	683a      	ldr	r2, [r7, #0]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d103      	bne.n	8013fe4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d102      	bne.n	8013ff4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d003      	beq.n	8014002 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	2200      	movs	r2, #0
 8014006:	601a      	str	r2, [r3, #0]

    return true;
 8014008:	2301      	movs	r3, #1
}
 801400a:	4618      	mov	r0, r3
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
	...

08014014 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	4603      	mov	r3, r0
 801401c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801401e:	79fb      	ldrb	r3, [r7, #7]
 8014020:	2b11      	cmp	r3, #17
 8014022:	bf8c      	ite	hi
 8014024:	2201      	movhi	r2, #1
 8014026:	2200      	movls	r2, #0
 8014028:	b2d2      	uxtb	r2, r2
 801402a:	2a00      	cmp	r2, #0
 801402c:	d10c      	bne.n	8014048 <IsSticky+0x34>
 801402e:	2201      	movs	r2, #1
 8014030:	409a      	lsls	r2, r3
 8014032:	4b08      	ldr	r3, [pc, #32]	; (8014054 <IsSticky+0x40>)
 8014034:	4013      	ands	r3, r2
 8014036:	2b00      	cmp	r3, #0
 8014038:	bf14      	ite	ne
 801403a:	2301      	movne	r3, #1
 801403c:	2300      	moveq	r3, #0
 801403e:	b2db      	uxtb	r3, r3
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014044:	2301      	movs	r3, #1
 8014046:	e000      	b.n	801404a <IsSticky+0x36>
        default:
            return false;
 8014048:	2300      	movs	r3, #0
    }
}
 801404a:	4618      	mov	r0, r3
 801404c:	370c      	adds	r7, #12
 801404e:	46bd      	mov	sp, r7
 8014050:	bc80      	pop	{r7}
 8014052:	4770      	bx	lr
 8014054:	00020720 	.word	0x00020720

08014058 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801405c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8014060:	2100      	movs	r1, #0
 8014062:	4804      	ldr	r0, [pc, #16]	; (8014074 <LoRaMacCommandsInit+0x1c>)
 8014064:	f004 f976 	bl	8018354 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014068:	4802      	ldr	r0, [pc, #8]	; (8014074 <LoRaMacCommandsInit+0x1c>)
 801406a:	f7ff ff3a 	bl	8013ee2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801406e:	2300      	movs	r3, #0
}
 8014070:	4618      	mov	r0, r3
 8014072:	bd80      	pop	{r7, pc}
 8014074:	200017a4 	.word	0x200017a4

08014078 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	4603      	mov	r3, r0
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801408c:	2301      	movs	r3, #1
 801408e:	e033      	b.n	80140f8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014090:	f7ff feec 	bl	8013e6c <MallocNewMacCommandSlot>
 8014094:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d101      	bne.n	80140a0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801409c:	2302      	movs	r3, #2
 801409e:	e02b      	b.n	80140f8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80140a0:	6979      	ldr	r1, [r7, #20]
 80140a2:	4817      	ldr	r0, [pc, #92]	; (8014100 <LoRaMacCommandsAddCmd+0x88>)
 80140a4:	f7ff ff32 	bl	8013f0c <LinkedListAdd>
 80140a8:	4603      	mov	r3, r0
 80140aa:	f083 0301 	eor.w	r3, r3, #1
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d001      	beq.n	80140b8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80140b4:	2305      	movs	r3, #5
 80140b6:	e01f      	b.n	80140f8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	7bfa      	ldrb	r2, [r7, #15]
 80140bc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	3305      	adds	r3, #5
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	b292      	uxth	r2, r2
 80140cc:	68b9      	ldr	r1, [r7, #8]
 80140ce:	4618      	mov	r0, r3
 80140d0:	f004 f905 	bl	80182de <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80140d4:	7bfb      	ldrb	r3, [r7, #15]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ff ff9c 	bl	8014014 <IsSticky>
 80140dc:	4603      	mov	r3, r0
 80140de:	461a      	mov	r2, r3
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80140e4:	4b06      	ldr	r3, [pc, #24]	; (8014100 <LoRaMacCommandsAddCmd+0x88>)
 80140e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	4413      	add	r3, r2
 80140ee:	3301      	adds	r3, #1
 80140f0:	4a03      	ldr	r2, [pc, #12]	; (8014100 <LoRaMacCommandsAddCmd+0x88>)
 80140f2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80140f6:	2300      	movs	r3, #0
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3718      	adds	r7, #24
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	200017a4 	.word	0x200017a4

08014104 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d101      	bne.n	8014116 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014112:	2301      	movs	r3, #1
 8014114:	e021      	b.n	801415a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014116:	6879      	ldr	r1, [r7, #4]
 8014118:	4812      	ldr	r0, [pc, #72]	; (8014164 <LoRaMacCommandsRemoveCmd+0x60>)
 801411a:	f7ff ff48 	bl	8013fae <LinkedListRemove>
 801411e:	4603      	mov	r3, r0
 8014120:	f083 0301 	eor.w	r3, r3, #1
 8014124:	b2db      	uxtb	r3, r3
 8014126:	2b00      	cmp	r3, #0
 8014128:	d001      	beq.n	801412e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801412a:	2303      	movs	r3, #3
 801412c:	e015      	b.n	801415a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801412e:	4b0d      	ldr	r3, [pc, #52]	; (8014164 <LoRaMacCommandsRemoveCmd+0x60>)
 8014130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	3b01      	subs	r3, #1
 801413c:	4a09      	ldr	r2, [pc, #36]	; (8014164 <LoRaMacCommandsRemoveCmd+0x60>)
 801413e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff feba 	bl	8013ebc <FreeMacCommandSlot>
 8014148:	4603      	mov	r3, r0
 801414a:	f083 0301 	eor.w	r3, r3, #1
 801414e:	b2db      	uxtb	r3, r3
 8014150:	2b00      	cmp	r3, #0
 8014152:	d001      	beq.n	8014158 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014154:	2305      	movs	r3, #5
 8014156:	e000      	b.n	801415a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014158:	2300      	movs	r3, #0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3708      	adds	r7, #8
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	200017a4 	.word	0x200017a4

08014168 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801416e:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014174:	e012      	b.n	801419c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	7b1b      	ldrb	r3, [r3, #12]
 801417a:	f083 0301 	eor.w	r3, r3, #1
 801417e:	b2db      	uxtb	r3, r3
 8014180:	2b00      	cmp	r3, #0
 8014182:	d008      	beq.n	8014196 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7ff ffba 	bl	8014104 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	607b      	str	r3, [r7, #4]
 8014194:	e002      	b.n	801419c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d1e9      	bne.n	8014176 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80141a2:	2300      	movs	r3, #0
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	200017a4 	.word	0x200017a4

080141b0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80141b6:	4b0e      	ldr	r3, [pc, #56]	; (80141f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80141bc:	e00f      	b.n	80141de <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	791b      	ldrb	r3, [r3, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff ff23 	bl	8014014 <IsSticky>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d002      	beq.n	80141da <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff ff95 	bl	8014104 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1ec      	bne.n	80141be <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	200017a4 	.word	0x200017a4

080141f4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80141f4:	b480      	push	{r7}
 80141f6:	b083      	sub	sp, #12
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d101      	bne.n	8014206 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014202:	2301      	movs	r3, #1
 8014204:	e005      	b.n	8014212 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014206:	4b05      	ldr	r3, [pc, #20]	; (801421c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014208:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014210:	2300      	movs	r3, #0
}
 8014212:	4618      	mov	r0, r3
 8014214:	370c      	adds	r7, #12
 8014216:	46bd      	mov	sp, r7
 8014218:	bc80      	pop	{r7}
 801421a:	4770      	bx	lr
 801421c:	200017a4 	.word	0x200017a4

08014220 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b088      	sub	sp, #32
 8014224:	af00      	add	r7, sp, #0
 8014226:	60f8      	str	r0, [r7, #12]
 8014228:	60b9      	str	r1, [r7, #8]
 801422a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801422c:	4b25      	ldr	r3, [pc, #148]	; (80142c4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014232:	2300      	movs	r3, #0
 8014234:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d002      	beq.n	8014242 <LoRaMacCommandsSerializeCmds+0x22>
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d126      	bne.n	8014290 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014242:	2301      	movs	r3, #1
 8014244:	e039      	b.n	80142ba <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014246:	7efb      	ldrb	r3, [r7, #27]
 8014248:	68fa      	ldr	r2, [r7, #12]
 801424a:	1ad2      	subs	r2, r2, r3
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	3301      	adds	r3, #1
 8014252:	429a      	cmp	r2, r3
 8014254:	d320      	bcc.n	8014298 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014256:	7efb      	ldrb	r3, [r7, #27]
 8014258:	1c5a      	adds	r2, r3, #1
 801425a:	76fa      	strb	r2, [r7, #27]
 801425c:	461a      	mov	r2, r3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4413      	add	r3, r2
 8014262:	69fa      	ldr	r2, [r7, #28]
 8014264:	7912      	ldrb	r2, [r2, #4]
 8014266:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014268:	7efb      	ldrb	r3, [r7, #27]
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	18d0      	adds	r0, r2, r3
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	1d59      	adds	r1, r3, #5
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	b29b      	uxth	r3, r3
 8014278:	461a      	mov	r2, r3
 801427a:	f004 f830 	bl	80182de <memcpy1>
            itr += curElement->PayloadSize;
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	b2da      	uxtb	r2, r3
 8014284:	7efb      	ldrb	r3, [r7, #27]
 8014286:	4413      	add	r3, r2
 8014288:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d1d7      	bne.n	8014246 <LoRaMacCommandsSerializeCmds+0x26>
 8014296:	e009      	b.n	80142ac <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014298:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801429a:	e007      	b.n	80142ac <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80142a2:	69f8      	ldr	r0, [r7, #28]
 80142a4:	f7ff ff2e 	bl	8014104 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d1f4      	bne.n	801429c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80142b2:	68b8      	ldr	r0, [r7, #8]
 80142b4:	f7ff ff9e 	bl	80141f4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3720      	adds	r7, #32
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	200017a4 	.word	0x200017a4

080142c8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142d6:	2301      	movs	r3, #1
 80142d8:	e016      	b.n	8014308 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80142da:	4b0e      	ldr	r3, [pc, #56]	; (8014314 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2200      	movs	r2, #0
 80142e4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80142e6:	e00b      	b.n	8014300 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	7b1b      	ldrb	r3, [r3, #12]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d004      	beq.n	80142fa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2201      	movs	r2, #1
 80142f4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80142f6:	2300      	movs	r3, #0
 80142f8:	e006      	b.n	8014308 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1f0      	bne.n	80142e8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014306:	2300      	movs	r3, #0
}
 8014308:	4618      	mov	r0, r3
 801430a:	3714      	adds	r7, #20
 801430c:	46bd      	mov	sp, r7
 801430e:	bc80      	pop	{r7}
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop
 8014314:	200017a4 	.word	0x200017a4

08014318 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014318:	b480      	push	{r7}
 801431a:	b085      	sub	sp, #20
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014322:	2300      	movs	r3, #0
 8014324:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	3b02      	subs	r3, #2
 801432a:	2b11      	cmp	r3, #17
 801432c:	d850      	bhi.n	80143d0 <LoRaMacCommandsGetCmdSize+0xb8>
 801432e:	a201      	add	r2, pc, #4	; (adr r2, 8014334 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014334:	0801437d 	.word	0x0801437d
 8014338:	08014383 	.word	0x08014383
 801433c:	08014389 	.word	0x08014389
 8014340:	0801438f 	.word	0x0801438f
 8014344:	08014395 	.word	0x08014395
 8014348:	0801439b 	.word	0x0801439b
 801434c:	080143a1 	.word	0x080143a1
 8014350:	080143a7 	.word	0x080143a7
 8014354:	080143ad 	.word	0x080143ad
 8014358:	080143d1 	.word	0x080143d1
 801435c:	080143d1 	.word	0x080143d1
 8014360:	080143b3 	.word	0x080143b3
 8014364:	080143d1 	.word	0x080143d1
 8014368:	080143d1 	.word	0x080143d1
 801436c:	080143b9 	.word	0x080143b9
 8014370:	080143bf 	.word	0x080143bf
 8014374:	080143c5 	.word	0x080143c5
 8014378:	080143cb 	.word	0x080143cb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801437c:	2303      	movs	r3, #3
 801437e:	73fb      	strb	r3, [r7, #15]
            break;
 8014380:	e027      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014382:	2305      	movs	r3, #5
 8014384:	73fb      	strb	r3, [r7, #15]
            break;
 8014386:	e024      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014388:	2302      	movs	r3, #2
 801438a:	73fb      	strb	r3, [r7, #15]
            break;
 801438c:	e021      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801438e:	2305      	movs	r3, #5
 8014390:	73fb      	strb	r3, [r7, #15]
            break;
 8014392:	e01e      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014394:	2301      	movs	r3, #1
 8014396:	73fb      	strb	r3, [r7, #15]
            break;
 8014398:	e01b      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801439a:	2306      	movs	r3, #6
 801439c:	73fb      	strb	r3, [r7, #15]
            break;
 801439e:	e018      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80143a0:	2302      	movs	r3, #2
 80143a2:	73fb      	strb	r3, [r7, #15]
            break;
 80143a4:	e015      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80143a6:	2302      	movs	r3, #2
 80143a8:	73fb      	strb	r3, [r7, #15]
            break;
 80143aa:	e012      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80143ac:	2305      	movs	r3, #5
 80143ae:	73fb      	strb	r3, [r7, #15]
            break;
 80143b0:	e00f      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80143b2:	2306      	movs	r3, #6
 80143b4:	73fb      	strb	r3, [r7, #15]
            break;
 80143b6:	e00c      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80143b8:	2301      	movs	r3, #1
 80143ba:	73fb      	strb	r3, [r7, #15]
            break;
 80143bc:	e009      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80143be:	2305      	movs	r3, #5
 80143c0:	73fb      	strb	r3, [r7, #15]
            break;
 80143c2:	e006      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80143c4:	2304      	movs	r3, #4
 80143c6:	73fb      	strb	r3, [r7, #15]
            break;
 80143c8:	e003      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80143ca:	2304      	movs	r3, #4
 80143cc:	73fb      	strb	r3, [r7, #15]
            break;
 80143ce:	e000      	b.n	80143d2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80143d0:	bf00      	nop
        }
    }
    return cidSize;
 80143d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3714      	adds	r7, #20
 80143d8:	46bd      	mov	sp, r7
 80143da:	bc80      	pop	{r7}
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop

080143e0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4a07      	ldr	r2, [pc, #28]	; (8014408 <IncreaseBufferPointer+0x28>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d102      	bne.n	80143f6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80143f0:	4b06      	ldr	r3, [pc, #24]	; (801440c <IncreaseBufferPointer+0x2c>)
 80143f2:	607b      	str	r3, [r7, #4]
 80143f4:	e002      	b.n	80143fc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	3304      	adds	r3, #4
 80143fa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80143fc:	687b      	ldr	r3, [r7, #4]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	370c      	adds	r7, #12
 8014402:	46bd      	mov	sp, r7
 8014404:	bc80      	pop	{r7}
 8014406:	4770      	bx	lr
 8014408:	200019cc 	.word	0x200019cc
 801440c:	200019bc 	.word	0x200019bc

08014410 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014410:	b480      	push	{r7}
 8014412:	b083      	sub	sp, #12
 8014414:	af00      	add	r7, sp, #0
 8014416:	4603      	mov	r3, r0
 8014418:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801441a:	79fb      	ldrb	r3, [r7, #7]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d101      	bne.n	8014424 <IsListEmpty+0x14>
    {
        return true;
 8014420:	2301      	movs	r3, #1
 8014422:	e000      	b.n	8014426 <IsListEmpty+0x16>
    }
    return false;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	370c      	adds	r7, #12
 801442a:	46bd      	mov	sp, r7
 801442c:	bc80      	pop	{r7}
 801442e:	4770      	bx	lr

08014430 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	4603      	mov	r3, r0
 8014438:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801443a:	79fb      	ldrb	r3, [r7, #7]
 801443c:	2b04      	cmp	r3, #4
 801443e:	d901      	bls.n	8014444 <IsListFull+0x14>
    {
        return true;
 8014440:	2301      	movs	r3, #1
 8014442:	e000      	b.n	8014446 <IsListFull+0x16>
    }
    return false;
 8014444:	2300      	movs	r3, #0
}
 8014446:	4618      	mov	r0, r3
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	bc80      	pop	{r7}
 801444e:	4770      	bx	lr

08014450 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b086      	sub	sp, #24
 8014454:	af00      	add	r7, sp, #0
 8014456:	4603      	mov	r3, r0
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	607a      	str	r2, [r7, #4]
 801445c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014462:	4b13      	ldr	r3, [pc, #76]	; (80144b0 <GetElement+0x60>)
 8014464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014468:	4618      	mov	r0, r3
 801446a:	f7ff ffd1 	bl	8014410 <IsListEmpty>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <GetElement+0x28>
    {
        return NULL;
 8014474:	2300      	movs	r3, #0
 8014476:	e017      	b.n	80144a8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014478:	2300      	movs	r3, #0
 801447a:	74fb      	strb	r3, [r7, #19]
 801447c:	e00d      	b.n	801449a <GetElement+0x4a>
    {
        if( element->Request == request )
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	7bfa      	ldrb	r2, [r7, #15]
 8014484:	429a      	cmp	r2, r3
 8014486:	d101      	bne.n	801448c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	e00d      	b.n	80144a8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801448c:	6978      	ldr	r0, [r7, #20]
 801448e:	f7ff ffa7 	bl	80143e0 <IncreaseBufferPointer>
 8014492:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014494:	7cfb      	ldrb	r3, [r7, #19]
 8014496:	3301      	adds	r3, #1
 8014498:	74fb      	strb	r3, [r7, #19]
 801449a:	4b05      	ldr	r3, [pc, #20]	; (80144b0 <GetElement+0x60>)
 801449c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144a0:	7cfa      	ldrb	r2, [r7, #19]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d3eb      	bcc.n	801447e <GetElement+0x2e>
    }

    return NULL;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3718      	adds	r7, #24
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	200019b0 	.word	0x200019b0

080144b4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80144bc:	4a0c      	ldr	r2, [pc, #48]	; (80144f0 <LoRaMacConfirmQueueInit+0x3c>)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80144c2:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <LoRaMacConfirmQueueInit+0x3c>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80144ca:	4b09      	ldr	r3, [pc, #36]	; (80144f0 <LoRaMacConfirmQueueInit+0x3c>)
 80144cc:	4a09      	ldr	r2, [pc, #36]	; (80144f4 <LoRaMacConfirmQueueInit+0x40>)
 80144ce:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80144d0:	4b07      	ldr	r3, [pc, #28]	; (80144f0 <LoRaMacConfirmQueueInit+0x3c>)
 80144d2:	4a08      	ldr	r2, [pc, #32]	; (80144f4 <LoRaMacConfirmQueueInit+0x40>)
 80144d4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80144d6:	2214      	movs	r2, #20
 80144d8:	21ff      	movs	r1, #255	; 0xff
 80144da:	4806      	ldr	r0, [pc, #24]	; (80144f4 <LoRaMacConfirmQueueInit+0x40>)
 80144dc:	f003 ff3a 	bl	8018354 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80144e0:	4b03      	ldr	r3, [pc, #12]	; (80144f0 <LoRaMacConfirmQueueInit+0x3c>)
 80144e2:	2201      	movs	r2, #1
 80144e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80144e8:	bf00      	nop
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	200019b0 	.word	0x200019b0
 80144f4:	200019bc 	.word	0x200019bc

080144f8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014500:	4b19      	ldr	r3, [pc, #100]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014506:	4618      	mov	r0, r3
 8014508:	f7ff ff92 	bl	8014430 <IsListFull>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014512:	2300      	movs	r3, #0
 8014514:	e024      	b.n	8014560 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014516:	4b14      	ldr	r3, [pc, #80]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014518:	689b      	ldr	r3, [r3, #8]
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	7812      	ldrb	r2, [r2, #0]
 801451e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014520:	4b11      	ldr	r3, [pc, #68]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	7852      	ldrb	r2, [r2, #1]
 8014528:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801452a:	4b0f      	ldr	r3, [pc, #60]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 801452c:	689b      	ldr	r3, [r3, #8]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	78d2      	ldrb	r2, [r2, #3]
 8014532:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014534:	4b0c      	ldr	r3, [pc, #48]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014536:	689b      	ldr	r3, [r3, #8]
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	7892      	ldrb	r2, [r2, #2]
 801453c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801453e:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014544:	3301      	adds	r3, #1
 8014546:	b2da      	uxtb	r2, r3
 8014548:	4b07      	ldr	r3, [pc, #28]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 801454a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801454e:	4b06      	ldr	r3, [pc, #24]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 8014550:	689b      	ldr	r3, [r3, #8]
 8014552:	4618      	mov	r0, r3
 8014554:	f7ff ff44 	bl	80143e0 <IncreaseBufferPointer>
 8014558:	4603      	mov	r3, r0
 801455a:	4a03      	ldr	r2, [pc, #12]	; (8014568 <LoRaMacConfirmQueueAdd+0x70>)
 801455c:	6093      	str	r3, [r2, #8]

    return true;
 801455e:	2301      	movs	r3, #1
}
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	200019b0 	.word	0x200019b0

0801456c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014570:	4b0e      	ldr	r3, [pc, #56]	; (80145ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014576:	4618      	mov	r0, r3
 8014578:	f7ff ff4a 	bl	8014410 <IsListEmpty>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d001      	beq.n	8014586 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014582:	2300      	movs	r3, #0
 8014584:	e010      	b.n	80145a8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014586:	4b09      	ldr	r3, [pc, #36]	; (80145ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014588:	f893 3020 	ldrb.w	r3, [r3, #32]
 801458c:	3b01      	subs	r3, #1
 801458e:	b2da      	uxtb	r2, r3
 8014590:	4b06      	ldr	r3, [pc, #24]	; (80145ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014592:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014596:	4b05      	ldr	r3, [pc, #20]	; (80145ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	4618      	mov	r0, r3
 801459c:	f7ff ff20 	bl	80143e0 <IncreaseBufferPointer>
 80145a0:	4603      	mov	r3, r0
 80145a2:	4a02      	ldr	r2, [pc, #8]	; (80145ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80145a4:	6053      	str	r3, [r2, #4]

    return true;
 80145a6:	2301      	movs	r3, #1
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	200019b0 	.word	0x200019b0

080145b0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	4603      	mov	r3, r0
 80145b8:	460a      	mov	r2, r1
 80145ba:	71fb      	strb	r3, [r7, #7]
 80145bc:	4613      	mov	r3, r2
 80145be:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80145c0:	2300      	movs	r3, #0
 80145c2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80145c4:	4b10      	ldr	r3, [pc, #64]	; (8014608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7ff ff20 	bl	8014410 <IsListEmpty>
 80145d0:	4603      	mov	r3, r0
 80145d2:	f083 0301 	eor.w	r3, r3, #1
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d011      	beq.n	8014600 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80145dc:	4b0a      	ldr	r3, [pc, #40]	; (8014608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145de:	6859      	ldr	r1, [r3, #4]
 80145e0:	4b09      	ldr	r3, [pc, #36]	; (8014608 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145e2:	689a      	ldr	r2, [r3, #8]
 80145e4:	79bb      	ldrb	r3, [r7, #6]
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7ff ff32 	bl	8014450 <GetElement>
 80145ec:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d005      	beq.n	8014600 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	79fa      	ldrb	r2, [r7, #7]
 80145f8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2201      	movs	r2, #1
 80145fe:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014600:	bf00      	nop
 8014602:	3710      	adds	r7, #16
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}
 8014608:	200019b0 	.word	0x200019b0

0801460c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	4603      	mov	r3, r0
 8014614:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014616:	2300      	movs	r3, #0
 8014618:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801461a:	4b10      	ldr	r3, [pc, #64]	; (801465c <LoRaMacConfirmQueueGetStatus+0x50>)
 801461c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014620:	4618      	mov	r0, r3
 8014622:	f7ff fef5 	bl	8014410 <IsListEmpty>
 8014626:	4603      	mov	r3, r0
 8014628:	f083 0301 	eor.w	r3, r3, #1
 801462c:	b2db      	uxtb	r3, r3
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00e      	beq.n	8014650 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014632:	4b0a      	ldr	r3, [pc, #40]	; (801465c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014634:	6859      	ldr	r1, [r3, #4]
 8014636:	4b09      	ldr	r3, [pc, #36]	; (801465c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014638:	689a      	ldr	r2, [r3, #8]
 801463a:	79fb      	ldrb	r3, [r7, #7]
 801463c:	4618      	mov	r0, r3
 801463e:	f7ff ff07 	bl	8014450 <GetElement>
 8014642:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d002      	beq.n	8014650 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	785b      	ldrb	r3, [r3, #1]
 801464e:	e000      	b.n	8014652 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014650:	2301      	movs	r3, #1
}
 8014652:	4618      	mov	r0, r3
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	200019b0 	.word	0x200019b0

08014660 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b084      	sub	sp, #16
 8014664:	af00      	add	r7, sp, #0
 8014666:	4603      	mov	r3, r0
 8014668:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801466a:	4b16      	ldr	r3, [pc, #88]	; (80146c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014670:	4a14      	ldr	r2, [pc, #80]	; (80146c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014672:	79fb      	ldrb	r3, [r7, #7]
 8014674:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014678:	4b12      	ldr	r3, [pc, #72]	; (80146c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801467a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801467e:	4618      	mov	r0, r3
 8014680:	f7ff fec6 	bl	8014410 <IsListEmpty>
 8014684:	4603      	mov	r3, r0
 8014686:	f083 0301 	eor.w	r3, r3, #1
 801468a:	b2db      	uxtb	r3, r3
 801468c:	2b00      	cmp	r3, #0
 801468e:	d015      	beq.n	80146bc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	79fa      	ldrb	r2, [r7, #7]
 8014694:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	78db      	ldrb	r3, [r3, #3]
 801469a:	f083 0301 	eor.w	r3, r3, #1
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d002      	beq.n	80146aa <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2201      	movs	r2, #1
 80146a8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80146aa:	68f8      	ldr	r0, [r7, #12]
 80146ac:	f7ff fe98 	bl	80143e0 <IncreaseBufferPointer>
 80146b0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80146b2:	4b04      	ldr	r3, [pc, #16]	; (80146c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80146b4:	689b      	ldr	r3, [r3, #8]
 80146b6:	68fa      	ldr	r2, [r7, #12]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d1e9      	bne.n	8014690 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80146bc:	bf00      	nop
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	200019b0 	.word	0x200019b0

080146c8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	4603      	mov	r3, r0
 80146d0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80146d2:	4b09      	ldr	r3, [pc, #36]	; (80146f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80146d4:	6859      	ldr	r1, [r3, #4]
 80146d6:	4b08      	ldr	r3, [pc, #32]	; (80146f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80146d8:	689a      	ldr	r2, [r3, #8]
 80146da:	79fb      	ldrb	r3, [r7, #7]
 80146dc:	4618      	mov	r0, r3
 80146de:	f7ff feb7 	bl	8014450 <GetElement>
 80146e2:	4603      	mov	r3, r0
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d001      	beq.n	80146ec <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80146e8:	2301      	movs	r3, #1
 80146ea:	e000      	b.n	80146ee <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3708      	adds	r7, #8
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	200019b0 	.word	0x200019b0

080146fc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014704:	4b22      	ldr	r3, [pc, #136]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014706:	f893 3020 	ldrb.w	r3, [r3, #32]
 801470a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801470c:	2300      	movs	r3, #0
 801470e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014710:	2300      	movs	r3, #0
 8014712:	73fb      	strb	r3, [r7, #15]
 8014714:	e032      	b.n	801477c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014716:	4b1e      	ldr	r3, [pc, #120]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	781a      	ldrb	r2, [r3, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014720:	4b1b      	ldr	r3, [pc, #108]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	785a      	ldrb	r2, [r3, #1]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801472a:	4b19      	ldr	r3, [pc, #100]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	789b      	ldrb	r3, [r3, #2]
 8014730:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014732:	7b7b      	ldrb	r3, [r7, #13]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d005      	beq.n	8014744 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014738:	4b15      	ldr	r3, [pc, #84]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	689b      	ldr	r3, [r3, #8]
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	4798      	blx	r3
 8014742:	e00b      	b.n	801475c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014744:	4b12      	ldr	r3, [pc, #72]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801474c:	4b10      	ldr	r3, [pc, #64]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	785b      	ldrb	r3, [r3, #1]
 8014752:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014754:	4b0e      	ldr	r3, [pc, #56]	; (8014790 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	78db      	ldrb	r3, [r3, #3]
 801475a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801475c:	f7ff ff06 	bl	801456c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014760:	7b7b      	ldrb	r3, [r7, #13]
 8014762:	f083 0301 	eor.w	r3, r3, #1
 8014766:	b2db      	uxtb	r3, r3
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801476c:	f107 0308 	add.w	r3, r7, #8
 8014770:	4618      	mov	r0, r3
 8014772:	f7ff fec1 	bl	80144f8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014776:	7bfb      	ldrb	r3, [r7, #15]
 8014778:	3301      	adds	r3, #1
 801477a:	73fb      	strb	r3, [r7, #15]
 801477c:	7bfa      	ldrb	r2, [r7, #15]
 801477e:	7bbb      	ldrb	r3, [r7, #14]
 8014780:	429a      	cmp	r2, r3
 8014782:	d3c8      	bcc.n	8014716 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014784:	bf00      	nop
 8014786:	bf00      	nop
 8014788:	3710      	adds	r7, #16
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	200019b0 	.word	0x200019b0

08014794 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014794:	b480      	push	{r7}
 8014796:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014798:	4b03      	ldr	r3, [pc, #12]	; (80147a8 <LoRaMacConfirmQueueGetCnt+0x14>)
 801479a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bc80      	pop	{r7}
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop
 80147a8:	200019b0 	.word	0x200019b0

080147ac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80147b0:	4b06      	ldr	r3, [pc, #24]	; (80147cc <LoRaMacConfirmQueueIsFull+0x20>)
 80147b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff fe3a 	bl	8014430 <IsListFull>
 80147bc:	4603      	mov	r3, r0
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d001      	beq.n	80147c6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80147c2:	2301      	movs	r3, #1
 80147c4:	e000      	b.n	80147c8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80147c6:	2300      	movs	r3, #0
    }
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	200019b0 	.word	0x200019b0

080147d0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b08e      	sub	sp, #56	; 0x38
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	60f8      	str	r0, [r7, #12]
 80147d8:	607b      	str	r3, [r7, #4]
 80147da:	460b      	mov	r3, r1
 80147dc:	817b      	strh	r3, [r7, #10]
 80147de:	4613      	mov	r3, r2
 80147e0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d101      	bne.n	80147ec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147e8:	2309      	movs	r3, #9
 80147ea:	e086      	b.n	80148fa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80147ec:	2300      	movs	r3, #0
 80147ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80147f2:	2301      	movs	r3, #1
 80147f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80147f6:	2300      	movs	r3, #0
 80147f8:	623b      	str	r3, [r7, #32]
 80147fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]
 8014802:	605a      	str	r2, [r3, #4]
 8014804:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8014806:	2300      	movs	r3, #0
 8014808:	613b      	str	r3, [r7, #16]
 801480a:	f107 0314 	add.w	r3, r7, #20
 801480e:	2200      	movs	r2, #0
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	605a      	str	r2, [r3, #4]
 8014814:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014816:	2301      	movs	r3, #1
 8014818:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801481a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801481e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	b2db      	uxtb	r3, r3
 8014824:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	0a1b      	lsrs	r3, r3, #8
 801482a:	b2db      	uxtb	r3, r3
 801482c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	0c1b      	lsrs	r3, r3, #16
 8014832:	b2db      	uxtb	r3, r3
 8014834:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	0e1b      	lsrs	r3, r3, #24
 801483a:	b2db      	uxtb	r3, r3
 801483c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014840:	b2db      	uxtb	r3, r3
 8014842:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014846:	0a1b      	lsrs	r3, r3, #8
 8014848:	b2db      	uxtb	r3, r3
 801484a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801484c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801484e:	0c1b      	lsrs	r3, r3, #16
 8014850:	b2db      	uxtb	r3, r3
 8014852:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014856:	0e1b      	lsrs	r3, r3, #24
 8014858:	b2db      	uxtb	r3, r3
 801485a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801485c:	e048      	b.n	80148f0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801485e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014860:	b2db      	uxtb	r3, r3
 8014862:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014864:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014866:	3301      	adds	r3, #1
 8014868:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801486a:	f107 0320 	add.w	r3, r7, #32
 801486e:	7a7a      	ldrb	r2, [r7, #9]
 8014870:	f107 0010 	add.w	r0, r7, #16
 8014874:	2110      	movs	r1, #16
 8014876:	f7f8 fce6 	bl	800d246 <SecureElementAesEncrypt>
 801487a:	4603      	mov	r3, r0
 801487c:	2b00      	cmp	r3, #0
 801487e:	d001      	beq.n	8014884 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014880:	230e      	movs	r3, #14
 8014882:	e03a      	b.n	80148fa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014884:	2300      	movs	r3, #0
 8014886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801488a:	e01e      	b.n	80148ca <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801488c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014894:	4413      	add	r3, r2
 8014896:	461a      	mov	r2, r3
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	4413      	add	r3, r2
 801489c:	7819      	ldrb	r1, [r3, #0]
 801489e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148a2:	3338      	adds	r3, #56	; 0x38
 80148a4:	443b      	add	r3, r7
 80148a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80148aa:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80148ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148b2:	4403      	add	r3, r0
 80148b4:	4618      	mov	r0, r3
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	4403      	add	r3, r0
 80148ba:	404a      	eors	r2, r1
 80148bc:	b2d2      	uxtb	r2, r2
 80148be:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80148c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148c4:	3301      	adds	r3, #1
 80148c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80148ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80148d2:	2a10      	cmp	r2, #16
 80148d4:	bfa8      	it	ge
 80148d6:	2210      	movge	r2, #16
 80148d8:	b212      	sxth	r2, r2
 80148da:	4293      	cmp	r3, r2
 80148dc:	dbd6      	blt.n	801488c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80148de:	897b      	ldrh	r3, [r7, #10]
 80148e0:	3b10      	subs	r3, #16
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80148e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80148ea:	3310      	adds	r3, #16
 80148ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80148f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	dcb2      	bgt.n	801485e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3738      	adds	r7, #56	; 0x38
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014902:	b490      	push	{r4, r7}
 8014904:	b082      	sub	sp, #8
 8014906:	af00      	add	r7, sp, #0
 8014908:	4604      	mov	r4, r0
 801490a:	4608      	mov	r0, r1
 801490c:	4611      	mov	r1, r2
 801490e:	461a      	mov	r2, r3
 8014910:	4623      	mov	r3, r4
 8014912:	80fb      	strh	r3, [r7, #6]
 8014914:	4603      	mov	r3, r0
 8014916:	717b      	strb	r3, [r7, #5]
 8014918:	460b      	mov	r3, r1
 801491a:	713b      	strb	r3, [r7, #4]
 801491c:	4613      	mov	r3, r2
 801491e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d101      	bne.n	801492a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014926:	2309      	movs	r3, #9
 8014928:	e04e      	b.n	80149c8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801492a:	69bb      	ldr	r3, [r7, #24]
 801492c:	2249      	movs	r2, #73	; 0x49
 801492e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	3301      	adds	r3, #1
 8014934:	2200      	movs	r2, #0
 8014936:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	3302      	adds	r3, #2
 801493c:	2200      	movs	r2, #0
 801493e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	3303      	adds	r3, #3
 8014944:	2200      	movs	r2, #0
 8014946:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	3304      	adds	r3, #4
 801494c:	2200      	movs	r2, #0
 801494e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	3305      	adds	r3, #5
 8014954:	78fa      	ldrb	r2, [r7, #3]
 8014956:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	3306      	adds	r3, #6
 801495c:	693a      	ldr	r2, [r7, #16]
 801495e:	b2d2      	uxtb	r2, r2
 8014960:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	0a1a      	lsrs	r2, r3, #8
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	3307      	adds	r3, #7
 801496a:	b2d2      	uxtb	r2, r2
 801496c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	0c1a      	lsrs	r2, r3, #16
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	3308      	adds	r3, #8
 8014976:	b2d2      	uxtb	r2, r2
 8014978:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	0e1a      	lsrs	r2, r3, #24
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	3309      	adds	r3, #9
 8014982:	b2d2      	uxtb	r2, r2
 8014984:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	330a      	adds	r3, #10
 801498a:	697a      	ldr	r2, [r7, #20]
 801498c:	b2d2      	uxtb	r2, r2
 801498e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	0a1a      	lsrs	r2, r3, #8
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	330b      	adds	r3, #11
 8014998:	b2d2      	uxtb	r2, r2
 801499a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	0c1a      	lsrs	r2, r3, #16
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	330c      	adds	r3, #12
 80149a4:	b2d2      	uxtb	r2, r2
 80149a6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	0e1a      	lsrs	r2, r3, #24
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	330d      	adds	r3, #13
 80149b0:	b2d2      	uxtb	r2, r2
 80149b2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80149b4:	69bb      	ldr	r3, [r7, #24]
 80149b6:	330e      	adds	r3, #14
 80149b8:	2200      	movs	r2, #0
 80149ba:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	330f      	adds	r3, #15
 80149c0:	88fa      	ldrh	r2, [r7, #6]
 80149c2:	b2d2      	uxtb	r2, r2
 80149c4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bc90      	pop	{r4, r7}
 80149d0:	4770      	bx	lr

080149d2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80149d2:	b590      	push	{r4, r7, lr}
 80149d4:	b08b      	sub	sp, #44	; 0x2c
 80149d6:	af04      	add	r7, sp, #16
 80149d8:	6078      	str	r0, [r7, #4]
 80149da:	4608      	mov	r0, r1
 80149dc:	4611      	mov	r1, r2
 80149de:	461a      	mov	r2, r3
 80149e0:	4603      	mov	r3, r0
 80149e2:	807b      	strh	r3, [r7, #2]
 80149e4:	460b      	mov	r3, r1
 80149e6:	707b      	strb	r3, [r7, #1]
 80149e8:	4613      	mov	r3, r2
 80149ea:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d002      	beq.n	80149f8 <ComputeCmacB0+0x26>
 80149f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d101      	bne.n	80149fc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149f8:	2309      	movs	r3, #9
 80149fa:	e024      	b.n	8014a46 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80149fc:	887b      	ldrh	r3, [r7, #2]
 80149fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a02:	d901      	bls.n	8014a08 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014a04:	230d      	movs	r3, #13
 8014a06:	e01e      	b.n	8014a46 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014a08:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8014a0c:	783a      	ldrb	r2, [r7, #0]
 8014a0e:	7879      	ldrb	r1, [r7, #1]
 8014a10:	8878      	ldrh	r0, [r7, #2]
 8014a12:	f107 0308 	add.w	r3, r7, #8
 8014a16:	9302      	str	r3, [sp, #8]
 8014a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	4623      	mov	r3, r4
 8014a22:	f7ff ff6e 	bl	8014902 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014a26:	7879      	ldrb	r1, [r7, #1]
 8014a28:	887a      	ldrh	r2, [r7, #2]
 8014a2a:	f107 0008 	add.w	r0, r7, #8
 8014a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	460b      	mov	r3, r1
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	f7f8 fbb9 	bl	800d1ac <SecureElementComputeAesCmac>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d001      	beq.n	8014a44 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a40:	230e      	movs	r3, #14
 8014a42:	e000      	b.n	8014a46 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014a44:	2300      	movs	r3, #0
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	371c      	adds	r7, #28
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd90      	pop	{r4, r7, pc}

08014a4e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014a4e:	b590      	push	{r4, r7, lr}
 8014a50:	b0cd      	sub	sp, #308	; 0x134
 8014a52:	af04      	add	r7, sp, #16
 8014a54:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014a58:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014a5c:	6020      	str	r0, [r4, #0]
 8014a5e:	460c      	mov	r4, r1
 8014a60:	4610      	mov	r0, r2
 8014a62:	4619      	mov	r1, r3
 8014a64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a68:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014a6c:	4622      	mov	r2, r4
 8014a6e:	801a      	strh	r2, [r3, #0]
 8014a70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a74:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014a78:	4602      	mov	r2, r0
 8014a7a:	701a      	strb	r2, [r3, #0]
 8014a7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014a84:	460a      	mov	r2, r1
 8014a86:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014a88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d101      	bne.n	8014a9a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a96:	2309      	movs	r3, #9
 8014a98:	e063      	b.n	8014b62 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014a9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a9e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014aa2:	881b      	ldrh	r3, [r3, #0]
 8014aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014aa8:	d901      	bls.n	8014aae <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014aaa:	230d      	movs	r3, #13
 8014aac:	e059      	b.n	8014b62 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014aae:	f107 030c 	add.w	r3, r7, #12
 8014ab2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014ab6:	2100      	movs	r1, #0
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f003 fc4b 	bl	8018354 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014abe:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8014ac2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ac6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014aca:	781a      	ldrb	r2, [r3, #0]
 8014acc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ad0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014ad4:	7819      	ldrb	r1, [r3, #0]
 8014ad6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ada:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014ade:	8818      	ldrh	r0, [r3, #0]
 8014ae0:	f107 030c 	add.w	r3, r7, #12
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014aea:	9301      	str	r3, [sp, #4]
 8014aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4623      	mov	r3, r4
 8014af4:	f7ff ff05 	bl	8014902 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014af8:	f107 030c 	add.w	r3, r7, #12
 8014afc:	3310      	adds	r3, #16
 8014afe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014b02:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8014b06:	8812      	ldrh	r2, [r2, #0]
 8014b08:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014b0c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014b10:	6809      	ldr	r1, [r1, #0]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f003 fbe3 	bl	80182de <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014b18:	2306      	movs	r3, #6
 8014b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014b1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b22:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014b26:	881b      	ldrh	r3, [r3, #0]
 8014b28:	3310      	adds	r3, #16
 8014b2a:	b299      	uxth	r1, r3
 8014b2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b30:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	f107 000c 	add.w	r0, r7, #12
 8014b3a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014b3e:	f7f8 fb53 	bl	800d1e8 <SecureElementVerifyAesCmac>
 8014b42:	4603      	mov	r3, r0
 8014b44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014b48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d101      	bne.n	8014b54 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014b50:	2300      	movs	r3, #0
 8014b52:	e006      	b.n	8014b62 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d101      	bne.n	8014b60 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e000      	b.n	8014b62 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014b60:	230e      	movs	r3, #14
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd90      	pop	{r4, r7, pc}

08014b6c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	4603      	mov	r3, r0
 8014b74:	6039      	str	r1, [r7, #0]
 8014b76:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014b78:	2300      	movs	r3, #0
 8014b7a:	73fb      	strb	r3, [r7, #15]
 8014b7c:	e011      	b.n	8014ba2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014b7e:	7bfb      	ldrb	r3, [r7, #15]
 8014b80:	4a0c      	ldr	r2, [pc, #48]	; (8014bb4 <GetKeyAddrItem+0x48>)
 8014b82:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014b86:	79fa      	ldrb	r2, [r7, #7]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d107      	bne.n	8014b9c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014b8c:	7bfb      	ldrb	r3, [r7, #15]
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	4a08      	ldr	r2, [pc, #32]	; (8014bb4 <GetKeyAddrItem+0x48>)
 8014b92:	441a      	add	r2, r3
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	e006      	b.n	8014baa <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014b9c:	7bfb      	ldrb	r3, [r7, #15]
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	73fb      	strb	r3, [r7, #15]
 8014ba2:	7bfb      	ldrb	r3, [r7, #15]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d9ea      	bls.n	8014b7e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014ba8:	230b      	movs	r3, #11
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3714      	adds	r7, #20
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bc80      	pop	{r7}
 8014bb2:	4770      	bx	lr
 8014bb4:	20000100 	.word	0x20000100

08014bb8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b088      	sub	sp, #32
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60b9      	str	r1, [r7, #8]
 8014bc0:	607a      	str	r2, [r7, #4]
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	73fb      	strb	r3, [r7, #15]
 8014bc8:	4613      	mov	r3, r2
 8014bca:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014bcc:	2300      	movs	r3, #0
 8014bce:	613b      	str	r3, [r7, #16]
 8014bd0:	f107 0314 	add.w	r3, r7, #20
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	601a      	str	r2, [r3, #0]
 8014bd8:	605a      	str	r2, [r3, #4]
 8014bda:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014bdc:	7bfb      	ldrb	r3, [r7, #15]
 8014bde:	2b02      	cmp	r3, #2
 8014be0:	d002      	beq.n	8014be8 <DeriveSessionKey10x+0x30>
 8014be2:	2b03      	cmp	r3, #3
 8014be4:	d003      	beq.n	8014bee <DeriveSessionKey10x+0x36>
 8014be6:	e005      	b.n	8014bf4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014be8:	2301      	movs	r3, #1
 8014bea:	743b      	strb	r3, [r7, #16]
            break;
 8014bec:	e004      	b.n	8014bf8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014bee:	2302      	movs	r3, #2
 8014bf0:	743b      	strb	r3, [r7, #16]
            break;
 8014bf2:	e001      	b.n	8014bf8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014bf4:	230a      	movs	r3, #10
 8014bf6:	e02a      	b.n	8014c4e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	0a1b      	lsrs	r3, r3, #8
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	0c1b      	lsrs	r3, r3, #16
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	0a1b      	lsrs	r3, r3, #8
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	0c1b      	lsrs	r3, r3, #16
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014c24:	89bb      	ldrh	r3, [r7, #12]
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014c2a:	89bb      	ldrh	r3, [r7, #12]
 8014c2c:	0a1b      	lsrs	r3, r3, #8
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014c34:	7bfa      	ldrb	r2, [r7, #15]
 8014c36:	f107 0310 	add.w	r3, r7, #16
 8014c3a:	2101      	movs	r1, #1
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7f8 fb69 	bl	800d314 <SecureElementDeriveAndStoreKey>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d001      	beq.n	8014c4c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c48:	230e      	movs	r3, #14
 8014c4a:	e000      	b.n	8014c4e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3720      	adds	r7, #32
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
	...

08014c58 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b083      	sub	sp, #12
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	6039      	str	r1, [r7, #0]
 8014c62:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d101      	bne.n	8014c6e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c6a:	2309      	movs	r3, #9
 8014c6c:	e03b      	b.n	8014ce6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014c6e:	79fb      	ldrb	r3, [r7, #7]
 8014c70:	3b01      	subs	r3, #1
 8014c72:	2b03      	cmp	r3, #3
 8014c74:	d834      	bhi.n	8014ce0 <GetLastFcntDown+0x88>
 8014c76:	a201      	add	r2, pc, #4	; (adr r2, 8014c7c <GetLastFcntDown+0x24>)
 8014c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7c:	08014c8d 	.word	0x08014c8d
 8014c80:	08014ca5 	.word	0x08014ca5
 8014c84:	08014cbd 	.word	0x08014cbd
 8014c88:	08014cd5 	.word	0x08014cd5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014c8c:	4b18      	ldr	r3, [pc, #96]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	691a      	ldr	r2, [r3, #16]
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014c96:	4b16      	ldr	r3, [pc, #88]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	4b15      	ldr	r3, [pc, #84]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	6912      	ldr	r2, [r2, #16]
 8014ca0:	621a      	str	r2, [r3, #32]
            break;
 8014ca2:	e01f      	b.n	8014ce4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014ca4:	4b12      	ldr	r3, [pc, #72]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	695a      	ldr	r2, [r3, #20]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014cae:	4b10      	ldr	r3, [pc, #64]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	4b0f      	ldr	r3, [pc, #60]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	6952      	ldr	r2, [r2, #20]
 8014cb8:	621a      	str	r2, [r3, #32]
            break;
 8014cba:	e013      	b.n	8014ce4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014cbc:	4b0c      	ldr	r3, [pc, #48]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	699a      	ldr	r2, [r3, #24]
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014cc6:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	4b09      	ldr	r3, [pc, #36]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	6992      	ldr	r2, [r2, #24]
 8014cd0:	621a      	str	r2, [r3, #32]
            break;
 8014cd2:	e007      	b.n	8014ce4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <GetLastFcntDown+0x98>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	69da      	ldr	r2, [r3, #28]
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	601a      	str	r2, [r3, #0]
            break;
 8014cde:	e001      	b.n	8014ce4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014ce0:	2305      	movs	r3, #5
 8014ce2:	e000      	b.n	8014ce6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	370c      	adds	r7, #12
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bc80      	pop	{r7}
 8014cee:	4770      	bx	lr
 8014cf0:	200019d4 	.word	0x200019d4

08014cf4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	6039      	str	r1, [r7, #0]
 8014cfe:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014d00:	2300      	movs	r3, #0
 8014d02:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014d04:	f107 020c 	add.w	r2, r7, #12
 8014d08:	79fb      	ldrb	r3, [r7, #7]
 8014d0a:	4611      	mov	r1, r2
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7ff ffa3 	bl	8014c58 <GetLastFcntDown>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <CheckFCntDown+0x28>
    {
        return false;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	e00a      	b.n	8014d32 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	683a      	ldr	r2, [r7, #0]
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d803      	bhi.n	8014d2c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014d24:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d2a:	d101      	bne.n	8014d30 <CheckFCntDown+0x3c>
    {
        return true;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	e000      	b.n	8014d32 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014d30:	2300      	movs	r3, #0
    }
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3710      	adds	r7, #16
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
	...

08014d3c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	6039      	str	r1, [r7, #0]
 8014d46:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014d48:	79fb      	ldrb	r3, [r7, #7]
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	2b03      	cmp	r3, #3
 8014d4e:	d81f      	bhi.n	8014d90 <UpdateFCntDown+0x54>
 8014d50:	a201      	add	r2, pc, #4	; (adr r2, 8014d58 <UpdateFCntDown+0x1c>)
 8014d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d56:	bf00      	nop
 8014d58:	08014d69 	.word	0x08014d69
 8014d5c:	08014d73 	.word	0x08014d73
 8014d60:	08014d7d 	.word	0x08014d7d
 8014d64:	08014d87 	.word	0x08014d87
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014d68:	4b0c      	ldr	r3, [pc, #48]	; (8014d9c <UpdateFCntDown+0x60>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	683a      	ldr	r2, [r7, #0]
 8014d6e:	611a      	str	r2, [r3, #16]
            break;
 8014d70:	e00f      	b.n	8014d92 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014d72:	4b0a      	ldr	r3, [pc, #40]	; (8014d9c <UpdateFCntDown+0x60>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	683a      	ldr	r2, [r7, #0]
 8014d78:	615a      	str	r2, [r3, #20]
            break;
 8014d7a:	e00a      	b.n	8014d92 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014d7c:	4b07      	ldr	r3, [pc, #28]	; (8014d9c <UpdateFCntDown+0x60>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	683a      	ldr	r2, [r7, #0]
 8014d82:	619a      	str	r2, [r3, #24]
            break;
 8014d84:	e005      	b.n	8014d92 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014d86:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <UpdateFCntDown+0x60>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	61da      	str	r2, [r3, #28]
            break;
 8014d8e:	e000      	b.n	8014d92 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014d90:	bf00      	nop
    }
}
 8014d92:	bf00      	nop
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bc80      	pop	{r7}
 8014d9a:	4770      	bx	lr
 8014d9c:	200019d4 	.word	0x200019d4

08014da0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014da0:	b480      	push	{r7}
 8014da2:	b083      	sub	sp, #12
 8014da4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014da6:	4b18      	ldr	r3, [pc, #96]	; (8014e08 <ResetFCnts+0x68>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2200      	movs	r2, #0
 8014dac:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014dae:	4b16      	ldr	r3, [pc, #88]	; (8014e08 <ResetFCnts+0x68>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f04f 32ff 	mov.w	r2, #4294967295
 8014db6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014db8:	4b13      	ldr	r3, [pc, #76]	; (8014e08 <ResetFCnts+0x68>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8014dc0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014dc2:	4b11      	ldr	r3, [pc, #68]	; (8014e08 <ResetFCnts+0x68>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8014dca:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014dcc:	4b0e      	ldr	r3, [pc, #56]	; (8014e08 <ResetFCnts+0x68>)
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	4b0d      	ldr	r3, [pc, #52]	; (8014e08 <ResetFCnts+0x68>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	6992      	ldr	r2, [r2, #24]
 8014dd6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014dd8:	2300      	movs	r3, #0
 8014dda:	607b      	str	r3, [r7, #4]
 8014ddc:	e00b      	b.n	8014df6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014dde:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <ResetFCnts+0x68>)
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	3306      	adds	r3, #6
 8014de6:	009b      	lsls	r3, r3, #2
 8014de8:	4413      	add	r3, r2
 8014dea:	f04f 32ff 	mov.w	r2, #4294967295
 8014dee:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3301      	adds	r3, #1
 8014df4:	607b      	str	r3, [r7, #4]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	ddf0      	ble.n	8014dde <ResetFCnts+0x3e>
    }
}
 8014dfc:	bf00      	nop
 8014dfe:	bf00      	nop
 8014e00:	370c      	adds	r7, #12
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bc80      	pop	{r7}
 8014e06:	4770      	bx	lr
 8014e08:	200019d4 	.word	0x200019d4

08014e0c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d101      	bne.n	8014e1e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014e1a:	2308      	movs	r3, #8
 8014e1c:	e01c      	b.n	8014e58 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014e1e:	4a10      	ldr	r2, [pc, #64]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014e24:	4b0e      	ldr	r3, [pc, #56]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2228      	movs	r2, #40	; 0x28
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f003 fa91 	bl	8018354 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014e32:	4b0b      	ldr	r3, [pc, #44]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2201      	movs	r2, #1
 8014e38:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014e3a:	4b09      	ldr	r3, [pc, #36]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2201      	movs	r2, #1
 8014e40:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014e42:	4b07      	ldr	r3, [pc, #28]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2201      	movs	r2, #1
 8014e48:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014e4a:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <LoRaMacCryptoInit+0x54>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014e52:	f7ff ffa5 	bl	8014da0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014e56:	2300      	movs	r3, #0
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3708      	adds	r7, #8
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	200019d4 	.word	0x200019d4

08014e64 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014e6c:	4b04      	ldr	r3, [pc, #16]	; (8014e80 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	370c      	adds	r7, #12
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bc80      	pop	{r7}
 8014e7e:	4770      	bx	lr
 8014e80:	200019d4 	.word	0x200019d4

08014e84 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014e84:	b480      	push	{r7}
 8014e86:	b083      	sub	sp, #12
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e92:	2309      	movs	r3, #9
 8014e94:	e006      	b.n	8014ea4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014e96:	4b06      	ldr	r3, [pc, #24]	; (8014eb0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	1c5a      	adds	r2, r3, #1
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014ea2:	2300      	movs	r3, #0
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	370c      	adds	r7, #12
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bc80      	pop	{r7}
 8014eac:	4770      	bx	lr
 8014eae:	bf00      	nop
 8014eb0:	200019d4 	.word	0x200019d4

08014eb4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b088      	sub	sp, #32
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	4603      	mov	r3, r0
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014eca:	2312      	movs	r3, #18
 8014ecc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d101      	bne.n	8014ed8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ed4:	2309      	movs	r3, #9
 8014ed6:	e035      	b.n	8014f44 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014ed8:	f107 0214 	add.w	r2, r7, #20
 8014edc:	7bfb      	ldrb	r3, [r7, #15]
 8014ede:	4611      	mov	r1, r2
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff feb9 	bl	8014c58 <GetLastFcntDown>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014eea:	7efb      	ldrb	r3, [r7, #27]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d001      	beq.n	8014ef4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014ef0:	7efb      	ldrb	r3, [r7, #27]
 8014ef2:	e027      	b.n	8014f44 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014efa:	d103      	bne.n	8014f04 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	68ba      	ldr	r2, [r7, #8]
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	e01e      	b.n	8014f42 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	b29b      	uxth	r3, r3
 8014f08:	68ba      	ldr	r2, [r7, #8]
 8014f0a:	1ad3      	subs	r3, r2, r3
 8014f0c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014f0e:	69fb      	ldr	r3, [r7, #28]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	dd05      	ble.n	8014f20 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014f14:	697a      	ldr	r2, [r7, #20]
 8014f16:	69fb      	ldr	r3, [r7, #28]
 8014f18:	441a      	add	r2, r3
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	e010      	b.n	8014f42 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d104      	bne.n	8014f30 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014f2c:	2307      	movs	r3, #7
 8014f2e:	e009      	b.n	8014f44 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	0c1b      	lsrs	r3, r3, #16
 8014f34:	041b      	lsls	r3, r3, #16
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	4413      	add	r3, r2
 8014f3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f42:	2300      	movs	r3, #0
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3720      	adds	r7, #32
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	b085      	sub	sp, #20
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d101      	bne.n	8014f5e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f5a:	2309      	movs	r3, #9
 8014f5c:	e017      	b.n	8014f8e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014f5e:	2300      	movs	r3, #0
 8014f60:	60fb      	str	r3, [r7, #12]
 8014f62:	e010      	b.n	8014f86 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014f64:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014f66:	6819      	ldr	r1, [r3, #0]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	222c      	movs	r2, #44	; 0x2c
 8014f6c:	fb02 f303 	mul.w	r3, r2, r3
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	4413      	add	r3, r2
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	3206      	adds	r2, #6
 8014f78:	0092      	lsls	r2, r2, #2
 8014f7a:	440a      	add	r2, r1
 8014f7c:	3204      	adds	r2, #4
 8014f7e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	3301      	adds	r3, #1
 8014f84:	60fb      	str	r3, [r7, #12]
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	ddeb      	ble.n	8014f64 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f8c:	2300      	movs	r3, #0
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3714      	adds	r7, #20
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bc80      	pop	{r7}
 8014f96:	4770      	bx	lr
 8014f98:	200019d4 	.word	0x200019d4

08014f9c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	6039      	str	r1, [r7, #0]
 8014fa6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014fa8:	79fb      	ldrb	r3, [r7, #7]
 8014faa:	6839      	ldr	r1, [r7, #0]
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7f8 f89f 	bl	800d0f0 <SecureElementSetKey>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d001      	beq.n	8014fbc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fb8:	230e      	movs	r3, #14
 8014fba:	e018      	b.n	8014fee <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014fbc:	79fb      	ldrb	r3, [r7, #7]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d114      	bne.n	8014fec <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8014fc2:	4b0d      	ldr	r3, [pc, #52]	; (8014ff8 <LoRaMacCryptoSetKey+0x5c>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	789b      	ldrb	r3, [r3, #2]
 8014fc8:	79fa      	ldrb	r2, [r7, #7]
 8014fca:	4611      	mov	r1, r2
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f000 fa39 	bl	8015444 <LoRaMacCryptoDeriveMcRootKey>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d001      	beq.n	8014fdc <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fd8:	230e      	movs	r3, #14
 8014fda:	e008      	b.n	8014fee <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014fdc:	2004      	movs	r0, #4
 8014fde:	f000 fa5c 	bl	801549a <LoRaMacCryptoDeriveMcKEKey>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d001      	beq.n	8014fec <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fe8:	230e      	movs	r3, #14
 8014fea:	e000      	b.n	8014fee <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	200019d4 	.word	0x200019d4

08014ffc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b086      	sub	sp, #24
 8015000:	af02      	add	r7, sp, #8
 8015002:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801500a:	2309      	movs	r3, #9
 801500c:	e02d      	b.n	801506a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801500e:	2301      	movs	r3, #1
 8015010:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015012:	4b18      	ldr	r3, [pc, #96]	; (8015074 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	889a      	ldrh	r2, [r3, #4]
 8015018:	3201      	adds	r2, #1
 801501a:	b292      	uxth	r2, r2
 801501c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801501e:	4b15      	ldr	r3, [pc, #84]	; (8015074 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	889a      	ldrh	r2, [r3, #4]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f000 fc18 	bl	801585e <LoRaMacSerializerJoinRequest>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d001      	beq.n	8015038 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015034:	2310      	movs	r3, #16
 8015036:	e018      	b.n	801506a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6819      	ldr	r1, [r3, #0]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3318      	adds	r3, #24
 8015040:	7bfa      	ldrb	r2, [r7, #15]
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	4613      	mov	r3, r2
 8015046:	2213      	movs	r2, #19
 8015048:	2000      	movs	r0, #0
 801504a:	f7f8 f8af 	bl	800d1ac <SecureElementComputeAesCmac>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d001      	beq.n	8015058 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015054:	230e      	movs	r3, #14
 8015056:	e008      	b.n	801506a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 fc00 	bl	801585e <LoRaMacSerializerJoinRequest>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d001      	beq.n	8015068 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015064:	2310      	movs	r3, #16
 8015066:	e000      	b.n	801506a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015068:	2300      	movs	r3, #0
}
 801506a:	4618      	mov	r0, r3
 801506c:	3710      	adds	r7, #16
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	200019d4 	.word	0x200019d4

08015078 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015078:	b590      	push	{r4, r7, lr}
 801507a:	b097      	sub	sp, #92	; 0x5c
 801507c:	af04      	add	r7, sp, #16
 801507e:	4603      	mov	r3, r0
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	607a      	str	r2, [r7, #4]
 8015084:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d002      	beq.n	8015092 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d101      	bne.n	8015096 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015092:	2309      	movs	r3, #9
 8015094:	e0bd      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015096:	2312      	movs	r3, #18
 8015098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801509c:	2300      	movs	r3, #0
 801509e:	61bb      	str	r3, [r7, #24]
 80150a0:	f107 031c 	add.w	r3, r7, #28
 80150a4:	221d      	movs	r2, #29
 80150a6:	2100      	movs	r1, #0
 80150a8:	4618      	mov	r0, r3
 80150aa:	f007 ff09 	bl	801cec0 <memset>
    uint8_t versionMinor         = 0;
 80150ae:	2300      	movs	r3, #0
 80150b0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80150b2:	4b5a      	ldr	r3, [pc, #360]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	889b      	ldrh	r3, [r3, #4]
 80150b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681c      	ldr	r4, [r3, #0]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	791b      	ldrb	r3, [r3, #4]
 80150c4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80150c8:	7bf8      	ldrb	r0, [r7, #15]
 80150ca:	f107 0217 	add.w	r2, r7, #23
 80150ce:	9202      	str	r2, [sp, #8]
 80150d0:	f107 0218 	add.w	r2, r7, #24
 80150d4:	9201      	str	r2, [sp, #4]
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	4623      	mov	r3, r4
 80150da:	460a      	mov	r2, r1
 80150dc:	68b9      	ldr	r1, [r7, #8]
 80150de:	f7f8 f959 	bl	800d394 <SecureElementProcessJoinAccept>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d001      	beq.n	80150ec <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150e8:	230e      	movs	r3, #14
 80150ea:	e092      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6818      	ldr	r0, [r3, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	791b      	ldrb	r3, [r3, #4]
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	f107 0318 	add.w	r3, r7, #24
 80150fa:	4619      	mov	r1, r3
 80150fc:	f003 f8ef 	bl	80182de <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f000 f9ed 	bl	80154e0 <LoRaMacParserJoinAccept>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d001      	beq.n	8015110 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801510c:	230f      	movs	r3, #15
 801510e:	e080      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	799b      	ldrb	r3, [r3, #6]
 8015114:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	79db      	ldrb	r3, [r3, #7]
 801511a:	021b      	lsls	r3, r3, #8
 801511c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801511e:	4313      	orrs	r3, r2
 8015120:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	7a1b      	ldrb	r3, [r3, #8]
 8015126:	041b      	lsls	r3, r3, #16
 8015128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801512a:	4313      	orrs	r3, r2
 801512c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801512e:	4b3b      	ldr	r3, [pc, #236]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	689b      	ldr	r3, [r3, #8]
 8015134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015136:	429a      	cmp	r2, r3
 8015138:	d010      	beq.n	801515c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801513a:	4b38      	ldr	r3, [pc, #224]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015140:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8015142:	7dfb      	ldrb	r3, [r7, #23]
 8015144:	2100      	movs	r1, #0
 8015146:	4618      	mov	r0, r3
 8015148:	f000 f97c 	bl	8015444 <LoRaMacCryptoDeriveMcRootKey>
 801514c:	4603      	mov	r3, r0
 801514e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015152:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015156:	2b00      	cmp	r3, #0
 8015158:	d005      	beq.n	8015166 <LoRaMacCryptoHandleJoinAccept+0xee>
 801515a:	e001      	b.n	8015160 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801515c:	2303      	movs	r3, #3
 801515e:	e058      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8015160:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015164:	e055      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015166:	2004      	movs	r0, #4
 8015168:	f000 f997 	bl	801549a <LoRaMacCryptoDeriveMcKEKey>
 801516c:	4603      	mov	r3, r0
 801516e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015172:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015176:	2b00      	cmp	r3, #0
 8015178:	d002      	beq.n	8015180 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801517a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801517e:	e048      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	7a5b      	ldrb	r3, [r3, #9]
 8015184:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	7a9b      	ldrb	r3, [r3, #10]
 801518a:	021b      	lsls	r3, r3, #8
 801518c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801518e:	4313      	orrs	r3, r2
 8015190:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	7adb      	ldrb	r3, [r3, #11]
 8015196:	041b      	lsls	r3, r3, #16
 8015198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801519a:	4313      	orrs	r3, r2
 801519c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801519e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80151a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80151a6:	2003      	movs	r0, #3
 80151a8:	f7ff fd06 	bl	8014bb8 <DeriveSessionKey10x>
 80151ac:	4603      	mov	r3, r0
 80151ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80151b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d002      	beq.n	80151c0 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80151ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151be:	e028      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80151c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80151c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80151c8:	2002      	movs	r0, #2
 80151ca:	f7ff fcf5 	bl	8014bb8 <DeriveSessionKey10x>
 80151ce:	4603      	mov	r3, r0
 80151d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80151d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d002      	beq.n	80151e2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80151dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151e0:	e017      	b.n	8015212 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80151e2:	4b0e      	ldr	r3, [pc, #56]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	7dfa      	ldrb	r2, [r7, #23]
 80151e8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80151ea:	4b0c      	ldr	r3, [pc, #48]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2200      	movs	r2, #0
 80151f0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80151f2:	4b0a      	ldr	r3, [pc, #40]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80151fc:	4b07      	ldr	r3, [pc, #28]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	f04f 32ff 	mov.w	r2, #4294967295
 8015204:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015206:	4b05      	ldr	r3, [pc, #20]	; (801521c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f04f 32ff 	mov.w	r2, #4294967295
 801520e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015210:	2300      	movs	r3, #0
}
 8015212:	4618      	mov	r0, r3
 8015214:	374c      	adds	r7, #76	; 0x4c
 8015216:	46bd      	mov	sp, r7
 8015218:	bd90      	pop	{r4, r7, pc}
 801521a:	bf00      	nop
 801521c:	200019d4 	.word	0x200019d4

08015220 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015220:	b590      	push	{r4, r7, lr}
 8015222:	b08b      	sub	sp, #44	; 0x2c
 8015224:	af04      	add	r7, sp, #16
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	607b      	str	r3, [r7, #4]
 801522a:	460b      	mov	r3, r1
 801522c:	72fb      	strb	r3, [r7, #11]
 801522e:	4613      	mov	r3, r2
 8015230:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015232:	2312      	movs	r3, #18
 8015234:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015236:	2303      	movs	r3, #3
 8015238:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d101      	bne.n	8015244 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015240:	2309      	movs	r3, #9
 8015242:	e05f      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015244:	4b31      	ldr	r3, [pc, #196]	; (801530c <LoRaMacCryptoSecureMessage+0xec>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	68db      	ldr	r3, [r3, #12]
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	429a      	cmp	r2, r3
 801524e:	d201      	bcs.n	8015254 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015250:	2306      	movs	r3, #6
 8015252:	e057      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f893 3020 	ldrb.w	r3, [r3, #32]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d101      	bne.n	8015262 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801525e:	2302      	movs	r3, #2
 8015260:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015262:	4b2a      	ldr	r3, [pc, #168]	; (801530c <LoRaMacCryptoSecureMessage+0xec>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	68fa      	ldr	r2, [r7, #12]
 801526a:	429a      	cmp	r2, r3
 801526c:	d916      	bls.n	801529c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015278:	b219      	sxth	r1, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	689c      	ldr	r4, [r3, #8]
 801527e:	7dfa      	ldrb	r2, [r7, #23]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	9301      	str	r3, [sp, #4]
 8015284:	2300      	movs	r3, #0
 8015286:	9300      	str	r3, [sp, #0]
 8015288:	4623      	mov	r3, r4
 801528a:	f7ff faa1 	bl	80147d0 <PayloadEncrypt>
 801528e:	4603      	mov	r3, r0
 8015290:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015292:	7dbb      	ldrb	r3, [r7, #22]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d001      	beq.n	801529c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015298:	7dbb      	ldrb	r3, [r7, #22]
 801529a:	e033      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f000 fb60 	bl	8015962 <LoRaMacSerializerData>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d001      	beq.n	80152ac <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80152a8:	2310      	movs	r3, #16
 80152aa:	e02b      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80152ac:	2302      	movs	r3, #2
 80152ae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6818      	ldr	r0, [r3, #0]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	791b      	ldrb	r3, [r3, #4]
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	3b04      	subs	r3, #4
 80152bc:	b299      	uxth	r1, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	689b      	ldr	r3, [r3, #8]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	322c      	adds	r2, #44	; 0x2c
 80152c6:	7dfc      	ldrb	r4, [r7, #23]
 80152c8:	9203      	str	r2, [sp, #12]
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	9202      	str	r2, [sp, #8]
 80152ce:	9301      	str	r3, [sp, #4]
 80152d0:	2300      	movs	r3, #0
 80152d2:	9300      	str	r3, [sp, #0]
 80152d4:	2300      	movs	r3, #0
 80152d6:	4622      	mov	r2, r4
 80152d8:	f7ff fb7b 	bl	80149d2 <ComputeCmacB0>
 80152dc:	4603      	mov	r3, r0
 80152de:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80152e0:	7dbb      	ldrb	r3, [r7, #22]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d001      	beq.n	80152ea <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80152e6:	7dbb      	ldrb	r3, [r7, #22]
 80152e8:	e00c      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f000 fb39 	bl	8015962 <LoRaMacSerializerData>
 80152f0:	4603      	mov	r3, r0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d001      	beq.n	80152fa <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80152f6:	2310      	movs	r3, #16
 80152f8:	e004      	b.n	8015304 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80152fa:	4b04      	ldr	r3, [pc, #16]	; (801530c <LoRaMacCryptoSecureMessage+0xec>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015302:	2300      	movs	r3, #0
}
 8015304:	4618      	mov	r0, r3
 8015306:	371c      	adds	r7, #28
 8015308:	46bd      	mov	sp, r7
 801530a:	bd90      	pop	{r4, r7, pc}
 801530c:	200019d4 	.word	0x200019d4

08015310 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015310:	b590      	push	{r4, r7, lr}
 8015312:	b08b      	sub	sp, #44	; 0x2c
 8015314:	af04      	add	r7, sp, #16
 8015316:	60b9      	str	r1, [r7, #8]
 8015318:	607b      	str	r3, [r7, #4]
 801531a:	4603      	mov	r3, r0
 801531c:	73fb      	strb	r3, [r7, #15]
 801531e:	4613      	mov	r3, r2
 8015320:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015324:	2b00      	cmp	r3, #0
 8015326:	d101      	bne.n	801532c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015328:	2309      	movs	r3, #9
 801532a:	e084      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801532c:	7bbb      	ldrb	r3, [r7, #14]
 801532e:	6879      	ldr	r1, [r7, #4]
 8015330:	4618      	mov	r0, r3
 8015332:	f7ff fcdf 	bl	8014cf4 <CheckFCntDown>
 8015336:	4603      	mov	r3, r0
 8015338:	f083 0301 	eor.w	r3, r3, #1
 801533c:	b2db      	uxtb	r3, r3
 801533e:	2b00      	cmp	r3, #0
 8015340:	d001      	beq.n	8015346 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015342:	2306      	movs	r3, #6
 8015344:	e077      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015346:	2312      	movs	r3, #18
 8015348:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801534a:	2303      	movs	r3, #3
 801534c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801534e:	2302      	movs	r3, #2
 8015350:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015354:	f000 f98f 	bl	8015676 <LoRaMacParserData>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801535e:	230f      	movs	r3, #15
 8015360:	e069      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015362:	f107 0210 	add.w	r2, r7, #16
 8015366:	7bfb      	ldrb	r3, [r7, #15]
 8015368:	4611      	mov	r1, r2
 801536a:	4618      	mov	r0, r3
 801536c:	f7ff fbfe 	bl	8014b6c <GetKeyAddrItem>
 8015370:	4603      	mov	r3, r0
 8015372:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015374:	7d7b      	ldrb	r3, [r7, #21]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801537a:	7d7b      	ldrb	r3, [r7, #21]
 801537c:	e05b      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	785b      	ldrb	r3, [r3, #1]
 8015382:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	789b      	ldrb	r3, [r3, #2]
 8015388:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	429a      	cmp	r2, r3
 8015392:	d001      	beq.n	8015398 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015394:	2302      	movs	r3, #2
 8015396:	e04e      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539a:	7b1b      	ldrb	r3, [r3, #12]
 801539c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	bf14      	ite	ne
 80153a6:	2301      	movne	r3, #1
 80153a8:	2300      	moveq	r3, #0
 80153aa:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80153ac:	4b24      	ldr	r3, [pc, #144]	; (8015440 <LoRaMacCryptoUnsecureMessage+0x130>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	789b      	ldrb	r3, [r3, #2]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d101      	bne.n	80153ba <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80153b6:	2300      	movs	r3, #0
 80153b8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80153ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c0:	791b      	ldrb	r3, [r3, #4]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	3b04      	subs	r3, #4
 80153c6:	b299      	uxth	r1, r3
 80153c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153cc:	7dbc      	ldrb	r4, [r7, #22]
 80153ce:	7d3a      	ldrb	r2, [r7, #20]
 80153d0:	9303      	str	r3, [sp, #12]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	9302      	str	r3, [sp, #8]
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	9301      	str	r3, [sp, #4]
 80153da:	2301      	movs	r3, #1
 80153dc:	9300      	str	r3, [sp, #0]
 80153de:	4623      	mov	r3, r4
 80153e0:	f7ff fb35 	bl	8014a4e <VerifyCmacB0>
 80153e4:	4603      	mov	r3, r0
 80153e6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80153e8:	7d7b      	ldrb	r3, [r7, #21]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d001      	beq.n	80153f2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80153ee:	7d7b      	ldrb	r3, [r7, #21]
 80153f0:	e021      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80153f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d101      	bne.n	8015400 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80153fc:	2302      	movs	r3, #2
 80153fe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015402:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801540a:	b219      	sxth	r1, r3
 801540c:	7dfa      	ldrb	r2, [r7, #23]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	9301      	str	r3, [sp, #4]
 8015412:	2301      	movs	r3, #1
 8015414:	9300      	str	r3, [sp, #0]
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	f7ff f9da 	bl	80147d0 <PayloadEncrypt>
 801541c:	4603      	mov	r3, r0
 801541e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015420:	7d7b      	ldrb	r3, [r7, #21]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015426:	7d7b      	ldrb	r3, [r7, #21]
 8015428:	e005      	b.n	8015436 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801542a:	7bbb      	ldrb	r3, [r7, #14]
 801542c:	6879      	ldr	r1, [r7, #4]
 801542e:	4618      	mov	r0, r3
 8015430:	f7ff fc84 	bl	8014d3c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015434:	2300      	movs	r3, #0
}
 8015436:	4618      	mov	r0, r3
 8015438:	371c      	adds	r7, #28
 801543a:	46bd      	mov	sp, r7
 801543c:	bd90      	pop	{r4, r7, pc}
 801543e:	bf00      	nop
 8015440:	200019d4 	.word	0x200019d4

08015444 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b086      	sub	sp, #24
 8015448:	af00      	add	r7, sp, #0
 801544a:	4603      	mov	r3, r0
 801544c:	460a      	mov	r2, r1
 801544e:	71fb      	strb	r3, [r7, #7]
 8015450:	4613      	mov	r3, r2
 8015452:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015454:	79bb      	ldrb	r3, [r7, #6]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d001      	beq.n	801545e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801545a:	230a      	movs	r3, #10
 801545c:	e019      	b.n	8015492 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801545e:	2300      	movs	r3, #0
 8015460:	60bb      	str	r3, [r7, #8]
 8015462:	f107 030c 	add.w	r3, r7, #12
 8015466:	2200      	movs	r2, #0
 8015468:	601a      	str	r2, [r3, #0]
 801546a:	605a      	str	r2, [r3, #4]
 801546c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801546e:	79fb      	ldrb	r3, [r7, #7]
 8015470:	2b01      	cmp	r3, #1
 8015472:	d101      	bne.n	8015478 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8015474:	2320      	movs	r3, #32
 8015476:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015478:	79b9      	ldrb	r1, [r7, #6]
 801547a:	f107 0308 	add.w	r3, r7, #8
 801547e:	2204      	movs	r2, #4
 8015480:	4618      	mov	r0, r3
 8015482:	f7f7 ff47 	bl	800d314 <SecureElementDeriveAndStoreKey>
 8015486:	4603      	mov	r3, r0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d001      	beq.n	8015490 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801548c:	230e      	movs	r3, #14
 801548e:	e000      	b.n	8015492 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	3718      	adds	r7, #24
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}

0801549a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801549a:	b580      	push	{r7, lr}
 801549c:	b086      	sub	sp, #24
 801549e:	af00      	add	r7, sp, #0
 80154a0:	4603      	mov	r3, r0
 80154a2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b04      	cmp	r3, #4
 80154a8:	d001      	beq.n	80154ae <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80154aa:	230a      	movs	r3, #10
 80154ac:	e014      	b.n	80154d8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80154ae:	2300      	movs	r3, #0
 80154b0:	60bb      	str	r3, [r7, #8]
 80154b2:	f107 030c 	add.w	r3, r7, #12
 80154b6:	2200      	movs	r2, #0
 80154b8:	601a      	str	r2, [r3, #0]
 80154ba:	605a      	str	r2, [r3, #4]
 80154bc:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80154be:	79f9      	ldrb	r1, [r7, #7]
 80154c0:	f107 0308 	add.w	r3, r7, #8
 80154c4:	227f      	movs	r2, #127	; 0x7f
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7f7 ff24 	bl	800d314 <SecureElementDeriveAndStoreKey>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d001      	beq.n	80154d6 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80154d2:	230e      	movs	r3, #14
 80154d4:	e000      	b.n	80154d8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3718      	adds	r7, #24
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d003      	beq.n	80154f6 <LoRaMacParserJoinAccept+0x16>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d101      	bne.n	80154fa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80154f6:	2302      	movs	r3, #2
 80154f8:	e0b9      	b.n	801566e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80154fa:	2300      	movs	r3, #0
 80154fc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	89fb      	ldrh	r3, [r7, #14]
 8015504:	1c59      	adds	r1, r3, #1
 8015506:	81f9      	strh	r1, [r7, #14]
 8015508:	4413      	add	r3, r2
 801550a:	781a      	ldrb	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	1d98      	adds	r0, r3, #6
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	89fb      	ldrh	r3, [r7, #14]
 801551a:	4413      	add	r3, r2
 801551c:	2203      	movs	r2, #3
 801551e:	4619      	mov	r1, r3
 8015520:	f002 fedd 	bl	80182de <memcpy1>
    bufItr = bufItr + 3;
 8015524:	89fb      	ldrh	r3, [r7, #14]
 8015526:	3303      	adds	r3, #3
 8015528:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f103 0009 	add.w	r0, r3, #9
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681a      	ldr	r2, [r3, #0]
 8015534:	89fb      	ldrh	r3, [r7, #14]
 8015536:	4413      	add	r3, r2
 8015538:	2203      	movs	r2, #3
 801553a:	4619      	mov	r1, r3
 801553c:	f002 fecf 	bl	80182de <memcpy1>
    bufItr = bufItr + 3;
 8015540:	89fb      	ldrh	r3, [r7, #14]
 8015542:	3303      	adds	r3, #3
 8015544:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	89fb      	ldrh	r3, [r7, #14]
 801554c:	1c59      	adds	r1, r3, #1
 801554e:	81f9      	strh	r1, [r7, #14]
 8015550:	4413      	add	r3, r2
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	461a      	mov	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	89fb      	ldrh	r3, [r7, #14]
 8015560:	1c59      	adds	r1, r3, #1
 8015562:	81f9      	strh	r1, [r7, #14]
 8015564:	4413      	add	r3, r2
 8015566:	781b      	ldrb	r3, [r3, #0]
 8015568:	021a      	lsls	r2, r3, #8
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	431a      	orrs	r2, r3
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681a      	ldr	r2, [r3, #0]
 8015578:	89fb      	ldrh	r3, [r7, #14]
 801557a:	1c59      	adds	r1, r3, #1
 801557c:	81f9      	strh	r1, [r7, #14]
 801557e:	4413      	add	r3, r2
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	041a      	lsls	r2, r3, #16
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	431a      	orrs	r2, r3
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	89fb      	ldrh	r3, [r7, #14]
 8015594:	1c59      	adds	r1, r3, #1
 8015596:	81f9      	strh	r1, [r7, #14]
 8015598:	4413      	add	r3, r2
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	061a      	lsls	r2, r3, #24
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	68db      	ldr	r3, [r3, #12]
 80155a2:	431a      	orrs	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	89fb      	ldrh	r3, [r7, #14]
 80155ae:	1c59      	adds	r1, r3, #1
 80155b0:	81f9      	strh	r1, [r7, #14]
 80155b2:	4413      	add	r3, r2
 80155b4:	781a      	ldrb	r2, [r3, #0]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	89fb      	ldrh	r3, [r7, #14]
 80155c0:	1c59      	adds	r1, r3, #1
 80155c2:	81f9      	strh	r1, [r7, #14]
 80155c4:	4413      	add	r3, r2
 80155c6:	781a      	ldrb	r2, [r3, #0]
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	791b      	ldrb	r3, [r3, #4]
 80155d0:	1f1a      	subs	r2, r3, #4
 80155d2:	89fb      	ldrh	r3, [r7, #14]
 80155d4:	1ad3      	subs	r3, r2, r3
 80155d6:	2b10      	cmp	r3, #16
 80155d8:	d10e      	bne.n	80155f8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f103 0012 	add.w	r0, r3, #18
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681a      	ldr	r2, [r3, #0]
 80155e4:	89fb      	ldrh	r3, [r7, #14]
 80155e6:	4413      	add	r3, r2
 80155e8:	2210      	movs	r2, #16
 80155ea:	4619      	mov	r1, r3
 80155ec:	f002 fe77 	bl	80182de <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80155f0:	89fb      	ldrh	r3, [r7, #14]
 80155f2:	3310      	adds	r3, #16
 80155f4:	81fb      	strh	r3, [r7, #14]
 80155f6:	e008      	b.n	801560a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	791b      	ldrb	r3, [r3, #4]
 80155fc:	1f1a      	subs	r2, r3, #4
 80155fe:	89fb      	ldrh	r3, [r7, #14]
 8015600:	1ad3      	subs	r3, r2, r3
 8015602:	2b00      	cmp	r3, #0
 8015604:	dd01      	ble.n	801560a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015606:	2301      	movs	r3, #1
 8015608:	e031      	b.n	801566e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	89fb      	ldrh	r3, [r7, #14]
 8015610:	1c59      	adds	r1, r3, #1
 8015612:	81f9      	strh	r1, [r7, #14]
 8015614:	4413      	add	r3, r2
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	461a      	mov	r2, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	1c59      	adds	r1, r3, #1
 8015626:	81f9      	strh	r1, [r7, #14]
 8015628:	4413      	add	r3, r2
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	021a      	lsls	r2, r3, #8
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015632:	431a      	orrs	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	89fb      	ldrh	r3, [r7, #14]
 801563e:	1c59      	adds	r1, r3, #1
 8015640:	81f9      	strh	r1, [r7, #14]
 8015642:	4413      	add	r3, r2
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	041a      	lsls	r2, r3, #16
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564c:	431a      	orrs	r2, r3
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	89fb      	ldrh	r3, [r7, #14]
 8015658:	1c59      	adds	r1, r3, #1
 801565a:	81f9      	strh	r1, [r7, #14]
 801565c:	4413      	add	r3, r2
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	061a      	lsls	r2, r3, #24
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015666:	431a      	orrs	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801566c:	2300      	movs	r3, #0
}
 801566e:	4618      	mov	r0, r3
 8015670:	3710      	adds	r7, #16
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}

08015676 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015676:	b580      	push	{r7, lr}
 8015678:	b084      	sub	sp, #16
 801567a:	af00      	add	r7, sp, #0
 801567c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d003      	beq.n	801568c <LoRaMacParserData+0x16>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d101      	bne.n	8015690 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801568c:	2302      	movs	r3, #2
 801568e:	e0e2      	b.n	8015856 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015690:	2300      	movs	r3, #0
 8015692:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	89fb      	ldrh	r3, [r7, #14]
 801569a:	1c59      	adds	r1, r3, #1
 801569c:	81f9      	strh	r1, [r7, #14]
 801569e:	4413      	add	r3, r2
 80156a0:	781a      	ldrb	r2, [r3, #0]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	89fb      	ldrh	r3, [r7, #14]
 80156ac:	1c59      	adds	r1, r3, #1
 80156ae:	81f9      	strh	r1, [r7, #14]
 80156b0:	4413      	add	r3, r2
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	461a      	mov	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	89fb      	ldrh	r3, [r7, #14]
 80156c0:	1c59      	adds	r1, r3, #1
 80156c2:	81f9      	strh	r1, [r7, #14]
 80156c4:	4413      	add	r3, r2
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	021a      	lsls	r2, r3, #8
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	689b      	ldr	r3, [r3, #8]
 80156ce:	431a      	orrs	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	89fb      	ldrh	r3, [r7, #14]
 80156da:	1c59      	adds	r1, r3, #1
 80156dc:	81f9      	strh	r1, [r7, #14]
 80156de:	4413      	add	r3, r2
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	041a      	lsls	r2, r3, #16
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	689b      	ldr	r3, [r3, #8]
 80156e8:	431a      	orrs	r2, r3
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	89fb      	ldrh	r3, [r7, #14]
 80156f4:	1c59      	adds	r1, r3, #1
 80156f6:	81f9      	strh	r1, [r7, #14]
 80156f8:	4413      	add	r3, r2
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	061a      	lsls	r2, r3, #24
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	431a      	orrs	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	89fb      	ldrh	r3, [r7, #14]
 801570e:	1c59      	adds	r1, r3, #1
 8015710:	81f9      	strh	r1, [r7, #14]
 8015712:	4413      	add	r3, r2
 8015714:	781a      	ldrb	r2, [r3, #0]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	681a      	ldr	r2, [r3, #0]
 801571e:	89fb      	ldrh	r3, [r7, #14]
 8015720:	1c59      	adds	r1, r3, #1
 8015722:	81f9      	strh	r1, [r7, #14]
 8015724:	4413      	add	r3, r2
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	b29a      	uxth	r2, r3
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	89fb      	ldrh	r3, [r7, #14]
 8015734:	1c59      	adds	r1, r3, #1
 8015736:	81f9      	strh	r1, [r7, #14]
 8015738:	4413      	add	r3, r2
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	0219      	lsls	r1, r3, #8
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	89db      	ldrh	r3, [r3, #14]
 8015742:	b21a      	sxth	r2, r3
 8015744:	b20b      	sxth	r3, r1
 8015746:	4313      	orrs	r3, r2
 8015748:	b21b      	sxth	r3, r3
 801574a:	b29a      	uxth	r2, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f103 0010 	add.w	r0, r3, #16
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	89fb      	ldrh	r3, [r7, #14]
 801575c:	18d1      	adds	r1, r2, r3
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	7b1b      	ldrb	r3, [r3, #12]
 8015762:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015766:	b2db      	uxtb	r3, r3
 8015768:	b29b      	uxth	r3, r3
 801576a:	461a      	mov	r2, r3
 801576c:	f002 fdb7 	bl	80182de <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7b1b      	ldrb	r3, [r3, #12]
 8015774:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015778:	b2db      	uxtb	r3, r3
 801577a:	b29a      	uxth	r2, r3
 801577c:	89fb      	ldrh	r3, [r7, #14]
 801577e:	4413      	add	r3, r2
 8015780:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2200      	movs	r2, #0
 8015786:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2200      	movs	r2, #0
 801578e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	791b      	ldrb	r3, [r3, #4]
 8015796:	461a      	mov	r2, r3
 8015798:	89fb      	ldrh	r3, [r7, #14]
 801579a:	1ad3      	subs	r3, r2, r3
 801579c:	2b04      	cmp	r3, #4
 801579e:	dd28      	ble.n	80157f2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	89fb      	ldrh	r3, [r7, #14]
 80157a6:	1c59      	adds	r1, r3, #1
 80157a8:	81f9      	strh	r1, [r7, #14]
 80157aa:	4413      	add	r3, r2
 80157ac:	781a      	ldrb	r2, [r3, #0]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	791a      	ldrb	r2, [r3, #4]
 80157b8:	89fb      	ldrh	r3, [r7, #14]
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	3b04      	subs	r3, #4
 80157c2:	b2da      	uxtb	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	89fb      	ldrh	r3, [r7, #14]
 80157d4:	18d1      	adds	r1, r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157dc:	b29b      	uxth	r3, r3
 80157de:	461a      	mov	r2, r3
 80157e0:	f002 fd7d 	bl	80182de <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	89fb      	ldrh	r3, [r7, #14]
 80157ee:	4413      	add	r3, r2
 80157f0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	791b      	ldrb	r3, [r3, #4]
 80157fa:	3b04      	subs	r3, #4
 80157fc:	4413      	add	r3, r2
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	461a      	mov	r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6819      	ldr	r1, [r3, #0]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	791b      	ldrb	r3, [r3, #4]
 8015812:	3b03      	subs	r3, #3
 8015814:	440b      	add	r3, r1
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	021b      	lsls	r3, r3, #8
 801581a:	431a      	orrs	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	6819      	ldr	r1, [r3, #0]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	791b      	ldrb	r3, [r3, #4]
 801582c:	3b02      	subs	r3, #2
 801582e:	440b      	add	r3, r1
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	041b      	lsls	r3, r3, #16
 8015834:	431a      	orrs	r2, r3
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6819      	ldr	r1, [r3, #0]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	791b      	ldrb	r3, [r3, #4]
 8015846:	3b01      	subs	r3, #1
 8015848:	440b      	add	r3, r1
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	061b      	lsls	r3, r3, #24
 801584e:	431a      	orrs	r2, r3
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015854:	2300      	movs	r3, #0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}

0801585e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b084      	sub	sp, #16
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d003      	beq.n	8015874 <LoRaMacSerializerJoinRequest+0x16>
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d101      	bne.n	8015878 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015874:	2301      	movs	r3, #1
 8015876:	e070      	b.n	801595a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015878:	2300      	movs	r3, #0
 801587a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	791b      	ldrb	r3, [r3, #4]
 8015880:	2b16      	cmp	r3, #22
 8015882:	d801      	bhi.n	8015888 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015884:	2302      	movs	r3, #2
 8015886:	e068      	b.n	801595a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	89fb      	ldrh	r3, [r7, #14]
 801588e:	1c59      	adds	r1, r3, #1
 8015890:	81f9      	strh	r1, [r7, #14]
 8015892:	4413      	add	r3, r2
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	7952      	ldrb	r2, [r2, #5]
 8015898:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	89fb      	ldrh	r3, [r7, #14]
 80158a0:	18d0      	adds	r0, r2, r3
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	3306      	adds	r3, #6
 80158a6:	2208      	movs	r2, #8
 80158a8:	4619      	mov	r1, r3
 80158aa:	f002 fd33 	bl	8018314 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80158ae:	89fb      	ldrh	r3, [r7, #14]
 80158b0:	3308      	adds	r3, #8
 80158b2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	89fb      	ldrh	r3, [r7, #14]
 80158ba:	18d0      	adds	r0, r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	330e      	adds	r3, #14
 80158c0:	2208      	movs	r2, #8
 80158c2:	4619      	mov	r1, r3
 80158c4:	f002 fd26 	bl	8018314 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80158c8:	89fb      	ldrh	r3, [r7, #14]
 80158ca:	3308      	adds	r3, #8
 80158cc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	8ad9      	ldrh	r1, [r3, #22]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681a      	ldr	r2, [r3, #0]
 80158d6:	89fb      	ldrh	r3, [r7, #14]
 80158d8:	1c58      	adds	r0, r3, #1
 80158da:	81f8      	strh	r0, [r7, #14]
 80158dc:	4413      	add	r3, r2
 80158de:	b2ca      	uxtb	r2, r1
 80158e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	8adb      	ldrh	r3, [r3, #22]
 80158e6:	0a1b      	lsrs	r3, r3, #8
 80158e8:	b299      	uxth	r1, r3
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	89fb      	ldrh	r3, [r7, #14]
 80158f0:	1c58      	adds	r0, r3, #1
 80158f2:	81f8      	strh	r0, [r7, #14]
 80158f4:	4413      	add	r3, r2
 80158f6:	b2ca      	uxtb	r2, r1
 80158f8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6999      	ldr	r1, [r3, #24]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	89fb      	ldrh	r3, [r7, #14]
 8015904:	1c58      	adds	r0, r3, #1
 8015906:	81f8      	strh	r0, [r7, #14]
 8015908:	4413      	add	r3, r2
 801590a:	b2ca      	uxtb	r2, r1
 801590c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	699b      	ldr	r3, [r3, #24]
 8015912:	0a19      	lsrs	r1, r3, #8
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	89fb      	ldrh	r3, [r7, #14]
 801591a:	1c58      	adds	r0, r3, #1
 801591c:	81f8      	strh	r0, [r7, #14]
 801591e:	4413      	add	r3, r2
 8015920:	b2ca      	uxtb	r2, r1
 8015922:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	699b      	ldr	r3, [r3, #24]
 8015928:	0c19      	lsrs	r1, r3, #16
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	89fb      	ldrh	r3, [r7, #14]
 8015930:	1c58      	adds	r0, r3, #1
 8015932:	81f8      	strh	r0, [r7, #14]
 8015934:	4413      	add	r3, r2
 8015936:	b2ca      	uxtb	r2, r1
 8015938:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	699b      	ldr	r3, [r3, #24]
 801593e:	0e19      	lsrs	r1, r3, #24
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	89fb      	ldrh	r3, [r7, #14]
 8015946:	1c58      	adds	r0, r3, #1
 8015948:	81f8      	strh	r0, [r7, #14]
 801594a:	4413      	add	r3, r2
 801594c:	b2ca      	uxtb	r2, r1
 801594e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015950:	89fb      	ldrh	r3, [r7, #14]
 8015952:	b2da      	uxtb	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015958:	2300      	movs	r3, #0
}
 801595a:	4618      	mov	r0, r3
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015962:	b580      	push	{r7, lr}
 8015964:	b084      	sub	sp, #16
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d003      	beq.n	8015978 <LoRaMacSerializerData+0x16>
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d101      	bne.n	801597c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015978:	2301      	movs	r3, #1
 801597a:	e0e5      	b.n	8015b48 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801597c:	2300      	movs	r3, #0
 801597e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015980:	2308      	movs	r3, #8
 8015982:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	7b1b      	ldrb	r3, [r3, #12]
 8015988:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801598c:	b2db      	uxtb	r3, r3
 801598e:	b29a      	uxth	r2, r3
 8015990:	89bb      	ldrh	r3, [r7, #12]
 8015992:	4413      	add	r3, r2
 8015994:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80159a0:	89bb      	ldrh	r3, [r7, #12]
 80159a2:	3301      	adds	r3, #1
 80159a4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	89bb      	ldrh	r3, [r7, #12]
 80159b0:	4413      	add	r3, r2
 80159b2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80159b4:	89bb      	ldrh	r3, [r7, #12]
 80159b6:	3304      	adds	r3, #4
 80159b8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	791b      	ldrb	r3, [r3, #4]
 80159be:	b29b      	uxth	r3, r3
 80159c0:	89ba      	ldrh	r2, [r7, #12]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d901      	bls.n	80159ca <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80159c6:	2302      	movs	r3, #2
 80159c8:	e0be      	b.n	8015b48 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	89fb      	ldrh	r3, [r7, #14]
 80159d0:	1c59      	adds	r1, r3, #1
 80159d2:	81f9      	strh	r1, [r7, #14]
 80159d4:	4413      	add	r3, r2
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	7952      	ldrb	r2, [r2, #5]
 80159da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6899      	ldr	r1, [r3, #8]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	89fb      	ldrh	r3, [r7, #14]
 80159e6:	1c58      	adds	r0, r3, #1
 80159e8:	81f8      	strh	r0, [r7, #14]
 80159ea:	4413      	add	r3, r2
 80159ec:	b2ca      	uxtb	r2, r1
 80159ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	689b      	ldr	r3, [r3, #8]
 80159f4:	0a19      	lsrs	r1, r3, #8
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	89fb      	ldrh	r3, [r7, #14]
 80159fc:	1c58      	adds	r0, r3, #1
 80159fe:	81f8      	strh	r0, [r7, #14]
 8015a00:	4413      	add	r3, r2
 8015a02:	b2ca      	uxtb	r2, r1
 8015a04:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	689b      	ldr	r3, [r3, #8]
 8015a0a:	0c19      	lsrs	r1, r3, #16
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	89fb      	ldrh	r3, [r7, #14]
 8015a12:	1c58      	adds	r0, r3, #1
 8015a14:	81f8      	strh	r0, [r7, #14]
 8015a16:	4413      	add	r3, r2
 8015a18:	b2ca      	uxtb	r2, r1
 8015a1a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	0e19      	lsrs	r1, r3, #24
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681a      	ldr	r2, [r3, #0]
 8015a26:	89fb      	ldrh	r3, [r7, #14]
 8015a28:	1c58      	adds	r0, r3, #1
 8015a2a:	81f8      	strh	r0, [r7, #14]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	b2ca      	uxtb	r2, r1
 8015a30:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	89fb      	ldrh	r3, [r7, #14]
 8015a38:	1c59      	adds	r1, r3, #1
 8015a3a:	81f9      	strh	r1, [r7, #14]
 8015a3c:	4413      	add	r3, r2
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	7b12      	ldrb	r2, [r2, #12]
 8015a42:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	89d9      	ldrh	r1, [r3, #14]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	89fb      	ldrh	r3, [r7, #14]
 8015a4e:	1c58      	adds	r0, r3, #1
 8015a50:	81f8      	strh	r0, [r7, #14]
 8015a52:	4413      	add	r3, r2
 8015a54:	b2ca      	uxtb	r2, r1
 8015a56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	89db      	ldrh	r3, [r3, #14]
 8015a5c:	0a1b      	lsrs	r3, r3, #8
 8015a5e:	b299      	uxth	r1, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	89fb      	ldrh	r3, [r7, #14]
 8015a66:	1c58      	adds	r0, r3, #1
 8015a68:	81f8      	strh	r0, [r7, #14]
 8015a6a:	4413      	add	r3, r2
 8015a6c:	b2ca      	uxtb	r2, r1
 8015a6e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681a      	ldr	r2, [r3, #0]
 8015a74:	89fb      	ldrh	r3, [r7, #14]
 8015a76:	18d0      	adds	r0, r2, r3
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f103 0110 	add.w	r1, r3, #16
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	7b1b      	ldrb	r3, [r3, #12]
 8015a82:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	f002 fc27 	bl	80182de <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	7b1b      	ldrb	r3, [r3, #12]
 8015a94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	b29a      	uxth	r2, r3
 8015a9c:	89fb      	ldrh	r3, [r7, #14]
 8015a9e:	4413      	add	r3, r2
 8015aa0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d009      	beq.n	8015ac0 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	89fb      	ldrh	r3, [r7, #14]
 8015ab2:	1c59      	adds	r1, r3, #1
 8015ab4:	81f9      	strh	r1, [r7, #14]
 8015ab6:	4413      	add	r3, r2
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015abe:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	18d0      	adds	r0, r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	f002 fc02 	bl	80182de <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	89fb      	ldrh	r3, [r7, #14]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681a      	ldr	r2, [r3, #0]
 8015af0:	89fb      	ldrh	r3, [r7, #14]
 8015af2:	1c58      	adds	r0, r3, #1
 8015af4:	81f8      	strh	r0, [r7, #14]
 8015af6:	4413      	add	r3, r2
 8015af8:	b2ca      	uxtb	r2, r1
 8015afa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b00:	0a19      	lsrs	r1, r3, #8
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	89fb      	ldrh	r3, [r7, #14]
 8015b08:	1c58      	adds	r0, r3, #1
 8015b0a:	81f8      	strh	r0, [r7, #14]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	b2ca      	uxtb	r2, r1
 8015b10:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b16:	0c19      	lsrs	r1, r3, #16
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	89fb      	ldrh	r3, [r7, #14]
 8015b1e:	1c58      	adds	r0, r3, #1
 8015b20:	81f8      	strh	r0, [r7, #14]
 8015b22:	4413      	add	r3, r2
 8015b24:	b2ca      	uxtb	r2, r1
 8015b26:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b2c:	0e19      	lsrs	r1, r3, #24
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	89fb      	ldrh	r3, [r7, #14]
 8015b34:	1c58      	adds	r0, r3, #1
 8015b36:	81f8      	strh	r0, [r7, #14]
 8015b38:	4413      	add	r3, r2
 8015b3a:	b2ca      	uxtb	r2, r1
 8015b3c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015b3e:	89fb      	ldrh	r3, [r7, #14]
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015b46:	2300      	movs	r3, #0
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3710      	adds	r7, #16
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	4603      	mov	r3, r0
 8015b58:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015b5a:	79fb      	ldrb	r3, [r7, #7]
 8015b5c:	2b08      	cmp	r3, #8
 8015b5e:	d101      	bne.n	8015b64 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8015b60:	2301      	movs	r3, #1
 8015b62:	e000      	b.n	8015b66 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015b64:	2300      	movs	r3, #0
        }
    }
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	370c      	adds	r7, #12
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bc80      	pop	{r7}
 8015b6e:	4770      	bx	lr

08015b70 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	6039      	str	r1, [r7, #0]
 8015b7a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015b80:	79fb      	ldrb	r3, [r7, #7]
 8015b82:	2b08      	cmp	r3, #8
 8015b84:	d105      	bne.n	8015b92 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8015b86:	6838      	ldr	r0, [r7, #0]
 8015b88:	f001 fa10 	bl	8016fac <RegionUS915GetPhyParam>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	60fb      	str	r3, [r7, #12]
 8015b90:	e001      	b.n	8015b96 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	6039      	str	r1, [r7, #0]
 8015baa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015bac:	79fb      	ldrb	r3, [r7, #7]
 8015bae:	2b08      	cmp	r3, #8
 8015bb0:	d103      	bne.n	8015bba <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8015bb2:	6838      	ldr	r0, [r7, #0]
 8015bb4:	f001 fb56 	bl	8017264 <RegionUS915SetBandTxDone>
 8015bb8:	e000      	b.n	8015bbc <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015bba:	bf00      	nop
        }
    }
}
 8015bbc:	3708      	adds	r7, #8
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b082      	sub	sp, #8
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4603      	mov	r3, r0
 8015bca:	6039      	str	r1, [r7, #0]
 8015bcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015bce:	79fb      	ldrb	r3, [r7, #7]
 8015bd0:	2b08      	cmp	r3, #8
 8015bd2:	d103      	bne.n	8015bdc <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8015bd4:	6838      	ldr	r0, [r7, #0]
 8015bd6:	f001 fb71 	bl	80172bc <RegionUS915InitDefaults>
 8015bda:	e000      	b.n	8015bde <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015bdc:	bf00      	nop
        }
    }
}
 8015bde:	bf00      	nop
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}

08015be6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015be6:	b580      	push	{r7, lr}
 8015be8:	b082      	sub	sp, #8
 8015bea:	af00      	add	r7, sp, #0
 8015bec:	4603      	mov	r3, r0
 8015bee:	6039      	str	r1, [r7, #0]
 8015bf0:	71fb      	strb	r3, [r7, #7]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015bf6:	79fb      	ldrb	r3, [r7, #7]
 8015bf8:	2b08      	cmp	r3, #8
 8015bfa:	d106      	bne.n	8015c0a <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8015bfc:	79bb      	ldrb	r3, [r7, #6]
 8015bfe:	4619      	mov	r1, r3
 8015c00:	6838      	ldr	r0, [r7, #0]
 8015c02:	f001 fc8d 	bl	8017520 <RegionUS915Verify>
 8015c06:	4603      	mov	r3, r0
 8015c08:	e000      	b.n	8015c0c <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8015c0a:	2300      	movs	r3, #0
        }
    }
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3708      	adds	r7, #8
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c20:	79fb      	ldrb	r3, [r7, #7]
 8015c22:	2b08      	cmp	r3, #8
 8015c24:	d103      	bne.n	8015c2e <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8015c26:	6838      	ldr	r0, [r7, #0]
 8015c28:	f001 fcf0 	bl	801760c <RegionUS915ApplyCFList>
 8015c2c:	e000      	b.n	8015c30 <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015c2e:	bf00      	nop
        }
    }
}
 8015c30:	bf00      	nop
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	4603      	mov	r3, r0
 8015c40:	6039      	str	r1, [r7, #0]
 8015c42:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c44:	79fb      	ldrb	r3, [r7, #7]
 8015c46:	2b08      	cmp	r3, #8
 8015c48:	d104      	bne.n	8015c54 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8015c4a:	6838      	ldr	r0, [r7, #0]
 8015c4c:	f001 fd52 	bl	80176f4 <RegionUS915ChanMaskSet>
 8015c50:	4603      	mov	r3, r0
 8015c52:	e000      	b.n	8015c56 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015c54:	2300      	movs	r3, #0
        }
    }
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3708      	adds	r7, #8
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b082      	sub	sp, #8
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	603b      	str	r3, [r7, #0]
 8015c66:	4603      	mov	r3, r0
 8015c68:	71fb      	strb	r3, [r7, #7]
 8015c6a:	460b      	mov	r3, r1
 8015c6c:	71bb      	strb	r3, [r7, #6]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	2b08      	cmp	r3, #8
 8015c76:	d107      	bne.n	8015c88 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015c78:	7979      	ldrb	r1, [r7, #5]
 8015c7a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	683a      	ldr	r2, [r7, #0]
 8015c82:	f001 fd9f 	bl	80177c4 <RegionUS915ComputeRxWindowParameters>
 8015c86:	e000      	b.n	8015c8a <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015c88:	bf00      	nop
        }
    }
}
 8015c8a:	bf00      	nop
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b084      	sub	sp, #16
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	4603      	mov	r3, r0
 8015c9a:	60b9      	str	r1, [r7, #8]
 8015c9c:	607a      	str	r2, [r7, #4]
 8015c9e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	2b08      	cmp	r3, #8
 8015ca4:	d105      	bne.n	8015cb2 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8015ca6:	6879      	ldr	r1, [r7, #4]
 8015ca8:	68b8      	ldr	r0, [r7, #8]
 8015caa:	f001 fdd5 	bl	8017858 <RegionUS915RxConfig>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	e000      	b.n	8015cb4 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015cb2:	2300      	movs	r3, #0
        }
    }
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3710      	adds	r7, #16
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b084      	sub	sp, #16
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60b9      	str	r1, [r7, #8]
 8015cc4:	607a      	str	r2, [r7, #4]
 8015cc6:	603b      	str	r3, [r7, #0]
 8015cc8:	4603      	mov	r3, r0
 8015cca:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015ccc:	7bfb      	ldrb	r3, [r7, #15]
 8015cce:	2b08      	cmp	r3, #8
 8015cd0:	d106      	bne.n	8015ce0 <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8015cd2:	683a      	ldr	r2, [r7, #0]
 8015cd4:	6879      	ldr	r1, [r7, #4]
 8015cd6:	68b8      	ldr	r0, [r7, #8]
 8015cd8:	f001 fe42 	bl	8017960 <RegionUS915TxConfig>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	e000      	b.n	8015ce2 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015ce0:	2300      	movs	r3, #0
        }
    }
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3710      	adds	r7, #16
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}

08015cea <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015cea:	b580      	push	{r7, lr}
 8015cec:	b086      	sub	sp, #24
 8015cee:	af02      	add	r7, sp, #8
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	607a      	str	r2, [r7, #4]
 8015cf4:	603b      	str	r3, [r7, #0]
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015cfa:	7bfb      	ldrb	r3, [r7, #15]
 8015cfc:	2b08      	cmp	r3, #8
 8015cfe:	d109      	bne.n	8015d14 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	69bb      	ldr	r3, [r7, #24]
 8015d06:	683a      	ldr	r2, [r7, #0]
 8015d08:	6879      	ldr	r1, [r7, #4]
 8015d0a:	68b8      	ldr	r0, [r7, #8]
 8015d0c:	f001 fed2 	bl	8017ab4 <RegionUS915LinkAdrReq>
 8015d10:	4603      	mov	r3, r0
 8015d12:	e000      	b.n	8015d16 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015d14:	2300      	movs	r3, #0
        }
    }
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b082      	sub	sp, #8
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	4603      	mov	r3, r0
 8015d26:	6039      	str	r1, [r7, #0]
 8015d28:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d2a:	79fb      	ldrb	r3, [r7, #7]
 8015d2c:	2b08      	cmp	r3, #8
 8015d2e:	d104      	bne.n	8015d3a <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8015d30:	6838      	ldr	r0, [r7, #0]
 8015d32:	f002 f8d9 	bl	8017ee8 <RegionUS915RxParamSetupReq>
 8015d36:	4603      	mov	r3, r0
 8015d38:	e000      	b.n	8015d3c <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015d3a:	2300      	movs	r3, #0
        }
    }
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	6039      	str	r1, [r7, #0]
 8015d4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d50:	79fb      	ldrb	r3, [r7, #7]
 8015d52:	2b08      	cmp	r3, #8
 8015d54:	d104      	bne.n	8015d60 <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8015d56:	6838      	ldr	r0, [r7, #0]
 8015d58:	f002 f912 	bl	8017f80 <RegionUS915NewChannelReq>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	e000      	b.n	8015d62 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015d60:	2300      	movs	r3, #0
        }
    }
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3708      	adds	r7, #8
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}

08015d6a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015d6a:	b580      	push	{r7, lr}
 8015d6c:	b082      	sub	sp, #8
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	4603      	mov	r3, r0
 8015d72:	6039      	str	r1, [r7, #0]
 8015d74:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d76:	79fb      	ldrb	r3, [r7, #7]
 8015d78:	2b08      	cmp	r3, #8
 8015d7a:	d104      	bne.n	8015d86 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8015d7c:	6838      	ldr	r0, [r7, #0]
 8015d7e:	f002 f90a 	bl	8017f96 <RegionUS915TxParamSetupReq>
 8015d82:	4603      	mov	r3, r0
 8015d84:	e000      	b.n	8015d88 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015d86:	2300      	movs	r3, #0
        }
    }
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	4603      	mov	r3, r0
 8015d98:	6039      	str	r1, [r7, #0]
 8015d9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d9c:	79fb      	ldrb	r3, [r7, #7]
 8015d9e:	2b08      	cmp	r3, #8
 8015da0:	d104      	bne.n	8015dac <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8015da2:	6838      	ldr	r0, [r7, #0]
 8015da4:	f002 f902 	bl	8017fac <RegionUS915DlChannelReq>
 8015da8:	4603      	mov	r3, r0
 8015daa:	e000      	b.n	8015dae <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015dac:	2300      	movs	r3, #0
        }
    }
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b082      	sub	sp, #8
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	71fb      	strb	r3, [r7, #7]
 8015dc0:	460b      	mov	r3, r1
 8015dc2:	71bb      	strb	r3, [r7, #6]
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015dc8:	79fb      	ldrb	r3, [r7, #7]
 8015dca:	2b08      	cmp	r3, #8
 8015dcc:	d108      	bne.n	8015de0 <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8015dce:	797a      	ldrb	r2, [r7, #5]
 8015dd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f002 f8f4 	bl	8017fc4 <RegionUS915AlternateDr>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	e000      	b.n	8015de2 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015de0:	2300      	movs	r3, #0
        }
    }
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3708      	adds	r7, #8
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	60b9      	str	r1, [r7, #8]
 8015df2:	607a      	str	r2, [r7, #4]
 8015df4:	603b      	str	r3, [r7, #0]
 8015df6:	4603      	mov	r3, r0
 8015df8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015dfa:	7bfb      	ldrb	r3, [r7, #15]
 8015dfc:	2b08      	cmp	r3, #8
 8015dfe:	d107      	bne.n	8015e10 <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	683a      	ldr	r2, [r7, #0]
 8015e04:	6879      	ldr	r1, [r7, #4]
 8015e06:	68b8      	ldr	r0, [r7, #8]
 8015e08:	f002 f912 	bl	8018030 <RegionUS915NextChannel>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	e000      	b.n	8015e12 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015e10:	2309      	movs	r3, #9
        }
    }
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3710      	adds	r7, #16
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}

08015e1a <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015e1a:	b590      	push	{r4, r7, lr}
 8015e1c:	b083      	sub	sp, #12
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	4604      	mov	r4, r0
 8015e22:	4608      	mov	r0, r1
 8015e24:	4611      	mov	r1, r2
 8015e26:	461a      	mov	r2, r3
 8015e28:	4623      	mov	r3, r4
 8015e2a:	71fb      	strb	r3, [r7, #7]
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	71bb      	strb	r3, [r7, #6]
 8015e30:	460b      	mov	r3, r1
 8015e32:	717b      	strb	r3, [r7, #5]
 8015e34:	4613      	mov	r3, r2
 8015e36:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015e38:	79fb      	ldrb	r3, [r7, #7]
 8015e3a:	2b08      	cmp	r3, #8
 8015e3c:	d109      	bne.n	8015e52 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015e3e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015e42:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015e46:	79bb      	ldrb	r3, [r7, #6]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f002 f9df 	bl	801820c <RegionUS915ApplyDrOffset>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	e000      	b.n	8015e54 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015e52:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	370c      	adds	r7, #12
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd90      	pop	{r4, r7, pc}

08015e5c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b083      	sub	sp, #12
 8015e60:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015e62:	4b04      	ldr	r3, [pc, #16]	; (8015e74 <RegionGetVersion+0x18>)
 8015e64:	607b      	str	r3, [r7, #4]

    return version;
 8015e66:	687b      	ldr	r3, [r7, #4]
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	370c      	adds	r7, #12
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bc80      	pop	{r7}
 8015e70:	4770      	bx	lr
 8015e72:	bf00      	nop
 8015e74:	02010001 	.word	0x02010001

08015e78 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b087      	sub	sp, #28
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	4603      	mov	r3, r0
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d002      	beq.n	8015e92 <FindAvailable125kHzChannels+0x1a>
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d101      	bne.n	8015e96 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e92:	2303      	movs	r3, #3
 8015e94:	e021      	b.n	8015eda <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	75fb      	strb	r3, [r7, #23]
 8015ea0:	e017      	b.n	8015ed2 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8015ea2:	89fa      	ldrh	r2, [r7, #14]
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
 8015ea6:	fa42 f303 	asr.w	r3, r2, r3
 8015eaa:	f003 0301 	and.w	r3, r3, #1
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d00c      	beq.n	8015ecc <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	461a      	mov	r2, r3
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	4413      	add	r3, r2
 8015ebc:	7dfa      	ldrb	r2, [r7, #23]
 8015ebe:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015ecc:	7dfb      	ldrb	r3, [r7, #23]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	75fb      	strb	r3, [r7, #23]
 8015ed2:	7dfb      	ldrb	r3, [r7, #23]
 8015ed4:	2b07      	cmp	r3, #7
 8015ed6:	d9e4      	bls.n	8015ea2 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	371c      	adds	r7, #28
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bc80      	pop	{r7}
 8015ee2:	4770      	bx	lr

08015ee4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015ee4:	b590      	push	{r4, r7, lr}
 8015ee6:	b089      	sub	sp, #36	; 0x24
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	617b      	str	r3, [r7, #20]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d005      	beq.n	8015f0e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d002      	beq.n	8015f0e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d101      	bne.n	8015f12 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015f0e:	2303      	movs	r3, #3
 8015f10:	e055      	b.n	8015fbe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015f18:	7f7b      	ldrb	r3, [r7, #29]
 8015f1a:	085b      	lsrs	r3, r3, #1
 8015f1c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015f1e:	7f7b      	ldrb	r3, [r7, #29]
 8015f20:	f003 0301 	and.w	r3, r3, #1
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d107      	bne.n	8015f3a <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015f2a:	7f3b      	ldrb	r3, [r7, #28]
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	4413      	add	r3, r2
 8015f32:	881b      	ldrh	r3, [r3, #0]
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	83fb      	strh	r3, [r7, #30]
 8015f38:	e006      	b.n	8015f48 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015f3a:	7f3b      	ldrb	r3, [r7, #28]
 8015f3c:	005b      	lsls	r3, r3, #1
 8015f3e:	68fa      	ldr	r2, [r7, #12]
 8015f40:	4413      	add	r3, r2
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	0a1b      	lsrs	r3, r3, #8
 8015f46:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015f48:	f107 0213 	add.w	r2, r7, #19
 8015f4c:	f107 0114 	add.w	r1, r7, #20
 8015f50:	8bfb      	ldrh	r3, [r7, #30]
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7ff ff90 	bl	8015e78 <FindAvailable125kHzChannels>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	2b03      	cmp	r3, #3
 8015f5c:	d101      	bne.n	8015f62 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015f5e:	2303      	movs	r3, #3
 8015f60:	e02d      	b.n	8015fbe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8015f62:	7cfb      	ldrb	r3, [r7, #19]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d011      	beq.n	8015f8c <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015f68:	7f7b      	ldrb	r3, [r7, #29]
 8015f6a:	00db      	lsls	r3, r3, #3
 8015f6c:	b2dc      	uxtb	r4, r3
 8015f6e:	7cfb      	ldrb	r3, [r7, #19]
 8015f70:	3b01      	subs	r3, #1
 8015f72:	4619      	mov	r1, r3
 8015f74:	2000      	movs	r0, #0
 8015f76:	f002 f99b 	bl	80182b0 <randr>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	3320      	adds	r3, #32
 8015f7e:	443b      	add	r3, r7
 8015f80:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8015f84:	4423      	add	r3, r4
 8015f86:	b2da      	uxtb	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015f8c:	7f7b      	ldrb	r3, [r7, #29]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8015f92:	7f7b      	ldrb	r3, [r7, #29]
 8015f94:	2b07      	cmp	r3, #7
 8015f96:	d901      	bls.n	8015f9c <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015f9c:	7cfb      	ldrb	r3, [r7, #19]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d104      	bne.n	8015fac <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	7f7a      	ldrb	r2, [r7, #29]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d1b5      	bne.n	8015f18 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015fac:	7cfb      	ldrb	r3, [r7, #19]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d004      	beq.n	8015fbc <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	7f7a      	ldrb	r2, [r7, #29]
 8015fb6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	e000      	b.n	8015fbe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015fbc:	2303      	movs	r3, #3
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3724      	adds	r7, #36	; 0x24
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd90      	pop	{r4, r7, pc}

08015fc6 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8015fc6:	b480      	push	{r7}
 8015fc8:	b085      	sub	sp, #20
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	4603      	mov	r3, r0
 8015fce:	60b9      	str	r1, [r7, #8]
 8015fd0:	607a      	str	r2, [r7, #4]
 8015fd2:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8015fd4:	7bfb      	ldrb	r3, [r7, #15]
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	fb03 f202 	mul.w	r2, r3, r2
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	4413      	add	r3, r2
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3714      	adds	r7, #20
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bc80      	pop	{r7}
 8015fe8:	4770      	bx	lr

08015fea <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015fea:	b480      	push	{r7}
 8015fec:	b087      	sub	sp, #28
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	60f8      	str	r0, [r7, #12]
 8015ff2:	4608      	mov	r0, r1
 8015ff4:	4639      	mov	r1, r7
 8015ff6:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	881b      	ldrh	r3, [r3, #0]
 8016002:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016004:	7afb      	ldrb	r3, [r7, #11]
 8016006:	f083 0301 	eor.w	r3, r3, #1
 801600a:	b2db      	uxtb	r3, r3
 801600c:	2b00      	cmp	r3, #0
 801600e:	d01b      	beq.n	8016048 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016010:	f242 7310 	movw	r3, #10000	; 0x2710
 8016014:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801601c:	d202      	bcs.n	8016024 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801601e:	2364      	movs	r3, #100	; 0x64
 8016020:	82bb      	strh	r3, [r7, #20]
 8016022:	e00b      	b.n	801603c <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801602a:	4293      	cmp	r3, r2
 801602c:	d803      	bhi.n	8016036 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801602e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016032:	82bb      	strh	r3, [r7, #20]
 8016034:	e002      	b.n	801603c <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016036:	f242 7310 	movw	r3, #10000	; 0x2710
 801603a:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801603c:	8aba      	ldrh	r2, [r7, #20]
 801603e:	8afb      	ldrh	r3, [r7, #22]
 8016040:	4293      	cmp	r3, r2
 8016042:	bf38      	it	cc
 8016044:	4613      	movcc	r3, r2
 8016046:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016048:	8afb      	ldrh	r3, [r7, #22]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d101      	bne.n	8016052 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801604e:	2301      	movs	r3, #1
 8016050:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016052:	8afb      	ldrh	r3, [r7, #22]
}
 8016054:	4618      	mov	r0, r3
 8016056:	371c      	adds	r7, #28
 8016058:	46bd      	mov	sp, r7
 801605a:	bc80      	pop	{r7}
 801605c:	4770      	bx	lr
	...

08016060 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b08e      	sub	sp, #56	; 0x38
 8016064:	af02      	add	r7, sp, #8
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	4608      	mov	r0, r1
 801606a:	4639      	mov	r1, r7
 801606c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016070:	4603      	mov	r3, r0
 8016072:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	881b      	ldrh	r3, [r3, #0]
 8016078:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801607a:	4b4b      	ldr	r3, [pc, #300]	; (80161a8 <SetMaxTimeCredits+0x148>)
 801607c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801607e:	463b      	mov	r3, r7
 8016080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016084:	f005 fd62 	bl	801bb4c <SysTimeToMs>
 8016088:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801608a:	f107 0314 	add.w	r3, r7, #20
 801608e:	2200      	movs	r2, #0
 8016090:	601a      	str	r2, [r3, #0]
 8016092:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016094:	7af9      	ldrb	r1, [r7, #11]
 8016096:	463b      	mov	r3, r7
 8016098:	cb0c      	ldmia	r3, {r2, r3}
 801609a:	68f8      	ldr	r0, [r7, #12]
 801609c:	f7ff ffa5 	bl	8015fea <GetDutyCycle>
 80160a0:	4603      	mov	r3, r0
 80160a2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80160a4:	7afb      	ldrb	r3, [r7, #11]
 80160a6:	f083 0301 	eor.w	r3, r3, #1
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d062      	beq.n	8016176 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80160b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160b2:	2b64      	cmp	r3, #100	; 0x64
 80160b4:	d105      	bne.n	80160c2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80160b6:	4b3c      	ldr	r3, [pc, #240]	; (80161a8 <SetMaxTimeCredits+0x148>)
 80160b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160be:	609a      	str	r2, [r3, #8]
 80160c0:	e00b      	b.n	80160da <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80160c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80160c8:	d105      	bne.n	80160d6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80160ca:	4b38      	ldr	r3, [pc, #224]	; (80161ac <SetMaxTimeCredits+0x14c>)
 80160cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160d2:	609a      	str	r2, [r3, #8]
 80160d4:	e001      	b.n	80160da <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80160d6:	4b36      	ldr	r3, [pc, #216]	; (80161b0 <SetMaxTimeCredits+0x150>)
 80160d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	689a      	ldr	r2, [r3, #8]
 80160de:	f107 031c 	add.w	r3, r7, #28
 80160e2:	4611      	mov	r1, r2
 80160e4:	4618      	mov	r0, r3
 80160e6:	f005 fd59 	bl	801bb9c <SysTimeFromMs>
 80160ea:	f107 0014 	add.w	r0, r7, #20
 80160ee:	6a3b      	ldr	r3, [r7, #32]
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	69fb      	ldr	r3, [r7, #28]
 80160f4:	463a      	mov	r2, r7
 80160f6:	ca06      	ldmia	r2, {r1, r2}
 80160f8:	f005 fc69 	bl	801b9ce <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80160fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016100:	f083 0301 	eor.w	r3, r3, #1
 8016104:	b2db      	uxtb	r3, r3
 8016106:	2b00      	cmp	r3, #0
 8016108:	d006      	beq.n	8016118 <SetMaxTimeCredits+0xb8>
 801610a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801610e:	f083 0301 	eor.w	r3, r3, #1
 8016112:	b2db      	uxtb	r3, r3
 8016114:	2b00      	cmp	r3, #0
 8016116:	d108      	bne.n	801612a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801611c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801611e:	429a      	cmp	r2, r3
 8016120:	d103      	bne.n	801612a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016122:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016124:	4a23      	ldr	r2, [pc, #140]	; (80161b4 <SetMaxTimeCredits+0x154>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d92f      	bls.n	801618a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801612e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	4a21      	ldr	r2, [pc, #132]	; (80161b8 <SetMaxTimeCredits+0x158>)
 8016134:	4293      	cmp	r3, r2
 8016136:	d928      	bls.n	801618a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801613e:	3b30      	subs	r3, #48	; 0x30
 8016140:	4a1e      	ldr	r2, [pc, #120]	; (80161bc <SetMaxTimeCredits+0x15c>)
 8016142:	fba2 2303 	umull	r2, r3, r2, r3
 8016146:	0c1b      	lsrs	r3, r3, #16
 8016148:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	4a1c      	ldr	r2, [pc, #112]	; (80161c0 <SetMaxTimeCredits+0x160>)
 801614e:	fb02 f303 	mul.w	r3, r2, r3
 8016152:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801615a:	3330      	adds	r3, #48	; 0x30
 801615c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801615e:	2300      	movs	r3, #0
 8016160:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016162:	f107 0314 	add.w	r3, r7, #20
 8016166:	e893 0003 	ldmia.w	r3, {r0, r1}
 801616a:	f005 fcef 	bl	801bb4c <SysTimeToMs>
 801616e:	4602      	mov	r2, r0
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	609a      	str	r2, [r3, #8]
 8016174:	e009      	b.n	801618a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016176:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801617a:	f083 0301 	eor.w	r3, r3, #1
 801617e:	b2db      	uxtb	r3, r3
 8016180:	2b00      	cmp	r3, #0
 8016182:	d002      	beq.n	801618a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016188:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d102      	bne.n	8016198 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016196:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801619c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801619e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3730      	adds	r7, #48	; 0x30
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	001b7740 	.word	0x001b7740
 80161ac:	0112a880 	.word	0x0112a880
 80161b0:	02932e00 	.word	0x02932e00
 80161b4:	0001517f 	.word	0x0001517f
 80161b8:	0001ec2f 	.word	0x0001ec2f
 80161bc:	c22e4507 	.word	0xc22e4507
 80161c0:	00015180 	.word	0x00015180

080161c4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b086      	sub	sp, #24
 80161c8:	af02      	add	r7, sp, #8
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	4608      	mov	r0, r1
 80161ce:	4611      	mov	r1, r2
 80161d0:	461a      	mov	r2, r3
 80161d2:	4603      	mov	r3, r0
 80161d4:	70fb      	strb	r3, [r7, #3]
 80161d6:	460b      	mov	r3, r1
 80161d8:	70bb      	strb	r3, [r7, #2]
 80161da:	4613      	mov	r3, r2
 80161dc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80161de:	78f9      	ldrb	r1, [r7, #3]
 80161e0:	787b      	ldrb	r3, [r7, #1]
 80161e2:	9301      	str	r3, [sp, #4]
 80161e4:	78bb      	ldrb	r3, [r7, #2]
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	f107 0318 	add.w	r3, r7, #24
 80161ec:	cb0c      	ldmia	r3, {r2, r3}
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f7ff ff36 	bl	8016060 <SetMaxTimeCredits>
 80161f4:	4603      	mov	r3, r0
 80161f6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80161f8:	78fb      	ldrb	r3, [r7, #3]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00a      	beq.n	8016214 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	4618      	mov	r0, r3
 8016204:	f006 fae2 	bl	801c7cc <UTIL_TIMER_GetElapsedTime>
 8016208:	4602      	mov	r2, r0
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	68db      	ldr	r3, [r3, #12]
 801620e:	441a      	add	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	68da      	ldr	r2, [r3, #12]
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	691b      	ldr	r3, [r3, #16]
 801621c:	429a      	cmp	r2, r3
 801621e:	d903      	bls.n	8016228 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	691a      	ldr	r2, [r3, #16]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6a3a      	ldr	r2, [r7, #32]
 801622c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801622e:	89fb      	ldrh	r3, [r7, #14]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3710      	adds	r7, #16
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016238:	b480      	push	{r7}
 801623a:	b085      	sub	sp, #20
 801623c:	af00      	add	r7, sp, #0
 801623e:	4603      	mov	r3, r0
 8016240:	460a      	mov	r2, r1
 8016242:	80fb      	strh	r3, [r7, #6]
 8016244:	4613      	mov	r3, r2
 8016246:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016248:	2300      	movs	r3, #0
 801624a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801624c:	2300      	movs	r3, #0
 801624e:	73bb      	strb	r3, [r7, #14]
 8016250:	e011      	b.n	8016276 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016252:	88fa      	ldrh	r2, [r7, #6]
 8016254:	7bbb      	ldrb	r3, [r7, #14]
 8016256:	2101      	movs	r1, #1
 8016258:	fa01 f303 	lsl.w	r3, r1, r3
 801625c:	401a      	ands	r2, r3
 801625e:	7bbb      	ldrb	r3, [r7, #14]
 8016260:	2101      	movs	r1, #1
 8016262:	fa01 f303 	lsl.w	r3, r1, r3
 8016266:	429a      	cmp	r2, r3
 8016268:	d102      	bne.n	8016270 <CountChannels+0x38>
        {
            nbActiveBits++;
 801626a:	7bfb      	ldrb	r3, [r7, #15]
 801626c:	3301      	adds	r3, #1
 801626e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016270:	7bbb      	ldrb	r3, [r7, #14]
 8016272:	3301      	adds	r3, #1
 8016274:	73bb      	strb	r3, [r7, #14]
 8016276:	7bba      	ldrb	r2, [r7, #14]
 8016278:	797b      	ldrb	r3, [r7, #5]
 801627a:	429a      	cmp	r2, r3
 801627c:	d3e9      	bcc.n	8016252 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801627e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016280:	4618      	mov	r0, r3
 8016282:	3714      	adds	r7, #20
 8016284:	46bd      	mov	sp, r7
 8016286:	bc80      	pop	{r7}
 8016288:	4770      	bx	lr

0801628a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b084      	sub	sp, #16
 801628e:	af00      	add	r7, sp, #0
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	4611      	mov	r1, r2
 8016294:	461a      	mov	r2, r3
 8016296:	4603      	mov	r3, r0
 8016298:	71fb      	strb	r3, [r7, #7]
 801629a:	460b      	mov	r3, r1
 801629c:	71bb      	strb	r3, [r7, #6]
 801629e:	4613      	mov	r3, r2
 80162a0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80162a2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80162a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80162aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80162ae:	4618      	mov	r0, r3
 80162b0:	f000 f85d 	bl	801636e <RegionCommonValueInRange>
 80162b4:	4603      	mov	r3, r0
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d101      	bne.n	80162be <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80162ba:	2300      	movs	r3, #0
 80162bc:	e053      	b.n	8016366 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80162be:	2300      	movs	r3, #0
 80162c0:	73fb      	strb	r3, [r7, #15]
 80162c2:	2300      	movs	r3, #0
 80162c4:	73bb      	strb	r3, [r7, #14]
 80162c6:	e049      	b.n	801635c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80162c8:	2300      	movs	r3, #0
 80162ca:	737b      	strb	r3, [r7, #13]
 80162cc:	e03d      	b.n	801634a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80162ce:	7bbb      	ldrb	r3, [r7, #14]
 80162d0:	005b      	lsls	r3, r3, #1
 80162d2:	683a      	ldr	r2, [r7, #0]
 80162d4:	4413      	add	r3, r2
 80162d6:	881b      	ldrh	r3, [r3, #0]
 80162d8:	461a      	mov	r2, r3
 80162da:	7b7b      	ldrb	r3, [r7, #13]
 80162dc:	fa42 f303 	asr.w	r3, r2, r3
 80162e0:	f003 0301 	and.w	r3, r3, #1
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d02d      	beq.n	8016344 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80162e8:	7bfa      	ldrb	r2, [r7, #15]
 80162ea:	7b7b      	ldrb	r3, [r7, #13]
 80162ec:	4413      	add	r3, r2
 80162ee:	461a      	mov	r2, r3
 80162f0:	4613      	mov	r3, r2
 80162f2:	005b      	lsls	r3, r3, #1
 80162f4:	4413      	add	r3, r2
 80162f6:	009b      	lsls	r3, r3, #2
 80162f8:	461a      	mov	r2, r3
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	4413      	add	r3, r2
 80162fe:	7a1b      	ldrb	r3, [r3, #8]
 8016300:	f343 0303 	sbfx	r3, r3, #0, #4
 8016304:	b25b      	sxtb	r3, r3
 8016306:	f003 030f 	and.w	r3, r3, #15
 801630a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801630c:	7bfa      	ldrb	r2, [r7, #15]
 801630e:	7b7b      	ldrb	r3, [r7, #13]
 8016310:	4413      	add	r3, r2
 8016312:	461a      	mov	r2, r3
 8016314:	4613      	mov	r3, r2
 8016316:	005b      	lsls	r3, r3, #1
 8016318:	4413      	add	r3, r2
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	461a      	mov	r2, r3
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	4413      	add	r3, r2
 8016322:	7a1b      	ldrb	r3, [r3, #8]
 8016324:	f343 1303 	sbfx	r3, r3, #4, #4
 8016328:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801632a:	f003 030f 	and.w	r3, r3, #15
 801632e:	b25a      	sxtb	r2, r3
 8016330:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016334:	4618      	mov	r0, r3
 8016336:	f000 f81a 	bl	801636e <RegionCommonValueInRange>
 801633a:	4603      	mov	r3, r0
 801633c:	2b01      	cmp	r3, #1
 801633e:	d101      	bne.n	8016344 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016340:	2301      	movs	r3, #1
 8016342:	e010      	b.n	8016366 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016344:	7b7b      	ldrb	r3, [r7, #13]
 8016346:	3301      	adds	r3, #1
 8016348:	737b      	strb	r3, [r7, #13]
 801634a:	7b7b      	ldrb	r3, [r7, #13]
 801634c:	2b0f      	cmp	r3, #15
 801634e:	d9be      	bls.n	80162ce <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016350:	7bfb      	ldrb	r3, [r7, #15]
 8016352:	3310      	adds	r3, #16
 8016354:	73fb      	strb	r3, [r7, #15]
 8016356:	7bbb      	ldrb	r3, [r7, #14]
 8016358:	3301      	adds	r3, #1
 801635a:	73bb      	strb	r3, [r7, #14]
 801635c:	7bfa      	ldrb	r2, [r7, #15]
 801635e:	79fb      	ldrb	r3, [r7, #7]
 8016360:	429a      	cmp	r2, r3
 8016362:	d3b1      	bcc.n	80162c8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016364:	2300      	movs	r3, #0
}
 8016366:	4618      	mov	r0, r3
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801636e:	b480      	push	{r7}
 8016370:	b083      	sub	sp, #12
 8016372:	af00      	add	r7, sp, #0
 8016374:	4603      	mov	r3, r0
 8016376:	71fb      	strb	r3, [r7, #7]
 8016378:	460b      	mov	r3, r1
 801637a:	71bb      	strb	r3, [r7, #6]
 801637c:	4613      	mov	r3, r2
 801637e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016380:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016388:	429a      	cmp	r2, r3
 801638a:	db07      	blt.n	801639c <RegionCommonValueInRange+0x2e>
 801638c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016390:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016394:	429a      	cmp	r2, r3
 8016396:	dc01      	bgt.n	801639c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016398:	2301      	movs	r3, #1
 801639a:	e000      	b.n	801639e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801639c:	2300      	movs	r3, #0
}
 801639e:	4618      	mov	r0, r3
 80163a0:	370c      	adds	r7, #12
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bc80      	pop	{r7}
 80163a6:	4770      	bx	lr

080163a8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80163a8:	b480      	push	{r7}
 80163aa:	b085      	sub	sp, #20
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	460b      	mov	r3, r1
 80163b2:	70fb      	strb	r3, [r7, #3]
 80163b4:	4613      	mov	r3, r2
 80163b6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80163b8:	78fb      	ldrb	r3, [r7, #3]
 80163ba:	091b      	lsrs	r3, r3, #4
 80163bc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80163be:	78bb      	ldrb	r3, [r7, #2]
 80163c0:	091b      	lsrs	r3, r3, #4
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	7bfa      	ldrb	r2, [r7, #15]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d803      	bhi.n	80163d2 <RegionCommonChanDisable+0x2a>
 80163ca:	78fa      	ldrb	r2, [r7, #3]
 80163cc:	78bb      	ldrb	r3, [r7, #2]
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d301      	bcc.n	80163d6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80163d2:	2300      	movs	r3, #0
 80163d4:	e017      	b.n	8016406 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80163d6:	7bfb      	ldrb	r3, [r7, #15]
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	4413      	add	r3, r2
 80163de:	881b      	ldrh	r3, [r3, #0]
 80163e0:	b21a      	sxth	r2, r3
 80163e2:	78fb      	ldrb	r3, [r7, #3]
 80163e4:	f003 030f 	and.w	r3, r3, #15
 80163e8:	2101      	movs	r1, #1
 80163ea:	fa01 f303 	lsl.w	r3, r1, r3
 80163ee:	b21b      	sxth	r3, r3
 80163f0:	43db      	mvns	r3, r3
 80163f2:	b21b      	sxth	r3, r3
 80163f4:	4013      	ands	r3, r2
 80163f6:	b219      	sxth	r1, r3
 80163f8:	7bfb      	ldrb	r3, [r7, #15]
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	687a      	ldr	r2, [r7, #4]
 80163fe:	4413      	add	r3, r2
 8016400:	b28a      	uxth	r2, r1
 8016402:	801a      	strh	r2, [r3, #0]

    return true;
 8016404:	2301      	movs	r3, #1
}
 8016406:	4618      	mov	r0, r3
 8016408:	3714      	adds	r7, #20
 801640a:	46bd      	mov	sp, r7
 801640c:	bc80      	pop	{r7}
 801640e:	4770      	bx	lr

08016410 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	460b      	mov	r3, r1
 801641a:	70fb      	strb	r3, [r7, #3]
 801641c:	4613      	mov	r3, r2
 801641e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016420:	2300      	movs	r3, #0
 8016422:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d101      	bne.n	801642e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801642a:	2300      	movs	r3, #0
 801642c:	e018      	b.n	8016460 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801642e:	78fb      	ldrb	r3, [r7, #3]
 8016430:	73bb      	strb	r3, [r7, #14]
 8016432:	e010      	b.n	8016456 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016434:	7bbb      	ldrb	r3, [r7, #14]
 8016436:	005b      	lsls	r3, r3, #1
 8016438:	687a      	ldr	r2, [r7, #4]
 801643a:	4413      	add	r3, r2
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	2110      	movs	r1, #16
 8016440:	4618      	mov	r0, r3
 8016442:	f7ff fef9 	bl	8016238 <CountChannels>
 8016446:	4603      	mov	r3, r0
 8016448:	461a      	mov	r2, r3
 801644a:	7bfb      	ldrb	r3, [r7, #15]
 801644c:	4413      	add	r3, r2
 801644e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016450:	7bbb      	ldrb	r3, [r7, #14]
 8016452:	3301      	adds	r3, #1
 8016454:	73bb      	strb	r3, [r7, #14]
 8016456:	7bba      	ldrb	r2, [r7, #14]
 8016458:	78bb      	ldrb	r3, [r7, #2]
 801645a:	429a      	cmp	r2, r3
 801645c:	d3ea      	bcc.n	8016434 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016460:	4618      	mov	r0, r3
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016468:	b480      	push	{r7}
 801646a:	b087      	sub	sp, #28
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	4613      	mov	r3, r2
 8016474:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d016      	beq.n	80164aa <RegionCommonChanMaskCopy+0x42>
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d013      	beq.n	80164aa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016482:	2300      	movs	r3, #0
 8016484:	75fb      	strb	r3, [r7, #23]
 8016486:	e00c      	b.n	80164a2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016488:	7dfb      	ldrb	r3, [r7, #23]
 801648a:	005b      	lsls	r3, r3, #1
 801648c:	68ba      	ldr	r2, [r7, #8]
 801648e:	441a      	add	r2, r3
 8016490:	7dfb      	ldrb	r3, [r7, #23]
 8016492:	005b      	lsls	r3, r3, #1
 8016494:	68f9      	ldr	r1, [r7, #12]
 8016496:	440b      	add	r3, r1
 8016498:	8812      	ldrh	r2, [r2, #0]
 801649a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801649c:	7dfb      	ldrb	r3, [r7, #23]
 801649e:	3301      	adds	r3, #1
 80164a0:	75fb      	strb	r3, [r7, #23]
 80164a2:	7dfa      	ldrb	r2, [r7, #23]
 80164a4:	79fb      	ldrb	r3, [r7, #7]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d3ee      	bcc.n	8016488 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80164aa:	bf00      	nop
 80164ac:	371c      	adds	r7, #28
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bc80      	pop	{r7}
 80164b2:	4770      	bx	lr

080164b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80164b4:	b082      	sub	sp, #8
 80164b6:	b580      	push	{r7, lr}
 80164b8:	b086      	sub	sp, #24
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	60f8      	str	r0, [r7, #12]
 80164be:	60b9      	str	r1, [r7, #8]
 80164c0:	627b      	str	r3, [r7, #36]	; 0x24
 80164c2:	4613      	mov	r3, r2
 80164c4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80164c6:	79f9      	ldrb	r1, [r7, #7]
 80164c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164cc:	cb0c      	ldmia	r3, {r2, r3}
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	f7ff fd8b 	bl	8015fea <GetDutyCycle>
 80164d4:	4603      	mov	r3, r0
 80164d6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	68da      	ldr	r2, [r3, #12]
 80164dc:	8afb      	ldrh	r3, [r7, #22]
 80164de:	68b9      	ldr	r1, [r7, #8]
 80164e0:	fb01 f303 	mul.w	r3, r1, r3
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d909      	bls.n	80164fc <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	68da      	ldr	r2, [r3, #12]
 80164ec:	8afb      	ldrh	r3, [r7, #22]
 80164ee:	68b9      	ldr	r1, [r7, #8]
 80164f0:	fb01 f303 	mul.w	r3, r1, r3
 80164f4:	1ad2      	subs	r2, r2, r3
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80164fa:	e002      	b.n	8016502 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	2200      	movs	r2, #0
 8016500:	60da      	str	r2, [r3, #12]
}
 8016502:	bf00      	nop
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801650c:	b002      	add	sp, #8
 801650e:	4770      	bx	lr

08016510 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016512:	b08f      	sub	sp, #60	; 0x3c
 8016514:	af04      	add	r7, sp, #16
 8016516:	6039      	str	r1, [r7, #0]
 8016518:	4611      	mov	r1, r2
 801651a:	461a      	mov	r2, r3
 801651c:	4603      	mov	r3, r0
 801651e:	71fb      	strb	r3, [r7, #7]
 8016520:	460b      	mov	r3, r1
 8016522:	71bb      	strb	r3, [r7, #6]
 8016524:	4613      	mov	r3, r2
 8016526:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016528:	f04f 33ff 	mov.w	r3, #4294967295
 801652c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801652e:	f006 f93b 	bl	801c7a8 <UTIL_TIMER_GetCurrentTime>
 8016532:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016534:	2300      	movs	r3, #0
 8016536:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016538:	2301      	movs	r3, #1
 801653a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801653c:	2300      	movs	r3, #0
 801653e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016542:	2300      	movs	r3, #0
 8016544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016548:	e0ba      	b.n	80166c0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801654a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	461a      	mov	r2, r3
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	189c      	adds	r4, r3, r2
 801655c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016560:	797a      	ldrb	r2, [r7, #5]
 8016562:	79fd      	ldrb	r5, [r7, #7]
 8016564:	69fb      	ldr	r3, [r7, #28]
 8016566:	9302      	str	r3, [sp, #8]
 8016568:	46ec      	mov	ip, sp
 801656a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801656e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016572:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016576:	4633      	mov	r3, r6
 8016578:	4629      	mov	r1, r5
 801657a:	4620      	mov	r0, r4
 801657c:	f7ff fe22 	bl	80161c4 <UpdateTimeCredits>
 8016580:	4603      	mov	r3, r0
 8016582:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016584:	8afa      	ldrh	r2, [r7, #22]
 8016586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016588:	fb02 f303 	mul.w	r3, r2, r3
 801658c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801658e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016592:	4613      	mov	r3, r2
 8016594:	005b      	lsls	r3, r3, #1
 8016596:	4413      	add	r3, r2
 8016598:	00db      	lsls	r3, r3, #3
 801659a:	461a      	mov	r2, r3
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	4413      	add	r3, r2
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	69ba      	ldr	r2, [r7, #24]
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d308      	bcc.n	80165ba <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80165a8:	797b      	ldrb	r3, [r7, #5]
 80165aa:	f083 0301 	eor.w	r3, r3, #1
 80165ae:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d013      	beq.n	80165dc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80165b4:	79fb      	ldrb	r3, [r7, #7]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d010      	beq.n	80165dc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80165ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	461a      	mov	r2, r3
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	4413      	add	r3, r2
 80165cc:	2201      	movs	r2, #1
 80165ce:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80165d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165d4:	3301      	adds	r3, #1
 80165d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80165da:	e06c      	b.n	80166b6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80165dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80165e0:	4613      	mov	r3, r2
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	4413      	add	r3, r2
 80165e6:	00db      	lsls	r3, r3, #3
 80165e8:	461a      	mov	r2, r3
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	4413      	add	r3, r2
 80165ee:	2200      	movs	r2, #0
 80165f0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80165f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80165f6:	4613      	mov	r3, r2
 80165f8:	005b      	lsls	r3, r3, #1
 80165fa:	4413      	add	r3, r2
 80165fc:	00db      	lsls	r3, r3, #3
 80165fe:	461a      	mov	r2, r3
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	4413      	add	r3, r2
 8016604:	691b      	ldr	r3, [r3, #16]
 8016606:	69ba      	ldr	r2, [r7, #24]
 8016608:	429a      	cmp	r2, r3
 801660a:	d215      	bcs.n	8016638 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801660c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	461a      	mov	r2, r3
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	4413      	add	r3, r2
 801661e:	68db      	ldr	r3, [r3, #12]
 8016620:	69ba      	ldr	r2, [r7, #24]
 8016622:	1ad3      	subs	r3, r2, r3
 8016624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016626:	4293      	cmp	r3, r2
 8016628:	bf28      	it	cs
 801662a:	4613      	movcs	r3, r2
 801662c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801662e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016632:	3301      	adds	r3, #1
 8016634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016638:	79fb      	ldrb	r3, [r7, #7]
 801663a:	f083 0301 	eor.w	r3, r3, #1
 801663e:	b2db      	uxtb	r3, r3
 8016640:	2b00      	cmp	r3, #0
 8016642:	d038      	beq.n	80166b6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016644:	2300      	movs	r3, #0
 8016646:	60fb      	str	r3, [r7, #12]
 8016648:	2300      	movs	r3, #0
 801664a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801664c:	8afb      	ldrh	r3, [r7, #22]
 801664e:	2b64      	cmp	r3, #100	; 0x64
 8016650:	d103      	bne.n	801665a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016652:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8016656:	60fb      	str	r3, [r7, #12]
 8016658:	e009      	b.n	801666e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801665a:	8afb      	ldrh	r3, [r7, #22]
 801665c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016660:	d103      	bne.n	801666a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016662:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8016666:	60fb      	str	r3, [r7, #12]
 8016668:	e001      	b.n	801666e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801666a:	4b1e      	ldr	r3, [pc, #120]	; (80166e4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801666c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016670:	4a1c      	ldr	r2, [pc, #112]	; (80166e4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016672:	4293      	cmp	r3, r2
 8016674:	d90e      	bls.n	8016694 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016676:	68fa      	ldr	r2, [r7, #12]
 8016678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801667a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801667e:	3b30      	subs	r3, #48	; 0x30
 8016680:	4919      	ldr	r1, [pc, #100]	; (80166e8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016682:	fba1 1303 	umull	r1, r3, r1, r3
 8016686:	0c1b      	lsrs	r3, r3, #16
 8016688:	3301      	adds	r3, #1
 801668a:	4918      	ldr	r1, [pc, #96]	; (80166ec <RegionCommonUpdateBandTimeOff+0x1dc>)
 801668c:	fb01 f303 	mul.w	r3, r1, r3
 8016690:	4413      	add	r3, r2
 8016692:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016694:	f107 000c 	add.w	r0, r7, #12
 8016698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801669a:	9300      	str	r3, [sp, #0]
 801669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801669e:	f107 020c 	add.w	r2, r7, #12
 80166a2:	ca06      	ldmia	r2, {r1, r2}
 80166a4:	f005 f993 	bl	801b9ce <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80166a8:	f107 030c 	add.w	r3, r7, #12
 80166ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166b0:	f005 fa4c 	bl	801bb4c <SysTimeToMs>
 80166b4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80166b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80166ba:	3301      	adds	r3, #1
 80166bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80166c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80166c4:	79bb      	ldrb	r3, [r7, #6]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	f4ff af3f 	bcc.w	801654a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80166cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d102      	bne.n	80166da <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80166d4:	f04f 33ff 	mov.w	r3, #4294967295
 80166d8:	e000      	b.n	80166dc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80166dc:	4618      	mov	r0, r3
 80166de:	372c      	adds	r7, #44	; 0x2c
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166e4:	0001ec30 	.word	0x0001ec30
 80166e8:	c22e4507 	.word	0xc22e4507
 80166ec:	00015180 	.word	0x00015180

080166f0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80166f0:	b480      	push	{r7}
 80166f2:	b085      	sub	sp, #20
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80166fa:	2300      	movs	r3, #0
 80166fc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	2b03      	cmp	r3, #3
 8016704:	d13f      	bne.n	8016786 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	3301      	adds	r3, #1
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	b25a      	sxtb	r2, r3
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016718:	f003 030f 	and.w	r3, r3, #15
 801671c:	b25a      	sxtb	r2, r3
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016728:	b2db      	uxtb	r3, r3
 801672a:	091b      	lsrs	r3, r3, #4
 801672c:	b2db      	uxtb	r3, r3
 801672e:	b25a      	sxtb	r2, r3
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	3302      	adds	r3, #2
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	b29a      	uxth	r2, r3
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	889b      	ldrh	r3, [r3, #4]
 8016744:	b21a      	sxth	r2, r3
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	3303      	adds	r3, #3
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	021b      	lsls	r3, r3, #8
 801674e:	b21b      	sxth	r3, r3
 8016750:	4313      	orrs	r3, r2
 8016752:	b21b      	sxth	r3, r3
 8016754:	b29a      	uxth	r2, r3
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	791a      	ldrb	r2, [r3, #4]
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	091b      	lsrs	r3, r3, #4
 8016768:	b2db      	uxtb	r3, r3
 801676a:	f003 0307 	and.w	r3, r3, #7
 801676e:	b2da      	uxtb	r2, r3
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	f003 030f 	and.w	r3, r3, #15
 801677c:	b2da      	uxtb	r2, r3
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016782:	2305      	movs	r3, #5
 8016784:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016786:	7bfb      	ldrb	r3, [r7, #15]
}
 8016788:	4618      	mov	r0, r3
 801678a:	3714      	adds	r7, #20
 801678c:	46bd      	mov	sp, r7
 801678e:	bc80      	pop	{r7}
 8016790:	4770      	bx	lr

08016792 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016792:	b5b0      	push	{r4, r5, r7, lr}
 8016794:	b088      	sub	sp, #32
 8016796:	af02      	add	r7, sp, #8
 8016798:	60f8      	str	r0, [r7, #12]
 801679a:	60b9      	str	r1, [r7, #8]
 801679c:	607a      	str	r2, [r7, #4]
 801679e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	791b      	ldrb	r3, [r3, #4]
 80167a4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	799b      	ldrb	r3, [r3, #6]
 80167aa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	79db      	ldrb	r3, [r3, #7]
 80167b0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	7a1b      	ldrb	r3, [r3, #8]
 80167b6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	795b      	ldrb	r3, [r3, #5]
 80167bc:	f083 0301 	eor.w	r3, r3, #1
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d008      	beq.n	80167d8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	7adb      	ldrb	r3, [r3, #11]
 80167ca:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	7a5b      	ldrb	r3, [r3, #9]
 80167d0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	7a9b      	ldrb	r3, [r3, #10]
 80167d6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80167d8:	7dfb      	ldrb	r3, [r7, #23]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d04a      	beq.n	8016874 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80167de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80167e2:	2b0f      	cmp	r3, #15
 80167e4:	d103      	bne.n	80167ee <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	7a5b      	ldrb	r3, [r3, #9]
 80167ea:	75bb      	strb	r3, [r7, #22]
 80167ec:	e01d      	b.n	801682a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	7b18      	ldrb	r0, [r3, #12]
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6919      	ldr	r1, [r3, #16]
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016802:	68fa      	ldr	r2, [r7, #12]
 8016804:	6992      	ldr	r2, [r2, #24]
 8016806:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801680a:	9201      	str	r2, [sp, #4]
 801680c:	9300      	str	r3, [sp, #0]
 801680e:	462b      	mov	r3, r5
 8016810:	4622      	mov	r2, r4
 8016812:	f7ff fd3a 	bl	801628a <RegionCommonChanVerifyDr>
 8016816:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016818:	f083 0301 	eor.w	r3, r3, #1
 801681c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801681e:	2b00      	cmp	r3, #0
 8016820:	d003      	beq.n	801682a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016822:	7dfb      	ldrb	r3, [r7, #23]
 8016824:	f023 0302 	bic.w	r3, r3, #2
 8016828:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801682a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801682e:	2b0f      	cmp	r3, #15
 8016830:	d103      	bne.n	801683a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	7a9b      	ldrb	r3, [r3, #10]
 8016836:	757b      	strb	r3, [r7, #21]
 8016838:	e01c      	b.n	8016874 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016846:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801684a:	4618      	mov	r0, r3
 801684c:	f7ff fd8f 	bl	801636e <RegionCommonValueInRange>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d10e      	bne.n	8016874 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801685c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016860:	429a      	cmp	r2, r3
 8016862:	da03      	bge.n	801686c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	7f5b      	ldrb	r3, [r3, #29]
 8016868:	757b      	strb	r3, [r7, #21]
 801686a:	e003      	b.n	8016874 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801686c:	7dfb      	ldrb	r3, [r7, #23]
 801686e:	f023 0304 	bic.w	r3, r3, #4
 8016872:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016874:	7dfb      	ldrb	r3, [r7, #23]
 8016876:	2b07      	cmp	r3, #7
 8016878:	d105      	bne.n	8016886 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801687a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d101      	bne.n	8016886 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016882:	2301      	movs	r3, #1
 8016884:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	7dba      	ldrb	r2, [r7, #22]
 801688a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	7d7a      	ldrb	r2, [r7, #21]
 8016890:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016892:	7d3a      	ldrb	r2, [r7, #20]
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	701a      	strb	r2, [r3, #0]

    return status;
 8016898:	7dfb      	ldrb	r3, [r7, #23]
}
 801689a:	4618      	mov	r0, r3
 801689c:	3718      	adds	r7, #24
 801689e:	46bd      	mov	sp, r7
 80168a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080168a4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80168a4:	b480      	push	{r7}
 80168a6:	b083      	sub	sp, #12
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	4603      	mov	r3, r0
 80168ac:	6039      	str	r1, [r7, #0]
 80168ae:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80168b0:	79fb      	ldrb	r3, [r7, #7]
 80168b2:	4a06      	ldr	r2, [pc, #24]	; (80168cc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80168b4:	fa02 f303 	lsl.w	r3, r2, r3
 80168b8:	461a      	mov	r2, r3
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	370c      	adds	r7, #12
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bc80      	pop	{r7}
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	000f4240 	.word	0x000f4240

080168d0 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80168d0:	b480      	push	{r7}
 80168d2:	b085      	sub	sp, #20
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	607a      	str	r2, [r7, #4]
 80168da:	603b      	str	r3, [r7, #0]
 80168dc:	460b      	mov	r3, r1
 80168de:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80168e0:	7afa      	ldrb	r2, [r7, #11]
 80168e2:	7afb      	ldrb	r3, [r7, #11]
 80168e4:	3b04      	subs	r3, #4
 80168e6:	4619      	mov	r1, r3
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	fb03 f101 	mul.w	r1, r3, r1
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80168f4:	fb00 f303 	mul.w	r3, r0, r3
 80168f8:	440b      	add	r3, r1
 80168fa:	005b      	lsls	r3, r3, #1
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d013      	beq.n	8016928 <RegionCommonComputeRxWindowParameters+0x58>
 8016900:	7afb      	ldrb	r3, [r7, #11]
 8016902:	3b04      	subs	r3, #4
 8016904:	4619      	mov	r1, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	fb03 f101 	mul.w	r1, r3, r1
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016912:	fb00 f303 	mul.w	r3, r0, r3
 8016916:	440b      	add	r3, r1
 8016918:	0059      	lsls	r1, r3, #1
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	440b      	add	r3, r1
 801691e:	1e59      	subs	r1, r3, #1
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	fbb1 f3f3 	udiv	r3, r1, r3
 8016926:	e00f      	b.n	8016948 <RegionCommonComputeRxWindowParameters+0x78>
 8016928:	7afb      	ldrb	r3, [r7, #11]
 801692a:	3b04      	subs	r3, #4
 801692c:	4619      	mov	r1, r3
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	fb03 f101 	mul.w	r1, r3, r1
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801693a:	fb00 f303 	mul.w	r3, r0, r3
 801693e:	440b      	add	r3, r1
 8016940:	0059      	lsls	r1, r3, #1
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	fbb1 f3f3 	udiv	r3, r1, r3
 8016948:	429a      	cmp	r2, r3
 801694a:	bf38      	it	cc
 801694c:	461a      	movcc	r2, r3
 801694e:	69bb      	ldr	r3, [r7, #24]
 8016950:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	009b      	lsls	r3, r3, #2
 8016956:	4619      	mov	r1, r3
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	68fa      	ldr	r2, [r7, #12]
 801695e:	fb02 f303 	mul.w	r3, r2, r3
 8016962:	2b00      	cmp	r3, #0
 8016964:	d007      	beq.n	8016976 <RegionCommonComputeRxWindowParameters+0xa6>
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	68fa      	ldr	r2, [r7, #12]
 801696c:	fb02 f303 	mul.w	r3, r2, r3
 8016970:	3301      	adds	r3, #1
 8016972:	085b      	lsrs	r3, r3, #1
 8016974:	e005      	b.n	8016982 <RegionCommonComputeRxWindowParameters+0xb2>
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	68fa      	ldr	r2, [r7, #12]
 801697c:	fb02 f303 	mul.w	r3, r2, r3
 8016980:	085b      	lsrs	r3, r3, #1
 8016982:	1acb      	subs	r3, r1, r3
 8016984:	683a      	ldr	r2, [r7, #0]
 8016986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801698a:	fb01 f202 	mul.w	r2, r1, r2
 801698e:	1a9b      	subs	r3, r3, r2
 8016990:	2b00      	cmp	r3, #0
 8016992:	dd27      	ble.n	80169e4 <RegionCommonComputeRxWindowParameters+0x114>
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	4619      	mov	r1, r3
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	fb02 f303 	mul.w	r3, r2, r3
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d007      	beq.n	80169b8 <RegionCommonComputeRxWindowParameters+0xe8>
 80169a8:	69bb      	ldr	r3, [r7, #24]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	fb02 f303 	mul.w	r3, r2, r3
 80169b2:	3301      	adds	r3, #1
 80169b4:	085b      	lsrs	r3, r3, #1
 80169b6:	e005      	b.n	80169c4 <RegionCommonComputeRxWindowParameters+0xf4>
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	68fa      	ldr	r2, [r7, #12]
 80169be:	fb02 f303 	mul.w	r3, r2, r3
 80169c2:	085b      	lsrs	r3, r3, #1
 80169c4:	1acb      	subs	r3, r1, r3
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80169cc:	fb01 f202 	mul.w	r2, r1, r2
 80169d0:	1a9b      	subs	r3, r3, r2
 80169d2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80169d6:	4a19      	ldr	r2, [pc, #100]	; (8016a3c <RegionCommonComputeRxWindowParameters+0x16c>)
 80169d8:	fb82 1203 	smull	r1, r2, r2, r3
 80169dc:	1192      	asrs	r2, r2, #6
 80169de:	17db      	asrs	r3, r3, #31
 80169e0:	1ad3      	subs	r3, r2, r3
 80169e2:	e024      	b.n	8016a2e <RegionCommonComputeRxWindowParameters+0x15e>
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	4619      	mov	r1, r3
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	68fa      	ldr	r2, [r7, #12]
 80169f0:	fb02 f303 	mul.w	r3, r2, r3
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d007      	beq.n	8016a08 <RegionCommonComputeRxWindowParameters+0x138>
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	68fa      	ldr	r2, [r7, #12]
 80169fe:	fb02 f303 	mul.w	r3, r2, r3
 8016a02:	3301      	adds	r3, #1
 8016a04:	085b      	lsrs	r3, r3, #1
 8016a06:	e005      	b.n	8016a14 <RegionCommonComputeRxWindowParameters+0x144>
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	fb02 f303 	mul.w	r3, r2, r3
 8016a12:	085b      	lsrs	r3, r3, #1
 8016a14:	1acb      	subs	r3, r1, r3
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016a1c:	fb01 f202 	mul.w	r2, r1, r2
 8016a20:	1a9b      	subs	r3, r3, r2
 8016a22:	4a06      	ldr	r2, [pc, #24]	; (8016a3c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016a24:	fb82 1203 	smull	r1, r2, r2, r3
 8016a28:	1192      	asrs	r2, r2, #6
 8016a2a:	17db      	asrs	r3, r3, #31
 8016a2c:	1ad3      	subs	r3, r2, r3
 8016a2e:	69fa      	ldr	r2, [r7, #28]
 8016a30:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016a32:	bf00      	nop
 8016a34:	3714      	adds	r7, #20
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bc80      	pop	{r7}
 8016a3a:	4770      	bx	lr
 8016a3c:	10624dd3 	.word	0x10624dd3

08016a40 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b086      	sub	sp, #24
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	60b9      	str	r1, [r7, #8]
 8016a4a:	607a      	str	r2, [r7, #4]
 8016a4c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7e9 feb7 	bl	80007cc <__aeabi_ui2f>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	4619      	mov	r1, r3
 8016a62:	68b8      	ldr	r0, [r7, #8]
 8016a64:	f7e9 fe00 	bl	8000668 <__aeabi_fsub>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	6879      	ldr	r1, [r7, #4]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7e9 fdfb 	bl	8000668 <__aeabi_fsub>
 8016a72:	4603      	mov	r3, r0
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7e9 fceb 	bl	8000450 <__aeabi_f2d>
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	460b      	mov	r3, r1
 8016a7e:	4610      	mov	r0, r2
 8016a80:	4619      	mov	r1, r3
 8016a82:	f006 fa25 	bl	801ced0 <floor>
 8016a86:	4602      	mov	r2, r0
 8016a88:	460b      	mov	r3, r1
 8016a8a:	4610      	mov	r0, r2
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	f7e9 fdbf 	bl	8000610 <__aeabi_d2iz>
 8016a92:	4603      	mov	r3, r0
 8016a94:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016aa2:	b590      	push	{r4, r7, lr}
 8016aa4:	b087      	sub	sp, #28
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	60f8      	str	r0, [r7, #12]
 8016aaa:	60b9      	str	r1, [r7, #8]
 8016aac:	607a      	str	r2, [r7, #4]
 8016aae:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016ab8:	2300      	movs	r3, #0
 8016aba:	757b      	strb	r3, [r7, #21]
 8016abc:	2300      	movs	r3, #0
 8016abe:	753b      	strb	r3, [r7, #20]
 8016ac0:	e09c      	b.n	8016bfc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	74fb      	strb	r3, [r7, #19]
 8016ac6:	e08f      	b.n	8016be8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	685a      	ldr	r2, [r3, #4]
 8016acc:	7d3b      	ldrb	r3, [r7, #20]
 8016ace:	005b      	lsls	r3, r3, #1
 8016ad0:	4413      	add	r3, r2
 8016ad2:	881b      	ldrh	r3, [r3, #0]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	7cfb      	ldrb	r3, [r7, #19]
 8016ad8:	fa42 f303 	asr.w	r3, r2, r3
 8016adc:	f003 0301 	and.w	r3, r3, #1
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d07e      	beq.n	8016be2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	689a      	ldr	r2, [r3, #8]
 8016ae8:	7d79      	ldrb	r1, [r7, #21]
 8016aea:	7cfb      	ldrb	r3, [r7, #19]
 8016aec:	440b      	add	r3, r1
 8016aee:	4619      	mov	r1, r3
 8016af0:	460b      	mov	r3, r1
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	440b      	add	r3, r1
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	4413      	add	r3, r2
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d06b      	beq.n	8016bd8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	f083 0301 	eor.w	r3, r3, #1
 8016b08:	b2db      	uxtb	r3, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d011      	beq.n	8016b32 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00d      	beq.n	8016b32 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	695a      	ldr	r2, [r3, #20]
 8016b1a:	7d3b      	ldrb	r3, [r7, #20]
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	4413      	add	r3, r2
 8016b20:	881b      	ldrh	r3, [r3, #0]
 8016b22:	461a      	mov	r2, r3
 8016b24:	7cfb      	ldrb	r3, [r7, #19]
 8016b26:	fa42 f303 	asr.w	r3, r2, r3
 8016b2a:	f003 0301 	and.w	r3, r3, #1
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d054      	beq.n	8016bdc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	785b      	ldrb	r3, [r3, #1]
 8016b36:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	689a      	ldr	r2, [r3, #8]
 8016b3c:	7d79      	ldrb	r1, [r7, #21]
 8016b3e:	7cfb      	ldrb	r3, [r7, #19]
 8016b40:	440b      	add	r3, r1
 8016b42:	4619      	mov	r1, r3
 8016b44:	460b      	mov	r3, r1
 8016b46:	005b      	lsls	r3, r3, #1
 8016b48:	440b      	add	r3, r1
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	4413      	add	r3, r2
 8016b4e:	7a1b      	ldrb	r3, [r3, #8]
 8016b50:	f343 0303 	sbfx	r3, r3, #0, #4
 8016b54:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016b56:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	689a      	ldr	r2, [r3, #8]
 8016b5c:	7d79      	ldrb	r1, [r7, #21]
 8016b5e:	7cfb      	ldrb	r3, [r7, #19]
 8016b60:	440b      	add	r3, r1
 8016b62:	4619      	mov	r1, r3
 8016b64:	460b      	mov	r3, r1
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	440b      	add	r3, r1
 8016b6a:	009b      	lsls	r3, r3, #2
 8016b6c:	4413      	add	r3, r2
 8016b6e:	7a1b      	ldrb	r3, [r3, #8]
 8016b70:	f343 1303 	sbfx	r3, r3, #4, #4
 8016b74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016b76:	461a      	mov	r2, r3
 8016b78:	4621      	mov	r1, r4
 8016b7a:	f7ff fbf8 	bl	801636e <RegionCommonValueInRange>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d02d      	beq.n	8016be0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	68da      	ldr	r2, [r3, #12]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	6899      	ldr	r1, [r3, #8]
 8016b8c:	7d78      	ldrb	r0, [r7, #21]
 8016b8e:	7cfb      	ldrb	r3, [r7, #19]
 8016b90:	4403      	add	r3, r0
 8016b92:	4618      	mov	r0, r3
 8016b94:	4603      	mov	r3, r0
 8016b96:	005b      	lsls	r3, r3, #1
 8016b98:	4403      	add	r3, r0
 8016b9a:	009b      	lsls	r3, r3, #2
 8016b9c:	440b      	add	r3, r1
 8016b9e:	7a5b      	ldrb	r3, [r3, #9]
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	440b      	add	r3, r1
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	4413      	add	r3, r2
 8016bac:	7d1b      	ldrb	r3, [r3, #20]
 8016bae:	f083 0301 	eor.w	r3, r3, #1
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d003      	beq.n	8016bc0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016bb8:	7dbb      	ldrb	r3, [r7, #22]
 8016bba:	3301      	adds	r3, #1
 8016bbc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016bbe:	e010      	b.n	8016be2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016bc0:	7dfb      	ldrb	r3, [r7, #23]
 8016bc2:	1c5a      	adds	r2, r3, #1
 8016bc4:	75fa      	strb	r2, [r7, #23]
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	4413      	add	r3, r2
 8016bcc:	7d79      	ldrb	r1, [r7, #21]
 8016bce:	7cfa      	ldrb	r2, [r7, #19]
 8016bd0:	440a      	add	r2, r1
 8016bd2:	b2d2      	uxtb	r2, r2
 8016bd4:	701a      	strb	r2, [r3, #0]
 8016bd6:	e004      	b.n	8016be2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016bd8:	bf00      	nop
 8016bda:	e002      	b.n	8016be2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016bdc:	bf00      	nop
 8016bde:	e000      	b.n	8016be2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016be0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016be2:	7cfb      	ldrb	r3, [r7, #19]
 8016be4:	3301      	adds	r3, #1
 8016be6:	74fb      	strb	r3, [r7, #19]
 8016be8:	7cfb      	ldrb	r3, [r7, #19]
 8016bea:	2b0f      	cmp	r3, #15
 8016bec:	f67f af6c 	bls.w	8016ac8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016bf0:	7d7b      	ldrb	r3, [r7, #21]
 8016bf2:	3310      	adds	r3, #16
 8016bf4:	757b      	strb	r3, [r7, #21]
 8016bf6:	7d3b      	ldrb	r3, [r7, #20]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	753b      	strb	r3, [r7, #20]
 8016bfc:	7d7b      	ldrb	r3, [r7, #21]
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	8a1b      	ldrh	r3, [r3, #16]
 8016c04:	429a      	cmp	r2, r3
 8016c06:	f4ff af5c 	bcc.w	8016ac2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	7dfa      	ldrb	r2, [r7, #23]
 8016c0e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	7dba      	ldrb	r2, [r7, #22]
 8016c14:	701a      	strb	r2, [r3, #0]
}
 8016c16:	bf00      	nop
 8016c18:	371c      	adds	r7, #28
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd90      	pop	{r4, r7, pc}

08016c1e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c20:	b08b      	sub	sp, #44	; 0x2c
 8016c22:	af04      	add	r7, sp, #16
 8016c24:	60f8      	str	r0, [r7, #12]
 8016c26:	60b9      	str	r1, [r7, #8]
 8016c28:	607a      	str	r2, [r7, #4]
 8016c2a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	4618      	mov	r0, r3
 8016c32:	f005 fdcb 	bl	801c7cc <UTIL_TIMER_GetElapsedTime>
 8016c36:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	1ad2      	subs	r2, r2, r3
 8016c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c42:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c46:	2201      	movs	r2, #1
 8016c48:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d004      	beq.n	8016c62 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016c5c:	697a      	ldr	r2, [r7, #20]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d32b      	bcc.n	8016cba <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	2200      	movs	r2, #0
 8016c66:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	69db      	ldr	r3, [r3, #28]
 8016c6c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016c72:	68dd      	ldr	r5, [r3, #12]
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	7a5e      	ldrb	r6, [r3, #9]
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	7d1b      	ldrb	r3, [r3, #20]
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	6992      	ldr	r2, [r2, #24]
 8016c86:	9203      	str	r2, [sp, #12]
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	f10d 0e04 	add.w	lr, sp, #4
 8016c8e:	320c      	adds	r2, #12
 8016c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c94:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016c98:	9300      	str	r3, [sp, #0]
 8016c9a:	4663      	mov	r3, ip
 8016c9c:	4632      	mov	r2, r6
 8016c9e:	4629      	mov	r1, r5
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f7ff fc35 	bl	8016510 <RegionCommonUpdateBandTimeOff>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016caa:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	69d8      	ldr	r0, [r3, #28]
 8016cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb2:	683a      	ldr	r2, [r7, #0]
 8016cb4:	6879      	ldr	r1, [r7, #4]
 8016cb6:	f7ff fef4 	bl	8016aa2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d004      	beq.n	8016ccc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	e006      	b.n	8016cda <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d001      	beq.n	8016cd8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016cd4:	230b      	movs	r3, #11
 8016cd6:	e000      	b.n	8016cda <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016cd8:	230c      	movs	r3, #12
    }
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	371c      	adds	r7, #28
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ce2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016ce2:	b5b0      	push	{r4, r5, r7, lr}
 8016ce4:	b086      	sub	sp, #24
 8016ce6:	af02      	add	r7, sp, #8
 8016ce8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	781b      	ldrb	r3, [r3, #0]
 8016cee:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f993 2000 	ldrsb.w	r2, [r3]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d103      	bne.n	8016d08 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016d06:	e026      	b.n	8016d56 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016d08:	7bfb      	ldrb	r3, [r7, #15]
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016d16:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d019      	beq.n	8016d52 <RegionCommonGetNextLowerTxDr+0x70>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	78d8      	ldrb	r0, [r3, #3]
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6859      	ldr	r1, [r3, #4]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	6892      	ldr	r2, [r2, #8]
 8016d36:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016d3a:	9201      	str	r2, [sp, #4]
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	462b      	mov	r3, r5
 8016d40:	4622      	mov	r2, r4
 8016d42:	f7ff faa2 	bl	801628a <RegionCommonChanVerifyDr>
 8016d46:	4603      	mov	r3, r0
 8016d48:	f083 0301 	eor.w	r3, r3, #1
 8016d4c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d1da      	bne.n	8016d08 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bdb0      	pop	{r4, r5, r7, pc}

08016d5e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016d5e:	b480      	push	{r7}
 8016d60:	b083      	sub	sp, #12
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	4603      	mov	r3, r0
 8016d66:	460a      	mov	r2, r1
 8016d68:	71fb      	strb	r3, [r7, #7]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016d6e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016d76:	4293      	cmp	r3, r2
 8016d78:	bfb8      	it	lt
 8016d7a:	4613      	movlt	r3, r2
 8016d7c:	b25b      	sxtb	r3, r3
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	370c      	adds	r7, #12
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bc80      	pop	{r7}
 8016d86:	4770      	bx	lr

08016d88 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	683a      	ldr	r2, [r7, #0]
 8016d98:	4413      	add	r3, r2
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4a07      	ldr	r2, [pc, #28]	; (8016dbc <RegionCommonGetBandwidth+0x34>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d004      	beq.n	8016dac <RegionCommonGetBandwidth+0x24>
 8016da2:	4a07      	ldr	r2, [pc, #28]	; (8016dc0 <RegionCommonGetBandwidth+0x38>)
 8016da4:	4293      	cmp	r3, r2
 8016da6:	d003      	beq.n	8016db0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016da8:	2300      	movs	r3, #0
 8016daa:	e002      	b.n	8016db2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016dac:	2301      	movs	r3, #1
 8016dae:	e000      	b.n	8016db2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016db0:	2302      	movs	r3, #2
    }
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	370c      	adds	r7, #12
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bc80      	pop	{r7}
 8016dba:	4770      	bx	lr
 8016dbc:	0003d090 	.word	0x0003d090
 8016dc0:	0007a120 	.word	0x0007a120

08016dc4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b086      	sub	sp, #24
 8016dc8:	af04      	add	r7, sp, #16
 8016dca:	4603      	mov	r3, r0
 8016dcc:	6039      	str	r1, [r7, #0]
 8016dce:	71fb      	strb	r3, [r7, #7]
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	2b05      	cmp	r3, #5
 8016dd8:	d810      	bhi.n	8016dfc <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016dda:	79fb      	ldrb	r3, [r7, #7]
 8016ddc:	4a0f      	ldr	r2, [pc, #60]	; (8016e1c <RegionCommonRxConfigPrint+0x58>)
 8016dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016de2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016de6:	9202      	str	r2, [sp, #8]
 8016de8:	683a      	ldr	r2, [r7, #0]
 8016dea:	9201      	str	r2, [sp, #4]
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	4b0c      	ldr	r3, [pc, #48]	; (8016e20 <RegionCommonRxConfigPrint+0x5c>)
 8016df0:	2201      	movs	r2, #1
 8016df2:	2100      	movs	r1, #0
 8016df4:	2002      	movs	r0, #2
 8016df6:	f005 fdc7 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016dfa:	e00a      	b.n	8016e12 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016dfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	9300      	str	r3, [sp, #0]
 8016e06:	4b07      	ldr	r3, [pc, #28]	; (8016e24 <RegionCommonRxConfigPrint+0x60>)
 8016e08:	2201      	movs	r2, #1
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	2002      	movs	r0, #2
 8016e0e:	f005 fdbb 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 8016e12:	bf00      	nop
 8016e14:	3708      	adds	r7, #8
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	20000108 	.word	0x20000108
 8016e20:	0801d638 	.word	0x0801d638
 8016e24:	0801d658 	.word	0x0801d658

08016e28 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af02      	add	r7, sp, #8
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	460b      	mov	r3, r1
 8016e32:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e38:	9301      	str	r3, [sp, #4]
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	9300      	str	r3, [sp, #0]
 8016e3e:	4b05      	ldr	r3, [pc, #20]	; (8016e54 <RegionCommonTxConfigPrint+0x2c>)
 8016e40:	2201      	movs	r2, #1
 8016e42:	2100      	movs	r1, #0
 8016e44:	2002      	movs	r0, #2
 8016e46:	f005 fd9f 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
}
 8016e4a:	bf00      	nop
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801d674 	.word	0x0801d674

08016e58 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	603b      	str	r3, [r7, #0]
 8016e60:	4603      	mov	r3, r0
 8016e62:	71fb      	strb	r3, [r7, #7]
 8016e64:	460b      	mov	r3, r1
 8016e66:	71bb      	strb	r3, [r7, #6]
 8016e68:	4613      	mov	r3, r2
 8016e6a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8016e6c:	79fb      	ldrb	r3, [r7, #7]
 8016e6e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8016e70:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e78:	4611      	mov	r1, r2
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f7ff ff6f 	bl	8016d5e <RegionCommonLimitTxPower>
 8016e80:	4603      	mov	r3, r0
 8016e82:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8016e84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e88:	2b04      	cmp	r3, #4
 8016e8a:	d106      	bne.n	8016e9a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8016e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e90:	2b02      	cmp	r3, #2
 8016e92:	bfb8      	it	lt
 8016e94:	2302      	movlt	r3, #2
 8016e96:	73fb      	strb	r3, [r7, #15]
 8016e98:	e00d      	b.n	8016eb6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8016e9a:	2204      	movs	r2, #4
 8016e9c:	2100      	movs	r1, #0
 8016e9e:	6838      	ldr	r0, [r7, #0]
 8016ea0:	f7ff fab6 	bl	8016410 <RegionCommonCountChannels>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	2b31      	cmp	r3, #49	; 0x31
 8016ea8:	d805      	bhi.n	8016eb6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8016eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016eae:	2b05      	cmp	r3, #5
 8016eb0:	bfb8      	it	lt
 8016eb2:	2305      	movlt	r3, #5
 8016eb4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8016eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3710      	adds	r7, #16
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
	...

08016ec4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016ecc:	4b18      	ldr	r3, [pc, #96]	; (8016f30 <VerifyRfFreq+0x6c>)
 8016ece:	6a1b      	ldr	r3, [r3, #32]
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	4798      	blx	r3
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f083 0301 	eor.w	r3, r3, #1
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d001      	beq.n	8016ee4 <VerifyRfFreq+0x20>
    {
        return false;
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	e021      	b.n	8016f28 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	4a13      	ldr	r2, [pc, #76]	; (8016f34 <VerifyRfFreq+0x70>)
 8016ee8:	4293      	cmp	r3, r2
 8016eea:	d910      	bls.n	8016f0e <VerifyRfFreq+0x4a>
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	4a12      	ldr	r2, [pc, #72]	; (8016f38 <VerifyRfFreq+0x74>)
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	d80c      	bhi.n	8016f0e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	4b11      	ldr	r3, [pc, #68]	; (8016f3c <VerifyRfFreq+0x78>)
 8016ef8:	4413      	add	r3, r2
 8016efa:	4a11      	ldr	r2, [pc, #68]	; (8016f40 <VerifyRfFreq+0x7c>)
 8016efc:	fba2 1203 	umull	r1, r2, r2, r3
 8016f00:	0c92      	lsrs	r2, r2, #18
 8016f02:	4910      	ldr	r1, [pc, #64]	; (8016f44 <VerifyRfFreq+0x80>)
 8016f04:	fb01 f202 	mul.w	r2, r1, r2
 8016f08:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8016f0a:	2a00      	cmp	r2, #0
 8016f0c:	d001      	beq.n	8016f12 <VerifyRfFreq+0x4e>
    {
        return false;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	e00a      	b.n	8016f28 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	4a0c      	ldr	r2, [pc, #48]	; (8016f48 <VerifyRfFreq+0x84>)
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d903      	bls.n	8016f22 <VerifyRfFreq+0x5e>
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	4a06      	ldr	r2, [pc, #24]	; (8016f38 <VerifyRfFreq+0x74>)
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	d901      	bls.n	8016f26 <VerifyRfFreq+0x62>
    {
        return false;
 8016f22:	2300      	movs	r3, #0
 8016f24:	e000      	b.n	8016f28 <VerifyRfFreq+0x64>
    }
    return true;
 8016f26:	2301      	movs	r3, #1
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3708      	adds	r7, #8
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}
 8016f30:	0801dc3c 	.word	0x0801dc3c
 8016f34:	3708709f 	.word	0x3708709f
 8016f38:	374886e0 	.word	0x374886e0
 8016f3c:	c8f78f60 	.word	0xc8f78f60
 8016f40:	6fd91d85 	.word	0x6fd91d85
 8016f44:	000927c0 	.word	0x000927c0
 8016f48:	35c8015f 	.word	0x35c8015f

08016f4c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016f4c:	b590      	push	{r4, r7, lr}
 8016f4e:	b089      	sub	sp, #36	; 0x24
 8016f50:	af04      	add	r7, sp, #16
 8016f52:	4603      	mov	r3, r0
 8016f54:	460a      	mov	r2, r1
 8016f56:	71fb      	strb	r3, [r7, #7]
 8016f58:	4613      	mov	r3, r2
 8016f5a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8016f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f60:	4a0f      	ldr	r2, [pc, #60]	; (8016fa0 <GetTimeOnAir+0x54>)
 8016f62:	5cd3      	ldrb	r3, [r2, r3]
 8016f64:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8016f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f6a:	490e      	ldr	r1, [pc, #56]	; (8016fa4 <GetTimeOnAir+0x58>)
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7ff ff0b 	bl	8016d88 <RegionCommonGetBandwidth>
 8016f72:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016f74:	4b0c      	ldr	r3, [pc, #48]	; (8016fa8 <GetTimeOnAir+0x5c>)
 8016f76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016f78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016f7c:	88bb      	ldrh	r3, [r7, #4]
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	2101      	movs	r1, #1
 8016f82:	9103      	str	r1, [sp, #12]
 8016f84:	9302      	str	r3, [sp, #8]
 8016f86:	2300      	movs	r3, #0
 8016f88:	9301      	str	r3, [sp, #4]
 8016f8a:	2308      	movs	r3, #8
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	2301      	movs	r3, #1
 8016f90:	68b9      	ldr	r1, [r7, #8]
 8016f92:	2001      	movs	r0, #1
 8016f94:	47a0      	blx	r4
 8016f96:	4603      	mov	r3, r0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3714      	adds	r7, #20
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd90      	pop	{r4, r7, pc}
 8016fa0:	0801dbb8 	.word	0x0801dbb8
 8016fa4:	0801dbc8 	.word	0x0801dbc8
 8016fa8:	0801dc3c 	.word	0x0801dc3c

08016fac <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b088      	sub	sp, #32
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	3b01      	subs	r3, #1
 8016fbe:	2b37      	cmp	r3, #55	; 0x37
 8016fc0:	f200 8136 	bhi.w	8017230 <RegionUS915GetPhyParam+0x284>
 8016fc4:	a201      	add	r2, pc, #4	; (adr r2, 8016fcc <RegionUS915GetPhyParam+0x20>)
 8016fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fca:	bf00      	nop
 8016fcc:	080170ad 	.word	0x080170ad
 8016fd0:	080170b3 	.word	0x080170b3
 8016fd4:	08017231 	.word	0x08017231
 8016fd8:	08017231 	.word	0x08017231
 8016fdc:	08017231 	.word	0x08017231
 8016fe0:	080170b9 	.word	0x080170b9
 8016fe4:	08017231 	.word	0x08017231
 8016fe8:	080170f3 	.word	0x080170f3
 8016fec:	08017231 	.word	0x08017231
 8016ff0:	080170f9 	.word	0x080170f9
 8016ff4:	080170ff 	.word	0x080170ff
 8016ff8:	08017105 	.word	0x08017105
 8016ffc:	0801710b 	.word	0x0801710b
 8017000:	0801711b 	.word	0x0801711b
 8017004:	0801712b 	.word	0x0801712b
 8017008:	08017131 	.word	0x08017131
 801700c:	08017139 	.word	0x08017139
 8017010:	08017141 	.word	0x08017141
 8017014:	08017149 	.word	0x08017149
 8017018:	08017151 	.word	0x08017151
 801701c:	08017159 	.word	0x08017159
 8017020:	0801716d 	.word	0x0801716d
 8017024:	08017173 	.word	0x08017173
 8017028:	08017179 	.word	0x08017179
 801702c:	0801717f 	.word	0x0801717f
 8017030:	0801718b 	.word	0x0801718b
 8017034:	08017197 	.word	0x08017197
 8017038:	0801719d 	.word	0x0801719d
 801703c:	080171a5 	.word	0x080171a5
 8017040:	080171ab 	.word	0x080171ab
 8017044:	080171b1 	.word	0x080171b1
 8017048:	080171b7 	.word	0x080171b7
 801704c:	080170bf 	.word	0x080170bf
 8017050:	08017231 	.word	0x08017231
 8017054:	08017231 	.word	0x08017231
 8017058:	08017231 	.word	0x08017231
 801705c:	08017231 	.word	0x08017231
 8017060:	08017231 	.word	0x08017231
 8017064:	08017231 	.word	0x08017231
 8017068:	08017231 	.word	0x08017231
 801706c:	08017231 	.word	0x08017231
 8017070:	08017231 	.word	0x08017231
 8017074:	08017231 	.word	0x08017231
 8017078:	08017231 	.word	0x08017231
 801707c:	08017231 	.word	0x08017231
 8017080:	08017231 	.word	0x08017231
 8017084:	080171bf 	.word	0x080171bf
 8017088:	080171d3 	.word	0x080171d3
 801708c:	080171e1 	.word	0x080171e1
 8017090:	080171e7 	.word	0x080171e7
 8017094:	08017231 	.word	0x08017231
 8017098:	080171ed 	.word	0x080171ed
 801709c:	08017201 	.word	0x08017201
 80170a0:	08017207 	.word	0x08017207
 80170a4:	0801720d 	.word	0x0801720d
 80170a8:	0801721d 	.word	0x0801721d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80170ac:	2308      	movs	r3, #8
 80170ae:	61bb      	str	r3, [r7, #24]
            break;
 80170b0:	e0bf      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 80170b2:	2300      	movs	r3, #0
 80170b4:	61bb      	str	r3, [r7, #24]
            break;
 80170b6:	e0bc      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 80170b8:	2300      	movs	r3, #0
 80170ba:	61bb      	str	r3, [r7, #24]
            break;
 80170bc:	e0b9      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80170c4:	733b      	strb	r3, [r7, #12]
 80170c6:	2304      	movs	r3, #4
 80170c8:	737b      	strb	r3, [r7, #13]
 80170ca:	2300      	movs	r3, #0
 80170cc:	73bb      	strb	r3, [r7, #14]
 80170ce:	2348      	movs	r3, #72	; 0x48
 80170d0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80170d2:	4b5b      	ldr	r3, [pc, #364]	; (8017240 <RegionUS915GetPhyParam+0x294>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80170da:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80170dc:	4b58      	ldr	r3, [pc, #352]	; (8017240 <RegionUS915GetPhyParam+0x294>)
 80170de:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80170e0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80170e2:	f107 030c 	add.w	r3, r7, #12
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7ff fdfb 	bl	8016ce2 <RegionCommonGetNextLowerTxDr>
 80170ec:	4603      	mov	r3, r0
 80170ee:	61bb      	str	r3, [r7, #24]
            break;
 80170f0:	e09f      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 80170f2:	2300      	movs	r3, #0
 80170f4:	61bb      	str	r3, [r7, #24]
            break;
 80170f6:	e09c      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 80170f8:	2300      	movs	r3, #0
 80170fa:	61bb      	str	r3, [r7, #24]
            break;
 80170fc:	e099      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80170fe:	2340      	movs	r3, #64	; 0x40
 8017100:	61bb      	str	r3, [r7, #24]
            break;
 8017102:	e096      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017104:	2320      	movs	r3, #32
 8017106:	61bb      	str	r3, [r7, #24]
            break;
 8017108:	e093      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017110:	461a      	mov	r2, r3
 8017112:	4b4c      	ldr	r3, [pc, #304]	; (8017244 <RegionUS915GetPhyParam+0x298>)
 8017114:	5c9b      	ldrb	r3, [r3, r2]
 8017116:	61bb      	str	r3, [r7, #24]
            break;
 8017118:	e08b      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017120:	461a      	mov	r2, r3
 8017122:	4b49      	ldr	r3, [pc, #292]	; (8017248 <RegionUS915GetPhyParam+0x29c>)
 8017124:	5c9b      	ldrb	r3, [r3, r2]
 8017126:	61bb      	str	r3, [r7, #24]
            break;
 8017128:	e083      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801712a:	2300      	movs	r3, #0
 801712c:	61bb      	str	r3, [r7, #24]
            break;
 801712e:	e080      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017130:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017134:	61bb      	str	r3, [r7, #24]
            break;
 8017136:	e07c      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801713c:	61bb      	str	r3, [r7, #24]
            break;
 801713e:	e078      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017140:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017144:	61bb      	str	r3, [r7, #24]
            break;
 8017146:	e074      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017148:	f241 3388 	movw	r3, #5000	; 0x1388
 801714c:	61bb      	str	r3, [r7, #24]
            break;
 801714e:	e070      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017150:	f241 7370 	movw	r3, #6000	; 0x1770
 8017154:	61bb      	str	r3, [r7, #24]
            break;
 8017156:	e06c      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017158:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801715c:	483b      	ldr	r0, [pc, #236]	; (801724c <RegionUS915GetPhyParam+0x2a0>)
 801715e:	f001 f8a7 	bl	80182b0 <randr>
 8017162:	4603      	mov	r3, r0
 8017164:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017168:	61bb      	str	r3, [r7, #24]
            break;
 801716a:	e062      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801716c:	2300      	movs	r3, #0
 801716e:	61bb      	str	r3, [r7, #24]
            break;
 8017170:	e05f      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017172:	4b37      	ldr	r3, [pc, #220]	; (8017250 <RegionUS915GetPhyParam+0x2a4>)
 8017174:	61bb      	str	r3, [r7, #24]
            break;
 8017176:	e05c      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017178:	2308      	movs	r3, #8
 801717a:	61bb      	str	r3, [r7, #24]
            break;
 801717c:	e059      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801717e:	4b30      	ldr	r3, [pc, #192]	; (8017240 <RegionUS915GetPhyParam+0x294>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017186:	61bb      	str	r3, [r7, #24]
            break;
 8017188:	e053      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801718a:	4b2d      	ldr	r3, [pc, #180]	; (8017240 <RegionUS915GetPhyParam+0x294>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017192:	61bb      	str	r3, [r7, #24]
            break;
 8017194:	e04d      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017196:	2348      	movs	r3, #72	; 0x48
 8017198:	61bb      	str	r3, [r7, #24]
            break;
 801719a:	e04a      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801719c:	4b28      	ldr	r3, [pc, #160]	; (8017240 <RegionUS915GetPhyParam+0x294>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	61bb      	str	r3, [r7, #24]
            break;
 80171a2:	e046      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 80171a4:	2300      	movs	r3, #0
 80171a6:	61bb      	str	r3, [r7, #24]
            break;
 80171a8:	e043      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80171aa:	2300      	movs	r3, #0
 80171ac:	61bb      	str	r3, [r7, #24]
            break;
 80171ae:	e040      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80171b0:	4b28      	ldr	r3, [pc, #160]	; (8017254 <RegionUS915GetPhyParam+0x2a8>)
 80171b2:	61bb      	str	r3, [r7, #24]
            break;
 80171b4:	e03d      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80171b6:	f04f 0300 	mov.w	r3, #0
 80171ba:	61bb      	str	r3, [r7, #24]
            break;
 80171bc:	e039      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	791b      	ldrb	r3, [r3, #4]
 80171c2:	4a25      	ldr	r2, [pc, #148]	; (8017258 <RegionUS915GetPhyParam+0x2ac>)
 80171c4:	4922      	ldr	r1, [pc, #136]	; (8017250 <RegionUS915GetPhyParam+0x2a4>)
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7fe fefd 	bl	8015fc6 <RegionBaseUSCalcDownlinkFrequency>
 80171cc:	4603      	mov	r3, r0
 80171ce:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80171d0:	e02f      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80171d2:	2317      	movs	r3, #23
 80171d4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80171d6:	2304      	movs	r3, #4
 80171d8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80171da:	2303      	movs	r3, #3
 80171dc:	76bb      	strb	r3, [r7, #26]
            break;
 80171de:	e028      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80171e0:	2308      	movs	r3, #8
 80171e2:	61bb      	str	r3, [r7, #24]
            break;
 80171e4:	e025      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80171e6:	2308      	movs	r3, #8
 80171e8:	61bb      	str	r3, [r7, #24]
            break;
 80171ea:	e022      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	791b      	ldrb	r3, [r3, #4]
 80171f0:	4a19      	ldr	r2, [pc, #100]	; (8017258 <RegionUS915GetPhyParam+0x2ac>)
 80171f2:	4917      	ldr	r1, [pc, #92]	; (8017250 <RegionUS915GetPhyParam+0x2a4>)
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7fe fee6 	bl	8015fc6 <RegionBaseUSCalcDownlinkFrequency>
 80171fa:	4603      	mov	r3, r0
 80171fc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80171fe:	e018      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017200:	2308      	movs	r3, #8
 8017202:	61bb      	str	r3, [r7, #24]
            break;
 8017204:	e015      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017206:	2308      	movs	r3, #8
 8017208:	61bb      	str	r3, [r7, #24]
            break;
 801720a:	e012      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017212:	461a      	mov	r2, r3
 8017214:	4b11      	ldr	r3, [pc, #68]	; (801725c <RegionUS915GetPhyParam+0x2b0>)
 8017216:	5c9b      	ldrb	r3, [r3, r2]
 8017218:	61bb      	str	r3, [r7, #24]
            break;
 801721a:	e00a      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017222:	490f      	ldr	r1, [pc, #60]	; (8017260 <RegionUS915GetPhyParam+0x2b4>)
 8017224:	4618      	mov	r0, r3
 8017226:	f7ff fdaf 	bl	8016d88 <RegionCommonGetBandwidth>
 801722a:	4603      	mov	r3, r0
 801722c:	61bb      	str	r3, [r7, #24]
            break;
 801722e:	e000      	b.n	8017232 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017230:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	61fb      	str	r3, [r7, #28]
 8017236:	69fb      	ldr	r3, [r7, #28]
}
 8017238:	4618      	mov	r0, r3
 801723a:	3720      	adds	r7, #32
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}
 8017240:	200019dc 	.word	0x200019dc
 8017244:	0801dc1c 	.word	0x0801dc1c
 8017248:	0801dc2c 	.word	0x0801dc2c
 801724c:	fffffc18 	.word	0xfffffc18
 8017250:	370870a0 	.word	0x370870a0
 8017254:	4200999a 	.word	0x4200999a
 8017258:	000927c0 	.word	0x000927c0
 801725c:	0801dbb8 	.word	0x0801dbb8
 8017260:	0801dbc8 	.word	0x0801dbc8

08017264 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017264:	b590      	push	{r4, r7, lr}
 8017266:	b085      	sub	sp, #20
 8017268:	af02      	add	r7, sp, #8
 801726a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801726c:	4b11      	ldr	r3, [pc, #68]	; (80172b4 <RegionUS915SetBandTxDone+0x50>)
 801726e:	681a      	ldr	r2, [r3, #0]
 8017270:	4b11      	ldr	r3, [pc, #68]	; (80172b8 <RegionUS915SetBandTxDone+0x54>)
 8017272:	6819      	ldr	r1, [r3, #0]
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	4618      	mov	r0, r3
 801727a:	4603      	mov	r3, r0
 801727c:	005b      	lsls	r3, r3, #1
 801727e:	4403      	add	r3, r0
 8017280:	009b      	lsls	r3, r3, #2
 8017282:	440b      	add	r3, r1
 8017284:	3309      	adds	r3, #9
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	4619      	mov	r1, r3
 801728a:	460b      	mov	r3, r1
 801728c:	005b      	lsls	r3, r3, #1
 801728e:	440b      	add	r3, r1
 8017290:	00db      	lsls	r3, r3, #3
 8017292:	18d0      	adds	r0, r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6899      	ldr	r1, [r3, #8]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	785c      	ldrb	r4, [r3, #1]
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	691a      	ldr	r2, [r3, #16]
 80172a0:	9200      	str	r2, [sp, #0]
 80172a2:	68db      	ldr	r3, [r3, #12]
 80172a4:	4622      	mov	r2, r4
 80172a6:	f7ff f905 	bl	80164b4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80172aa:	bf00      	nop
 80172ac:	370c      	adds	r7, #12
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd90      	pop	{r4, r7, pc}
 80172b2:	bf00      	nop
 80172b4:	200019e0 	.word	0x200019e0
 80172b8:	200019dc 	.word	0x200019dc

080172bc <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b08a      	sub	sp, #40	; 0x28
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 80172c4:	2301      	movs	r3, #1
 80172c6:	81bb      	strh	r3, [r7, #12]
 80172c8:	2300      	movs	r3, #0
 80172ca:	73bb      	strb	r3, [r7, #14]
 80172cc:	2300      	movs	r3, #0
 80172ce:	613b      	str	r3, [r7, #16]
 80172d0:	2300      	movs	r3, #0
 80172d2:	617b      	str	r3, [r7, #20]
 80172d4:	2300      	movs	r3, #0
 80172d6:	61bb      	str	r3, [r7, #24]
 80172d8:	2300      	movs	r3, #0
 80172da:	61fb      	str	r3, [r7, #28]
 80172dc:	2300      	movs	r3, #0
 80172de:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	7b1b      	ldrb	r3, [r3, #12]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d007      	beq.n	80172fa <RegionUS915InitDefaults+0x3e>
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	f2c0 8104 	blt.w	80174f8 <RegionUS915InitDefaults+0x23c>
 80172f0:	3b01      	subs	r3, #1
 80172f2:	2b01      	cmp	r3, #1
 80172f4:	f200 8100 	bhi.w	80174f8 <RegionUS915InitDefaults+0x23c>
 80172f8:	e0ce      	b.n	8017498 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	f000 80fc 	beq.w	80174fc <RegionUS915InitDefaults+0x240>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	2b00      	cmp	r3, #0
 801730a:	f000 80f7 	beq.w	80174fc <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	4a7c      	ldr	r2, [pc, #496]	; (8017504 <RegionUS915InitDefaults+0x248>)
 8017314:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	4a7b      	ldr	r2, [pc, #492]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801731c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	689b      	ldr	r3, [r3, #8]
 8017322:	4a7a      	ldr	r2, [pc, #488]	; (801750c <RegionUS915InitDefaults+0x250>)
 8017324:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017326:	4b77      	ldr	r3, [pc, #476]	; (8017504 <RegionUS915InitDefaults+0x248>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2200      	movs	r2, #0
 801732c:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801732e:	4b75      	ldr	r3, [pc, #468]	; (8017504 <RegionUS915InitDefaults+0x248>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	2200      	movs	r2, #0
 8017334:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017336:	4b75      	ldr	r3, [pc, #468]	; (801750c <RegionUS915InitDefaults+0x250>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	f107 010c 	add.w	r1, r7, #12
 801733e:	2218      	movs	r2, #24
 8017340:	4618      	mov	r0, r3
 8017342:	f000 ffcc 	bl	80182de <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017346:	2300      	movs	r3, #0
 8017348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801734c:	e02e      	b.n	80173ac <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801734e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017352:	4a6f      	ldr	r2, [pc, #444]	; (8017510 <RegionUS915InitDefaults+0x254>)
 8017354:	fb03 f202 	mul.w	r2, r3, r2
 8017358:	4b6e      	ldr	r3, [pc, #440]	; (8017514 <RegionUS915InitDefaults+0x258>)
 801735a:	4413      	add	r3, r2
 801735c:	4a6a      	ldr	r2, [pc, #424]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801735e:	6811      	ldr	r1, [r2, #0]
 8017360:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017364:	4618      	mov	r0, r3
 8017366:	4613      	mov	r3, r2
 8017368:	005b      	lsls	r3, r3, #1
 801736a:	4413      	add	r3, r2
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	440b      	add	r3, r1
 8017370:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017372:	4b65      	ldr	r3, [pc, #404]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017374:	6819      	ldr	r1, [r3, #0]
 8017376:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801737a:	4613      	mov	r3, r2
 801737c:	005b      	lsls	r3, r3, #1
 801737e:	4413      	add	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	440b      	add	r3, r1
 8017384:	3308      	adds	r3, #8
 8017386:	2230      	movs	r2, #48	; 0x30
 8017388:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801738a:	4b5f      	ldr	r3, [pc, #380]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801738c:	6819      	ldr	r1, [r3, #0]
 801738e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017392:	4613      	mov	r3, r2
 8017394:	005b      	lsls	r3, r3, #1
 8017396:	4413      	add	r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	440b      	add	r3, r1
 801739c:	3309      	adds	r3, #9
 801739e:	2200      	movs	r2, #0
 80173a0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80173a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173a6:	3301      	adds	r3, #1
 80173a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80173ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173b0:	2b3f      	cmp	r3, #63	; 0x3f
 80173b2:	d9cc      	bls.n	801734e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80173b4:	2340      	movs	r3, #64	; 0x40
 80173b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80173ba:	e02f      	b.n	801741c <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80173bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173c0:	3b40      	subs	r3, #64	; 0x40
 80173c2:	4a55      	ldr	r2, [pc, #340]	; (8017518 <RegionUS915InitDefaults+0x25c>)
 80173c4:	fb03 f202 	mul.w	r2, r3, r2
 80173c8:	4b54      	ldr	r3, [pc, #336]	; (801751c <RegionUS915InitDefaults+0x260>)
 80173ca:	4413      	add	r3, r2
 80173cc:	4a4e      	ldr	r2, [pc, #312]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 80173ce:	6811      	ldr	r1, [r2, #0]
 80173d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80173d4:	4618      	mov	r0, r3
 80173d6:	4613      	mov	r3, r2
 80173d8:	005b      	lsls	r3, r3, #1
 80173da:	4413      	add	r3, r2
 80173dc:	009b      	lsls	r3, r3, #2
 80173de:	440b      	add	r3, r1
 80173e0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80173e2:	4b49      	ldr	r3, [pc, #292]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 80173e4:	6819      	ldr	r1, [r3, #0]
 80173e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	009b      	lsls	r3, r3, #2
 80173f2:	440b      	add	r3, r1
 80173f4:	3308      	adds	r3, #8
 80173f6:	2244      	movs	r2, #68	; 0x44
 80173f8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80173fa:	4b43      	ldr	r3, [pc, #268]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 80173fc:	6819      	ldr	r1, [r3, #0]
 80173fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017402:	4613      	mov	r3, r2
 8017404:	005b      	lsls	r3, r3, #1
 8017406:	4413      	add	r3, r2
 8017408:	009b      	lsls	r3, r3, #2
 801740a:	440b      	add	r3, r1
 801740c:	3309      	adds	r3, #9
 801740e:	2200      	movs	r2, #0
 8017410:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017416:	3301      	adds	r3, #1
 8017418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801741c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017420:	2b47      	cmp	r3, #71	; 0x47
 8017422:	d9cb      	bls.n	80173bc <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017424:	4b38      	ldr	r3, [pc, #224]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801742c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017430:	4b35      	ldr	r3, [pc, #212]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017438:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801743c:	4b32      	ldr	r3, [pc, #200]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017444:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017448:	4b2f      	ldr	r3, [pc, #188]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017450:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017454:	4b2c      	ldr	r3, [pc, #176]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	22ff      	movs	r2, #255	; 0xff
 801745a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801745e:	4b2a      	ldr	r3, [pc, #168]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2200      	movs	r2, #0
 8017464:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017468:	4b27      	ldr	r3, [pc, #156]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017470:	4b25      	ldr	r3, [pc, #148]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017478:	2206      	movs	r2, #6
 801747a:	4619      	mov	r1, r3
 801747c:	f7fe fff4 	bl	8016468 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017480:	4b20      	ldr	r3, [pc, #128]	; (8017504 <RegionUS915InitDefaults+0x248>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	4618      	mov	r0, r3
 8017486:	4b20      	ldr	r3, [pc, #128]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801748e:	2206      	movs	r2, #6
 8017490:	4619      	mov	r1, r3
 8017492:	f7fe ffe9 	bl	8016468 <RegionCommonChanMaskCopy>
            break;
 8017496:	e032      	b.n	80174fe <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017498:	4b1b      	ldr	r3, [pc, #108]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80174a0:	4b19      	ldr	r3, [pc, #100]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80174a8:	2206      	movs	r2, #6
 80174aa:	4619      	mov	r1, r3
 80174ac:	f7fe ffdc 	bl	8016468 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80174b0:	2300      	movs	r3, #0
 80174b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80174b6:	e01a      	b.n	80174ee <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80174b8:	4b12      	ldr	r3, [pc, #72]	; (8017504 <RegionUS915InitDefaults+0x248>)
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80174c0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80174c4:	4b10      	ldr	r3, [pc, #64]	; (8017508 <RegionUS915InitDefaults+0x24c>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80174cc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80174d0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80174d4:	4b0b      	ldr	r3, [pc, #44]	; (8017504 <RegionUS915InitDefaults+0x248>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80174dc:	4001      	ands	r1, r0
 80174de:	b289      	uxth	r1, r1
 80174e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80174e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80174e8:	3301      	adds	r3, #1
 80174ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80174ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80174f2:	2b05      	cmp	r3, #5
 80174f4:	d9e0      	bls.n	80174b8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80174f6:	e002      	b.n	80174fe <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80174f8:	bf00      	nop
 80174fa:	e000      	b.n	80174fe <RegionUS915InitDefaults+0x242>
                return;
 80174fc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80174fe:	3728      	adds	r7, #40	; 0x28
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}
 8017504:	200019d8 	.word	0x200019d8
 8017508:	200019dc 	.word	0x200019dc
 801750c:	200019e0 	.word	0x200019e0
 8017510:	00030d40 	.word	0x00030d40
 8017514:	35c80160 	.word	0x35c80160
 8017518:	00186a00 	.word	0x00186a00
 801751c:	35d2afc0 	.word	0x35d2afc0

08017520 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b082      	sub	sp, #8
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	460b      	mov	r3, r1
 801752a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801752c:	78fb      	ldrb	r3, [r7, #3]
 801752e:	2b0f      	cmp	r3, #15
 8017530:	d867      	bhi.n	8017602 <RegionUS915Verify+0xe2>
 8017532:	a201      	add	r2, pc, #4	; (adr r2, 8017538 <RegionUS915Verify+0x18>)
 8017534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017538:	08017579 	.word	0x08017579
 801753c:	08017603 	.word	0x08017603
 8017540:	08017603 	.word	0x08017603
 8017544:	08017603 	.word	0x08017603
 8017548:	08017603 	.word	0x08017603
 801754c:	08017587 	.word	0x08017587
 8017550:	080175a5 	.word	0x080175a5
 8017554:	080175c3 	.word	0x080175c3
 8017558:	08017603 	.word	0x08017603
 801755c:	080175e1 	.word	0x080175e1
 8017560:	080175e1 	.word	0x080175e1
 8017564:	08017603 	.word	0x08017603
 8017568:	08017603 	.word	0x08017603
 801756c:	08017603 	.word	0x08017603
 8017570:	08017603 	.word	0x08017603
 8017574:	080175ff 	.word	0x080175ff
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	4618      	mov	r0, r3
 801757e:	f7ff fca1 	bl	8016ec4 <VerifyRfFreq>
 8017582:	4603      	mov	r3, r0
 8017584:	e03e      	b.n	8017604 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f993 3000 	ldrsb.w	r3, [r3]
 801758c:	2204      	movs	r2, #4
 801758e:	2100      	movs	r1, #0
 8017590:	4618      	mov	r0, r3
 8017592:	f7fe feec 	bl	801636e <RegionCommonValueInRange>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	bf14      	ite	ne
 801759c:	2301      	movne	r3, #1
 801759e:	2300      	moveq	r3, #0
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	e02f      	b.n	8017604 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f993 3000 	ldrsb.w	r3, [r3]
 80175aa:	2205      	movs	r2, #5
 80175ac:	2100      	movs	r1, #0
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7fe fedd 	bl	801636e <RegionCommonValueInRange>
 80175b4:	4603      	mov	r3, r0
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	bf14      	ite	ne
 80175ba:	2301      	movne	r3, #1
 80175bc:	2300      	moveq	r3, #0
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	e020      	b.n	8017604 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f993 3000 	ldrsb.w	r3, [r3]
 80175c8:	220d      	movs	r2, #13
 80175ca:	2108      	movs	r1, #8
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7fe fece 	bl	801636e <RegionCommonValueInRange>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	bf14      	ite	ne
 80175d8:	2301      	movne	r3, #1
 80175da:	2300      	moveq	r3, #0
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	e011      	b.n	8017604 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f993 3000 	ldrsb.w	r3, [r3]
 80175e6:	220e      	movs	r2, #14
 80175e8:	2100      	movs	r1, #0
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7fe febf 	bl	801636e <RegionCommonValueInRange>
 80175f0:	4603      	mov	r3, r0
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	bf14      	ite	ne
 80175f6:	2301      	movne	r3, #1
 80175f8:	2300      	moveq	r3, #0
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	e002      	b.n	8017604 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80175fe:	2300      	movs	r3, #0
 8017600:	e000      	b.n	8017604 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8017602:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8017604:	4618      	mov	r0, r3
 8017606:	3708      	adds	r7, #8
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}

0801760c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801760c:	b480      	push	{r7}
 801760e:	b085      	sub	sp, #20
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	7a1b      	ldrb	r3, [r3, #8]
 8017618:	2b10      	cmp	r3, #16
 801761a:	d160      	bne.n	80176de <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	330f      	adds	r3, #15
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d15c      	bne.n	80176e2 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017628:	2300      	movs	r3, #0
 801762a:	73fb      	strb	r3, [r7, #15]
 801762c:	2300      	movs	r3, #0
 801762e:	73bb      	strb	r3, [r7, #14]
 8017630:	e051      	b.n	80176d6 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	685a      	ldr	r2, [r3, #4]
 8017636:	7bbb      	ldrb	r3, [r7, #14]
 8017638:	4413      	add	r3, r2
 801763a:	7819      	ldrb	r1, [r3, #0]
 801763c:	4b2b      	ldr	r3, [pc, #172]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	7bfa      	ldrb	r2, [r7, #15]
 8017642:	b289      	uxth	r1, r1
 8017644:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017648:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801764c:	4b27      	ldr	r3, [pc, #156]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	7bfa      	ldrb	r2, [r7, #15]
 8017652:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017656:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	685a      	ldr	r2, [r3, #4]
 801765e:	7bbb      	ldrb	r3, [r7, #14]
 8017660:	3301      	adds	r3, #1
 8017662:	4413      	add	r3, r2
 8017664:	781b      	ldrb	r3, [r3, #0]
 8017666:	b29b      	uxth	r3, r3
 8017668:	021b      	lsls	r3, r3, #8
 801766a:	b299      	uxth	r1, r3
 801766c:	4b1f      	ldr	r3, [pc, #124]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	7bfa      	ldrb	r2, [r7, #15]
 8017672:	4301      	orrs	r1, r0
 8017674:	b289      	uxth	r1, r1
 8017676:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801767a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801767e:	7bfb      	ldrb	r3, [r7, #15]
 8017680:	2b04      	cmp	r3, #4
 8017682:	d10f      	bne.n	80176a4 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8017684:	4b19      	ldr	r3, [pc, #100]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	7bfa      	ldrb	r2, [r7, #15]
 801768a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801768e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017692:	4b16      	ldr	r3, [pc, #88]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	7bfa      	ldrb	r2, [r7, #15]
 8017698:	b2c9      	uxtb	r1, r1
 801769a:	b289      	uxth	r1, r1
 801769c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80176a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80176a4:	4b12      	ldr	r3, [pc, #72]	; (80176f0 <RegionUS915ApplyCFList+0xe4>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	7bfa      	ldrb	r2, [r7, #15]
 80176aa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80176ae:	4b0f      	ldr	r3, [pc, #60]	; (80176ec <RegionUS915ApplyCFList+0xe0>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	7bfa      	ldrb	r2, [r7, #15]
 80176b4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80176b8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80176bc:	4b0c      	ldr	r3, [pc, #48]	; (80176f0 <RegionUS915ApplyCFList+0xe4>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	7bfa      	ldrb	r2, [r7, #15]
 80176c2:	4001      	ands	r1, r0
 80176c4:	b289      	uxth	r1, r1
 80176c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80176ca:	7bfb      	ldrb	r3, [r7, #15]
 80176cc:	3301      	adds	r3, #1
 80176ce:	73fb      	strb	r3, [r7, #15]
 80176d0:	7bbb      	ldrb	r3, [r7, #14]
 80176d2:	3302      	adds	r3, #2
 80176d4:	73bb      	strb	r3, [r7, #14]
 80176d6:	7bfb      	ldrb	r3, [r7, #15]
 80176d8:	2b04      	cmp	r3, #4
 80176da:	d9aa      	bls.n	8017632 <RegionUS915ApplyCFList+0x26>
 80176dc:	e002      	b.n	80176e4 <RegionUS915ApplyCFList+0xd8>
        return;
 80176de:	bf00      	nop
 80176e0:	e000      	b.n	80176e4 <RegionUS915ApplyCFList+0xd8>
        return;
 80176e2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80176e4:	3714      	adds	r7, #20
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bc80      	pop	{r7}
 80176ea:	4770      	bx	lr
 80176ec:	200019dc 	.word	0x200019dc
 80176f0:	200019d8 	.word	0x200019d8

080176f4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b084      	sub	sp, #16
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2204      	movs	r2, #4
 8017702:	2100      	movs	r1, #0
 8017704:	4618      	mov	r0, r3
 8017706:	f7fe fe83 	bl	8016410 <RegionCommonCountChannels>
 801770a:	4603      	mov	r3, r0
 801770c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801770e:	7bbb      	ldrb	r3, [r7, #14]
 8017710:	2b01      	cmp	r3, #1
 8017712:	d804      	bhi.n	801771e <RegionUS915ChanMaskSet+0x2a>
 8017714:	7bbb      	ldrb	r3, [r7, #14]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d001      	beq.n	801771e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801771a:	2300      	movs	r3, #0
 801771c:	e04a      	b.n	80177b4 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	791b      	ldrb	r3, [r3, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d002      	beq.n	801772c <RegionUS915ChanMaskSet+0x38>
 8017726:	2b01      	cmp	r3, #1
 8017728:	d036      	beq.n	8017798 <RegionUS915ChanMaskSet+0xa4>
 801772a:	e040      	b.n	80177ae <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801772c:	4b23      	ldr	r3, [pc, #140]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2206      	movs	r2, #6
 801773a:	4619      	mov	r1, r3
 801773c:	f7fe fe94 	bl	8016468 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8017740:	4b1e      	ldr	r3, [pc, #120]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8017748:	4b1c      	ldr	r3, [pc, #112]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	b2d2      	uxtb	r2, r2
 801774e:	b292      	uxth	r2, r2
 8017750:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017754:	4b19      	ldr	r3, [pc, #100]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	2200      	movs	r2, #0
 801775a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801775e:	2300      	movs	r3, #0
 8017760:	73fb      	strb	r3, [r7, #15]
 8017762:	e015      	b.n	8017790 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017764:	4b16      	ldr	r3, [pc, #88]	; (80177c0 <RegionUS915ChanMaskSet+0xcc>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	7bfa      	ldrb	r2, [r7, #15]
 801776a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801776e:	4b13      	ldr	r3, [pc, #76]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	7bfa      	ldrb	r2, [r7, #15]
 8017774:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017778:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801777c:	4b10      	ldr	r3, [pc, #64]	; (80177c0 <RegionUS915ChanMaskSet+0xcc>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	7bfa      	ldrb	r2, [r7, #15]
 8017782:	4001      	ands	r1, r0
 8017784:	b289      	uxth	r1, r1
 8017786:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801778a:	7bfb      	ldrb	r3, [r7, #15]
 801778c:	3301      	adds	r3, #1
 801778e:	73fb      	strb	r3, [r7, #15]
 8017790:	7bfb      	ldrb	r3, [r7, #15]
 8017792:	2b05      	cmp	r3, #5
 8017794:	d9e6      	bls.n	8017764 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8017796:	e00c      	b.n	80177b2 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017798:	4b08      	ldr	r3, [pc, #32]	; (80177bc <RegionUS915ChanMaskSet+0xc8>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	2206      	movs	r2, #6
 80177a6:	4619      	mov	r1, r3
 80177a8:	f7fe fe5e 	bl	8016468 <RegionCommonChanMaskCopy>
            break;
 80177ac:	e001      	b.n	80177b2 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80177ae:	2300      	movs	r3, #0
 80177b0:	e000      	b.n	80177b4 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80177b2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	3710      	adds	r7, #16
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	200019dc 	.word	0x200019dc
 80177c0:	200019d8 	.word	0x200019d8

080177c4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b088      	sub	sp, #32
 80177c8:	af02      	add	r7, sp, #8
 80177ca:	60ba      	str	r2, [r7, #8]
 80177cc:	607b      	str	r3, [r7, #4]
 80177ce:	4603      	mov	r3, r0
 80177d0:	73fb      	strb	r3, [r7, #15]
 80177d2:	460b      	mov	r3, r1
 80177d4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80177da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177de:	2b0d      	cmp	r3, #13
 80177e0:	bfa8      	it	ge
 80177e2:	230d      	movge	r3, #13
 80177e4:	b25a      	sxtb	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177f0:	4916      	ldr	r1, [pc, #88]	; (801784c <RegionUS915ComputeRxWindowParameters+0x88>)
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7ff fac8 	bl	8016d88 <RegionCommonGetBandwidth>
 80177f8:	4603      	mov	r3, r0
 80177fa:	b2da      	uxtb	r2, r3
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017806:	461a      	mov	r2, r3
 8017808:	4b11      	ldr	r3, [pc, #68]	; (8017850 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801780a:	5c9a      	ldrb	r2, [r3, r2]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017812:	4619      	mov	r1, r3
 8017814:	4b0d      	ldr	r3, [pc, #52]	; (801784c <RegionUS915ComputeRxWindowParameters+0x88>)
 8017816:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801781a:	4619      	mov	r1, r3
 801781c:	4610      	mov	r0, r2
 801781e:	f7ff f841 	bl	80168a4 <RegionCommonComputeSymbolTimeLoRa>
 8017822:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017824:	4b0b      	ldr	r3, [pc, #44]	; (8017854 <RegionUS915ComputeRxWindowParameters+0x90>)
 8017826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017828:	4798      	blx	r3
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3308      	adds	r3, #8
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	320c      	adds	r2, #12
 8017832:	7bb9      	ldrb	r1, [r7, #14]
 8017834:	9201      	str	r2, [sp, #4]
 8017836:	9300      	str	r3, [sp, #0]
 8017838:	4603      	mov	r3, r0
 801783a:	68ba      	ldr	r2, [r7, #8]
 801783c:	6978      	ldr	r0, [r7, #20]
 801783e:	f7ff f847 	bl	80168d0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8017842:	bf00      	nop
 8017844:	3718      	adds	r7, #24
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	0801dbc8 	.word	0x0801dbc8
 8017850:	0801dbb8 	.word	0x0801dbb8
 8017854:	0801dc3c 	.word	0x0801dc3c

08017858 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017858:	b590      	push	{r4, r7, lr}
 801785a:	b091      	sub	sp, #68	; 0x44
 801785c:	af0a      	add	r7, sp, #40	; 0x28
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	785b      	ldrb	r3, [r3, #1]
 8017866:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017868:	2300      	movs	r3, #0
 801786a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801786c:	2300      	movs	r3, #0
 801786e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017876:	4b34      	ldr	r3, [pc, #208]	; (8017948 <RegionUS915RxConfig+0xf0>)
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	4798      	blx	r3
 801787c:	4603      	mov	r3, r0
 801787e:	2b00      	cmp	r3, #0
 8017880:	d001      	beq.n	8017886 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8017882:	2300      	movs	r3, #0
 8017884:	e05c      	b.n	8017940 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	7cdb      	ldrb	r3, [r3, #19]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d109      	bne.n	80178a2 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	781b      	ldrb	r3, [r3, #0]
 8017892:	f003 0307 	and.w	r3, r3, #7
 8017896:	4a2d      	ldr	r2, [pc, #180]	; (801794c <RegionUS915RxConfig+0xf4>)
 8017898:	fb03 f202 	mul.w	r2, r3, r2
 801789c:	4b2c      	ldr	r3, [pc, #176]	; (8017950 <RegionUS915RxConfig+0xf8>)
 801789e:	4413      	add	r3, r2
 80178a0:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80178a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178a6:	4a2b      	ldr	r2, [pc, #172]	; (8017954 <RegionUS915RxConfig+0xfc>)
 80178a8:	5cd3      	ldrb	r3, [r2, r3]
 80178aa:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80178ac:	4b26      	ldr	r3, [pc, #152]	; (8017948 <RegionUS915RxConfig+0xf0>)
 80178ae:	68db      	ldr	r3, [r3, #12]
 80178b0:	6938      	ldr	r0, [r7, #16]
 80178b2:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80178b4:	4b24      	ldr	r3, [pc, #144]	; (8017948 <RegionUS915RxConfig+0xf0>)
 80178b6:	699c      	ldr	r4, [r3, #24]
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	789b      	ldrb	r3, [r3, #2]
 80178bc:	4618      	mov	r0, r3
 80178be:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	689b      	ldr	r3, [r3, #8]
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	687a      	ldr	r2, [r7, #4]
 80178ca:	7c92      	ldrb	r2, [r2, #18]
 80178cc:	9209      	str	r2, [sp, #36]	; 0x24
 80178ce:	2201      	movs	r2, #1
 80178d0:	9208      	str	r2, [sp, #32]
 80178d2:	2200      	movs	r2, #0
 80178d4:	9207      	str	r2, [sp, #28]
 80178d6:	2200      	movs	r2, #0
 80178d8:	9206      	str	r2, [sp, #24]
 80178da:	2200      	movs	r2, #0
 80178dc:	9205      	str	r2, [sp, #20]
 80178de:	2200      	movs	r2, #0
 80178e0:	9204      	str	r2, [sp, #16]
 80178e2:	2200      	movs	r2, #0
 80178e4:	9203      	str	r2, [sp, #12]
 80178e6:	9302      	str	r3, [sp, #8]
 80178e8:	2308      	movs	r3, #8
 80178ea:	9301      	str	r3, [sp, #4]
 80178ec:	2300      	movs	r3, #0
 80178ee:	9300      	str	r3, [sp, #0]
 80178f0:	2301      	movs	r3, #1
 80178f2:	460a      	mov	r2, r1
 80178f4:	4601      	mov	r1, r0
 80178f6:	2001      	movs	r0, #1
 80178f8:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	7c5b      	ldrb	r3, [r3, #17]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d005      	beq.n	801790e <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8017902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017906:	4a14      	ldr	r2, [pc, #80]	; (8017958 <RegionUS915RxConfig+0x100>)
 8017908:	5cd3      	ldrb	r3, [r2, r3]
 801790a:	75fb      	strb	r3, [r7, #23]
 801790c:	e004      	b.n	8017918 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017912:	4a12      	ldr	r2, [pc, #72]	; (801795c <RegionUS915RxConfig+0x104>)
 8017914:	5cd3      	ldrb	r3, [r2, r3]
 8017916:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017918:	4b0b      	ldr	r3, [pc, #44]	; (8017948 <RegionUS915RxConfig+0xf0>)
 801791a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801791c:	7dfa      	ldrb	r2, [r7, #23]
 801791e:	320d      	adds	r2, #13
 8017920:	b2d2      	uxtb	r2, r2
 8017922:	4611      	mov	r1, r2
 8017924:	2001      	movs	r0, #1
 8017926:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	7cdb      	ldrb	r3, [r3, #19]
 801792c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017930:	6939      	ldr	r1, [r7, #16]
 8017932:	4618      	mov	r0, r3
 8017934:	f7ff fa46 	bl	8016dc4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	7bfa      	ldrb	r2, [r7, #15]
 801793c:	701a      	strb	r2, [r3, #0]
    return true;
 801793e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017940:	4618      	mov	r0, r3
 8017942:	371c      	adds	r7, #28
 8017944:	46bd      	mov	sp, r7
 8017946:	bd90      	pop	{r4, r7, pc}
 8017948:	0801dc3c 	.word	0x0801dc3c
 801794c:	000927c0 	.word	0x000927c0
 8017950:	370870a0 	.word	0x370870a0
 8017954:	0801dbb8 	.word	0x0801dbb8
 8017958:	0801dc2c 	.word	0x0801dc2c
 801795c:	0801dc1c 	.word	0x0801dc1c

08017960 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017960:	b590      	push	{r4, r7, lr}
 8017962:	b093      	sub	sp, #76	; 0x4c
 8017964:	af0a      	add	r7, sp, #40	; 0x28
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	60b9      	str	r1, [r7, #8]
 801796a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017972:	461a      	mov	r2, r3
 8017974:	4b49      	ldr	r3, [pc, #292]	; (8017a9c <RegionUS915TxConfig+0x13c>)
 8017976:	5c9b      	ldrb	r3, [r3, r2]
 8017978:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017980:	4b47      	ldr	r3, [pc, #284]	; (8017aa0 <RegionUS915TxConfig+0x140>)
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	4b47      	ldr	r3, [pc, #284]	; (8017aa4 <RegionUS915TxConfig+0x144>)
 8017986:	6819      	ldr	r1, [r3, #0]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	781b      	ldrb	r3, [r3, #0]
 801798c:	461c      	mov	r4, r3
 801798e:	4623      	mov	r3, r4
 8017990:	005b      	lsls	r3, r3, #1
 8017992:	4423      	add	r3, r4
 8017994:	009b      	lsls	r3, r3, #2
 8017996:	440b      	add	r3, r1
 8017998:	3309      	adds	r3, #9
 801799a:	781b      	ldrb	r3, [r3, #0]
 801799c:	4619      	mov	r1, r3
 801799e:	460b      	mov	r3, r1
 80179a0:	005b      	lsls	r3, r3, #1
 80179a2:	440b      	add	r3, r1
 80179a4:	00db      	lsls	r3, r3, #3
 80179a6:	4413      	add	r3, r2
 80179a8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80179b2:	4b3c      	ldr	r3, [pc, #240]	; (8017aa4 <RegionUS915TxConfig+0x144>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80179ba:	f7ff fa4d 	bl	8016e58 <LimitTxPower>
 80179be:	4603      	mov	r3, r0
 80179c0:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179c8:	4937      	ldr	r1, [pc, #220]	; (8017aa8 <RegionUS915TxConfig+0x148>)
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7ff f9dc 	bl	8016d88 <RegionCommonGetBandwidth>
 80179d0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80179d2:	2300      	movs	r3, #0
 80179d4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80179d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80179da:	f04f 0200 	mov.w	r2, #0
 80179de:	4933      	ldr	r1, [pc, #204]	; (8017aac <RegionUS915TxConfig+0x14c>)
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7ff f82d 	bl	8016a40 <RegionCommonComputeTxPower>
 80179e6:	4603      	mov	r3, r0
 80179e8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80179ea:	4b31      	ldr	r3, [pc, #196]	; (8017ab0 <RegionUS915TxConfig+0x150>)
 80179ec:	68da      	ldr	r2, [r3, #12]
 80179ee:	4b2d      	ldr	r3, [pc, #180]	; (8017aa4 <RegionUS915TxConfig+0x144>)
 80179f0:	6819      	ldr	r1, [r3, #0]
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	4618      	mov	r0, r3
 80179f8:	4603      	mov	r3, r0
 80179fa:	005b      	lsls	r3, r3, #1
 80179fc:	4403      	add	r3, r0
 80179fe:	009b      	lsls	r3, r3, #2
 8017a00:	440b      	add	r3, r1
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	4618      	mov	r0, r3
 8017a06:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017a08:	4b29      	ldr	r3, [pc, #164]	; (8017ab0 <RegionUS915TxConfig+0x150>)
 8017a0a:	69dc      	ldr	r4, [r3, #28]
 8017a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017a10:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017a14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017a18:	9208      	str	r2, [sp, #32]
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	9207      	str	r2, [sp, #28]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	9206      	str	r2, [sp, #24]
 8017a22:	2200      	movs	r2, #0
 8017a24:	9205      	str	r2, [sp, #20]
 8017a26:	2201      	movs	r2, #1
 8017a28:	9204      	str	r2, [sp, #16]
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	9203      	str	r2, [sp, #12]
 8017a2e:	2208      	movs	r2, #8
 8017a30:	9202      	str	r2, [sp, #8]
 8017a32:	2201      	movs	r2, #1
 8017a34:	9201      	str	r2, [sp, #4]
 8017a36:	9300      	str	r3, [sp, #0]
 8017a38:	69bb      	ldr	r3, [r7, #24]
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	2001      	movs	r0, #1
 8017a3e:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017a40:	4b18      	ldr	r3, [pc, #96]	; (8017aa4 <RegionUS915TxConfig+0x144>)
 8017a42:	681a      	ldr	r2, [r3, #0]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	4619      	mov	r1, r3
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	005b      	lsls	r3, r3, #1
 8017a4e:	440b      	add	r3, r1
 8017a50:	009b      	lsls	r3, r3, #2
 8017a52:	4413      	add	r3, r2
 8017a54:	681a      	ldr	r2, [r3, #0]
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a5c:	4619      	mov	r1, r3
 8017a5e:	4610      	mov	r0, r2
 8017a60:	f7ff f9e2 	bl	8016e28 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8017a64:	4b12      	ldr	r3, [pc, #72]	; (8017ab0 <RegionUS915TxConfig+0x150>)
 8017a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	8992      	ldrh	r2, [r2, #12]
 8017a6c:	b2d2      	uxtb	r2, r2
 8017a6e:	4611      	mov	r1, r2
 8017a70:	2001      	movs	r0, #1
 8017a72:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	899b      	ldrh	r3, [r3, #12]
 8017a7e:	4619      	mov	r1, r3
 8017a80:	4610      	mov	r0, r2
 8017a82:	f7ff fa63 	bl	8016f4c <GetTimeOnAir>
 8017a86:	4602      	mov	r2, r0
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	7fba      	ldrb	r2, [r7, #30]
 8017a90:	701a      	strb	r2, [r3, #0]
    return true;
 8017a92:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3724      	adds	r7, #36	; 0x24
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd90      	pop	{r4, r7, pc}
 8017a9c:	0801dbb8 	.word	0x0801dbb8
 8017aa0:	200019e0 	.word	0x200019e0
 8017aa4:	200019dc 	.word	0x200019dc
 8017aa8:	0801dbc8 	.word	0x0801dbc8
 8017aac:	41f00000 	.word	0x41f00000
 8017ab0:	0801dc3c 	.word	0x0801dc3c

08017ab4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017ab4:	b590      	push	{r4, r7, lr}
 8017ab6:	b097      	sub	sp, #92	; 0x5c
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	607a      	str	r2, [r7, #4]
 8017ac0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017ac2:	2307      	movs	r3, #7
 8017ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017ac8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017acc:	2200      	movs	r2, #0
 8017ace:	601a      	str	r2, [r3, #0]
 8017ad0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8017ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	601a      	str	r2, [r3, #0]
 8017ae6:	605a      	str	r2, [r3, #4]
 8017ae8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017aea:	4b97      	ldr	r3, [pc, #604]	; (8017d48 <RegionUS915LinkAdrReq+0x294>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8017af2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017af6:	2206      	movs	r2, #6
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fe fcb5 	bl	8016468 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017afe:	e11b      	b.n	8017d38 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	685a      	ldr	r2, [r3, #4]
 8017b04:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8017b08:	4413      	add	r3, r2
 8017b0a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017b0e:	4611      	mov	r1, r2
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7fe fded 	bl	80166f0 <RegionCommonParseLinkAdrReq>
 8017b16:	4603      	mov	r3, r0
 8017b18:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8017b1c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 8113 	beq.w	8017d4c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017b26:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017b2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017b2e:	4413      	add	r3, r2
 8017b30:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017b34:	2307      	movs	r3, #7
 8017b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8017b3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017b3e:	2b06      	cmp	r3, #6
 8017b40:	d116      	bne.n	8017b70 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8017b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8017b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8017b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8017b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017b62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017b6e:	e0e3      	b.n	8017d38 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8017b70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017b74:	2b07      	cmp	r3, #7
 8017b76:	d112      	bne.n	8017b9e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8017b84:	2300      	movs	r3, #0
 8017b86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017b9c:	e0cc      	b.n	8017d38 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8017b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ba2:	2b05      	cmp	r3, #5
 8017ba4:	f040 80bf 	bne.w	8017d26 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8017ba8:	2301      	movs	r3, #1
 8017baa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017bba:	e0ae      	b.n	8017d1a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8017bbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017bc0:	b2da      	uxtb	r2, r3
 8017bc2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017bc6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017bca:	fa01 f303 	lsl.w	r3, r1, r3
 8017bce:	4013      	ands	r3, r2
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d04d      	beq.n	8017c70 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8017bd4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017bd8:	f003 0301 	and.w	r3, r3, #1
 8017bdc:	b2db      	uxtb	r3, r3
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d120      	bne.n	8017c24 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8017be2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017be6:	005b      	lsls	r3, r3, #1
 8017be8:	3358      	adds	r3, #88	; 0x58
 8017bea:	443b      	add	r3, r7
 8017bec:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017bf0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017bf4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8017bf8:	b292      	uxth	r2, r2
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	3358      	adds	r3, #88	; 0x58
 8017bfe:	443b      	add	r3, r7
 8017c00:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017c04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017c08:	b21a      	sxth	r2, r3
 8017c0a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017c0e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c12:	fa01 f303 	lsl.w	r3, r1, r3
 8017c16:	b21b      	sxth	r3, r3
 8017c18:	4313      	orrs	r3, r2
 8017c1a:	b21b      	sxth	r3, r3
 8017c1c:	b29b      	uxth	r3, r3
 8017c1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017c22:	e075      	b.n	8017d10 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8017c24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c28:	005b      	lsls	r3, r3, #1
 8017c2a:	3358      	adds	r3, #88	; 0x58
 8017c2c:	443b      	add	r3, r7
 8017c2e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017c32:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c36:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8017c3a:	b292      	uxth	r2, r2
 8017c3c:	005b      	lsls	r3, r3, #1
 8017c3e:	3358      	adds	r3, #88	; 0x58
 8017c40:	443b      	add	r3, r7
 8017c42:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017c46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017c4a:	b21a      	sxth	r2, r3
 8017c4c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017c50:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c54:	fa01 f303 	lsl.w	r3, r1, r3
 8017c58:	b21b      	sxth	r3, r3
 8017c5a:	4313      	orrs	r3, r2
 8017c5c:	b21b      	sxth	r3, r3
 8017c5e:	b29b      	uxth	r3, r3
 8017c60:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017c64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c68:	3301      	adds	r3, #1
 8017c6a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8017c6e:	e04f      	b.n	8017d10 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8017c70:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c74:	f003 0301 	and.w	r3, r3, #1
 8017c78:	b2db      	uxtb	r3, r3
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d122      	bne.n	8017cc4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8017c7e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	3358      	adds	r3, #88	; 0x58
 8017c86:	443b      	add	r3, r7
 8017c88:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017c8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c90:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017c94:	b292      	uxth	r2, r2
 8017c96:	005b      	lsls	r3, r3, #1
 8017c98:	3358      	adds	r3, #88	; 0x58
 8017c9a:	443b      	add	r3, r7
 8017c9c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017ca0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017ca4:	b21a      	sxth	r2, r3
 8017ca6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017caa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017cae:	fa01 f303 	lsl.w	r3, r1, r3
 8017cb2:	b21b      	sxth	r3, r3
 8017cb4:	43db      	mvns	r3, r3
 8017cb6:	b21b      	sxth	r3, r3
 8017cb8:	4013      	ands	r3, r2
 8017cba:	b21b      	sxth	r3, r3
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017cc2:	e025      	b.n	8017d10 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8017cc4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017cc8:	005b      	lsls	r3, r3, #1
 8017cca:	3358      	adds	r3, #88	; 0x58
 8017ccc:	443b      	add	r3, r7
 8017cce:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017cd2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017cd6:	b2d2      	uxtb	r2, r2
 8017cd8:	b292      	uxth	r2, r2
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	3358      	adds	r3, #88	; 0x58
 8017cde:	443b      	add	r3, r7
 8017ce0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017ce4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017ce8:	b21a      	sxth	r2, r3
 8017cea:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017cee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8017cf6:	b21b      	sxth	r3, r3
 8017cf8:	43db      	mvns	r3, r3
 8017cfa:	b21b      	sxth	r3, r3
 8017cfc:	4013      	ands	r3, r2
 8017cfe:	b21b      	sxth	r3, r3
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017d06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017d0a:	3301      	adds	r3, #1
 8017d0c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017d10:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017d14:	3301      	adds	r3, #1
 8017d16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017d1a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017d1e:	2b07      	cmp	r3, #7
 8017d20:	f67f af4c 	bls.w	8017bbc <RegionUS915LinkAdrReq+0x108>
 8017d24:	e008      	b.n	8017d38 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8017d26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017d2a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017d2e:	005b      	lsls	r3, r3, #1
 8017d30:	3358      	adds	r3, #88	; 0x58
 8017d32:	443b      	add	r3, r7
 8017d34:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	7a1b      	ldrb	r3, [r3, #8]
 8017d3c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017d40:	429a      	cmp	r2, r3
 8017d42:	f4ff aedd 	bcc.w	8017b00 <RegionUS915LinkAdrReq+0x4c>
 8017d46:	e002      	b.n	8017d4e <RegionUS915LinkAdrReq+0x29a>
 8017d48:	200019dc 	.word	0x200019dc
            break; // break loop, since no more request has been found
 8017d4c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8017d4e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017d52:	2b03      	cmp	r3, #3
 8017d54:	dc0f      	bgt.n	8017d76 <RegionUS915LinkAdrReq+0x2c2>
 8017d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d5a:	2204      	movs	r2, #4
 8017d5c:	2100      	movs	r1, #0
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7fe fb56 	bl	8016410 <RegionCommonCountChannels>
 8017d64:	4603      	mov	r3, r0
 8017d66:	2b01      	cmp	r3, #1
 8017d68:	d805      	bhi.n	8017d76 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8017d6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d6e:	f023 0301 	bic.w	r3, r3, #1
 8017d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017d76:	2302      	movs	r3, #2
 8017d78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	7a5b      	ldrb	r3, [r3, #9]
 8017d80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8017d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7ff f90f 	bl	8016fac <RegionUS915GetPhyParam>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8017d92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d96:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	7a9b      	ldrb	r3, [r3, #10]
 8017d9c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017d9e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017da2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017da4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8017da8:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017daa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8017dae:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017db6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017dbe:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	7b5b      	ldrb	r3, [r3, #13]
 8017dc4:	b25b      	sxtb	r3, r3
 8017dc6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8017dc8:	2348      	movs	r3, #72	; 0x48
 8017dca:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8017dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017dd2:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dd6:	b25b      	sxtb	r3, r3
 8017dd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8017ddc:	2304      	movs	r3, #4
 8017dde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017de2:	4b3f      	ldr	r3, [pc, #252]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8017de8:	230e      	movs	r3, #14
 8017dea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8017dee:	2300      	movs	r3, #0
 8017df0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017dfa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8017dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017e02:	1c9a      	adds	r2, r3, #2
 8017e04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017e08:	1c59      	adds	r1, r3, #1
 8017e0a:	f107 0014 	add.w	r0, r7, #20
 8017e0e:	4623      	mov	r3, r4
 8017e10:	f7fe fcbf 	bl	8016792 <RegionCommonLinkAdrReqVerifyParams>
 8017e14:	4603      	mov	r3, r0
 8017e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017e1e:	2b07      	cmp	r3, #7
 8017e20:	d147      	bne.n	8017eb2 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8017e22:	4b2f      	ldr	r3, [pc, #188]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017e2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017e2e:	2206      	movs	r2, #6
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7fe fb19 	bl	8016468 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8017e36:	4b2b      	ldr	r3, [pc, #172]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	8819      	ldrh	r1, [r3, #0]
 8017e3c:	4b28      	ldr	r3, [pc, #160]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017e44:	4b27      	ldr	r3, [pc, #156]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	400a      	ands	r2, r1
 8017e4a:	b292      	uxth	r2, r2
 8017e4c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8017e4e:	4b25      	ldr	r3, [pc, #148]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	8859      	ldrh	r1, [r3, #2]
 8017e54:	4b22      	ldr	r3, [pc, #136]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8017e5c:	4b21      	ldr	r3, [pc, #132]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	400a      	ands	r2, r1
 8017e62:	b292      	uxth	r2, r2
 8017e64:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8017e66:	4b1f      	ldr	r3, [pc, #124]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	8899      	ldrh	r1, [r3, #4]
 8017e6c:	4b1c      	ldr	r3, [pc, #112]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8017e74:	4b1b      	ldr	r3, [pc, #108]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	400a      	ands	r2, r1
 8017e7a:	b292      	uxth	r2, r2
 8017e7c:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8017e7e:	4b19      	ldr	r3, [pc, #100]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	88d9      	ldrh	r1, [r3, #6]
 8017e84:	4b16      	ldr	r3, [pc, #88]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8017e8c:	4b15      	ldr	r3, [pc, #84]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	400a      	ands	r2, r1
 8017e92:	b292      	uxth	r2, r2
 8017e94:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017e96:	4b12      	ldr	r3, [pc, #72]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	4b12      	ldr	r3, [pc, #72]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8017ea2:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8017ea4:	4b0e      	ldr	r3, [pc, #56]	; (8017ee0 <RegionUS915LinkAdrReq+0x42c>)
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	4b0e      	ldr	r3, [pc, #56]	; (8017ee4 <RegionUS915LinkAdrReq+0x430>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8017eb0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017eb2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017eba:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017ec2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ecc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017ed0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8017ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	375c      	adds	r7, #92	; 0x5c
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd90      	pop	{r4, r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	200019dc 	.word	0x200019dc
 8017ee4:	200019d8 	.word	0x200019d8

08017ee8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b084      	sub	sp, #16
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017ef0:	2307      	movs	r3, #7
 8017ef2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7fe ffe3 	bl	8016ec4 <VerifyRfFreq>
 8017efe:	4603      	mov	r3, r0
 8017f00:	f083 0301 	eor.w	r3, r3, #1
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d003      	beq.n	8017f12 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017f0a:	7bfb      	ldrb	r3, [r7, #15]
 8017f0c:	f023 0301 	bic.w	r3, r3, #1
 8017f10:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f993 3000 	ldrsb.w	r3, [r3]
 8017f18:	220d      	movs	r2, #13
 8017f1a:	2108      	movs	r1, #8
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f7fe fa26 	bl	801636e <RegionCommonValueInRange>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d103      	bne.n	8017f30 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017f28:	7bfb      	ldrb	r3, [r7, #15]
 8017f2a:	f023 0302 	bic.w	r3, r3, #2
 8017f2e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f993 3000 	ldrsb.w	r3, [r3]
 8017f36:	2207      	movs	r2, #7
 8017f38:	2105      	movs	r1, #5
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f7fe fa17 	bl	801636e <RegionCommonValueInRange>
 8017f40:	4603      	mov	r3, r0
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d004      	beq.n	8017f50 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017f4c:	2b0d      	cmp	r3, #13
 8017f4e:	dd03      	ble.n	8017f58 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8017f50:	7bfb      	ldrb	r3, [r7, #15]
 8017f52:	f023 0302 	bic.w	r3, r3, #2
 8017f56:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f5e:	2203      	movs	r2, #3
 8017f60:	2100      	movs	r1, #0
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7fe fa03 	bl	801636e <RegionCommonValueInRange>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d103      	bne.n	8017f76 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017f6e:	7bfb      	ldrb	r3, [r7, #15]
 8017f70:	f023 0304 	bic.w	r3, r3, #4
 8017f74:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8017f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f78:	4618      	mov	r0, r3
 8017f7a:	3710      	adds	r7, #16
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}

08017f80 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bc80      	pop	{r7}
 8017f94:	4770      	bx	lr

08017f96 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017f96:	b480      	push	{r7}
 8017f98:	b083      	sub	sp, #12
 8017f9a:	af00      	add	r7, sp, #0
 8017f9c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	370c      	adds	r7, #12
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bc80      	pop	{r7}
 8017faa:	4770      	bx	lr

08017fac <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017fac:	b480      	push	{r7}
 8017fae:	b083      	sub	sp, #12
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	370c      	adds	r7, #12
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bc80      	pop	{r7}
 8017fc0:	4770      	bx	lr
	...

08017fc4 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017fc4:	b480      	push	{r7}
 8017fc6:	b083      	sub	sp, #12
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	4603      	mov	r3, r0
 8017fcc:	460a      	mov	r2, r1
 8017fce:	71fb      	strb	r3, [r7, #7]
 8017fd0:	4613      	mov	r3, r2
 8017fd2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8017fd4:	79bb      	ldrb	r3, [r7, #6]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d106      	bne.n	8017fe8 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017fda:	4b13      	ldr	r3, [pc, #76]	; (8018028 <RegionUS915AlternateDr+0x64>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	7b5a      	ldrb	r2, [r3, #13]
 8017fe0:	3201      	adds	r2, #1
 8017fe2:	b2d2      	uxtb	r2, r2
 8017fe4:	735a      	strb	r2, [r3, #13]
 8017fe6:	e005      	b.n	8017ff4 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017fe8:	4b0f      	ldr	r3, [pc, #60]	; (8018028 <RegionUS915AlternateDr+0x64>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	7b5a      	ldrb	r2, [r3, #13]
 8017fee:	3a01      	subs	r2, #1
 8017ff0:	b2d2      	uxtb	r2, r2
 8017ff2:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017ff4:	4b0c      	ldr	r3, [pc, #48]	; (8018028 <RegionUS915AlternateDr+0x64>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	7b5a      	ldrb	r2, [r3, #13]
 8017ffa:	4b0c      	ldr	r3, [pc, #48]	; (801802c <RegionUS915AlternateDr+0x68>)
 8017ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8018000:	0859      	lsrs	r1, r3, #1
 8018002:	460b      	mov	r3, r1
 8018004:	00db      	lsls	r3, r3, #3
 8018006:	440b      	add	r3, r1
 8018008:	1ad3      	subs	r3, r2, r3
 801800a:	b2db      	uxtb	r3, r3
 801800c:	2b00      	cmp	r3, #0
 801800e:	d102      	bne.n	8018016 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018010:	2304      	movs	r3, #4
 8018012:	71fb      	strb	r3, [r7, #7]
 8018014:	e001      	b.n	801801a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018016:	2300      	movs	r3, #0
 8018018:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801801e:	4618      	mov	r0, r3
 8018020:	370c      	adds	r7, #12
 8018022:	46bd      	mov	sp, r7
 8018024:	bc80      	pop	{r7}
 8018026:	4770      	bx	lr
 8018028:	200019d8 	.word	0x200019d8
 801802c:	38e38e39 	.word	0x38e38e39

08018030 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b0a8      	sub	sp, #160	; 0xa0
 8018034:	af02      	add	r7, sp, #8
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	607a      	str	r2, [r7, #4]
 801803c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801803e:	2300      	movs	r3, #0
 8018040:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018044:	2300      	movs	r3, #0
 8018046:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801804a:	2300      	movs	r3, #0
 801804c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801804e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018052:	2244      	movs	r2, #68	; 0x44
 8018054:	2100      	movs	r1, #0
 8018056:	4618      	mov	r0, r3
 8018058:	f004 ff32 	bl	801cec0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801805c:	230c      	movs	r3, #12
 801805e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018062:	4b67      	ldr	r3, [pc, #412]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	2204      	movs	r2, #4
 8018068:	2100      	movs	r1, #0
 801806a:	4618      	mov	r0, r3
 801806c:	f7fe f9d0 	bl	8016410 <RegionCommonCountChannels>
 8018070:	4603      	mov	r3, r0
 8018072:	2b00      	cmp	r3, #0
 8018074:	d10e      	bne.n	8018094 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018076:	4b62      	ldr	r3, [pc, #392]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	4618      	mov	r0, r3
 801807c:	4b61      	ldr	r3, [pc, #388]	; (8018204 <RegionUS915NextChannel+0x1d4>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018084:	2204      	movs	r2, #4
 8018086:	4619      	mov	r1, r3
 8018088:	f7fe f9ee 	bl	8016468 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801808c:	4b5c      	ldr	r3, [pc, #368]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	2200      	movs	r2, #0
 8018092:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801809a:	2b03      	cmp	r3, #3
 801809c:	dd0c      	ble.n	80180b8 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801809e:	4b58      	ldr	r3, [pc, #352]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	891b      	ldrh	r3, [r3, #8]
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d106      	bne.n	80180b8 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80180aa:	4b56      	ldr	r3, [pc, #344]	; (8018204 <RegionUS915NextChannel+0x1d4>)
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	4b54      	ldr	r3, [pc, #336]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 80180b6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	7a5b      	ldrb	r3, [r3, #9]
 80180bc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80180c8:	4b4d      	ldr	r3, [pc, #308]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80180ce:	4b4d      	ldr	r3, [pc, #308]	; (8018204 <RegionUS915NextChannel+0x1d4>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80180d4:	4b4c      	ldr	r3, [pc, #304]	; (8018208 <RegionUS915NextChannel+0x1d8>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80180da:	2348      	movs	r3, #72	; 0x48
 80180dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 80180de:	2300      	movs	r3, #0
 80180e0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	7a9b      	ldrb	r3, [r3, #10]
 80180f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80180f6:	2301      	movs	r3, #1
 80180f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80180fc:	f107 0314 	add.w	r3, r7, #20
 8018100:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018102:	68fa      	ldr	r2, [r7, #12]
 8018104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018108:	320c      	adds	r2, #12
 801810a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801810e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	7d1b      	ldrb	r3, [r3, #20]
 8018116:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	8adb      	ldrh	r3, [r3, #22]
 8018124:	4619      	mov	r1, r3
 8018126:	4610      	mov	r0, r2
 8018128:	f7fe ff10 	bl	8016f4c <GetTimeOnAir>
 801812c:	4603      	mov	r3, r0
 801812e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018130:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018134:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018138:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	9301      	str	r3, [sp, #4]
 8018140:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018144:	9300      	str	r3, [sp, #0]
 8018146:	460b      	mov	r3, r1
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	f7fe fd68 	bl	8016c1e <RegionCommonIdentifyChannels>
 801814e:	4603      	mov	r3, r0
 8018150:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018154:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018158:	2b00      	cmp	r3, #0
 801815a:	d14a      	bne.n	80181f2 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	7a5b      	ldrb	r3, [r3, #9]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d00e      	beq.n	8018182 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018164:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018168:	3b01      	subs	r3, #1
 801816a:	4619      	mov	r1, r3
 801816c:	2000      	movs	r0, #0
 801816e:	f000 f89f 	bl	80182b0 <randr>
 8018172:	4603      	mov	r3, r0
 8018174:	3398      	adds	r3, #152	; 0x98
 8018176:	443b      	add	r3, r7
 8018178:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	701a      	strb	r2, [r3, #0]
 8018180:	e02e      	b.n	80181e0 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d10e      	bne.n	80181aa <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801818c:	4b1c      	ldr	r3, [pc, #112]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018192:	4b1b      	ldr	r3, [pc, #108]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 8018194:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018196:	330c      	adds	r3, #12
 8018198:	68ba      	ldr	r2, [r7, #8]
 801819a:	4619      	mov	r1, r3
 801819c:	f7fd fea2 	bl	8015ee4 <RegionBaseUSComputeNext125kHzJoinChannel>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b03      	cmp	r3, #3
 80181a4:	d11c      	bne.n	80181e0 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80181a6:	2303      	movs	r3, #3
 80181a8:	e025      	b.n	80181f6 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80181aa:	2300      	movs	r3, #0
 80181ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80181b0:	e004      	b.n	80181bc <RegionUS915NextChannel+0x18c>
                {
                    i++;
 80181b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80181b6:	3301      	adds	r3, #1
 80181b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80181bc:	4b10      	ldr	r3, [pc, #64]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	891b      	ldrh	r3, [r3, #8]
 80181c2:	b2da      	uxtb	r2, r3
 80181c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80181c8:	fa42 f303 	asr.w	r3, r2, r3
 80181cc:	f003 0301 	and.w	r3, r3, #1
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d0ee      	beq.n	80181b2 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 80181d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80181d8:	3340      	adds	r3, #64	; 0x40
 80181da:	b2da      	uxtb	r2, r3
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80181e0:	4b07      	ldr	r3, [pc, #28]	; (8018200 <RegionUS915NextChannel+0x1d0>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	4618      	mov	r0, r3
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	2248      	movs	r2, #72	; 0x48
 80181ec:	4619      	mov	r1, r3
 80181ee:	f7fe f8db 	bl	80163a8 <RegionCommonChanDisable>
    }
    return status;
 80181f2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3798      	adds	r7, #152	; 0x98
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}
 80181fe:	bf00      	nop
 8018200:	200019d8 	.word	0x200019d8
 8018204:	200019dc 	.word	0x200019dc
 8018208:	200019e0 	.word	0x200019e0

0801820c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801820c:	b480      	push	{r7}
 801820e:	b085      	sub	sp, #20
 8018210:	af00      	add	r7, sp, #0
 8018212:	4603      	mov	r3, r0
 8018214:	71fb      	strb	r3, [r7, #7]
 8018216:	460b      	mov	r3, r1
 8018218:	71bb      	strb	r3, [r7, #6]
 801821a:	4613      	mov	r3, r2
 801821c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801821e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018222:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018226:	4909      	ldr	r1, [pc, #36]	; (801824c <RegionUS915ApplyDrOffset+0x40>)
 8018228:	0092      	lsls	r2, r2, #2
 801822a:	440a      	add	r2, r1
 801822c:	4413      	add	r3, r2
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018236:	2b00      	cmp	r3, #0
 8018238:	da01      	bge.n	801823e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801823a:	2300      	movs	r3, #0
 801823c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801823e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018240:	4618      	mov	r0, r3
 8018242:	3714      	adds	r7, #20
 8018244:	46bd      	mov	sp, r7
 8018246:	bc80      	pop	{r7}
 8018248:	4770      	bx	lr
 801824a:	bf00      	nop
 801824c:	0801dc08 	.word	0x0801dc08

08018250 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018250:	b480      	push	{r7}
 8018252:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018254:	4b0d      	ldr	r3, [pc, #52]	; (801828c <rand1+0x3c>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	4a0d      	ldr	r2, [pc, #52]	; (8018290 <rand1+0x40>)
 801825a:	fb02 f303 	mul.w	r3, r2, r3
 801825e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018262:	3339      	adds	r3, #57	; 0x39
 8018264:	4a09      	ldr	r2, [pc, #36]	; (801828c <rand1+0x3c>)
 8018266:	6013      	str	r3, [r2, #0]
 8018268:	4b08      	ldr	r3, [pc, #32]	; (801828c <rand1+0x3c>)
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	2303      	movs	r3, #3
 801826e:	fba3 1302 	umull	r1, r3, r3, r2
 8018272:	1ad1      	subs	r1, r2, r3
 8018274:	0849      	lsrs	r1, r1, #1
 8018276:	440b      	add	r3, r1
 8018278:	0f99      	lsrs	r1, r3, #30
 801827a:	460b      	mov	r3, r1
 801827c:	07db      	lsls	r3, r3, #31
 801827e:	1a5b      	subs	r3, r3, r1
 8018280:	1ad1      	subs	r1, r2, r3
 8018282:	460b      	mov	r3, r1
}
 8018284:	4618      	mov	r0, r3
 8018286:	46bd      	mov	sp, r7
 8018288:	bc80      	pop	{r7}
 801828a:	4770      	bx	lr
 801828c:	20000120 	.word	0x20000120
 8018290:	41c64e6d 	.word	0x41c64e6d

08018294 <srand1>:

void srand1( uint32_t seed )
{
 8018294:	b480      	push	{r7}
 8018296:	b083      	sub	sp, #12
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
    next = seed;
 801829c:	4a03      	ldr	r2, [pc, #12]	; (80182ac <srand1+0x18>)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6013      	str	r3, [r2, #0]
}
 80182a2:	bf00      	nop
 80182a4:	370c      	adds	r7, #12
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bc80      	pop	{r7}
 80182aa:	4770      	bx	lr
 80182ac:	20000120 	.word	0x20000120

080182b0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b082      	sub	sp, #8
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80182ba:	f7ff ffc9 	bl	8018250 <rand1>
 80182be:	4602      	mov	r2, r0
 80182c0:	6839      	ldr	r1, [r7, #0]
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	1acb      	subs	r3, r1, r3
 80182c6:	3301      	adds	r3, #1
 80182c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80182cc:	fb01 f303 	mul.w	r3, r1, r3
 80182d0:	1ad2      	subs	r2, r2, r3
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	4413      	add	r3, r2
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	3708      	adds	r7, #8
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}

080182de <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80182de:	b480      	push	{r7}
 80182e0:	b085      	sub	sp, #20
 80182e2:	af00      	add	r7, sp, #0
 80182e4:	60f8      	str	r0, [r7, #12]
 80182e6:	60b9      	str	r1, [r7, #8]
 80182e8:	4613      	mov	r3, r2
 80182ea:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80182ec:	e007      	b.n	80182fe <memcpy1+0x20>
    {
        *dst++ = *src++;
 80182ee:	68ba      	ldr	r2, [r7, #8]
 80182f0:	1c53      	adds	r3, r2, #1
 80182f2:	60bb      	str	r3, [r7, #8]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	1c59      	adds	r1, r3, #1
 80182f8:	60f9      	str	r1, [r7, #12]
 80182fa:	7812      	ldrb	r2, [r2, #0]
 80182fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80182fe:	88fb      	ldrh	r3, [r7, #6]
 8018300:	1e5a      	subs	r2, r3, #1
 8018302:	80fa      	strh	r2, [r7, #6]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d1f2      	bne.n	80182ee <memcpy1+0x10>
    }
}
 8018308:	bf00      	nop
 801830a:	bf00      	nop
 801830c:	3714      	adds	r7, #20
 801830e:	46bd      	mov	sp, r7
 8018310:	bc80      	pop	{r7}
 8018312:	4770      	bx	lr

08018314 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018314:	b480      	push	{r7}
 8018316:	b085      	sub	sp, #20
 8018318:	af00      	add	r7, sp, #0
 801831a:	60f8      	str	r0, [r7, #12]
 801831c:	60b9      	str	r1, [r7, #8]
 801831e:	4613      	mov	r3, r2
 8018320:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018322:	88fb      	ldrh	r3, [r7, #6]
 8018324:	3b01      	subs	r3, #1
 8018326:	68fa      	ldr	r2, [r7, #12]
 8018328:	4413      	add	r3, r2
 801832a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801832c:	e007      	b.n	801833e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801832e:	68ba      	ldr	r2, [r7, #8]
 8018330:	1c53      	adds	r3, r2, #1
 8018332:	60bb      	str	r3, [r7, #8]
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	1e59      	subs	r1, r3, #1
 8018338:	60f9      	str	r1, [r7, #12]
 801833a:	7812      	ldrb	r2, [r2, #0]
 801833c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801833e:	88fb      	ldrh	r3, [r7, #6]
 8018340:	1e5a      	subs	r2, r3, #1
 8018342:	80fa      	strh	r2, [r7, #6]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d1f2      	bne.n	801832e <memcpyr+0x1a>
    }
}
 8018348:	bf00      	nop
 801834a:	bf00      	nop
 801834c:	3714      	adds	r7, #20
 801834e:	46bd      	mov	sp, r7
 8018350:	bc80      	pop	{r7}
 8018352:	4770      	bx	lr

08018354 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018354:	b480      	push	{r7}
 8018356:	b083      	sub	sp, #12
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
 801835c:	460b      	mov	r3, r1
 801835e:	70fb      	strb	r3, [r7, #3]
 8018360:	4613      	mov	r3, r2
 8018362:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018364:	e004      	b.n	8018370 <memset1+0x1c>
    {
        *dst++ = value;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	1c5a      	adds	r2, r3, #1
 801836a:	607a      	str	r2, [r7, #4]
 801836c:	78fa      	ldrb	r2, [r7, #3]
 801836e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018370:	883b      	ldrh	r3, [r7, #0]
 8018372:	1e5a      	subs	r2, r3, #1
 8018374:	803a      	strh	r2, [r7, #0]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d1f5      	bne.n	8018366 <memset1+0x12>
    }
}
 801837a:	bf00      	nop
 801837c:	bf00      	nop
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	bc80      	pop	{r7}
 8018384:	4770      	bx	lr
	...

08018388 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018388:	b480      	push	{r7}
 801838a:	b085      	sub	sp, #20
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	460b      	mov	r3, r1
 8018392:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018394:	f04f 33ff 	mov.w	r3, #4294967295
 8018398:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d101      	bne.n	80183a4 <Crc32+0x1c>
    {
        return 0;
 80183a0:	2300      	movs	r3, #0
 80183a2:	e026      	b.n	80183f2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80183a4:	2300      	movs	r3, #0
 80183a6:	817b      	strh	r3, [r7, #10]
 80183a8:	e01d      	b.n	80183e6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80183aa:	897b      	ldrh	r3, [r7, #10]
 80183ac:	687a      	ldr	r2, [r7, #4]
 80183ae:	4413      	add	r3, r2
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	461a      	mov	r2, r3
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	4053      	eors	r3, r2
 80183b8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80183ba:	2300      	movs	r3, #0
 80183bc:	813b      	strh	r3, [r7, #8]
 80183be:	e00c      	b.n	80183da <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	085a      	lsrs	r2, r3, #1
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	f003 0301 	and.w	r3, r3, #1
 80183ca:	425b      	negs	r3, r3
 80183cc:	490b      	ldr	r1, [pc, #44]	; (80183fc <Crc32+0x74>)
 80183ce:	400b      	ands	r3, r1
 80183d0:	4053      	eors	r3, r2
 80183d2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80183d4:	893b      	ldrh	r3, [r7, #8]
 80183d6:	3301      	adds	r3, #1
 80183d8:	813b      	strh	r3, [r7, #8]
 80183da:	893b      	ldrh	r3, [r7, #8]
 80183dc:	2b07      	cmp	r3, #7
 80183de:	d9ef      	bls.n	80183c0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80183e0:	897b      	ldrh	r3, [r7, #10]
 80183e2:	3301      	adds	r3, #1
 80183e4:	817b      	strh	r3, [r7, #10]
 80183e6:	897a      	ldrh	r2, [r7, #10]
 80183e8:	887b      	ldrh	r3, [r7, #2]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d3dd      	bcc.n	80183aa <Crc32+0x22>
        }
    }

    return ~crc;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	43db      	mvns	r3, r3
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3714      	adds	r7, #20
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bc80      	pop	{r7}
 80183fa:	4770      	bx	lr
 80183fc:	edb88320 	.word	0xedb88320

08018400 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b084      	sub	sp, #16
 8018404:	af02      	add	r7, sp, #8
 8018406:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018408:	4a24      	ldr	r2, [pc, #144]	; (801849c <RadioInit+0x9c>)
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801840e:	4b24      	ldr	r3, [pc, #144]	; (80184a0 <RadioInit+0xa0>)
 8018410:	2200      	movs	r2, #0
 8018412:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018414:	4b22      	ldr	r3, [pc, #136]	; (80184a0 <RadioInit+0xa0>)
 8018416:	2200      	movs	r2, #0
 8018418:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801841a:	4b21      	ldr	r3, [pc, #132]	; (80184a0 <RadioInit+0xa0>)
 801841c:	2200      	movs	r2, #0
 801841e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018420:	4b1f      	ldr	r3, [pc, #124]	; (80184a0 <RadioInit+0xa0>)
 8018422:	2200      	movs	r2, #0
 8018424:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8018426:	481f      	ldr	r0, [pc, #124]	; (80184a4 <RadioInit+0xa4>)
 8018428:	f001 ff88 	bl	801a33c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801842c:	4b1c      	ldr	r3, [pc, #112]	; (80184a0 <RadioInit+0xa0>)
 801842e:	2200      	movs	r2, #0
 8018430:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018432:	4b1b      	ldr	r3, [pc, #108]	; (80184a0 <RadioInit+0xa0>)
 8018434:	2200      	movs	r2, #0
 8018436:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018438:	f002 fa16 	bl	801a868 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801843c:	2100      	movs	r1, #0
 801843e:	2000      	movs	r0, #0
 8018440:	f002 fdde 	bl	801b000 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018444:	2204      	movs	r2, #4
 8018446:	2100      	movs	r1, #0
 8018448:	2001      	movs	r0, #1
 801844a:	f002 fb9b 	bl	801ab84 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801844e:	2300      	movs	r3, #0
 8018450:	2200      	movs	r2, #0
 8018452:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018456:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801845a:	f002 facb 	bl	801a9f4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801845e:	f000 fe83 	bl	8019168 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018462:	2300      	movs	r3, #0
 8018464:	9300      	str	r3, [sp, #0]
 8018466:	4b10      	ldr	r3, [pc, #64]	; (80184a8 <RadioInit+0xa8>)
 8018468:	2200      	movs	r2, #0
 801846a:	f04f 31ff 	mov.w	r1, #4294967295
 801846e:	480f      	ldr	r0, [pc, #60]	; (80184ac <RadioInit+0xac>)
 8018470:	f003 ffdc 	bl	801c42c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018474:	2300      	movs	r3, #0
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	4b0d      	ldr	r3, [pc, #52]	; (80184b0 <RadioInit+0xb0>)
 801847a:	2200      	movs	r2, #0
 801847c:	f04f 31ff 	mov.w	r1, #4294967295
 8018480:	480c      	ldr	r0, [pc, #48]	; (80184b4 <RadioInit+0xb4>)
 8018482:	f003 ffd3 	bl	801c42c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018486:	4809      	ldr	r0, [pc, #36]	; (80184ac <RadioInit+0xac>)
 8018488:	f004 f874 	bl	801c574 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801848c:	4809      	ldr	r0, [pc, #36]	; (80184b4 <RadioInit+0xb4>)
 801848e:	f004 f871 	bl	801c574 <UTIL_TIMER_Stop>
}
 8018492:	bf00      	nop
 8018494:	3708      	adds	r7, #8
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	20001ae4 	.word	0x20001ae4
 80184a0:	20001ae8 	.word	0x20001ae8
 80184a4:	08019555 	.word	0x08019555
 80184a8:	080194dd 	.word	0x080194dd
 80184ac:	20001b44 	.word	0x20001b44
 80184b0:	080194f1 	.word	0x080194f1
 80184b4:	20001b5c 	.word	0x20001b5c

080184b8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80184bc:	f001 ff80 	bl	801a3c0 <SUBGRF_GetOperatingMode>
 80184c0:	4603      	mov	r3, r0
 80184c2:	2b07      	cmp	r3, #7
 80184c4:	d00a      	beq.n	80184dc <RadioGetStatus+0x24>
 80184c6:	2b07      	cmp	r3, #7
 80184c8:	dc0a      	bgt.n	80184e0 <RadioGetStatus+0x28>
 80184ca:	2b04      	cmp	r3, #4
 80184cc:	d002      	beq.n	80184d4 <RadioGetStatus+0x1c>
 80184ce:	2b05      	cmp	r3, #5
 80184d0:	d002      	beq.n	80184d8 <RadioGetStatus+0x20>
 80184d2:	e005      	b.n	80184e0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80184d4:	2302      	movs	r3, #2
 80184d6:	e004      	b.n	80184e2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80184d8:	2301      	movs	r3, #1
 80184da:	e002      	b.n	80184e2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80184dc:	2303      	movs	r3, #3
 80184de:	e000      	b.n	80184e2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80184e0:	2300      	movs	r3, #0
    }
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	bd80      	pop	{r7, pc}
	...

080184e8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b082      	sub	sp, #8
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	4603      	mov	r3, r0
 80184f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80184f2:	4a2a      	ldr	r2, [pc, #168]	; (801859c <RadioSetModem+0xb4>)
 80184f4:	79fb      	ldrb	r3, [r7, #7]
 80184f6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80184f8:	79fb      	ldrb	r3, [r7, #7]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f003 f943 	bl	801b786 <RFW_SetRadioModem>
    switch( modem )
 8018500:	79fb      	ldrb	r3, [r7, #7]
 8018502:	2b05      	cmp	r3, #5
 8018504:	d80e      	bhi.n	8018524 <RadioSetModem+0x3c>
 8018506:	a201      	add	r2, pc, #4	; (adr r2, 801850c <RadioSetModem+0x24>)
 8018508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801850c:	08018533 	.word	0x08018533
 8018510:	08018541 	.word	0x08018541
 8018514:	08018525 	.word	0x08018525
 8018518:	08018567 	.word	0x08018567
 801851c:	08018575 	.word	0x08018575
 8018520:	08018583 	.word	0x08018583
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018524:	2003      	movs	r0, #3
 8018526:	f002 fb07 	bl	801ab38 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801852a:	4b1c      	ldr	r3, [pc, #112]	; (801859c <RadioSetModem+0xb4>)
 801852c:	2200      	movs	r2, #0
 801852e:	735a      	strb	r2, [r3, #13]
        break;
 8018530:	e02f      	b.n	8018592 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018532:	2000      	movs	r0, #0
 8018534:	f002 fb00 	bl	801ab38 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018538:	4b18      	ldr	r3, [pc, #96]	; (801859c <RadioSetModem+0xb4>)
 801853a:	2200      	movs	r2, #0
 801853c:	735a      	strb	r2, [r3, #13]
        break;
 801853e:	e028      	b.n	8018592 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018540:	2001      	movs	r0, #1
 8018542:	f002 faf9 	bl	801ab38 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018546:	4b15      	ldr	r3, [pc, #84]	; (801859c <RadioSetModem+0xb4>)
 8018548:	7b5a      	ldrb	r2, [r3, #13]
 801854a:	4b14      	ldr	r3, [pc, #80]	; (801859c <RadioSetModem+0xb4>)
 801854c:	7b1b      	ldrb	r3, [r3, #12]
 801854e:	429a      	cmp	r2, r3
 8018550:	d01e      	beq.n	8018590 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018552:	4b12      	ldr	r3, [pc, #72]	; (801859c <RadioSetModem+0xb4>)
 8018554:	7b1a      	ldrb	r2, [r3, #12]
 8018556:	4b11      	ldr	r3, [pc, #68]	; (801859c <RadioSetModem+0xb4>)
 8018558:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801855a:	4b10      	ldr	r3, [pc, #64]	; (801859c <RadioSetModem+0xb4>)
 801855c:	7b5b      	ldrb	r3, [r3, #13]
 801855e:	4618      	mov	r0, r3
 8018560:	f000 ff86 	bl	8019470 <RadioSetPublicNetwork>
        }
        break;
 8018564:	e014      	b.n	8018590 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018566:	2002      	movs	r0, #2
 8018568:	f002 fae6 	bl	801ab38 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801856c:	4b0b      	ldr	r3, [pc, #44]	; (801859c <RadioSetModem+0xb4>)
 801856e:	2200      	movs	r2, #0
 8018570:	735a      	strb	r2, [r3, #13]
        break;
 8018572:	e00e      	b.n	8018592 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018574:	2002      	movs	r0, #2
 8018576:	f002 fadf 	bl	801ab38 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801857a:	4b08      	ldr	r3, [pc, #32]	; (801859c <RadioSetModem+0xb4>)
 801857c:	2200      	movs	r2, #0
 801857e:	735a      	strb	r2, [r3, #13]
        break;
 8018580:	e007      	b.n	8018592 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018582:	2000      	movs	r0, #0
 8018584:	f002 fad8 	bl	801ab38 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018588:	4b04      	ldr	r3, [pc, #16]	; (801859c <RadioSetModem+0xb4>)
 801858a:	2200      	movs	r2, #0
 801858c:	735a      	strb	r2, [r3, #13]
        break;
 801858e:	e000      	b.n	8018592 <RadioSetModem+0xaa>
        break;
 8018590:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018592:	bf00      	nop
 8018594:	3708      	adds	r7, #8
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	20001ae8 	.word	0x20001ae8

080185a0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80185a8:	6878      	ldr	r0, [r7, #4]
 80185aa:	f002 fa7f 	bl	801aaac <SUBGRF_SetRfFrequency>
}
 80185ae:	bf00      	nop
 80185b0:	3708      	adds	r7, #8
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}

080185b6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80185b6:	b580      	push	{r7, lr}
 80185b8:	b090      	sub	sp, #64	; 0x40
 80185ba:	af0a      	add	r7, sp, #40	; 0x28
 80185bc:	60f8      	str	r0, [r7, #12]
 80185be:	60b9      	str	r1, [r7, #8]
 80185c0:	603b      	str	r3, [r7, #0]
 80185c2:	4613      	mov	r3, r2
 80185c4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80185c6:	2301      	movs	r3, #1
 80185c8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80185ca:	2300      	movs	r3, #0
 80185cc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80185ce:	2300      	movs	r3, #0
 80185d0:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80185d2:	f000 fddc 	bl	801918e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80185d6:	2000      	movs	r0, #0
 80185d8:	f7ff ff86 	bl	80184e8 <RadioSetModem>

    RadioSetChannel( freq );
 80185dc:	68f8      	ldr	r0, [r7, #12]
 80185de:	f7ff ffdf 	bl	80185a0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80185e2:	2301      	movs	r3, #1
 80185e4:	9309      	str	r3, [sp, #36]	; 0x24
 80185e6:	2300      	movs	r3, #0
 80185e8:	9308      	str	r3, [sp, #32]
 80185ea:	2300      	movs	r3, #0
 80185ec:	9307      	str	r3, [sp, #28]
 80185ee:	2300      	movs	r3, #0
 80185f0:	9306      	str	r3, [sp, #24]
 80185f2:	2300      	movs	r3, #0
 80185f4:	9305      	str	r3, [sp, #20]
 80185f6:	2300      	movs	r3, #0
 80185f8:	9304      	str	r3, [sp, #16]
 80185fa:	2300      	movs	r3, #0
 80185fc:	9303      	str	r3, [sp, #12]
 80185fe:	2300      	movs	r3, #0
 8018600:	9302      	str	r3, [sp, #8]
 8018602:	2303      	movs	r3, #3
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	2300      	movs	r3, #0
 801860c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018610:	68b9      	ldr	r1, [r7, #8]
 8018612:	2000      	movs	r0, #0
 8018614:	f000 f83c 	bl	8018690 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018618:	2000      	movs	r0, #0
 801861a:	f000 fdbf 	bl	801919c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801861e:	f000 ff55 	bl	80194cc <RadioGetWakeupTime>
 8018622:	4603      	mov	r3, r0
 8018624:	4618      	mov	r0, r3
 8018626:	f7e9 fd29 	bl	800207c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801862a:	f004 f8bd 	bl	801c7a8 <UTIL_TIMER_GetCurrentTime>
 801862e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018630:	e00d      	b.n	801864e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018632:	2000      	movs	r0, #0
 8018634:	f000 fe9a 	bl	801936c <RadioRssi>
 8018638:	4603      	mov	r3, r0
 801863a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801863c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018644:	429a      	cmp	r2, r3
 8018646:	dd02      	ble.n	801864e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018648:	2300      	movs	r3, #0
 801864a:	75fb      	strb	r3, [r7, #23]
            break;
 801864c:	e006      	b.n	801865c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801864e:	6938      	ldr	r0, [r7, #16]
 8018650:	f004 f8bc 	bl	801c7cc <UTIL_TIMER_GetElapsedTime>
 8018654:	4602      	mov	r2, r0
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	4293      	cmp	r3, r2
 801865a:	d8ea      	bhi.n	8018632 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801865c:	f000 fd97 	bl	801918e <RadioStandby>

    return status;
 8018660:	7dfb      	ldrb	r3, [r7, #23]
}
 8018662:	4618      	mov	r0, r3
 8018664:	3718      	adds	r7, #24
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}

0801866a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801866a:	b580      	push	{r7, lr}
 801866c:	b082      	sub	sp, #8
 801866e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018670:	2300      	movs	r3, #0
 8018672:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018674:	2300      	movs	r3, #0
 8018676:	2200      	movs	r2, #0
 8018678:	2100      	movs	r1, #0
 801867a:	2000      	movs	r0, #0
 801867c:	f002 f9ba 	bl	801a9f4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018680:	f001 ff6f 	bl	801a562 <SUBGRF_GetRandom>
 8018684:	6078      	str	r0, [r7, #4]

    return rnd;
 8018686:	687b      	ldr	r3, [r7, #4]
}
 8018688:	4618      	mov	r0, r3
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b08a      	sub	sp, #40	; 0x28
 8018694:	af00      	add	r7, sp, #0
 8018696:	60b9      	str	r1, [r7, #8]
 8018698:	607a      	str	r2, [r7, #4]
 801869a:	461a      	mov	r2, r3
 801869c:	4603      	mov	r3, r0
 801869e:	73fb      	strb	r3, [r7, #15]
 80186a0:	4613      	mov	r3, r2
 80186a2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80186a4:	4ab9      	ldr	r2, [pc, #740]	; (801898c <RadioSetRxConfig+0x2fc>)
 80186a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186aa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80186ac:	f003 f829 	bl	801b702 <RFW_DeInit>
    if( rxContinuous == true )
 80186b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d001      	beq.n	80186bc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80186b8:	2300      	movs	r3, #0
 80186ba:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80186bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d004      	beq.n	80186ce <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80186c4:	4ab2      	ldr	r2, [pc, #712]	; (8018990 <RadioSetRxConfig+0x300>)
 80186c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80186ca:	7013      	strb	r3, [r2, #0]
 80186cc:	e002      	b.n	80186d4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80186ce:	4bb0      	ldr	r3, [pc, #704]	; (8018990 <RadioSetRxConfig+0x300>)
 80186d0:	22ff      	movs	r2, #255	; 0xff
 80186d2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80186d4:	7bfb      	ldrb	r3, [r7, #15]
 80186d6:	2b05      	cmp	r3, #5
 80186d8:	d009      	beq.n	80186ee <RadioSetRxConfig+0x5e>
 80186da:	2b05      	cmp	r3, #5
 80186dc:	f300 81ca 	bgt.w	8018a74 <RadioSetRxConfig+0x3e4>
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	f000 80bf 	beq.w	8018864 <RadioSetRxConfig+0x1d4>
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	f000 8124 	beq.w	8018934 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80186ec:	e1c2      	b.n	8018a74 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80186ee:	2001      	movs	r0, #1
 80186f0:	f002 f87c 	bl	801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186f4:	4ba5      	ldr	r3, [pc, #660]	; (801898c <RadioSetRxConfig+0x2fc>)
 80186f6:	2200      	movs	r2, #0
 80186f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80186fc:	4aa3      	ldr	r2, [pc, #652]	; (801898c <RadioSetRxConfig+0x2fc>)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018702:	4ba2      	ldr	r3, [pc, #648]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018704:	2209      	movs	r2, #9
 8018706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801870a:	4ba0      	ldr	r3, [pc, #640]	; (801898c <RadioSetRxConfig+0x2fc>)
 801870c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018710:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018712:	68b8      	ldr	r0, [r7, #8]
 8018714:	f002 ff28 	bl	801b568 <SUBGRF_GetFskBandwidthRegValue>
 8018718:	4603      	mov	r3, r0
 801871a:	461a      	mov	r2, r3
 801871c:	4b9b      	ldr	r3, [pc, #620]	; (801898c <RadioSetRxConfig+0x2fc>)
 801871e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018722:	4b9a      	ldr	r3, [pc, #616]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018724:	2200      	movs	r2, #0
 8018726:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018728:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801872a:	00db      	lsls	r3, r3, #3
 801872c:	b29a      	uxth	r2, r3
 801872e:	4b97      	ldr	r3, [pc, #604]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018730:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018732:	4b96      	ldr	r3, [pc, #600]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018734:	2200      	movs	r2, #0
 8018736:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018738:	4b94      	ldr	r3, [pc, #592]	; (801898c <RadioSetRxConfig+0x2fc>)
 801873a:	2210      	movs	r2, #16
 801873c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801873e:	4b93      	ldr	r3, [pc, #588]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018740:	2200      	movs	r2, #0
 8018742:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018744:	4b91      	ldr	r3, [pc, #580]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018746:	2200      	movs	r2, #0
 8018748:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801874a:	4b91      	ldr	r3, [pc, #580]	; (8018990 <RadioSetRxConfig+0x300>)
 801874c:	781a      	ldrb	r2, [r3, #0]
 801874e:	4b8f      	ldr	r3, [pc, #572]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018750:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018752:	4b8e      	ldr	r3, [pc, #568]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018754:	2201      	movs	r2, #1
 8018756:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018758:	4b8c      	ldr	r3, [pc, #560]	; (801898c <RadioSetRxConfig+0x2fc>)
 801875a:	2200      	movs	r2, #0
 801875c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801875e:	2005      	movs	r0, #5
 8018760:	f7ff fec2 	bl	80184e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018764:	488b      	ldr	r0, [pc, #556]	; (8018994 <RadioSetRxConfig+0x304>)
 8018766:	f002 fadb 	bl	801ad20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801876a:	488b      	ldr	r0, [pc, #556]	; (8018998 <RadioSetRxConfig+0x308>)
 801876c:	f002 fbaa 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018770:	4a8a      	ldr	r2, [pc, #552]	; (801899c <RadioSetRxConfig+0x30c>)
 8018772:	f107 031c 	add.w	r3, r7, #28
 8018776:	e892 0003 	ldmia.w	r2, {r0, r1}
 801877a:	e883 0003 	stmia.w	r3, {r0, r1}
 801877e:	f107 031c 	add.w	r3, r7, #28
 8018782:	4618      	mov	r0, r3
 8018784:	f001 fe6b 	bl	801a45e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018788:	f240 10ff 	movw	r0, #511	; 0x1ff
 801878c:	f001 feb6 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018790:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018794:	f000 fe09 	bl	80193aa <RadioRead>
 8018798:	4603      	mov	r3, r0
 801879a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801879e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187a2:	f023 0310 	bic.w	r3, r3, #16
 80187a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80187aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187ae:	4619      	mov	r1, r3
 80187b0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80187b4:	f000 fde7 	bl	8019386 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80187b8:	2104      	movs	r1, #4
 80187ba:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80187be:	f000 fde2 	bl	8019386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80187c2:	f640 009b 	movw	r0, #2203	; 0x89b
 80187c6:	f000 fdf0 	bl	80193aa <RadioRead>
 80187ca:	4603      	mov	r3, r0
 80187cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80187d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187d4:	f023 031c 	bic.w	r3, r3, #28
 80187d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80187dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187e0:	f043 0308 	orr.w	r3, r3, #8
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	4619      	mov	r1, r3
 80187e8:	f640 009b 	movw	r0, #2203	; 0x89b
 80187ec:	f000 fdcb 	bl	8019386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80187f0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80187f4:	f000 fdd9 	bl	80193aa <RadioRead>
 80187f8:	4603      	mov	r3, r0
 80187fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80187fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018802:	f023 0318 	bic.w	r3, r3, #24
 8018806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801880a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801880e:	f043 0318 	orr.w	r3, r3, #24
 8018812:	b2db      	uxtb	r3, r3
 8018814:	4619      	mov	r1, r3
 8018816:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801881a:	f000 fdb4 	bl	8019386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801881e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018822:	f000 fdc2 	bl	80193aa <RadioRead>
 8018826:	4603      	mov	r3, r0
 8018828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801882c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801883c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018840:	b2db      	uxtb	r3, r3
 8018842:	4619      	mov	r1, r3
 8018844:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018848:	f000 fd9d 	bl	8019386 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801884c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801884e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018852:	fb02 f303 	mul.w	r3, r2, r3
 8018856:	461a      	mov	r2, r3
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	fbb2 f3f3 	udiv	r3, r2, r3
 801885e:	4a4b      	ldr	r2, [pc, #300]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018860:	6093      	str	r3, [r2, #8]
            break;
 8018862:	e108      	b.n	8018a76 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018864:	2000      	movs	r0, #0
 8018866:	f001 ffc1 	bl	801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801886a:	4b48      	ldr	r3, [pc, #288]	; (801898c <RadioSetRxConfig+0x2fc>)
 801886c:	2200      	movs	r2, #0
 801886e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018872:	4a46      	ldr	r2, [pc, #280]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018878:	4b44      	ldr	r3, [pc, #272]	; (801898c <RadioSetRxConfig+0x2fc>)
 801887a:	220b      	movs	r2, #11
 801887c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018880:	68b8      	ldr	r0, [r7, #8]
 8018882:	f002 fe71 	bl	801b568 <SUBGRF_GetFskBandwidthRegValue>
 8018886:	4603      	mov	r3, r0
 8018888:	461a      	mov	r2, r3
 801888a:	4b40      	ldr	r3, [pc, #256]	; (801898c <RadioSetRxConfig+0x2fc>)
 801888c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018890:	4b3e      	ldr	r3, [pc, #248]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018892:	2200      	movs	r2, #0
 8018894:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018896:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	b29a      	uxth	r2, r3
 801889c:	4b3b      	ldr	r3, [pc, #236]	; (801898c <RadioSetRxConfig+0x2fc>)
 801889e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80188a0:	4b3a      	ldr	r3, [pc, #232]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188a2:	2204      	movs	r2, #4
 80188a4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80188a6:	4b39      	ldr	r3, [pc, #228]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188a8:	2218      	movs	r2, #24
 80188aa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80188ac:	4b37      	ldr	r3, [pc, #220]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188ae:	2200      	movs	r2, #0
 80188b0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80188b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80188b6:	f083 0301 	eor.w	r3, r3, #1
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	461a      	mov	r2, r3
 80188be:	4b33      	ldr	r3, [pc, #204]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80188c2:	4b33      	ldr	r3, [pc, #204]	; (8018990 <RadioSetRxConfig+0x300>)
 80188c4:	781a      	ldrb	r2, [r3, #0]
 80188c6:	4b31      	ldr	r3, [pc, #196]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188c8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80188ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d003      	beq.n	80188da <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80188d2:	4b2e      	ldr	r3, [pc, #184]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188d4:	22f2      	movs	r2, #242	; 0xf2
 80188d6:	75da      	strb	r2, [r3, #23]
 80188d8:	e002      	b.n	80188e0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80188da:	4b2c      	ldr	r3, [pc, #176]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188dc:	2201      	movs	r2, #1
 80188de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80188e0:	4b2a      	ldr	r3, [pc, #168]	; (801898c <RadioSetRxConfig+0x2fc>)
 80188e2:	2201      	movs	r2, #1
 80188e4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80188e6:	f000 fc52 	bl	801918e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80188ea:	2000      	movs	r0, #0
 80188ec:	f7ff fdfc 	bl	80184e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80188f0:	4828      	ldr	r0, [pc, #160]	; (8018994 <RadioSetRxConfig+0x304>)
 80188f2:	f002 fa15 	bl	801ad20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80188f6:	4828      	ldr	r0, [pc, #160]	; (8018998 <RadioSetRxConfig+0x308>)
 80188f8:	f002 fae4 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80188fc:	4a28      	ldr	r2, [pc, #160]	; (80189a0 <RadioSetRxConfig+0x310>)
 80188fe:	f107 0314 	add.w	r3, r7, #20
 8018902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018906:	e883 0003 	stmia.w	r3, {r0, r1}
 801890a:	f107 0314 	add.w	r3, r7, #20
 801890e:	4618      	mov	r0, r3
 8018910:	f001 fda5 	bl	801a45e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018914:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018918:	f001 fdf0 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801891c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801891e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018922:	fb02 f303 	mul.w	r3, r2, r3
 8018926:	461a      	mov	r2, r3
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	fbb2 f3f3 	udiv	r3, r2, r3
 801892e:	4a17      	ldr	r2, [pc, #92]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018930:	6093      	str	r3, [r2, #8]
            break;
 8018932:	e0a0      	b.n	8018a76 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018934:	2000      	movs	r0, #0
 8018936:	f001 ff59 	bl	801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801893a:	4b14      	ldr	r3, [pc, #80]	; (801898c <RadioSetRxConfig+0x2fc>)
 801893c:	2201      	movs	r2, #1
 801893e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	b2da      	uxtb	r2, r3
 8018946:	4b11      	ldr	r3, [pc, #68]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801894c:	4a15      	ldr	r2, [pc, #84]	; (80189a4 <RadioSetRxConfig+0x314>)
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	4413      	add	r3, r2
 8018952:	781a      	ldrb	r2, [r3, #0]
 8018954:	4b0d      	ldr	r3, [pc, #52]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801895a:	4a0c      	ldr	r2, [pc, #48]	; (801898c <RadioSetRxConfig+0x2fc>)
 801895c:	7bbb      	ldrb	r3, [r7, #14]
 801895e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d105      	bne.n	8018974 <RadioSetRxConfig+0x2e4>
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2b0b      	cmp	r3, #11
 801896c:	d008      	beq.n	8018980 <RadioSetRxConfig+0x2f0>
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	2b0c      	cmp	r3, #12
 8018972:	d005      	beq.n	8018980 <RadioSetRxConfig+0x2f0>
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	2b01      	cmp	r3, #1
 8018978:	d116      	bne.n	80189a8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b0c      	cmp	r3, #12
 801897e:	d113      	bne.n	80189a8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018980:	4b02      	ldr	r3, [pc, #8]	; (801898c <RadioSetRxConfig+0x2fc>)
 8018982:	2201      	movs	r2, #1
 8018984:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018988:	e012      	b.n	80189b0 <RadioSetRxConfig+0x320>
 801898a:	bf00      	nop
 801898c:	20001ae8 	.word	0x20001ae8
 8018990:	20000124 	.word	0x20000124
 8018994:	20001b20 	.word	0x20001b20
 8018998:	20001af6 	.word	0x20001af6
 801899c:	0801d690 	.word	0x0801d690
 80189a0:	0801d698 	.word	0x0801d698
 80189a4:	0801dcc0 	.word	0x0801dcc0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80189a8:	4b35      	ldr	r3, [pc, #212]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189aa:	2200      	movs	r2, #0
 80189ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80189b0:	4b33      	ldr	r3, [pc, #204]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189b2:	2201      	movs	r2, #1
 80189b4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80189b6:	4b32      	ldr	r3, [pc, #200]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80189bc:	2b05      	cmp	r3, #5
 80189be:	d004      	beq.n	80189ca <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80189c0:	4b2f      	ldr	r3, [pc, #188]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80189c6:	2b06      	cmp	r3, #6
 80189c8:	d10a      	bne.n	80189e0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80189ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80189cc:	2b0b      	cmp	r3, #11
 80189ce:	d803      	bhi.n	80189d8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80189d0:	4b2b      	ldr	r3, [pc, #172]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189d2:	220c      	movs	r2, #12
 80189d4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80189d6:	e006      	b.n	80189e6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80189d8:	4a29      	ldr	r2, [pc, #164]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80189dc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80189de:	e002      	b.n	80189e6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80189e0:	4a27      	ldr	r2, [pc, #156]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80189e4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80189e6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80189ea:	4b25      	ldr	r3, [pc, #148]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189ec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80189ee:	4b25      	ldr	r3, [pc, #148]	; (8018a84 <RadioSetRxConfig+0x3f4>)
 80189f0:	781a      	ldrb	r2, [r3, #0]
 80189f2:	4b23      	ldr	r3, [pc, #140]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189f4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80189f6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80189fa:	4b21      	ldr	r3, [pc, #132]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 80189fc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018a00:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018a04:	4b1e      	ldr	r3, [pc, #120]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 8018a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018a0a:	f000 fbc0 	bl	801918e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018a0e:	2001      	movs	r0, #1
 8018a10:	f7ff fd6a 	bl	80184e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a14:	481c      	ldr	r0, [pc, #112]	; (8018a88 <RadioSetRxConfig+0x3f8>)
 8018a16:	f002 f983 	bl	801ad20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a1a:	481c      	ldr	r0, [pc, #112]	; (8018a8c <RadioSetRxConfig+0x3fc>)
 8018a1c:	f002 fa52 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018a20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	4618      	mov	r0, r3
 8018a26:	f001 fef0 	bl	801a80a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018a2a:	4b15      	ldr	r3, [pc, #84]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 8018a2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d10d      	bne.n	8018a50 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018a34:	f240 7036 	movw	r0, #1846	; 0x736
 8018a38:	f002 fba0 	bl	801b17c <SUBGRF_ReadRegister>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	f023 0304 	bic.w	r3, r3, #4
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	4619      	mov	r1, r3
 8018a46:	f240 7036 	movw	r0, #1846	; 0x736
 8018a4a:	f002 fb83 	bl	801b154 <SUBGRF_WriteRegister>
 8018a4e:	e00c      	b.n	8018a6a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018a50:	f240 7036 	movw	r0, #1846	; 0x736
 8018a54:	f002 fb92 	bl	801b17c <SUBGRF_ReadRegister>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	f043 0304 	orr.w	r3, r3, #4
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	4619      	mov	r1, r3
 8018a62:	f240 7036 	movw	r0, #1846	; 0x736
 8018a66:	f002 fb75 	bl	801b154 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018a6a:	4b05      	ldr	r3, [pc, #20]	; (8018a80 <RadioSetRxConfig+0x3f0>)
 8018a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a70:	609a      	str	r2, [r3, #8]
            break;
 8018a72:	e000      	b.n	8018a76 <RadioSetRxConfig+0x3e6>
            break;
 8018a74:	bf00      	nop
    }
}
 8018a76:	bf00      	nop
 8018a78:	3728      	adds	r7, #40	; 0x28
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	20001ae8 	.word	0x20001ae8
 8018a84:	20000124 	.word	0x20000124
 8018a88:	20001b20 	.word	0x20001b20
 8018a8c:	20001af6 	.word	0x20001af6

08018a90 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b086      	sub	sp, #24
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	60ba      	str	r2, [r7, #8]
 8018a98:	607b      	str	r3, [r7, #4]
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	73fb      	strb	r3, [r7, #15]
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018aa2:	f002 fe2e 	bl	801b702 <RFW_DeInit>
    switch( modem )
 8018aa6:	7bfb      	ldrb	r3, [r7, #15]
 8018aa8:	2b04      	cmp	r3, #4
 8018aaa:	f000 80c7 	beq.w	8018c3c <RadioSetTxConfig+0x1ac>
 8018aae:	2b04      	cmp	r3, #4
 8018ab0:	f300 80d6 	bgt.w	8018c60 <RadioSetTxConfig+0x1d0>
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d002      	beq.n	8018abe <RadioSetTxConfig+0x2e>
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d059      	beq.n	8018b70 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018abc:	e0d0      	b.n	8018c60 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018abe:	4b74      	ldr	r3, [pc, #464]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018ac6:	4a72      	ldr	r2, [pc, #456]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018ac8:	6a3b      	ldr	r3, [r7, #32]
 8018aca:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018acc:	4b70      	ldr	r3, [pc, #448]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018ace:	220b      	movs	r2, #11
 8018ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f002 fd47 	bl	801b568 <SUBGRF_GetFskBandwidthRegValue>
 8018ada:	4603      	mov	r3, r0
 8018adc:	461a      	mov	r2, r3
 8018ade:	4b6c      	ldr	r3, [pc, #432]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018ae4:	4a6a      	ldr	r2, [pc, #424]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018aea:	4b69      	ldr	r3, [pc, #420]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018aec:	2200      	movs	r2, #0
 8018aee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018af0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018af2:	00db      	lsls	r3, r3, #3
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	4b66      	ldr	r3, [pc, #408]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018af8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018afa:	4b65      	ldr	r3, [pc, #404]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018afc:	2204      	movs	r2, #4
 8018afe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018b00:	4b63      	ldr	r3, [pc, #396]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b02:	2218      	movs	r2, #24
 8018b04:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018b06:	4b62      	ldr	r3, [pc, #392]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018b10:	f083 0301 	eor.w	r3, r3, #1
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	461a      	mov	r2, r3
 8018b18:	4b5d      	ldr	r3, [pc, #372]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b1a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018b1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d003      	beq.n	8018b2c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018b24:	4b5a      	ldr	r3, [pc, #360]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b26:	22f2      	movs	r2, #242	; 0xf2
 8018b28:	75da      	strb	r2, [r3, #23]
 8018b2a:	e002      	b.n	8018b32 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018b2c:	4b58      	ldr	r3, [pc, #352]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b2e:	2201      	movs	r2, #1
 8018b30:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018b32:	4b57      	ldr	r3, [pc, #348]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b34:	2201      	movs	r2, #1
 8018b36:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018b38:	f000 fb29 	bl	801918e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	f7ff fcd3 	bl	80184e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b42:	4854      	ldr	r0, [pc, #336]	; (8018c94 <RadioSetTxConfig+0x204>)
 8018b44:	f002 f8ec 	bl	801ad20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b48:	4853      	ldr	r0, [pc, #332]	; (8018c98 <RadioSetTxConfig+0x208>)
 8018b4a:	f002 f9bb 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018b4e:	4a53      	ldr	r2, [pc, #332]	; (8018c9c <RadioSetTxConfig+0x20c>)
 8018b50:	f107 0310 	add.w	r3, r7, #16
 8018b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b58:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b5c:	f107 0310 	add.w	r3, r7, #16
 8018b60:	4618      	mov	r0, r3
 8018b62:	f001 fc7c 	bl	801a45e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018b6a:	f001 fcc7 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
            break;
 8018b6e:	e078      	b.n	8018c62 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018b70:	4b47      	ldr	r3, [pc, #284]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b72:	2201      	movs	r2, #1
 8018b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018b78:	6a3b      	ldr	r3, [r7, #32]
 8018b7a:	b2da      	uxtb	r2, r3
 8018b7c:	4b44      	ldr	r3, [pc, #272]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018b82:	4a47      	ldr	r2, [pc, #284]	; (8018ca0 <RadioSetTxConfig+0x210>)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	4413      	add	r3, r2
 8018b88:	781a      	ldrb	r2, [r3, #0]
 8018b8a:	4b41      	ldr	r3, [pc, #260]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018b90:	4a3f      	ldr	r2, [pc, #252]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018b92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b96:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d105      	bne.n	8018bac <RadioSetTxConfig+0x11c>
 8018ba0:	6a3b      	ldr	r3, [r7, #32]
 8018ba2:	2b0b      	cmp	r3, #11
 8018ba4:	d008      	beq.n	8018bb8 <RadioSetTxConfig+0x128>
 8018ba6:	6a3b      	ldr	r3, [r7, #32]
 8018ba8:	2b0c      	cmp	r3, #12
 8018baa:	d005      	beq.n	8018bb8 <RadioSetTxConfig+0x128>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d107      	bne.n	8018bc2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	2b0c      	cmp	r3, #12
 8018bb6:	d104      	bne.n	8018bc2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018bb8:	4b35      	ldr	r3, [pc, #212]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bba:	2201      	movs	r2, #1
 8018bbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018bc0:	e003      	b.n	8018bca <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018bc2:	4b33      	ldr	r3, [pc, #204]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018bca:	4b31      	ldr	r3, [pc, #196]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bcc:	2201      	movs	r2, #1
 8018bce:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018bd0:	4b2f      	ldr	r3, [pc, #188]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018bd6:	2b05      	cmp	r3, #5
 8018bd8:	d004      	beq.n	8018be4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018bda:	4b2d      	ldr	r3, [pc, #180]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018be0:	2b06      	cmp	r3, #6
 8018be2:	d10a      	bne.n	8018bfa <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018be4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018be6:	2b0b      	cmp	r3, #11
 8018be8:	d803      	bhi.n	8018bf2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018bea:	4b29      	ldr	r3, [pc, #164]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bec:	220c      	movs	r2, #12
 8018bee:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018bf0:	e006      	b.n	8018c00 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018bf2:	4a27      	ldr	r2, [pc, #156]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018bf6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018bf8:	e002      	b.n	8018c00 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018bfa:	4a25      	ldr	r2, [pc, #148]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018bfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018bfe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018c00:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018c04:	4b22      	ldr	r3, [pc, #136]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c06:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018c08:	4b26      	ldr	r3, [pc, #152]	; (8018ca4 <RadioSetTxConfig+0x214>)
 8018c0a:	781a      	ldrb	r2, [r3, #0]
 8018c0c:	4b20      	ldr	r3, [pc, #128]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c0e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018c10:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018c14:	4b1e      	ldr	r3, [pc, #120]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c16:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018c1a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018c1e:	4b1c      	ldr	r3, [pc, #112]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018c24:	f000 fab3 	bl	801918e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018c28:	2001      	movs	r0, #1
 8018c2a:	f7ff fc5d 	bl	80184e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c2e:	4819      	ldr	r0, [pc, #100]	; (8018c94 <RadioSetTxConfig+0x204>)
 8018c30:	f002 f876 	bl	801ad20 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c34:	4818      	ldr	r0, [pc, #96]	; (8018c98 <RadioSetTxConfig+0x208>)
 8018c36:	f002 f945 	bl	801aec4 <SUBGRF_SetPacketParams>
            break;
 8018c3a:	e012      	b.n	8018c62 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018c3c:	2004      	movs	r0, #4
 8018c3e:	f7ff fc53 	bl	80184e8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018c42:	4b13      	ldr	r3, [pc, #76]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c44:	2202      	movs	r2, #2
 8018c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018c4a:	4a11      	ldr	r2, [pc, #68]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c4c:	6a3b      	ldr	r3, [r7, #32]
 8018c4e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018c50:	4b0f      	ldr	r3, [pc, #60]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c52:	2216      	movs	r2, #22
 8018c54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c58:	480e      	ldr	r0, [pc, #56]	; (8018c94 <RadioSetTxConfig+0x204>)
 8018c5a:	f002 f861 	bl	801ad20 <SUBGRF_SetModulationParams>
            break;
 8018c5e:	e000      	b.n	8018c62 <RadioSetTxConfig+0x1d2>
            break;
 8018c60:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018c66:	4618      	mov	r0, r3
 8018c68:	f002 fb90 	bl	801b38c <SUBGRF_SetRfTxPower>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	461a      	mov	r2, r3
 8018c70:	4b07      	ldr	r3, [pc, #28]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c72:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018c76:	4b06      	ldr	r3, [pc, #24]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f002 fd54 	bl	801b72a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018c82:	4a03      	ldr	r2, [pc, #12]	; (8018c90 <RadioSetTxConfig+0x200>)
 8018c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018c86:	6053      	str	r3, [r2, #4]
}
 8018c88:	bf00      	nop
 8018c8a:	3718      	adds	r7, #24
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	20001ae8 	.word	0x20001ae8
 8018c94:	20001b20 	.word	0x20001b20
 8018c98:	20001af6 	.word	0x20001af6
 8018c9c:	0801d698 	.word	0x0801d698
 8018ca0:	0801dcc0 	.word	0x0801dcc0
 8018ca4:	20000124 	.word	0x20000124

08018ca8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b083      	sub	sp, #12
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
    return true;
 8018cb0:	2301      	movs	r3, #1
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	370c      	adds	r7, #12
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bc80      	pop	{r7}
 8018cba:	4770      	bx	lr

08018cbc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018cbc:	b480      	push	{r7}
 8018cbe:	b085      	sub	sp, #20
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018cca:	79fb      	ldrb	r3, [r7, #7]
 8018ccc:	2b0a      	cmp	r3, #10
 8018cce:	d83e      	bhi.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
 8018cd0:	a201      	add	r2, pc, #4	; (adr r2, 8018cd8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cd6:	bf00      	nop
 8018cd8:	08018d05 	.word	0x08018d05
 8018cdc:	08018d15 	.word	0x08018d15
 8018ce0:	08018d25 	.word	0x08018d25
 8018ce4:	08018d35 	.word	0x08018d35
 8018ce8:	08018d3d 	.word	0x08018d3d
 8018cec:	08018d43 	.word	0x08018d43
 8018cf0:	08018d49 	.word	0x08018d49
 8018cf4:	08018d4f 	.word	0x08018d4f
 8018cf8:	08018d0d 	.word	0x08018d0d
 8018cfc:	08018d1d 	.word	0x08018d1d
 8018d00:	08018d2d 	.word	0x08018d2d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018d04:	f641 6384 	movw	r3, #7812	; 0x1e84
 8018d08:	60fb      	str	r3, [r7, #12]
        break;
 8018d0a:	e020      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018d0c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8018d10:	60fb      	str	r3, [r7, #12]
        break;
 8018d12:	e01c      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018d14:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018d18:	60fb      	str	r3, [r7, #12]
        break;
 8018d1a:	e018      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018d1c:	f245 1361 	movw	r3, #20833	; 0x5161
 8018d20:	60fb      	str	r3, [r7, #12]
        break;
 8018d22:	e014      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018d24:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018d28:	60fb      	str	r3, [r7, #12]
        break;
 8018d2a:	e010      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018d2c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8018d30:	60fb      	str	r3, [r7, #12]
        break;
 8018d32:	e00c      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018d34:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018d38:	60fb      	str	r3, [r7, #12]
        break;
 8018d3a:	e008      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018d3c:	4b07      	ldr	r3, [pc, #28]	; (8018d5c <RadioGetLoRaBandwidthInHz+0xa0>)
 8018d3e:	60fb      	str	r3, [r7, #12]
        break;
 8018d40:	e005      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018d42:	4b07      	ldr	r3, [pc, #28]	; (8018d60 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018d44:	60fb      	str	r3, [r7, #12]
        break;
 8018d46:	e002      	b.n	8018d4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018d48:	4b06      	ldr	r3, [pc, #24]	; (8018d64 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018d4a:	60fb      	str	r3, [r7, #12]
        break;
 8018d4c:	bf00      	nop
    }

    return bandwidthInHz;
 8018d4e:	68fb      	ldr	r3, [r7, #12]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3714      	adds	r7, #20
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bc80      	pop	{r7}
 8018d58:	4770      	bx	lr
 8018d5a:	bf00      	nop
 8018d5c:	0001e848 	.word	0x0001e848
 8018d60:	0003d090 	.word	0x0003d090
 8018d64:	0007a120 	.word	0x0007a120

08018d68 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018d68:	b480      	push	{r7}
 8018d6a:	b083      	sub	sp, #12
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
 8018d70:	4608      	mov	r0, r1
 8018d72:	4611      	mov	r1, r2
 8018d74:	461a      	mov	r2, r3
 8018d76:	4603      	mov	r3, r0
 8018d78:	70fb      	strb	r3, [r7, #3]
 8018d7a:	460b      	mov	r3, r1
 8018d7c:	803b      	strh	r3, [r7, #0]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018d82:	883b      	ldrh	r3, [r7, #0]
 8018d84:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018d86:	78ba      	ldrb	r2, [r7, #2]
 8018d88:	f082 0201 	eor.w	r2, r2, #1
 8018d8c:	b2d2      	uxtb	r2, r2
 8018d8e:	2a00      	cmp	r2, #0
 8018d90:	d001      	beq.n	8018d96 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018d92:	2208      	movs	r2, #8
 8018d94:	e000      	b.n	8018d98 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018d96:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018d98:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018d9a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018d9e:	7c3b      	ldrb	r3, [r7, #16]
 8018da0:	7d39      	ldrb	r1, [r7, #20]
 8018da2:	2900      	cmp	r1, #0
 8018da4:	d001      	beq.n	8018daa <RadioGetGfskTimeOnAirNumerator+0x42>
 8018da6:	2102      	movs	r1, #2
 8018da8:	e000      	b.n	8018dac <RadioGetGfskTimeOnAirNumerator+0x44>
 8018daa:	2100      	movs	r1, #0
 8018dac:	440b      	add	r3, r1
 8018dae:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018db0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	370c      	adds	r7, #12
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bc80      	pop	{r7}
 8018dba:	4770      	bx	lr

08018dbc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b08b      	sub	sp, #44	; 0x2c
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	4611      	mov	r1, r2
 8018dc8:	461a      	mov	r2, r3
 8018dca:	460b      	mov	r3, r1
 8018dcc:	71fb      	strb	r3, [r7, #7]
 8018dce:	4613      	mov	r3, r2
 8018dd0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018dd2:	79fb      	ldrb	r3, [r7, #7]
 8018dd4:	3304      	adds	r3, #4
 8018dd6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	2b05      	cmp	r3, #5
 8018de2:	d002      	beq.n	8018dea <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	2b06      	cmp	r3, #6
 8018de8:	d104      	bne.n	8018df4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018dea:	88bb      	ldrh	r3, [r7, #4]
 8018dec:	2b0b      	cmp	r3, #11
 8018dee:	d801      	bhi.n	8018df4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018df0:	230c      	movs	r3, #12
 8018df2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d105      	bne.n	8018e06 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	2b0b      	cmp	r3, #11
 8018dfe:	d008      	beq.n	8018e12 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018e00:	68bb      	ldr	r3, [r7, #8]
 8018e02:	2b0c      	cmp	r3, #12
 8018e04:	d005      	beq.n	8018e12 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	2b01      	cmp	r3, #1
 8018e0a:	d105      	bne.n	8018e18 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018e0c:	68bb      	ldr	r3, [r7, #8]
 8018e0e:	2b0c      	cmp	r3, #12
 8018e10:	d102      	bne.n	8018e18 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018e12:	2301      	movs	r3, #1
 8018e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018e18:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018e1c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018e1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018e22:	2a00      	cmp	r2, #0
 8018e24:	d001      	beq.n	8018e2a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018e26:	2210      	movs	r2, #16
 8018e28:	e000      	b.n	8018e2c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018e2a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018e2c:	4413      	add	r3, r2
 8018e2e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018e30:	68bb      	ldr	r3, [r7, #8]
 8018e32:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018e34:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018e36:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018e3a:	2a00      	cmp	r2, #0
 8018e3c:	d001      	beq.n	8018e42 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018e3e:	2200      	movs	r2, #0
 8018e40:	e000      	b.n	8018e44 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018e42:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018e44:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018e46:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	2b06      	cmp	r3, #6
 8018e4c:	d803      	bhi.n	8018e56 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	009b      	lsls	r3, r3, #2
 8018e52:	623b      	str	r3, [r7, #32]
 8018e54:	e00e      	b.n	8018e74 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018e56:	69fb      	ldr	r3, [r7, #28]
 8018e58:	3308      	adds	r3, #8
 8018e5a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d004      	beq.n	8018e6e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	3b02      	subs	r3, #2
 8018e68:	009b      	lsls	r3, r3, #2
 8018e6a:	623b      	str	r3, [r7, #32]
 8018e6c:	e002      	b.n	8018e74 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018e6e:	68bb      	ldr	r3, [r7, #8]
 8018e70:	009b      	lsls	r3, r3, #2
 8018e72:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018e74:	69fb      	ldr	r3, [r7, #28]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	da01      	bge.n	8018e7e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018e7e:	69fa      	ldr	r2, [r7, #28]
 8018e80:	6a3b      	ldr	r3, [r7, #32]
 8018e82:	4413      	add	r3, r2
 8018e84:	1e5a      	subs	r2, r3, #1
 8018e86:	6a3b      	ldr	r3, [r7, #32]
 8018e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e8c:	697a      	ldr	r2, [r7, #20]
 8018e8e:	fb03 f202 	mul.w	r2, r3, r2
 8018e92:	88bb      	ldrh	r3, [r7, #4]
 8018e94:	4413      	add	r3, r2
    int32_t intermediate =
 8018e96:	330c      	adds	r3, #12
 8018e98:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	2b06      	cmp	r3, #6
 8018e9e:	d802      	bhi.n	8018ea6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018ea0:	69bb      	ldr	r3, [r7, #24]
 8018ea2:	3302      	adds	r3, #2
 8018ea4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018ea6:	69bb      	ldr	r3, [r7, #24]
 8018ea8:	009b      	lsls	r3, r3, #2
 8018eaa:	1c5a      	adds	r2, r3, #1
 8018eac:	68bb      	ldr	r3, [r7, #8]
 8018eae:	3b02      	subs	r3, #2
 8018eb0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	372c      	adds	r7, #44	; 0x2c
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bc80      	pop	{r7}
 8018ebc:	4770      	bx	lr
	...

08018ec0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b08a      	sub	sp, #40	; 0x28
 8018ec4:	af04      	add	r7, sp, #16
 8018ec6:	60b9      	str	r1, [r7, #8]
 8018ec8:	607a      	str	r2, [r7, #4]
 8018eca:	461a      	mov	r2, r3
 8018ecc:	4603      	mov	r3, r0
 8018ece:	73fb      	strb	r3, [r7, #15]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018edc:	7bfb      	ldrb	r3, [r7, #15]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d002      	beq.n	8018ee8 <RadioTimeOnAir+0x28>
 8018ee2:	2b01      	cmp	r3, #1
 8018ee4:	d017      	beq.n	8018f16 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018ee6:	e035      	b.n	8018f54 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018ee8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8018eec:	8c3a      	ldrh	r2, [r7, #32]
 8018eee:	7bb9      	ldrb	r1, [r7, #14]
 8018ef0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018ef4:	9301      	str	r3, [sp, #4]
 8018ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018efa:	9300      	str	r3, [sp, #0]
 8018efc:	4603      	mov	r3, r0
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f7ff ff32 	bl	8018d68 <RadioGetGfskTimeOnAirNumerator>
 8018f04:	4603      	mov	r3, r0
 8018f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018f0a:	fb02 f303 	mul.w	r3, r2, r3
 8018f0e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	613b      	str	r3, [r7, #16]
        break;
 8018f14:	e01e      	b.n	8018f54 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018f16:	8c39      	ldrh	r1, [r7, #32]
 8018f18:	7bba      	ldrb	r2, [r7, #14]
 8018f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018f1e:	9302      	str	r3, [sp, #8]
 8018f20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f24:	9301      	str	r3, [sp, #4]
 8018f26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f2a:	9300      	str	r3, [sp, #0]
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	6879      	ldr	r1, [r7, #4]
 8018f30:	68b8      	ldr	r0, [r7, #8]
 8018f32:	f7ff ff43 	bl	8018dbc <RadioGetLoRaTimeOnAirNumerator>
 8018f36:	4603      	mov	r3, r0
 8018f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018f3c:	fb02 f303 	mul.w	r3, r2, r3
 8018f40:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018f42:	4a0a      	ldr	r2, [pc, #40]	; (8018f6c <RadioTimeOnAir+0xac>)
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	4413      	add	r3, r2
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f7ff feb6 	bl	8018cbc <RadioGetLoRaBandwidthInHz>
 8018f50:	6138      	str	r0, [r7, #16]
        break;
 8018f52:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018f54:	697a      	ldr	r2, [r7, #20]
 8018f56:	693b      	ldr	r3, [r7, #16]
 8018f58:	4413      	add	r3, r2
 8018f5a:	1e5a      	subs	r2, r3, #1
 8018f5c:	693b      	ldr	r3, [r7, #16]
 8018f5e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3718      	adds	r7, #24
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	0801dcc0 	.word	0x0801dcc0

08018f70 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b084      	sub	sp, #16
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
 8018f78:	460b      	mov	r3, r1
 8018f7a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	2200      	movs	r2, #0
 8018f80:	f240 2101 	movw	r1, #513	; 0x201
 8018f84:	f240 2001 	movw	r0, #513	; 0x201
 8018f88:	f001 fd34 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018f8c:	4b71      	ldr	r3, [pc, #452]	; (8019154 <RadioSend+0x1e4>)
 8018f8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018f92:	2101      	movs	r1, #1
 8018f94:	4618      	mov	r0, r3
 8018f96:	f002 f9d1 	bl	801b33c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018f9a:	4b6e      	ldr	r3, [pc, #440]	; (8019154 <RadioSend+0x1e4>)
 8018f9c:	781b      	ldrb	r3, [r3, #0]
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d112      	bne.n	8018fc8 <RadioSend+0x58>
 8018fa2:	4b6c      	ldr	r3, [pc, #432]	; (8019154 <RadioSend+0x1e4>)
 8018fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018fa8:	2b06      	cmp	r3, #6
 8018faa:	d10d      	bne.n	8018fc8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018fac:	f640 0089 	movw	r0, #2185	; 0x889
 8018fb0:	f002 f8e4 	bl	801b17c <SUBGRF_ReadRegister>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	f023 0304 	bic.w	r3, r3, #4
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	4619      	mov	r1, r3
 8018fbe:	f640 0089 	movw	r0, #2185	; 0x889
 8018fc2:	f002 f8c7 	bl	801b154 <SUBGRF_WriteRegister>
 8018fc6:	e00c      	b.n	8018fe2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018fc8:	f640 0089 	movw	r0, #2185	; 0x889
 8018fcc:	f002 f8d6 	bl	801b17c <SUBGRF_ReadRegister>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	f043 0304 	orr.w	r3, r3, #4
 8018fd6:	b2db      	uxtb	r3, r3
 8018fd8:	4619      	mov	r1, r3
 8018fda:	f640 0089 	movw	r0, #2185	; 0x889
 8018fde:	f002 f8b9 	bl	801b154 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018fe2:	4b5c      	ldr	r3, [pc, #368]	; (8019154 <RadioSend+0x1e4>)
 8018fe4:	781b      	ldrb	r3, [r3, #0]
 8018fe6:	2b04      	cmp	r3, #4
 8018fe8:	f200 80a7 	bhi.w	801913a <RadioSend+0x1ca>
 8018fec:	a201      	add	r2, pc, #4	; (adr r2, 8018ff4 <RadioSend+0x84>)
 8018fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ff2:	bf00      	nop
 8018ff4:	08019023 	.word	0x08019023
 8018ff8:	08019009 	.word	0x08019009
 8018ffc:	08019023 	.word	0x08019023
 8019000:	08019083 	.word	0x08019083
 8019004:	080190a3 	.word	0x080190a3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019008:	4a52      	ldr	r2, [pc, #328]	; (8019154 <RadioSend+0x1e4>)
 801900a:	78fb      	ldrb	r3, [r7, #3]
 801900c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801900e:	4852      	ldr	r0, [pc, #328]	; (8019158 <RadioSend+0x1e8>)
 8019010:	f001 ff58 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019014:	78fb      	ldrb	r3, [r7, #3]
 8019016:	2200      	movs	r2, #0
 8019018:	4619      	mov	r1, r3
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	f001 fa0c 	bl	801a438 <SUBGRF_SendPayload>
            break;
 8019020:	e08c      	b.n	801913c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019022:	f002 fb74 	bl	801b70e <RFW_Is_Init>
 8019026:	4603      	mov	r3, r0
 8019028:	2b01      	cmp	r3, #1
 801902a:	d11d      	bne.n	8019068 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801902c:	f107 020d 	add.w	r2, r7, #13
 8019030:	78fb      	ldrb	r3, [r7, #3]
 8019032:	4619      	mov	r1, r3
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f002 fb82 	bl	801b73e <RFW_TransmitInit>
 801903a:	4603      	mov	r3, r0
 801903c:	2b00      	cmp	r3, #0
 801903e:	d10c      	bne.n	801905a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019040:	7b7a      	ldrb	r2, [r7, #13]
 8019042:	4b44      	ldr	r3, [pc, #272]	; (8019154 <RadioSend+0x1e4>)
 8019044:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019046:	4844      	ldr	r0, [pc, #272]	; (8019158 <RadioSend+0x1e8>)
 8019048:	f001 ff3c 	bl	801aec4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801904c:	7b7b      	ldrb	r3, [r7, #13]
 801904e:	2200      	movs	r2, #0
 8019050:	4619      	mov	r1, r3
 8019052:	6878      	ldr	r0, [r7, #4]
 8019054:	f001 f9f0 	bl	801a438 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019058:	e070      	b.n	801913c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801905a:	4b40      	ldr	r3, [pc, #256]	; (801915c <RadioSend+0x1ec>)
 801905c:	2201      	movs	r2, #1
 801905e:	2100      	movs	r1, #0
 8019060:	2002      	movs	r0, #2
 8019062:	f003 fc91 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
 8019066:	e072      	b.n	801914e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019068:	4a3a      	ldr	r2, [pc, #232]	; (8019154 <RadioSend+0x1e4>)
 801906a:	78fb      	ldrb	r3, [r7, #3]
 801906c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801906e:	483a      	ldr	r0, [pc, #232]	; (8019158 <RadioSend+0x1e8>)
 8019070:	f001 ff28 	bl	801aec4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8019074:	78fb      	ldrb	r3, [r7, #3]
 8019076:	2200      	movs	r2, #0
 8019078:	4619      	mov	r1, r3
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f001 f9dc 	bl	801a438 <SUBGRF_SendPayload>
            break;
 8019080:	e05c      	b.n	801913c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019082:	4b34      	ldr	r3, [pc, #208]	; (8019154 <RadioSend+0x1e4>)
 8019084:	2202      	movs	r2, #2
 8019086:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019088:	4a32      	ldr	r2, [pc, #200]	; (8019154 <RadioSend+0x1e4>)
 801908a:	78fb      	ldrb	r3, [r7, #3]
 801908c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801908e:	4832      	ldr	r0, [pc, #200]	; (8019158 <RadioSend+0x1e8>)
 8019090:	f001 ff18 	bl	801aec4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019094:	78fb      	ldrb	r3, [r7, #3]
 8019096:	2200      	movs	r2, #0
 8019098:	4619      	mov	r1, r3
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f001 f9cc 	bl	801a438 <SUBGRF_SendPayload>
            break;
 80190a0:	e04c      	b.n	801913c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80190a2:	78fb      	ldrb	r3, [r7, #3]
 80190a4:	461a      	mov	r2, r3
 80190a6:	6879      	ldr	r1, [r7, #4]
 80190a8:	482d      	ldr	r0, [pc, #180]	; (8019160 <RadioSend+0x1f0>)
 80190aa:	f000 fcbc 	bl	8019a26 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80190ae:	4b29      	ldr	r3, [pc, #164]	; (8019154 <RadioSend+0x1e4>)
 80190b0:	2202      	movs	r2, #2
 80190b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80190b4:	78fb      	ldrb	r3, [r7, #3]
 80190b6:	3301      	adds	r3, #1
 80190b8:	b2da      	uxtb	r2, r3
 80190ba:	4b26      	ldr	r3, [pc, #152]	; (8019154 <RadioSend+0x1e4>)
 80190bc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80190be:	4826      	ldr	r0, [pc, #152]	; (8019158 <RadioSend+0x1e8>)
 80190c0:	f001 ff00 	bl	801aec4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80190c4:	2100      	movs	r1, #0
 80190c6:	20f1      	movs	r0, #241	; 0xf1
 80190c8:	f000 f95d 	bl	8019386 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80190cc:	2100      	movs	r1, #0
 80190ce:	20f0      	movs	r0, #240	; 0xf0
 80190d0:	f000 f959 	bl	8019386 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80190d4:	4b1f      	ldr	r3, [pc, #124]	; (8019154 <RadioSend+0x1e4>)
 80190d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80190d8:	2b64      	cmp	r3, #100	; 0x64
 80190da:	d108      	bne.n	80190ee <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80190dc:	2170      	movs	r1, #112	; 0x70
 80190de:	20f3      	movs	r0, #243	; 0xf3
 80190e0:	f000 f951 	bl	8019386 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80190e4:	211d      	movs	r1, #29
 80190e6:	20f2      	movs	r0, #242	; 0xf2
 80190e8:	f000 f94d 	bl	8019386 <RadioWrite>
 80190ec:	e007      	b.n	80190fe <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80190ee:	21e1      	movs	r1, #225	; 0xe1
 80190f0:	20f3      	movs	r0, #243	; 0xf3
 80190f2:	f000 f948 	bl	8019386 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80190f6:	2104      	movs	r1, #4
 80190f8:	20f2      	movs	r0, #242	; 0xf2
 80190fa:	f000 f944 	bl	8019386 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80190fe:	78fb      	ldrb	r3, [r7, #3]
 8019100:	b29b      	uxth	r3, r3
 8019102:	00db      	lsls	r3, r3, #3
 8019104:	b29b      	uxth	r3, r3
 8019106:	3302      	adds	r3, #2
 8019108:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801910a:	89fb      	ldrh	r3, [r7, #14]
 801910c:	0a1b      	lsrs	r3, r3, #8
 801910e:	b29b      	uxth	r3, r3
 8019110:	b2db      	uxtb	r3, r3
 8019112:	4619      	mov	r1, r3
 8019114:	20f4      	movs	r0, #244	; 0xf4
 8019116:	f000 f936 	bl	8019386 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801911a:	89fb      	ldrh	r3, [r7, #14]
 801911c:	b2db      	uxtb	r3, r3
 801911e:	4619      	mov	r1, r3
 8019120:	20f5      	movs	r0, #245	; 0xf5
 8019122:	f000 f930 	bl	8019386 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019126:	78fb      	ldrb	r3, [r7, #3]
 8019128:	3301      	adds	r3, #1
 801912a:	b2db      	uxtb	r3, r3
 801912c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019130:	4619      	mov	r1, r3
 8019132:	480b      	ldr	r0, [pc, #44]	; (8019160 <RadioSend+0x1f0>)
 8019134:	f001 f980 	bl	801a438 <SUBGRF_SendPayload>
            break;
 8019138:	e000      	b.n	801913c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801913a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801913c:	4b05      	ldr	r3, [pc, #20]	; (8019154 <RadioSend+0x1e4>)
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	4619      	mov	r1, r3
 8019142:	4808      	ldr	r0, [pc, #32]	; (8019164 <RadioSend+0x1f4>)
 8019144:	f003 fa86 	bl	801c654 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019148:	4806      	ldr	r0, [pc, #24]	; (8019164 <RadioSend+0x1f4>)
 801914a:	f003 f9a5 	bl	801c498 <UTIL_TIMER_Start>
}
 801914e:	3710      	adds	r7, #16
 8019150:	46bd      	mov	sp, r7
 8019152:	bd80      	pop	{r7, pc}
 8019154:	20001ae8 	.word	0x20001ae8
 8019158:	20001af6 	.word	0x20001af6
 801915c:	0801d6a0 	.word	0x0801d6a0
 8019160:	200019e4 	.word	0x200019e4
 8019164:	20001b44 	.word	0x20001b44

08019168 <RadioSleep>:

static void RadioSleep( void )
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b082      	sub	sp, #8
 801916c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801916e:	2300      	movs	r3, #0
 8019170:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019172:	793b      	ldrb	r3, [r7, #4]
 8019174:	f043 0304 	orr.w	r3, r3, #4
 8019178:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801917a:	7938      	ldrb	r0, [r7, #4]
 801917c:	f001 fa38 	bl	801a5f0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019180:	2002      	movs	r0, #2
 8019182:	f7e8 ff7b 	bl	800207c <HAL_Delay>
}
 8019186:	bf00      	nop
 8019188:	3708      	adds	r7, #8
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}

0801918e <RadioStandby>:

static void RadioStandby( void )
{
 801918e:	b580      	push	{r7, lr}
 8019190:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019192:	2000      	movs	r0, #0
 8019194:	f001 fa5e 	bl	801a654 <SUBGRF_SetStandby>
}
 8019198:	bf00      	nop
 801919a:	bd80      	pop	{r7, pc}

0801919c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b082      	sub	sp, #8
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80191a4:	f002 fab3 	bl	801b70e <RFW_Is_Init>
 80191a8:	4603      	mov	r3, r0
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d102      	bne.n	80191b4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80191ae:	f002 fad6 	bl	801b75e <RFW_ReceiveInit>
 80191b2:	e007      	b.n	80191c4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80191b4:	2300      	movs	r3, #0
 80191b6:	2200      	movs	r2, #0
 80191b8:	f240 2162 	movw	r1, #610	; 0x262
 80191bc:	f240 2062 	movw	r0, #610	; 0x262
 80191c0:	f001 fc18 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d006      	beq.n	80191d8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80191ca:	6879      	ldr	r1, [r7, #4]
 80191cc:	4811      	ldr	r0, [pc, #68]	; (8019214 <RadioRx+0x78>)
 80191ce:	f003 fa41 	bl	801c654 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80191d2:	4810      	ldr	r0, [pc, #64]	; (8019214 <RadioRx+0x78>)
 80191d4:	f003 f960 	bl	801c498 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80191d8:	4b0f      	ldr	r3, [pc, #60]	; (8019218 <RadioRx+0x7c>)
 80191da:	2200      	movs	r2, #0
 80191dc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80191de:	4b0e      	ldr	r3, [pc, #56]	; (8019218 <RadioRx+0x7c>)
 80191e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80191e4:	2100      	movs	r1, #0
 80191e6:	4618      	mov	r0, r3
 80191e8:	f002 f8a8 	bl	801b33c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80191ec:	4b0a      	ldr	r3, [pc, #40]	; (8019218 <RadioRx+0x7c>)
 80191ee:	785b      	ldrb	r3, [r3, #1]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d004      	beq.n	80191fe <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80191f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80191f8:	f001 fa68 	bl	801a6cc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80191fc:	e005      	b.n	801920a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80191fe:	4b06      	ldr	r3, [pc, #24]	; (8019218 <RadioRx+0x7c>)
 8019200:	689b      	ldr	r3, [r3, #8]
 8019202:	019b      	lsls	r3, r3, #6
 8019204:	4618      	mov	r0, r3
 8019206:	f001 fa61 	bl	801a6cc <SUBGRF_SetRx>
}
 801920a:	bf00      	nop
 801920c:	3708      	adds	r7, #8
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	20001b5c 	.word	0x20001b5c
 8019218:	20001ae8 	.word	0x20001ae8

0801921c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8019224:	f002 fa73 	bl	801b70e <RFW_Is_Init>
 8019228:	4603      	mov	r3, r0
 801922a:	2b01      	cmp	r3, #1
 801922c:	d102      	bne.n	8019234 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801922e:	f002 fa96 	bl	801b75e <RFW_ReceiveInit>
 8019232:	e007      	b.n	8019244 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019234:	2300      	movs	r3, #0
 8019236:	2200      	movs	r2, #0
 8019238:	f240 2162 	movw	r1, #610	; 0x262
 801923c:	f240 2062 	movw	r0, #610	; 0x262
 8019240:	f001 fbd8 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d006      	beq.n	8019258 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801924a:	6879      	ldr	r1, [r7, #4]
 801924c:	4811      	ldr	r0, [pc, #68]	; (8019294 <RadioRxBoosted+0x78>)
 801924e:	f003 fa01 	bl	801c654 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019252:	4810      	ldr	r0, [pc, #64]	; (8019294 <RadioRxBoosted+0x78>)
 8019254:	f003 f920 	bl	801c498 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019258:	4b0f      	ldr	r3, [pc, #60]	; (8019298 <RadioRxBoosted+0x7c>)
 801925a:	2200      	movs	r2, #0
 801925c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801925e:	4b0e      	ldr	r3, [pc, #56]	; (8019298 <RadioRxBoosted+0x7c>)
 8019260:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019264:	2100      	movs	r1, #0
 8019266:	4618      	mov	r0, r3
 8019268:	f002 f868 	bl	801b33c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801926c:	4b0a      	ldr	r3, [pc, #40]	; (8019298 <RadioRxBoosted+0x7c>)
 801926e:	785b      	ldrb	r3, [r3, #1]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d004      	beq.n	801927e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019274:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019278:	f001 fa48 	bl	801a70c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801927c:	e005      	b.n	801928a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801927e:	4b06      	ldr	r3, [pc, #24]	; (8019298 <RadioRxBoosted+0x7c>)
 8019280:	689b      	ldr	r3, [r3, #8]
 8019282:	019b      	lsls	r3, r3, #6
 8019284:	4618      	mov	r0, r3
 8019286:	f001 fa41 	bl	801a70c <SUBGRF_SetRxBoosted>
}
 801928a:	bf00      	nop
 801928c:	3708      	adds	r7, #8
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	20001b5c 	.word	0x20001b5c
 8019298:	20001ae8 	.word	0x20001ae8

0801929c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	005a      	lsls	r2, r3, #1
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	4413      	add	r3, r2
 80192ae:	4a0c      	ldr	r2, [pc, #48]	; (80192e0 <RadioSetRxDutyCycle+0x44>)
 80192b0:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80192b2:	2300      	movs	r3, #0
 80192b4:	2200      	movs	r2, #0
 80192b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80192ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80192be:	f001 fb99 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80192c2:	4b07      	ldr	r3, [pc, #28]	; (80192e0 <RadioSetRxDutyCycle+0x44>)
 80192c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80192c8:	2100      	movs	r1, #0
 80192ca:	4618      	mov	r0, r3
 80192cc:	f002 f836 	bl	801b33c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80192d0:	6839      	ldr	r1, [r7, #0]
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	f001 fa3e 	bl	801a754 <SUBGRF_SetRxDutyCycle>
}
 80192d8:	bf00      	nop
 80192da:	3708      	adds	r7, #8
 80192dc:	46bd      	mov	sp, r7
 80192de:	bd80      	pop	{r7, pc}
 80192e0:	20001ae8 	.word	0x20001ae8

080192e4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80192e8:	4b09      	ldr	r3, [pc, #36]	; (8019310 <RadioStartCad+0x2c>)
 80192ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80192ee:	2100      	movs	r1, #0
 80192f0:	4618      	mov	r0, r3
 80192f2:	f002 f823 	bl	801b33c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80192f6:	2300      	movs	r3, #0
 80192f8:	2200      	movs	r2, #0
 80192fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80192fe:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019302:	f001 fb77 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019306:	f001 fa51 	bl	801a7ac <SUBGRF_SetCad>
}
 801930a:	bf00      	nop
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	20001ae8 	.word	0x20001ae8

08019314 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b084      	sub	sp, #16
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	460b      	mov	r3, r1
 801931e:	70fb      	strb	r3, [r7, #3]
 8019320:	4613      	mov	r3, r2
 8019322:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019324:	883b      	ldrh	r3, [r7, #0]
 8019326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801932a:	fb02 f303 	mul.w	r3, r2, r3
 801932e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019330:	6878      	ldr	r0, [r7, #4]
 8019332:	f001 fbbb 	bl	801aaac <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801933a:	4618      	mov	r0, r3
 801933c:	f002 f826 	bl	801b38c <SUBGRF_SetRfTxPower>
 8019340:	4603      	mov	r3, r0
 8019342:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019344:	7afb      	ldrb	r3, [r7, #11]
 8019346:	2101      	movs	r1, #1
 8019348:	4618      	mov	r0, r3
 801934a:	f001 fff7 	bl	801b33c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801934e:	f001 fa3b 	bl	801a7c8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019352:	68f9      	ldr	r1, [r7, #12]
 8019354:	4804      	ldr	r0, [pc, #16]	; (8019368 <RadioSetTxContinuousWave+0x54>)
 8019356:	f003 f97d 	bl	801c654 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801935a:	4803      	ldr	r0, [pc, #12]	; (8019368 <RadioSetTxContinuousWave+0x54>)
 801935c:	f003 f89c 	bl	801c498 <UTIL_TIMER_Start>
}
 8019360:	bf00      	nop
 8019362:	3710      	adds	r7, #16
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}
 8019368:	20001b44 	.word	0x20001b44

0801936c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b082      	sub	sp, #8
 8019370:	af00      	add	r7, sp, #0
 8019372:	4603      	mov	r3, r0
 8019374:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019376:	f001 fe5a 	bl	801b02e <SUBGRF_GetRssiInst>
 801937a:	4603      	mov	r3, r0
 801937c:	b21b      	sxth	r3, r3
}
 801937e:	4618      	mov	r0, r3
 8019380:	3708      	adds	r7, #8
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}

08019386 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019386:	b580      	push	{r7, lr}
 8019388:	b082      	sub	sp, #8
 801938a:	af00      	add	r7, sp, #0
 801938c:	4603      	mov	r3, r0
 801938e:	460a      	mov	r2, r1
 8019390:	80fb      	strh	r3, [r7, #6]
 8019392:	4613      	mov	r3, r2
 8019394:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019396:	797a      	ldrb	r2, [r7, #5]
 8019398:	88fb      	ldrh	r3, [r7, #6]
 801939a:	4611      	mov	r1, r2
 801939c:	4618      	mov	r0, r3
 801939e:	f001 fed9 	bl	801b154 <SUBGRF_WriteRegister>
}
 80193a2:	bf00      	nop
 80193a4:	3708      	adds	r7, #8
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}

080193aa <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80193aa:	b580      	push	{r7, lr}
 80193ac:	b082      	sub	sp, #8
 80193ae:	af00      	add	r7, sp, #0
 80193b0:	4603      	mov	r3, r0
 80193b2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80193b4:	88fb      	ldrh	r3, [r7, #6]
 80193b6:	4618      	mov	r0, r3
 80193b8:	f001 fee0 	bl	801b17c <SUBGRF_ReadRegister>
 80193bc:	4603      	mov	r3, r0
}
 80193be:	4618      	mov	r0, r3
 80193c0:	3708      	adds	r7, #8
 80193c2:	46bd      	mov	sp, r7
 80193c4:	bd80      	pop	{r7, pc}

080193c6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80193c6:	b580      	push	{r7, lr}
 80193c8:	b082      	sub	sp, #8
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	4603      	mov	r3, r0
 80193ce:	6039      	str	r1, [r7, #0]
 80193d0:	80fb      	strh	r3, [r7, #6]
 80193d2:	4613      	mov	r3, r2
 80193d4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80193d6:	797b      	ldrb	r3, [r7, #5]
 80193d8:	b29a      	uxth	r2, r3
 80193da:	88fb      	ldrh	r3, [r7, #6]
 80193dc:	6839      	ldr	r1, [r7, #0]
 80193de:	4618      	mov	r0, r3
 80193e0:	f001 fee0 	bl	801b1a4 <SUBGRF_WriteRegisters>
}
 80193e4:	bf00      	nop
 80193e6:	3708      	adds	r7, #8
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}

080193ec <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	4603      	mov	r3, r0
 80193f4:	6039      	str	r1, [r7, #0]
 80193f6:	80fb      	strh	r3, [r7, #6]
 80193f8:	4613      	mov	r3, r2
 80193fa:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80193fc:	797b      	ldrb	r3, [r7, #5]
 80193fe:	b29a      	uxth	r2, r3
 8019400:	88fb      	ldrh	r3, [r7, #6]
 8019402:	6839      	ldr	r1, [r7, #0]
 8019404:	4618      	mov	r0, r3
 8019406:	f001 feef 	bl	801b1e8 <SUBGRF_ReadRegisters>
}
 801940a:	bf00      	nop
 801940c:	3708      	adds	r7, #8
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}
	...

08019414 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	4603      	mov	r3, r0
 801941c:	460a      	mov	r2, r1
 801941e:	71fb      	strb	r3, [r7, #7]
 8019420:	4613      	mov	r3, r2
 8019422:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019424:	79fb      	ldrb	r3, [r7, #7]
 8019426:	2b01      	cmp	r3, #1
 8019428:	d10a      	bne.n	8019440 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801942a:	4a0e      	ldr	r2, [pc, #56]	; (8019464 <RadioSetMaxPayloadLength+0x50>)
 801942c:	79bb      	ldrb	r3, [r7, #6]
 801942e:	7013      	strb	r3, [r2, #0]
 8019430:	4b0c      	ldr	r3, [pc, #48]	; (8019464 <RadioSetMaxPayloadLength+0x50>)
 8019432:	781a      	ldrb	r2, [r3, #0]
 8019434:	4b0c      	ldr	r3, [pc, #48]	; (8019468 <RadioSetMaxPayloadLength+0x54>)
 8019436:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019438:	480c      	ldr	r0, [pc, #48]	; (801946c <RadioSetMaxPayloadLength+0x58>)
 801943a:	f001 fd43 	bl	801aec4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801943e:	e00d      	b.n	801945c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019440:	4b09      	ldr	r3, [pc, #36]	; (8019468 <RadioSetMaxPayloadLength+0x54>)
 8019442:	7d5b      	ldrb	r3, [r3, #21]
 8019444:	2b01      	cmp	r3, #1
 8019446:	d109      	bne.n	801945c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019448:	4a06      	ldr	r2, [pc, #24]	; (8019464 <RadioSetMaxPayloadLength+0x50>)
 801944a:	79bb      	ldrb	r3, [r7, #6]
 801944c:	7013      	strb	r3, [r2, #0]
 801944e:	4b05      	ldr	r3, [pc, #20]	; (8019464 <RadioSetMaxPayloadLength+0x50>)
 8019450:	781a      	ldrb	r2, [r3, #0]
 8019452:	4b05      	ldr	r3, [pc, #20]	; (8019468 <RadioSetMaxPayloadLength+0x54>)
 8019454:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019456:	4805      	ldr	r0, [pc, #20]	; (801946c <RadioSetMaxPayloadLength+0x58>)
 8019458:	f001 fd34 	bl	801aec4 <SUBGRF_SetPacketParams>
}
 801945c:	bf00      	nop
 801945e:	3708      	adds	r7, #8
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	20000124 	.word	0x20000124
 8019468:	20001ae8 	.word	0x20001ae8
 801946c:	20001af6 	.word	0x20001af6

08019470 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	4603      	mov	r3, r0
 8019478:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801947a:	4a13      	ldr	r2, [pc, #76]	; (80194c8 <RadioSetPublicNetwork+0x58>)
 801947c:	79fb      	ldrb	r3, [r7, #7]
 801947e:	7313      	strb	r3, [r2, #12]
 8019480:	4b11      	ldr	r3, [pc, #68]	; (80194c8 <RadioSetPublicNetwork+0x58>)
 8019482:	7b1a      	ldrb	r2, [r3, #12]
 8019484:	4b10      	ldr	r3, [pc, #64]	; (80194c8 <RadioSetPublicNetwork+0x58>)
 8019486:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019488:	2001      	movs	r0, #1
 801948a:	f7ff f82d 	bl	80184e8 <RadioSetModem>
    if( enable == true )
 801948e:	79fb      	ldrb	r3, [r7, #7]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d00a      	beq.n	80194aa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019494:	2134      	movs	r1, #52	; 0x34
 8019496:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801949a:	f001 fe5b 	bl	801b154 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801949e:	2144      	movs	r1, #68	; 0x44
 80194a0:	f240 7041 	movw	r0, #1857	; 0x741
 80194a4:	f001 fe56 	bl	801b154 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80194a8:	e009      	b.n	80194be <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80194aa:	2114      	movs	r1, #20
 80194ac:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80194b0:	f001 fe50 	bl	801b154 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80194b4:	2124      	movs	r1, #36	; 0x24
 80194b6:	f240 7041 	movw	r0, #1857	; 0x741
 80194ba:	f001 fe4b 	bl	801b154 <SUBGRF_WriteRegister>
}
 80194be:	bf00      	nop
 80194c0:	3708      	adds	r7, #8
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	bf00      	nop
 80194c8:	20001ae8 	.word	0x20001ae8

080194cc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80194d0:	f001 ff90 	bl	801b3f4 <SUBGRF_GetRadioWakeUpTime>
 80194d4:	4603      	mov	r3, r0
 80194d6:	3303      	adds	r3, #3
}
 80194d8:	4618      	mov	r0, r3
 80194da:	bd80      	pop	{r7, pc}

080194dc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b082      	sub	sp, #8
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80194e4:	f000 f80e 	bl	8019504 <RadioOnTxTimeoutProcess>
}
 80194e8:	bf00      	nop
 80194ea:	3708      	adds	r7, #8
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}

080194f0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80194f8:	f000 f818 	bl	801952c <RadioOnRxTimeoutProcess>
}
 80194fc:	bf00      	nop
 80194fe:	3708      	adds	r7, #8
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}

08019504 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019504:	b580      	push	{r7, lr}
 8019506:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019508:	4b07      	ldr	r3, [pc, #28]	; (8019528 <RadioOnTxTimeoutProcess+0x24>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d008      	beq.n	8019522 <RadioOnTxTimeoutProcess+0x1e>
 8019510:	4b05      	ldr	r3, [pc, #20]	; (8019528 <RadioOnTxTimeoutProcess+0x24>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	685b      	ldr	r3, [r3, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d003      	beq.n	8019522 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801951a:	4b03      	ldr	r3, [pc, #12]	; (8019528 <RadioOnTxTimeoutProcess+0x24>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	4798      	blx	r3
    }
}
 8019522:	bf00      	nop
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	20001ae4 	.word	0x20001ae4

0801952c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801952c:	b580      	push	{r7, lr}
 801952e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019530:	4b07      	ldr	r3, [pc, #28]	; (8019550 <RadioOnRxTimeoutProcess+0x24>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d008      	beq.n	801954a <RadioOnRxTimeoutProcess+0x1e>
 8019538:	4b05      	ldr	r3, [pc, #20]	; (8019550 <RadioOnRxTimeoutProcess+0x24>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	68db      	ldr	r3, [r3, #12]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d003      	beq.n	801954a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019542:	4b03      	ldr	r3, [pc, #12]	; (8019550 <RadioOnRxTimeoutProcess+0x24>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	68db      	ldr	r3, [r3, #12]
 8019548:	4798      	blx	r3
    }
}
 801954a:	bf00      	nop
 801954c:	bd80      	pop	{r7, pc}
 801954e:	bf00      	nop
 8019550:	20001ae4 	.word	0x20001ae4

08019554 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b082      	sub	sp, #8
 8019558:	af00      	add	r7, sp, #0
 801955a:	4603      	mov	r3, r0
 801955c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801955e:	4a05      	ldr	r2, [pc, #20]	; (8019574 <RadioOnDioIrq+0x20>)
 8019560:	88fb      	ldrh	r3, [r7, #6]
 8019562:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8019566:	f000 f807 	bl	8019578 <RadioIrqProcess>
}
 801956a:	bf00      	nop
 801956c:	3708      	adds	r7, #8
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	20001ae8 	.word	0x20001ae8

08019578 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019578:	b590      	push	{r4, r7, lr}
 801957a:	b083      	sub	sp, #12
 801957c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801957e:	2300      	movs	r3, #0
 8019580:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019582:	2300      	movs	r3, #0
 8019584:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019586:	4ba8      	ldr	r3, [pc, #672]	; (8019828 <RadioIrqProcess+0x2b0>)
 8019588:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801958c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019590:	f000 810c 	beq.w	80197ac <RadioIrqProcess+0x234>
 8019594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019598:	f300 81e8 	bgt.w	801996c <RadioIrqProcess+0x3f4>
 801959c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195a0:	f000 80f0 	beq.w	8019784 <RadioIrqProcess+0x20c>
 80195a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195a8:	f300 81e0 	bgt.w	801996c <RadioIrqProcess+0x3f4>
 80195ac:	2b80      	cmp	r3, #128	; 0x80
 80195ae:	f000 80d5 	beq.w	801975c <RadioIrqProcess+0x1e4>
 80195b2:	2b80      	cmp	r3, #128	; 0x80
 80195b4:	f300 81da 	bgt.w	801996c <RadioIrqProcess+0x3f4>
 80195b8:	2b20      	cmp	r3, #32
 80195ba:	dc49      	bgt.n	8019650 <RadioIrqProcess+0xd8>
 80195bc:	2b00      	cmp	r3, #0
 80195be:	f340 81d5 	ble.w	801996c <RadioIrqProcess+0x3f4>
 80195c2:	3b01      	subs	r3, #1
 80195c4:	2b1f      	cmp	r3, #31
 80195c6:	f200 81d1 	bhi.w	801996c <RadioIrqProcess+0x3f4>
 80195ca:	a201      	add	r2, pc, #4	; (adr r2, 80195d0 <RadioIrqProcess+0x58>)
 80195cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195d0:	08019659 	.word	0x08019659
 80195d4:	08019693 	.word	0x08019693
 80195d8:	0801996d 	.word	0x0801996d
 80195dc:	08019849 	.word	0x08019849
 80195e0:	0801996d 	.word	0x0801996d
 80195e4:	0801996d 	.word	0x0801996d
 80195e8:	0801996d 	.word	0x0801996d
 80195ec:	080198c5 	.word	0x080198c5
 80195f0:	0801996d 	.word	0x0801996d
 80195f4:	0801996d 	.word	0x0801996d
 80195f8:	0801996d 	.word	0x0801996d
 80195fc:	0801996d 	.word	0x0801996d
 8019600:	0801996d 	.word	0x0801996d
 8019604:	0801996d 	.word	0x0801996d
 8019608:	0801996d 	.word	0x0801996d
 801960c:	080198e1 	.word	0x080198e1
 8019610:	0801996d 	.word	0x0801996d
 8019614:	0801996d 	.word	0x0801996d
 8019618:	0801996d 	.word	0x0801996d
 801961c:	0801996d 	.word	0x0801996d
 8019620:	0801996d 	.word	0x0801996d
 8019624:	0801996d 	.word	0x0801996d
 8019628:	0801996d 	.word	0x0801996d
 801962c:	0801996d 	.word	0x0801996d
 8019630:	0801996d 	.word	0x0801996d
 8019634:	0801996d 	.word	0x0801996d
 8019638:	0801996d 	.word	0x0801996d
 801963c:	0801996d 	.word	0x0801996d
 8019640:	0801996d 	.word	0x0801996d
 8019644:	0801996d 	.word	0x0801996d
 8019648:	0801996d 	.word	0x0801996d
 801964c:	080198ef 	.word	0x080198ef
 8019650:	2b40      	cmp	r3, #64	; 0x40
 8019652:	f000 816d 	beq.w	8019930 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8019656:	e189      	b.n	801996c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019658:	4874      	ldr	r0, [pc, #464]	; (801982c <RadioIrqProcess+0x2b4>)
 801965a:	f002 ff8b 	bl	801c574 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801965e:	2000      	movs	r0, #0
 8019660:	f000 fff8 	bl	801a654 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019664:	f002 f85a 	bl	801b71c <RFW_Is_LongPacketModeEnabled>
 8019668:	4603      	mov	r3, r0
 801966a:	2b01      	cmp	r3, #1
 801966c:	d101      	bne.n	8019672 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801966e:	f002 f87e 	bl	801b76e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019672:	4b6f      	ldr	r3, [pc, #444]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	2b00      	cmp	r3, #0
 8019678:	f000 817a 	beq.w	8019970 <RadioIrqProcess+0x3f8>
 801967c:	4b6c      	ldr	r3, [pc, #432]	; (8019830 <RadioIrqProcess+0x2b8>)
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	2b00      	cmp	r3, #0
 8019684:	f000 8174 	beq.w	8019970 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019688:	4b69      	ldr	r3, [pc, #420]	; (8019830 <RadioIrqProcess+0x2b8>)
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	4798      	blx	r3
        break;
 8019690:	e16e      	b.n	8019970 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019692:	4868      	ldr	r0, [pc, #416]	; (8019834 <RadioIrqProcess+0x2bc>)
 8019694:	f002 ff6e 	bl	801c574 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019698:	4b63      	ldr	r3, [pc, #396]	; (8019828 <RadioIrqProcess+0x2b0>)
 801969a:	785b      	ldrb	r3, [r3, #1]
 801969c:	f083 0301 	eor.w	r3, r3, #1
 80196a0:	b2db      	uxtb	r3, r3
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d014      	beq.n	80196d0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80196a6:	2000      	movs	r0, #0
 80196a8:	f000 ffd4 	bl	801a654 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80196ac:	2100      	movs	r1, #0
 80196ae:	f640 1002 	movw	r0, #2306	; 0x902
 80196b2:	f001 fd4f 	bl	801b154 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80196b6:	f640 1044 	movw	r0, #2372	; 0x944
 80196ba:	f001 fd5f 	bl	801b17c <SUBGRF_ReadRegister>
 80196be:	4603      	mov	r3, r0
 80196c0:	f043 0302 	orr.w	r3, r3, #2
 80196c4:	b2db      	uxtb	r3, r3
 80196c6:	4619      	mov	r1, r3
 80196c8:	f640 1044 	movw	r0, #2372	; 0x944
 80196cc:	f001 fd42 	bl	801b154 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80196d0:	1dfb      	adds	r3, r7, #7
 80196d2:	22ff      	movs	r2, #255	; 0xff
 80196d4:	4619      	mov	r1, r3
 80196d6:	4858      	ldr	r0, [pc, #352]	; (8019838 <RadioIrqProcess+0x2c0>)
 80196d8:	f000 fe8c 	bl	801a3f4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80196dc:	4857      	ldr	r0, [pc, #348]	; (801983c <RadioIrqProcess+0x2c4>)
 80196de:	f001 fce7 	bl	801b0b0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80196e2:	4b53      	ldr	r3, [pc, #332]	; (8019830 <RadioIrqProcess+0x2b8>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d036      	beq.n	8019758 <RadioIrqProcess+0x1e0>
 80196ea:	4b51      	ldr	r3, [pc, #324]	; (8019830 <RadioIrqProcess+0x2b8>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	689b      	ldr	r3, [r3, #8]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d031      	beq.n	8019758 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80196f4:	4b4c      	ldr	r3, [pc, #304]	; (8019828 <RadioIrqProcess+0x2b0>)
 80196f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80196fa:	2b01      	cmp	r3, #1
 80196fc:	d10e      	bne.n	801971c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80196fe:	4b4c      	ldr	r3, [pc, #304]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	689c      	ldr	r4, [r3, #8]
 8019704:	79fb      	ldrb	r3, [r7, #7]
 8019706:	b299      	uxth	r1, r3
 8019708:	4b47      	ldr	r3, [pc, #284]	; (8019828 <RadioIrqProcess+0x2b0>)
 801970a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801970e:	b21a      	sxth	r2, r3
 8019710:	4b45      	ldr	r3, [pc, #276]	; (8019828 <RadioIrqProcess+0x2b0>)
 8019712:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019716:	4848      	ldr	r0, [pc, #288]	; (8019838 <RadioIrqProcess+0x2c0>)
 8019718:	47a0      	blx	r4
                break;
 801971a:	e01e      	b.n	801975a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801971c:	4b42      	ldr	r3, [pc, #264]	; (8019828 <RadioIrqProcess+0x2b0>)
 801971e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019720:	463a      	mov	r2, r7
 8019722:	4611      	mov	r1, r2
 8019724:	4618      	mov	r0, r3
 8019726:	f001 ff47 	bl	801b5b8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801972a:	4b41      	ldr	r3, [pc, #260]	; (8019830 <RadioIrqProcess+0x2b8>)
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	689c      	ldr	r4, [r3, #8]
 8019730:	79fb      	ldrb	r3, [r7, #7]
 8019732:	b299      	uxth	r1, r3
 8019734:	4b3c      	ldr	r3, [pc, #240]	; (8019828 <RadioIrqProcess+0x2b0>)
 8019736:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801973a:	b218      	sxth	r0, r3
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019742:	4a3f      	ldr	r2, [pc, #252]	; (8019840 <RadioIrqProcess+0x2c8>)
 8019744:	fb82 c203 	smull	ip, r2, r2, r3
 8019748:	1192      	asrs	r2, r2, #6
 801974a:	17db      	asrs	r3, r3, #31
 801974c:	1ad3      	subs	r3, r2, r3
 801974e:	b25b      	sxtb	r3, r3
 8019750:	4602      	mov	r2, r0
 8019752:	4839      	ldr	r0, [pc, #228]	; (8019838 <RadioIrqProcess+0x2c0>)
 8019754:	47a0      	blx	r4
                break;
 8019756:	e000      	b.n	801975a <RadioIrqProcess+0x1e2>
        }
 8019758:	bf00      	nop
        break;
 801975a:	e118      	b.n	801998e <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801975c:	2000      	movs	r0, #0
 801975e:	f000 ff79 	bl	801a654 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019762:	4b33      	ldr	r3, [pc, #204]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	2b00      	cmp	r3, #0
 8019768:	f000 8104 	beq.w	8019974 <RadioIrqProcess+0x3fc>
 801976c:	4b30      	ldr	r3, [pc, #192]	; (8019830 <RadioIrqProcess+0x2b8>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	699b      	ldr	r3, [r3, #24]
 8019772:	2b00      	cmp	r3, #0
 8019774:	f000 80fe 	beq.w	8019974 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8019778:	4b2d      	ldr	r3, [pc, #180]	; (8019830 <RadioIrqProcess+0x2b8>)
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	699b      	ldr	r3, [r3, #24]
 801977e:	2000      	movs	r0, #0
 8019780:	4798      	blx	r3
        break;
 8019782:	e0f7      	b.n	8019974 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019784:	2000      	movs	r0, #0
 8019786:	f000 ff65 	bl	801a654 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801978a:	4b29      	ldr	r3, [pc, #164]	; (8019830 <RadioIrqProcess+0x2b8>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	2b00      	cmp	r3, #0
 8019790:	f000 80f2 	beq.w	8019978 <RadioIrqProcess+0x400>
 8019794:	4b26      	ldr	r3, [pc, #152]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	699b      	ldr	r3, [r3, #24]
 801979a:	2b00      	cmp	r3, #0
 801979c:	f000 80ec 	beq.w	8019978 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 80197a0:	4b23      	ldr	r3, [pc, #140]	; (8019830 <RadioIrqProcess+0x2b8>)
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	699b      	ldr	r3, [r3, #24]
 80197a6:	2001      	movs	r0, #1
 80197a8:	4798      	blx	r3
        break;
 80197aa:	e0e5      	b.n	8019978 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80197ac:	4b25      	ldr	r3, [pc, #148]	; (8019844 <RadioIrqProcess+0x2cc>)
 80197ae:	2201      	movs	r2, #1
 80197b0:	2100      	movs	r1, #0
 80197b2:	2002      	movs	r0, #2
 80197b4:	f003 f8e8 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80197b8:	f000 fe02 	bl	801a3c0 <SUBGRF_GetOperatingMode>
 80197bc:	4603      	mov	r3, r0
 80197be:	2b04      	cmp	r3, #4
 80197c0:	d115      	bne.n	80197ee <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80197c2:	481a      	ldr	r0, [pc, #104]	; (801982c <RadioIrqProcess+0x2b4>)
 80197c4:	f002 fed6 	bl	801c574 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80197c8:	2000      	movs	r0, #0
 80197ca:	f000 ff43 	bl	801a654 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80197ce:	4b18      	ldr	r3, [pc, #96]	; (8019830 <RadioIrqProcess+0x2b8>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	f000 80d2 	beq.w	801997c <RadioIrqProcess+0x404>
 80197d8:	4b15      	ldr	r3, [pc, #84]	; (8019830 <RadioIrqProcess+0x2b8>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f000 80cc 	beq.w	801997c <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 80197e4:	4b12      	ldr	r3, [pc, #72]	; (8019830 <RadioIrqProcess+0x2b8>)
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	4798      	blx	r3
        break;
 80197ec:	e0c6      	b.n	801997c <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80197ee:	f000 fde7 	bl	801a3c0 <SUBGRF_GetOperatingMode>
 80197f2:	4603      	mov	r3, r0
 80197f4:	2b05      	cmp	r3, #5
 80197f6:	f040 80c1 	bne.w	801997c <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 80197fa:	480e      	ldr	r0, [pc, #56]	; (8019834 <RadioIrqProcess+0x2bc>)
 80197fc:	f002 feba 	bl	801c574 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019800:	2000      	movs	r0, #0
 8019802:	f000 ff27 	bl	801a654 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019806:	4b0a      	ldr	r3, [pc, #40]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	2b00      	cmp	r3, #0
 801980c:	f000 80b6 	beq.w	801997c <RadioIrqProcess+0x404>
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <RadioIrqProcess+0x2b8>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	68db      	ldr	r3, [r3, #12]
 8019816:	2b00      	cmp	r3, #0
 8019818:	f000 80b0 	beq.w	801997c <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801981c:	4b04      	ldr	r3, [pc, #16]	; (8019830 <RadioIrqProcess+0x2b8>)
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	68db      	ldr	r3, [r3, #12]
 8019822:	4798      	blx	r3
        break;
 8019824:	e0aa      	b.n	801997c <RadioIrqProcess+0x404>
 8019826:	bf00      	nop
 8019828:	20001ae8 	.word	0x20001ae8
 801982c:	20001b44 	.word	0x20001b44
 8019830:	20001ae4 	.word	0x20001ae4
 8019834:	20001b5c 	.word	0x20001b5c
 8019838:	200019e4 	.word	0x200019e4
 801983c:	20001b0c 	.word	0x20001b0c
 8019840:	10624dd3 	.word	0x10624dd3
 8019844:	0801d6b8 	.word	0x0801d6b8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019848:	4b53      	ldr	r3, [pc, #332]	; (8019998 <RadioIrqProcess+0x420>)
 801984a:	2201      	movs	r2, #1
 801984c:	2100      	movs	r1, #0
 801984e:	2002      	movs	r0, #2
 8019850:	f003 f89a 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019854:	4b51      	ldr	r3, [pc, #324]	; (801999c <RadioIrqProcess+0x424>)
 8019856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019858:	2b00      	cmp	r3, #0
 801985a:	f000 8091 	beq.w	8019980 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801985e:	4a50      	ldr	r2, [pc, #320]	; (80199a0 <RadioIrqProcess+0x428>)
 8019860:	4b4e      	ldr	r3, [pc, #312]	; (801999c <RadioIrqProcess+0x424>)
 8019862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019864:	0c1b      	lsrs	r3, r3, #16
 8019866:	b2db      	uxtb	r3, r3
 8019868:	4619      	mov	r1, r3
 801986a:	f640 1003 	movw	r0, #2307	; 0x903
 801986e:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8019870:	4a4b      	ldr	r2, [pc, #300]	; (80199a0 <RadioIrqProcess+0x428>)
 8019872:	4b4a      	ldr	r3, [pc, #296]	; (801999c <RadioIrqProcess+0x424>)
 8019874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019876:	0a1b      	lsrs	r3, r3, #8
 8019878:	b2db      	uxtb	r3, r3
 801987a:	4619      	mov	r1, r3
 801987c:	f640 1004 	movw	r0, #2308	; 0x904
 8019880:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8019882:	4a47      	ldr	r2, [pc, #284]	; (80199a0 <RadioIrqProcess+0x428>)
 8019884:	4b45      	ldr	r3, [pc, #276]	; (801999c <RadioIrqProcess+0x424>)
 8019886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019888:	b2db      	uxtb	r3, r3
 801988a:	4619      	mov	r1, r3
 801988c:	f640 1005 	movw	r0, #2309	; 0x905
 8019890:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8019892:	4c43      	ldr	r4, [pc, #268]	; (80199a0 <RadioIrqProcess+0x428>)
 8019894:	4b43      	ldr	r3, [pc, #268]	; (80199a4 <RadioIrqProcess+0x42c>)
 8019896:	f640 1002 	movw	r0, #2306	; 0x902
 801989a:	4798      	blx	r3
 801989c:	4603      	mov	r3, r0
 801989e:	f043 0301 	orr.w	r3, r3, #1
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	4619      	mov	r1, r3
 80198a6:	f640 1002 	movw	r0, #2306	; 0x902
 80198aa:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80198ac:	4b3b      	ldr	r3, [pc, #236]	; (801999c <RadioIrqProcess+0x424>)
 80198ae:	2200      	movs	r2, #0
 80198b0:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80198b2:	2300      	movs	r3, #0
 80198b4:	2200      	movs	r2, #0
 80198b6:	f240 2162 	movw	r1, #610	; 0x262
 80198ba:	f240 2062 	movw	r0, #610	; 0x262
 80198be:	f001 f899 	bl	801a9f4 <SUBGRF_SetDioIrqParams>
        break;
 80198c2:	e05d      	b.n	8019980 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80198c4:	4b38      	ldr	r3, [pc, #224]	; (80199a8 <RadioIrqProcess+0x430>)
 80198c6:	2201      	movs	r2, #1
 80198c8:	2100      	movs	r1, #0
 80198ca:	2002      	movs	r0, #2
 80198cc:	f003 f85c 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80198d0:	f001 ff1d 	bl	801b70e <RFW_Is_Init>
 80198d4:	4603      	mov	r3, r0
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d154      	bne.n	8019984 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80198da:	f001 ff4e 	bl	801b77a <RFW_ReceivePayload>
        break;
 80198de:	e051      	b.n	8019984 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80198e0:	4b32      	ldr	r3, [pc, #200]	; (80199ac <RadioIrqProcess+0x434>)
 80198e2:	2201      	movs	r2, #1
 80198e4:	2100      	movs	r1, #0
 80198e6:	2002      	movs	r0, #2
 80198e8:	f003 f84e 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80198ec:	e04f      	b.n	801998e <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80198ee:	4830      	ldr	r0, [pc, #192]	; (80199b0 <RadioIrqProcess+0x438>)
 80198f0:	f002 fe40 	bl	801c574 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80198f4:	4b29      	ldr	r3, [pc, #164]	; (801999c <RadioIrqProcess+0x424>)
 80198f6:	785b      	ldrb	r3, [r3, #1]
 80198f8:	f083 0301 	eor.w	r3, r3, #1
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d002      	beq.n	8019908 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019902:	2000      	movs	r0, #0
 8019904:	f000 fea6 	bl	801a654 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019908:	4b2a      	ldr	r3, [pc, #168]	; (80199b4 <RadioIrqProcess+0x43c>)
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d03b      	beq.n	8019988 <RadioIrqProcess+0x410>
 8019910:	4b28      	ldr	r3, [pc, #160]	; (80199b4 <RadioIrqProcess+0x43c>)
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	68db      	ldr	r3, [r3, #12]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d036      	beq.n	8019988 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801991a:	4b26      	ldr	r3, [pc, #152]	; (80199b4 <RadioIrqProcess+0x43c>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	68db      	ldr	r3, [r3, #12]
 8019920:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019922:	4b25      	ldr	r3, [pc, #148]	; (80199b8 <RadioIrqProcess+0x440>)
 8019924:	2201      	movs	r2, #1
 8019926:	2100      	movs	r1, #0
 8019928:	2002      	movs	r0, #2
 801992a:	f003 f82d 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801992e:	e02b      	b.n	8019988 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019930:	4b22      	ldr	r3, [pc, #136]	; (80199bc <RadioIrqProcess+0x444>)
 8019932:	2201      	movs	r2, #1
 8019934:	2100      	movs	r1, #0
 8019936:	2002      	movs	r0, #2
 8019938:	f003 f826 	bl	801c988 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801993c:	4b17      	ldr	r3, [pc, #92]	; (801999c <RadioIrqProcess+0x424>)
 801993e:	785b      	ldrb	r3, [r3, #1]
 8019940:	f083 0301 	eor.w	r3, r3, #1
 8019944:	b2db      	uxtb	r3, r3
 8019946:	2b00      	cmp	r3, #0
 8019948:	d002      	beq.n	8019950 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801994a:	2000      	movs	r0, #0
 801994c:	f000 fe82 	bl	801a654 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019950:	4b18      	ldr	r3, [pc, #96]	; (80199b4 <RadioIrqProcess+0x43c>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d019      	beq.n	801998c <RadioIrqProcess+0x414>
 8019958:	4b16      	ldr	r3, [pc, #88]	; (80199b4 <RadioIrqProcess+0x43c>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	691b      	ldr	r3, [r3, #16]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d014      	beq.n	801998c <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8019962:	4b14      	ldr	r3, [pc, #80]	; (80199b4 <RadioIrqProcess+0x43c>)
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	691b      	ldr	r3, [r3, #16]
 8019968:	4798      	blx	r3
        break;
 801996a:	e00f      	b.n	801998c <RadioIrqProcess+0x414>
        break;
 801996c:	bf00      	nop
 801996e:	e00e      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019970:	bf00      	nop
 8019972:	e00c      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019974:	bf00      	nop
 8019976:	e00a      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019978:	bf00      	nop
 801997a:	e008      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 801997c:	bf00      	nop
 801997e:	e006      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019980:	bf00      	nop
 8019982:	e004      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019984:	bf00      	nop
 8019986:	e002      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 8019988:	bf00      	nop
 801998a:	e000      	b.n	801998e <RadioIrqProcess+0x416>
        break;
 801998c:	bf00      	nop
    }
}
 801998e:	bf00      	nop
 8019990:	370c      	adds	r7, #12
 8019992:	46bd      	mov	sp, r7
 8019994:	bd90      	pop	{r4, r7, pc}
 8019996:	bf00      	nop
 8019998:	0801d6cc 	.word	0x0801d6cc
 801999c:	20001ae8 	.word	0x20001ae8
 80199a0:	08019387 	.word	0x08019387
 80199a4:	080193ab 	.word	0x080193ab
 80199a8:	0801d6d8 	.word	0x0801d6d8
 80199ac:	0801d6e4 	.word	0x0801d6e4
 80199b0:	20001b5c 	.word	0x20001b5c
 80199b4:	20001ae4 	.word	0x20001ae4
 80199b8:	0801d6f0 	.word	0x0801d6f0
 80199bc:	0801d6fc 	.word	0x0801d6fc

080199c0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80199c4:	4b09      	ldr	r3, [pc, #36]	; (80199ec <RadioTxPrbs+0x2c>)
 80199c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80199ca:	2101      	movs	r1, #1
 80199cc:	4618      	mov	r0, r3
 80199ce:	f001 fcb5 	bl	801b33c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80199d2:	4b07      	ldr	r3, [pc, #28]	; (80199f0 <RadioTxPrbs+0x30>)
 80199d4:	212d      	movs	r1, #45	; 0x2d
 80199d6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80199da:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80199dc:	f000 fefd 	bl	801a7da <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80199e0:	4804      	ldr	r0, [pc, #16]	; (80199f4 <RadioTxPrbs+0x34>)
 80199e2:	f000 fe53 	bl	801a68c <SUBGRF_SetTx>
}
 80199e6:	bf00      	nop
 80199e8:	bd80      	pop	{r7, pc}
 80199ea:	bf00      	nop
 80199ec:	20001ae8 	.word	0x20001ae8
 80199f0:	08019387 	.word	0x08019387
 80199f4:	000fffff 	.word	0x000fffff

080199f8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b084      	sub	sp, #16
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	4603      	mov	r3, r0
 8019a00:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a06:	4618      	mov	r0, r3
 8019a08:	f001 fcc0 	bl	801b38c <SUBGRF_SetRfTxPower>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019a10:	7bfb      	ldrb	r3, [r7, #15]
 8019a12:	2101      	movs	r1, #1
 8019a14:	4618      	mov	r0, r3
 8019a16:	f001 fc91 	bl	801b33c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019a1a:	f000 fed5 	bl	801a7c8 <SUBGRF_SetTxContinuousWave>
}
 8019a1e:	bf00      	nop
 8019a20:	3710      	adds	r7, #16
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}

08019a26 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019a26:	b480      	push	{r7}
 8019a28:	b089      	sub	sp, #36	; 0x24
 8019a2a:	af00      	add	r7, sp, #0
 8019a2c:	60f8      	str	r0, [r7, #12]
 8019a2e:	60b9      	str	r1, [r7, #8]
 8019a30:	4613      	mov	r3, r2
 8019a32:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019a34:	2300      	movs	r3, #0
 8019a36:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	61bb      	str	r3, [r7, #24]
 8019a40:	e011      	b.n	8019a66 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019a42:	69bb      	ldr	r3, [r7, #24]
 8019a44:	68ba      	ldr	r2, [r7, #8]
 8019a46:	4413      	add	r3, r2
 8019a48:	781a      	ldrb	r2, [r3, #0]
 8019a4a:	69bb      	ldr	r3, [r7, #24]
 8019a4c:	68b9      	ldr	r1, [r7, #8]
 8019a4e:	440b      	add	r3, r1
 8019a50:	43d2      	mvns	r2, r2
 8019a52:	b2d2      	uxtb	r2, r2
 8019a54:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019a56:	69bb      	ldr	r3, [r7, #24]
 8019a58:	68fa      	ldr	r2, [r7, #12]
 8019a5a:	4413      	add	r3, r2
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	3301      	adds	r3, #1
 8019a64:	61bb      	str	r3, [r7, #24]
 8019a66:	79fb      	ldrb	r3, [r7, #7]
 8019a68:	69ba      	ldr	r2, [r7, #24]
 8019a6a:	429a      	cmp	r2, r3
 8019a6c:	dbe9      	blt.n	8019a42 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019a6e:	2300      	movs	r3, #0
 8019a70:	61bb      	str	r3, [r7, #24]
 8019a72:	e049      	b.n	8019b08 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	425a      	negs	r2, r3
 8019a78:	f003 0307 	and.w	r3, r3, #7
 8019a7c:	f002 0207 	and.w	r2, r2, #7
 8019a80:	bf58      	it	pl
 8019a82:	4253      	negpl	r3, r2
 8019a84:	b2db      	uxtb	r3, r3
 8019a86:	f1c3 0307 	rsb	r3, r3, #7
 8019a8a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019a8c:	69bb      	ldr	r3, [r7, #24]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	da00      	bge.n	8019a94 <payload_integration+0x6e>
 8019a92:	3307      	adds	r3, #7
 8019a94:	10db      	asrs	r3, r3, #3
 8019a96:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	3301      	adds	r3, #1
 8019a9c:	425a      	negs	r2, r3
 8019a9e:	f003 0307 	and.w	r3, r3, #7
 8019aa2:	f002 0207 	and.w	r2, r2, #7
 8019aa6:	bf58      	it	pl
 8019aa8:	4253      	negpl	r3, r2
 8019aaa:	b2db      	uxtb	r3, r3
 8019aac:	f1c3 0307 	rsb	r3, r3, #7
 8019ab0:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019ab2:	69bb      	ldr	r3, [r7, #24]
 8019ab4:	3301      	adds	r3, #1
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	da00      	bge.n	8019abc <payload_integration+0x96>
 8019aba:	3307      	adds	r3, #7
 8019abc:	10db      	asrs	r3, r3, #3
 8019abe:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019ac0:	7dbb      	ldrb	r3, [r7, #22]
 8019ac2:	68ba      	ldr	r2, [r7, #8]
 8019ac4:	4413      	add	r3, r2
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	461a      	mov	r2, r3
 8019aca:	7dfb      	ldrb	r3, [r7, #23]
 8019acc:	fa42 f303 	asr.w	r3, r2, r3
 8019ad0:	b2db      	uxtb	r3, r3
 8019ad2:	f003 0301 	and.w	r3, r3, #1
 8019ad6:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019ad8:	7ffa      	ldrb	r2, [r7, #31]
 8019ada:	7cfb      	ldrb	r3, [r7, #19]
 8019adc:	4053      	eors	r3, r2
 8019ade:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019ae0:	7d3b      	ldrb	r3, [r7, #20]
 8019ae2:	68fa      	ldr	r2, [r7, #12]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	b25a      	sxtb	r2, r3
 8019aea:	7ff9      	ldrb	r1, [r7, #31]
 8019aec:	7d7b      	ldrb	r3, [r7, #21]
 8019aee:	fa01 f303 	lsl.w	r3, r1, r3
 8019af2:	b25b      	sxtb	r3, r3
 8019af4:	4313      	orrs	r3, r2
 8019af6:	b259      	sxtb	r1, r3
 8019af8:	7d3b      	ldrb	r3, [r7, #20]
 8019afa:	68fa      	ldr	r2, [r7, #12]
 8019afc:	4413      	add	r3, r2
 8019afe:	b2ca      	uxtb	r2, r1
 8019b00:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019b02:	69bb      	ldr	r3, [r7, #24]
 8019b04:	3301      	adds	r3, #1
 8019b06:	61bb      	str	r3, [r7, #24]
 8019b08:	79fb      	ldrb	r3, [r7, #7]
 8019b0a:	00db      	lsls	r3, r3, #3
 8019b0c:	69ba      	ldr	r2, [r7, #24]
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	dbb0      	blt.n	8019a74 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019b12:	7ffb      	ldrb	r3, [r7, #31]
 8019b14:	01db      	lsls	r3, r3, #7
 8019b16:	b25a      	sxtb	r2, r3
 8019b18:	7ffb      	ldrb	r3, [r7, #31]
 8019b1a:	019b      	lsls	r3, r3, #6
 8019b1c:	b25b      	sxtb	r3, r3
 8019b1e:	4313      	orrs	r3, r2
 8019b20:	b25b      	sxtb	r3, r3
 8019b22:	7ffa      	ldrb	r2, [r7, #31]
 8019b24:	2a00      	cmp	r2, #0
 8019b26:	d101      	bne.n	8019b2c <payload_integration+0x106>
 8019b28:	2220      	movs	r2, #32
 8019b2a:	e000      	b.n	8019b2e <payload_integration+0x108>
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	4313      	orrs	r3, r2
 8019b30:	b259      	sxtb	r1, r3
 8019b32:	79fb      	ldrb	r3, [r7, #7]
 8019b34:	68fa      	ldr	r2, [r7, #12]
 8019b36:	4413      	add	r3, r2
 8019b38:	b2ca      	uxtb	r2, r1
 8019b3a:	701a      	strb	r2, [r3, #0]
}
 8019b3c:	bf00      	nop
 8019b3e:	3724      	adds	r7, #36	; 0x24
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bc80      	pop	{r7}
 8019b44:	4770      	bx	lr
	...

08019b48 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b08c      	sub	sp, #48	; 0x30
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	60b9      	str	r1, [r7, #8]
 8019b50:	607a      	str	r2, [r7, #4]
 8019b52:	603b      	str	r3, [r7, #0]
 8019b54:	4603      	mov	r3, r0
 8019b56:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019b58:	2300      	movs	r3, #0
 8019b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	623b      	str	r3, [r7, #32]
 8019b60:	2300      	movs	r3, #0
 8019b62:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019b64:	f001 fdcd 	bl	801b702 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d001      	beq.n	8019b72 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	bf14      	ite	ne
 8019b78:	2301      	movne	r3, #1
 8019b7a:	2300      	moveq	r3, #0
 8019b7c:	b2da      	uxtb	r2, r3
 8019b7e:	4ba3      	ldr	r3, [pc, #652]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019b80:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019b82:	7bfb      	ldrb	r3, [r7, #15]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d003      	beq.n	8019b90 <RadioSetRxGenericConfig+0x48>
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	f000 80dc 	beq.w	8019d46 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019b8e:	e194      	b.n	8019eba <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	689b      	ldr	r3, [r3, #8]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d003      	beq.n	8019ba0 <RadioSetRxGenericConfig+0x58>
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	68db      	ldr	r3, [r3, #12]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d102      	bne.n	8019ba6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ba4:	e18a      	b.n	8019ebc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	7f9b      	ldrb	r3, [r3, #30]
 8019baa:	2b08      	cmp	r3, #8
 8019bac:	d902      	bls.n	8019bb4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019bae:	f04f 33ff 	mov.w	r3, #4294967295
 8019bb2:	e183      	b.n	8019ebc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	6919      	ldr	r1, [r3, #16]
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	7f9b      	ldrb	r3, [r3, #30]
 8019bbc:	b29a      	uxth	r2, r3
 8019bbe:	f107 0320 	add.w	r3, r7, #32
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f001 fe90 	bl	801b8e8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	bf14      	ite	ne
 8019bd0:	2301      	movne	r3, #1
 8019bd2:	2300      	moveq	r3, #0
 8019bd4:	b2db      	uxtb	r3, r3
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f000 fe08 	bl	801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019bdc:	4b8b      	ldr	r3, [pc, #556]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019bde:	2200      	movs	r2, #0
 8019be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	689b      	ldr	r3, [r3, #8]
 8019be8:	4a88      	ldr	r2, [pc, #544]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019bea:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019bf2:	4b86      	ldr	r3, [pc, #536]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	685b      	ldr	r3, [r3, #4]
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	f001 fcb3 	bl	801b568 <SUBGRF_GetFskBandwidthRegValue>
 8019c02:	4603      	mov	r3, r0
 8019c04:	461a      	mov	r2, r3
 8019c06:	4b81      	ldr	r3, [pc, #516]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019c0c:	4b7f      	ldr	r3, [pc, #508]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c0e:	2200      	movs	r2, #0
 8019c10:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	68db      	ldr	r3, [r3, #12]
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	00db      	lsls	r3, r3, #3
 8019c1a:	b29a      	uxth	r2, r3
 8019c1c:	4b7b      	ldr	r3, [pc, #492]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c1e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	7fda      	ldrb	r2, [r3, #31]
 8019c24:	4b79      	ldr	r3, [pc, #484]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c26:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019c28:	68bb      	ldr	r3, [r7, #8]
 8019c2a:	7f9b      	ldrb	r3, [r3, #30]
 8019c2c:	00db      	lsls	r3, r3, #3
 8019c2e:	b2da      	uxtb	r2, r3
 8019c30:	4b76      	ldr	r3, [pc, #472]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c32:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019c3a:	4b74      	ldr	r3, [pc, #464]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c3c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019c3e:	68bb      	ldr	r3, [r7, #8]
 8019c40:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d105      	bne.n	8019c54 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	695b      	ldr	r3, [r3, #20]
 8019c4c:	b2da      	uxtb	r2, r3
 8019c4e:	4b6f      	ldr	r3, [pc, #444]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c50:	759a      	strb	r2, [r3, #22]
 8019c52:	e00b      	b.n	8019c6c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019c5a:	2b02      	cmp	r3, #2
 8019c5c:	d103      	bne.n	8019c66 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019c5e:	4b6b      	ldr	r3, [pc, #428]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c60:	22ff      	movs	r2, #255	; 0xff
 8019c62:	759a      	strb	r2, [r3, #22]
 8019c64:	e002      	b.n	8019c6c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019c66:	4b69      	ldr	r3, [pc, #420]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019c68:	22ff      	movs	r2, #255	; 0xff
 8019c6a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019c72:	2b02      	cmp	r3, #2
 8019c74:	d004      	beq.n	8019c80 <RadioSetRxGenericConfig+0x138>
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019c7c:	2b02      	cmp	r3, #2
 8019c7e:	d12d      	bne.n	8019cdc <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019c86:	2bf1      	cmp	r3, #241	; 0xf1
 8019c88:	d00c      	beq.n	8019ca4 <RadioSetRxGenericConfig+0x15c>
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019c90:	2bf2      	cmp	r3, #242	; 0xf2
 8019c92:	d007      	beq.n	8019ca4 <RadioSetRxGenericConfig+0x15c>
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019c9a:	2b01      	cmp	r3, #1
 8019c9c:	d002      	beq.n	8019ca4 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019ca2:	e10b      	b.n	8019ebc <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019cac:	4b58      	ldr	r3, [pc, #352]	; (8019e10 <RadioSetRxGenericConfig+0x2c8>)
 8019cae:	6819      	ldr	r1, [r3, #0]
 8019cb0:	f107 0314 	add.w	r3, r7, #20
 8019cb4:	4a57      	ldr	r2, [pc, #348]	; (8019e14 <RadioSetRxGenericConfig+0x2cc>)
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f001 fd16 	bl	801b6e8 <RFW_Init>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d002      	beq.n	8019cc8 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8019cc6:	e0f9      	b.n	8019ebc <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019cc8:	4b50      	ldr	r3, [pc, #320]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019cca:	2200      	movs	r2, #0
 8019ccc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019cce:	4b4f      	ldr	r3, [pc, #316]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019cd0:	2201      	movs	r2, #1
 8019cd2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019cd4:	4b4d      	ldr	r3, [pc, #308]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	755a      	strb	r2, [r3, #21]
        {
 8019cda:	e00e      	b.n	8019cfa <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019ce2:	4b4a      	ldr	r3, [pc, #296]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019ce4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019cec:	4b47      	ldr	r3, [pc, #284]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019cee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019cf6:	4b45      	ldr	r3, [pc, #276]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019cf8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019cfa:	f7ff fa48 	bl	801918e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019cfe:	2000      	movs	r0, #0
 8019d00:	f7fe fbf2 	bl	80184e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d04:	4844      	ldr	r0, [pc, #272]	; (8019e18 <RadioSetRxGenericConfig+0x2d0>)
 8019d06:	f001 f80b 	bl	801ad20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d0a:	4844      	ldr	r0, [pc, #272]	; (8019e1c <RadioSetRxGenericConfig+0x2d4>)
 8019d0c:	f001 f8da 	bl	801aec4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019d10:	f107 0320 	add.w	r3, r7, #32
 8019d14:	4618      	mov	r0, r3
 8019d16:	f000 fba2 	bl	801a45e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019d1a:	68bb      	ldr	r3, [r7, #8]
 8019d1c:	8b9b      	ldrh	r3, [r3, #28]
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f000 fbec 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	8b1b      	ldrh	r3, [r3, #24]
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f000 fbc7 	bl	801a4bc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019d34:	fb03 f202 	mul.w	r2, r3, r2
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	689b      	ldr	r3, [r3, #8]
 8019d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d40:	4a32      	ldr	r2, [pc, #200]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019d42:	6093      	str	r3, [r2, #8]
        break;
 8019d44:	e0b9      	b.n	8019eba <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d102      	bne.n	8019d54 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d52:	e0b3      	b.n	8019ebc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d104      	bne.n	8019d68 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019d5e:	68bb      	ldr	r3, [r7, #8]
 8019d60:	695b      	ldr	r3, [r3, #20]
 8019d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019d66:	e002      	b.n	8019d6e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019d68:	23ff      	movs	r3, #255	; 0xff
 8019d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019d6e:	68bb      	ldr	r3, [r7, #8]
 8019d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	bf14      	ite	ne
 8019d76:	2301      	movne	r3, #1
 8019d78:	2300      	moveq	r3, #0
 8019d7a:	b2db      	uxtb	r3, r3
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f000 fd35 	bl	801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019d82:	683b      	ldr	r3, [r7, #0]
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	4618      	mov	r0, r3
 8019d88:	f000 fd3f 	bl	801a80a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019d8c:	4b1f      	ldr	r3, [pc, #124]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019d8e:	2201      	movs	r2, #1
 8019d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019d9a:	4b1c      	ldr	r3, [pc, #112]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019da6:	4b19      	ldr	r3, [pc, #100]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8019db2:	4b16      	ldr	r3, [pc, #88]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019db4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019db8:	68bb      	ldr	r3, [r7, #8]
 8019dba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019dbe:	2b02      	cmp	r3, #2
 8019dc0:	d010      	beq.n	8019de4 <RadioSetRxGenericConfig+0x29c>
 8019dc2:	2b02      	cmp	r3, #2
 8019dc4:	dc2c      	bgt.n	8019e20 <RadioSetRxGenericConfig+0x2d8>
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d002      	beq.n	8019dd0 <RadioSetRxGenericConfig+0x288>
 8019dca:	2b01      	cmp	r3, #1
 8019dcc:	d005      	beq.n	8019dda <RadioSetRxGenericConfig+0x292>
            break;
 8019dce:	e027      	b.n	8019e20 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019dd0:	4b0e      	ldr	r3, [pc, #56]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019dd8:	e023      	b.n	8019e22 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019dda:	4b0c      	ldr	r3, [pc, #48]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019ddc:	2201      	movs	r2, #1
 8019dde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019de2:	e01e      	b.n	8019e22 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019dea:	2b0b      	cmp	r3, #11
 8019dec:	d004      	beq.n	8019df8 <RadioSetRxGenericConfig+0x2b0>
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019df4:	2b0c      	cmp	r3, #12
 8019df6:	d104      	bne.n	8019e02 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019df8:	4b04      	ldr	r3, [pc, #16]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019dfa:	2201      	movs	r2, #1
 8019dfc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019e00:	e00f      	b.n	8019e22 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019e02:	4b02      	ldr	r3, [pc, #8]	; (8019e0c <RadioSetRxGenericConfig+0x2c4>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019e0a:	e00a      	b.n	8019e22 <RadioSetRxGenericConfig+0x2da>
 8019e0c:	20001ae8 	.word	0x20001ae8
 8019e10:	20001ae4 	.word	0x20001ae4
 8019e14:	20001b5c 	.word	0x20001b5c
 8019e18:	20001b20 	.word	0x20001b20
 8019e1c:	20001af6 	.word	0x20001af6
            break;
 8019e20:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019e22:	4b28      	ldr	r3, [pc, #160]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e24:	2201      	movs	r2, #1
 8019e26:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019e2c:	4b25      	ldr	r3, [pc, #148]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e2e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019e30:	68bb      	ldr	r3, [r7, #8]
 8019e32:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8019e36:	4b23      	ldr	r3, [pc, #140]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e38:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019e3a:	4a22      	ldr	r2, [pc, #136]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019e40:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8019e48:	4b1e      	ldr	r3, [pc, #120]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e4a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8019e54:	4b1b      	ldr	r3, [pc, #108]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8019e5a:	f7ff f998 	bl	801918e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019e5e:	2001      	movs	r0, #1
 8019e60:	f7fe fb42 	bl	80184e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e64:	4818      	ldr	r0, [pc, #96]	; (8019ec8 <RadioSetRxGenericConfig+0x380>)
 8019e66:	f000 ff5b 	bl	801ad20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e6a:	4818      	ldr	r0, [pc, #96]	; (8019ecc <RadioSetRxGenericConfig+0x384>)
 8019e6c:	f001 f82a 	bl	801aec4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019e70:	4b14      	ldr	r3, [pc, #80]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d10d      	bne.n	8019e96 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019e7a:	f240 7036 	movw	r0, #1846	; 0x736
 8019e7e:	f001 f97d 	bl	801b17c <SUBGRF_ReadRegister>
 8019e82:	4603      	mov	r3, r0
 8019e84:	f023 0304 	bic.w	r3, r3, #4
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	4619      	mov	r1, r3
 8019e8c:	f240 7036 	movw	r0, #1846	; 0x736
 8019e90:	f001 f960 	bl	801b154 <SUBGRF_WriteRegister>
 8019e94:	e00c      	b.n	8019eb0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019e96:	f240 7036 	movw	r0, #1846	; 0x736
 8019e9a:	f001 f96f 	bl	801b17c <SUBGRF_ReadRegister>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	f043 0304 	orr.w	r3, r3, #4
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	4619      	mov	r1, r3
 8019ea8:	f240 7036 	movw	r0, #1846	; 0x736
 8019eac:	f001 f952 	bl	801b154 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019eb0:	4b04      	ldr	r3, [pc, #16]	; (8019ec4 <RadioSetRxGenericConfig+0x37c>)
 8019eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019eb6:	609a      	str	r2, [r3, #8]
        break;
 8019eb8:	bf00      	nop
    }
    return status;
 8019eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3730      	adds	r7, #48	; 0x30
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	20001ae8 	.word	0x20001ae8
 8019ec8:	20001b20 	.word	0x20001b20
 8019ecc:	20001af6 	.word	0x20001af6

08019ed0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b08e      	sub	sp, #56	; 0x38
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	60b9      	str	r1, [r7, #8]
 8019ed8:	607b      	str	r3, [r7, #4]
 8019eda:	4603      	mov	r3, r0
 8019edc:	73fb      	strb	r3, [r7, #15]
 8019ede:	4613      	mov	r3, r2
 8019ee0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019eea:	f001 fc0a 	bl	801b702 <RFW_DeInit>
    switch( modem )
 8019eee:	7bfb      	ldrb	r3, [r7, #15]
 8019ef0:	2b03      	cmp	r3, #3
 8019ef2:	f200 8204 	bhi.w	801a2fe <RadioSetTxGenericConfig+0x42e>
 8019ef6:	a201      	add	r2, pc, #4	; (adr r2, 8019efc <RadioSetTxGenericConfig+0x2c>)
 8019ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019efc:	0801a081 	.word	0x0801a081
 8019f00:	0801a1c9 	.word	0x0801a1c9
 8019f04:	0801a2c1 	.word	0x0801a2c1
 8019f08:	08019f0d 	.word	0x08019f0d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	7c9b      	ldrb	r3, [r3, #18]
 8019f10:	2b08      	cmp	r3, #8
 8019f12:	d902      	bls.n	8019f1a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019f14:	f04f 33ff 	mov.w	r3, #4294967295
 8019f18:	e206      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	6899      	ldr	r1, [r3, #8]
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	7c9b      	ldrb	r3, [r3, #18]
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f28:	4618      	mov	r0, r3
 8019f2a:	f001 fcdd 	bl	801b8e8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d102      	bne.n	8019f3c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019f36:	f04f 33ff 	mov.w	r3, #4294967295
 8019f3a:	e1f5      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	f242 7210 	movw	r2, #10000	; 0x2710
 8019f44:	4293      	cmp	r3, r2
 8019f46:	d813      	bhi.n	8019f70 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019f48:	2302      	movs	r3, #2
 8019f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019f4e:	4b99      	ldr	r3, [pc, #612]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f50:	2203      	movs	r2, #3
 8019f52:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019f54:	4b97      	ldr	r3, [pc, #604]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f56:	2203      	movs	r2, #3
 8019f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	4a94      	ldr	r2, [pc, #592]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f62:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	7cda      	ldrb	r2, [r3, #19]
 8019f68:	4b92      	ldr	r3, [pc, #584]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019f6e:	e017      	b.n	8019fa0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019f70:	2300      	movs	r3, #0
 8019f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019f76:	4b8f      	ldr	r3, [pc, #572]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f78:	2200      	movs	r2, #0
 8019f7a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019f7c:	4b8d      	ldr	r3, [pc, #564]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f7e:	2200      	movs	r2, #0
 8019f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	4a8a      	ldr	r2, [pc, #552]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f8a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019f8c:	68bb      	ldr	r3, [r7, #8]
 8019f8e:	7cda      	ldrb	r2, [r3, #19]
 8019f90:	4b88      	ldr	r3, [pc, #544]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	089b      	lsrs	r3, r3, #2
 8019f9c:	4a85      	ldr	r2, [pc, #532]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019f9e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	b29b      	uxth	r3, r3
 8019fa6:	00db      	lsls	r3, r3, #3
 8019fa8:	b29a      	uxth	r2, r3
 8019faa:	4b82      	ldr	r3, [pc, #520]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019fac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019fae:	4b81      	ldr	r3, [pc, #516]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019fb0:	2204      	movs	r2, #4
 8019fb2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	7c9b      	ldrb	r3, [r3, #18]
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	b2da      	uxtb	r2, r3
 8019fbc:	4b7d      	ldr	r3, [pc, #500]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019fbe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019fc0:	4b7c      	ldr	r3, [pc, #496]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019fc6:	68bb      	ldr	r3, [r7, #8]
 8019fc8:	7d9b      	ldrb	r3, [r3, #22]
 8019fca:	2b02      	cmp	r3, #2
 8019fcc:	d003      	beq.n	8019fd6 <RadioSetTxGenericConfig+0x106>
 8019fce:	68bb      	ldr	r3, [r7, #8]
 8019fd0:	7d1b      	ldrb	r3, [r3, #20]
 8019fd2:	2b02      	cmp	r3, #2
 8019fd4:	d12b      	bne.n	801a02e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019fd6:	68bb      	ldr	r3, [r7, #8]
 8019fd8:	7d5b      	ldrb	r3, [r3, #21]
 8019fda:	2bf1      	cmp	r3, #241	; 0xf1
 8019fdc:	d00a      	beq.n	8019ff4 <RadioSetTxGenericConfig+0x124>
 8019fde:	68bb      	ldr	r3, [r7, #8]
 8019fe0:	7d5b      	ldrb	r3, [r3, #21]
 8019fe2:	2bf2      	cmp	r3, #242	; 0xf2
 8019fe4:	d006      	beq.n	8019ff4 <RadioSetTxGenericConfig+0x124>
 8019fe6:	68bb      	ldr	r3, [r7, #8]
 8019fe8:	7d5b      	ldrb	r3, [r3, #21]
 8019fea:	2b01      	cmp	r3, #1
 8019fec:	d002      	beq.n	8019ff4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019fee:	f04f 33ff 	mov.w	r3, #4294967295
 8019ff2:	e199      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019ffe:	4b6e      	ldr	r3, [pc, #440]	; (801a1b8 <RadioSetTxGenericConfig+0x2e8>)
 801a000:	6819      	ldr	r1, [r3, #0]
 801a002:	f107 0320 	add.w	r3, r7, #32
 801a006:	4a6d      	ldr	r2, [pc, #436]	; (801a1bc <RadioSetTxGenericConfig+0x2ec>)
 801a008:	4618      	mov	r0, r3
 801a00a:	f001 fb6d 	bl	801b6e8 <RFW_Init>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b00      	cmp	r3, #0
 801a012:	d002      	beq.n	801a01a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801a014:	f04f 33ff 	mov.w	r3, #4294967295
 801a018:	e186      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a01a:	4b66      	ldr	r3, [pc, #408]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a01c:	2200      	movs	r2, #0
 801a01e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a020:	4b64      	ldr	r3, [pc, #400]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a022:	2201      	movs	r2, #1
 801a024:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a026:	4b63      	ldr	r3, [pc, #396]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a028:	2200      	movs	r2, #0
 801a02a:	755a      	strb	r2, [r3, #21]
        {
 801a02c:	e00b      	b.n	801a046 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	7d5a      	ldrb	r2, [r3, #21]
 801a032:	4b60      	ldr	r3, [pc, #384]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a034:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	7d9a      	ldrb	r2, [r3, #22]
 801a03a:	4b5e      	ldr	r3, [pc, #376]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a03c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a03e:	68bb      	ldr	r3, [r7, #8]
 801a040:	7d1a      	ldrb	r2, [r3, #20]
 801a042:	4b5c      	ldr	r3, [pc, #368]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a044:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a046:	f7ff f8a2 	bl	801918e <RadioStandby>
        RadioSetModem( radio_modem );
 801a04a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a04e:	4618      	mov	r0, r3
 801a050:	f7fe fa4a 	bl	80184e8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a054:	485a      	ldr	r0, [pc, #360]	; (801a1c0 <RadioSetTxGenericConfig+0x2f0>)
 801a056:	f000 fe63 	bl	801ad20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a05a:	485a      	ldr	r0, [pc, #360]	; (801a1c4 <RadioSetTxGenericConfig+0x2f4>)
 801a05c:	f000 ff32 	bl	801aec4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a064:	4618      	mov	r0, r3
 801a066:	f000 f9fa 	bl	801a45e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	8a1b      	ldrh	r3, [r3, #16]
 801a06e:	4618      	mov	r0, r3
 801a070:	f000 fa44 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	899b      	ldrh	r3, [r3, #12]
 801a078:	4618      	mov	r0, r3
 801a07a:	f000 fa1f 	bl	801a4bc <SUBGRF_SetCrcPolynomial>
        break;
 801a07e:	e13f      	b.n	801a300 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d102      	bne.n	801a08e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a088:	f04f 33ff 	mov.w	r3, #4294967295
 801a08c:	e14c      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a08e:	68bb      	ldr	r3, [r7, #8]
 801a090:	7c9b      	ldrb	r3, [r3, #18]
 801a092:	2b08      	cmp	r3, #8
 801a094:	d902      	bls.n	801a09c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a096:	f04f 33ff 	mov.w	r3, #4294967295
 801a09a:	e145      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	6899      	ldr	r1, [r3, #8]
 801a0a0:	68bb      	ldr	r3, [r7, #8]
 801a0a2:	7c9b      	ldrb	r3, [r3, #18]
 801a0a4:	b29a      	uxth	r2, r3
 801a0a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f001 fc1c 	bl	801b8e8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a0b0:	4b40      	ldr	r3, [pc, #256]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	4a3d      	ldr	r2, [pc, #244]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0be:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	7cda      	ldrb	r2, [r3, #19]
 801a0c4:	4b3b      	ldr	r3, [pc, #236]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	699b      	ldr	r3, [r3, #24]
 801a0ce:	4a39      	ldr	r2, [pc, #228]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0d0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a0d2:	4b38      	ldr	r3, [pc, #224]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a0d8:	68bb      	ldr	r3, [r7, #8]
 801a0da:	685b      	ldr	r3, [r3, #4]
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	00db      	lsls	r3, r3, #3
 801a0e0:	b29a      	uxth	r2, r3
 801a0e2:	4b34      	ldr	r3, [pc, #208]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0e4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a0e6:	4b33      	ldr	r3, [pc, #204]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0e8:	2204      	movs	r2, #4
 801a0ea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a0ec:	68bb      	ldr	r3, [r7, #8]
 801a0ee:	7c9b      	ldrb	r3, [r3, #18]
 801a0f0:	00db      	lsls	r3, r3, #3
 801a0f2:	b2da      	uxtb	r2, r3
 801a0f4:	4b2f      	ldr	r3, [pc, #188]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0f6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a0f8:	4b2e      	ldr	r3, [pc, #184]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a0fe:	68bb      	ldr	r3, [r7, #8]
 801a100:	7d9b      	ldrb	r3, [r3, #22]
 801a102:	2b02      	cmp	r3, #2
 801a104:	d003      	beq.n	801a10e <RadioSetTxGenericConfig+0x23e>
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	7d1b      	ldrb	r3, [r3, #20]
 801a10a:	2b02      	cmp	r3, #2
 801a10c:	d12a      	bne.n	801a164 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	7d5b      	ldrb	r3, [r3, #21]
 801a112:	2bf1      	cmp	r3, #241	; 0xf1
 801a114:	d00a      	beq.n	801a12c <RadioSetTxGenericConfig+0x25c>
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	7d5b      	ldrb	r3, [r3, #21]
 801a11a:	2bf2      	cmp	r3, #242	; 0xf2
 801a11c:	d006      	beq.n	801a12c <RadioSetTxGenericConfig+0x25c>
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	7d5b      	ldrb	r3, [r3, #21]
 801a122:	2b01      	cmp	r3, #1
 801a124:	d002      	beq.n	801a12c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a126:	f04f 33ff 	mov.w	r3, #4294967295
 801a12a:	e0fd      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a12c:	2301      	movs	r3, #1
 801a12e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a134:	4b20      	ldr	r3, [pc, #128]	; (801a1b8 <RadioSetTxGenericConfig+0x2e8>)
 801a136:	6819      	ldr	r1, [r3, #0]
 801a138:	f107 0314 	add.w	r3, r7, #20
 801a13c:	4a1f      	ldr	r2, [pc, #124]	; (801a1bc <RadioSetTxGenericConfig+0x2ec>)
 801a13e:	4618      	mov	r0, r3
 801a140:	f001 fad2 	bl	801b6e8 <RFW_Init>
 801a144:	4603      	mov	r3, r0
 801a146:	2b00      	cmp	r3, #0
 801a148:	d002      	beq.n	801a150 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a14a:	f04f 33ff 	mov.w	r3, #4294967295
 801a14e:	e0eb      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a150:	4b18      	ldr	r3, [pc, #96]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a152:	2200      	movs	r2, #0
 801a154:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a156:	4b17      	ldr	r3, [pc, #92]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a158:	2201      	movs	r2, #1
 801a15a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a15c:	4b15      	ldr	r3, [pc, #84]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a15e:	2200      	movs	r2, #0
 801a160:	755a      	strb	r2, [r3, #21]
        {
 801a162:	e00b      	b.n	801a17c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	7d5a      	ldrb	r2, [r3, #21]
 801a168:	4b12      	ldr	r3, [pc, #72]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a16a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	7d9a      	ldrb	r2, [r3, #22]
 801a170:	4b10      	ldr	r3, [pc, #64]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a172:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a174:	68bb      	ldr	r3, [r7, #8]
 801a176:	7d1a      	ldrb	r2, [r3, #20]
 801a178:	4b0e      	ldr	r3, [pc, #56]	; (801a1b4 <RadioSetTxGenericConfig+0x2e4>)
 801a17a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a17c:	f7ff f807 	bl	801918e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a180:	2000      	movs	r0, #0
 801a182:	f7fe f9b1 	bl	80184e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a186:	480e      	ldr	r0, [pc, #56]	; (801a1c0 <RadioSetTxGenericConfig+0x2f0>)
 801a188:	f000 fdca 	bl	801ad20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a18c:	480d      	ldr	r0, [pc, #52]	; (801a1c4 <RadioSetTxGenericConfig+0x2f4>)
 801a18e:	f000 fe99 	bl	801aec4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a196:	4618      	mov	r0, r3
 801a198:	f000 f961 	bl	801a45e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	8a1b      	ldrh	r3, [r3, #16]
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f000 f9ab 	bl	801a4fc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	899b      	ldrh	r3, [r3, #12]
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f000 f986 	bl	801a4bc <SUBGRF_SetCrcPolynomial>
        break;
 801a1b0:	e0a6      	b.n	801a300 <RadioSetTxGenericConfig+0x430>
 801a1b2:	bf00      	nop
 801a1b4:	20001ae8 	.word	0x20001ae8
 801a1b8:	20001ae4 	.word	0x20001ae4
 801a1bc:	20001b44 	.word	0x20001b44
 801a1c0:	20001b20 	.word	0x20001b20
 801a1c4:	20001af6 	.word	0x20001af6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a1c8:	4b59      	ldr	r3, [pc, #356]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a1ca:	2201      	movs	r2, #1
 801a1cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	781a      	ldrb	r2, [r3, #0]
 801a1d4:	4b56      	ldr	r3, [pc, #344]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a1d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a1da:	68bb      	ldr	r3, [r7, #8]
 801a1dc:	785a      	ldrb	r2, [r3, #1]
 801a1de:	4b54      	ldr	r3, [pc, #336]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a1e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a1e4:	68bb      	ldr	r3, [r7, #8]
 801a1e6:	789a      	ldrb	r2, [r3, #2]
 801a1e8:	4b51      	ldr	r3, [pc, #324]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a1ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	78db      	ldrb	r3, [r3, #3]
 801a1f2:	2b02      	cmp	r3, #2
 801a1f4:	d010      	beq.n	801a218 <RadioSetTxGenericConfig+0x348>
 801a1f6:	2b02      	cmp	r3, #2
 801a1f8:	dc20      	bgt.n	801a23c <RadioSetTxGenericConfig+0x36c>
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d002      	beq.n	801a204 <RadioSetTxGenericConfig+0x334>
 801a1fe:	2b01      	cmp	r3, #1
 801a200:	d005      	beq.n	801a20e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a202:	e01b      	b.n	801a23c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a204:	4b4a      	ldr	r3, [pc, #296]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a206:	2200      	movs	r2, #0
 801a208:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a20c:	e017      	b.n	801a23e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a20e:	4b48      	ldr	r3, [pc, #288]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a210:	2201      	movs	r2, #1
 801a212:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a216:	e012      	b.n	801a23e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	781b      	ldrb	r3, [r3, #0]
 801a21c:	2b0b      	cmp	r3, #11
 801a21e:	d003      	beq.n	801a228 <RadioSetTxGenericConfig+0x358>
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	781b      	ldrb	r3, [r3, #0]
 801a224:	2b0c      	cmp	r3, #12
 801a226:	d104      	bne.n	801a232 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a228:	4b41      	ldr	r3, [pc, #260]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a22a:	2201      	movs	r2, #1
 801a22c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a230:	e005      	b.n	801a23e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a232:	4b3f      	ldr	r3, [pc, #252]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a234:	2200      	movs	r2, #0
 801a236:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a23a:	e000      	b.n	801a23e <RadioSetTxGenericConfig+0x36e>
            break;
 801a23c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a23e:	4b3c      	ldr	r3, [pc, #240]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a240:	2201      	movs	r2, #1
 801a242:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	889a      	ldrh	r2, [r3, #4]
 801a248:	4b39      	ldr	r3, [pc, #228]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a24a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	799a      	ldrb	r2, [r3, #6]
 801a250:	4b37      	ldr	r3, [pc, #220]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a252:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	79da      	ldrb	r2, [r3, #7]
 801a258:	4b35      	ldr	r3, [pc, #212]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a25a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	7a1a      	ldrb	r2, [r3, #8]
 801a262:	4b33      	ldr	r3, [pc, #204]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a268:	f7fe ff91 	bl	801918e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a26c:	2001      	movs	r0, #1
 801a26e:	f7fe f93b 	bl	80184e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a272:	4830      	ldr	r0, [pc, #192]	; (801a334 <RadioSetTxGenericConfig+0x464>)
 801a274:	f000 fd54 	bl	801ad20 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a278:	482f      	ldr	r0, [pc, #188]	; (801a338 <RadioSetTxGenericConfig+0x468>)
 801a27a:	f000 fe23 	bl	801aec4 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a27e:	4b2c      	ldr	r3, [pc, #176]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a284:	2b06      	cmp	r3, #6
 801a286:	d10d      	bne.n	801a2a4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a288:	f640 0089 	movw	r0, #2185	; 0x889
 801a28c:	f000 ff76 	bl	801b17c <SUBGRF_ReadRegister>
 801a290:	4603      	mov	r3, r0
 801a292:	f023 0304 	bic.w	r3, r3, #4
 801a296:	b2db      	uxtb	r3, r3
 801a298:	4619      	mov	r1, r3
 801a29a:	f640 0089 	movw	r0, #2185	; 0x889
 801a29e:	f000 ff59 	bl	801b154 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a2a2:	e02d      	b.n	801a300 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a2a4:	f640 0089 	movw	r0, #2185	; 0x889
 801a2a8:	f000 ff68 	bl	801b17c <SUBGRF_ReadRegister>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	f043 0304 	orr.w	r3, r3, #4
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	4619      	mov	r1, r3
 801a2b6:	f640 0089 	movw	r0, #2185	; 0x889
 801a2ba:	f000 ff4b 	bl	801b154 <SUBGRF_WriteRegister>
        break;
 801a2be:	e01f      	b.n	801a300 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a2c0:	68bb      	ldr	r3, [r7, #8]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d004      	beq.n	801a2d2 <RadioSetTxGenericConfig+0x402>
 801a2c8:	68bb      	ldr	r3, [r7, #8]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a2d0:	d902      	bls.n	801a2d8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 801a2d6:	e027      	b.n	801a328 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a2d8:	2003      	movs	r0, #3
 801a2da:	f7fe f905 	bl	80184e8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a2de:	4b14      	ldr	r3, [pc, #80]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a2e0:	2202      	movs	r2, #2
 801a2e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a2e6:	68bb      	ldr	r3, [r7, #8]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	4a11      	ldr	r2, [pc, #68]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a2ec:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a2ee:	4b10      	ldr	r3, [pc, #64]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a2f0:	2216      	movs	r2, #22
 801a2f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2f6:	480f      	ldr	r0, [pc, #60]	; (801a334 <RadioSetTxGenericConfig+0x464>)
 801a2f8:	f000 fd12 	bl	801ad20 <SUBGRF_SetModulationParams>
        break;
 801a2fc:	e000      	b.n	801a300 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a2fe:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a304:	4618      	mov	r0, r3
 801a306:	f001 f841 	bl	801b38c <SUBGRF_SetRfTxPower>
 801a30a:	4603      	mov	r3, r0
 801a30c:	461a      	mov	r2, r3
 801a30e:	4b08      	ldr	r3, [pc, #32]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a310:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a314:	4b06      	ldr	r3, [pc, #24]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a316:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a31a:	4618      	mov	r0, r3
 801a31c:	f001 fa05 	bl	801b72a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a320:	4a03      	ldr	r2, [pc, #12]	; (801a330 <RadioSetTxGenericConfig+0x460>)
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	6053      	str	r3, [r2, #4]
    return 0;
 801a326:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a328:	4618      	mov	r0, r3
 801a32a:	3738      	adds	r7, #56	; 0x38
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}
 801a330:	20001ae8 	.word	0x20001ae8
 801a334:	20001b20 	.word	0x20001b20
 801a338:	20001af6 	.word	0x20001af6

0801a33c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b084      	sub	sp, #16
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d002      	beq.n	801a350 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a34a:	4a1a      	ldr	r2, [pc, #104]	; (801a3b4 <SUBGRF_Init+0x78>)
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a350:	f7e7 fcd4 	bl	8001cfc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a354:	2002      	movs	r0, #2
 801a356:	f001 f8e5 	bl	801b524 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a35a:	4b17      	ldr	r3, [pc, #92]	; (801a3b8 <SUBGRF_Init+0x7c>)
 801a35c:	2200      	movs	r2, #0
 801a35e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a360:	2000      	movs	r0, #0
 801a362:	f000 f977 	bl	801a654 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a366:	f7f1 fc77 	bl	800bc58 <RBI_IsTCXO>
 801a36a:	4603      	mov	r3, r0
 801a36c:	2b01      	cmp	r3, #1
 801a36e:	d10e      	bne.n	801a38e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a370:	2140      	movs	r1, #64	; 0x40
 801a372:	2001      	movs	r0, #1
 801a374:	f000 fb78 	bl	801aa68 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a378:	2100      	movs	r1, #0
 801a37a:	f640 1011 	movw	r0, #2321	; 0x911
 801a37e:	f000 fee9 	bl	801b154 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a382:	237f      	movs	r3, #127	; 0x7f
 801a384:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a386:	7b38      	ldrb	r0, [r7, #12]
 801a388:	f000 fa85 	bl	801a896 <SUBGRF_Calibrate>
 801a38c:	e009      	b.n	801a3a2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a38e:	2120      	movs	r1, #32
 801a390:	f640 1011 	movw	r0, #2321	; 0x911
 801a394:	f000 fede 	bl	801b154 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a398:	2120      	movs	r1, #32
 801a39a:	f640 1012 	movw	r0, #2322	; 0x912
 801a39e:	f000 fed9 	bl	801b154 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a3a2:	f7f1 fc3d 	bl	800bc20 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a3a6:	4b05      	ldr	r3, [pc, #20]	; (801a3bc <SUBGRF_Init+0x80>)
 801a3a8:	2201      	movs	r2, #1
 801a3aa:	701a      	strb	r2, [r3, #0]
}
 801a3ac:	bf00      	nop
 801a3ae:	3710      	adds	r7, #16
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}
 801a3b4:	20001b80 	.word	0x20001b80
 801a3b8:	20001b7c 	.word	0x20001b7c
 801a3bc:	20001b74 	.word	0x20001b74

0801a3c0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a3c0:	b480      	push	{r7}
 801a3c2:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a3c4:	4b02      	ldr	r3, [pc, #8]	; (801a3d0 <SUBGRF_GetOperatingMode+0x10>)
 801a3c6:	781b      	ldrb	r3, [r3, #0]
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bc80      	pop	{r7}
 801a3ce:	4770      	bx	lr
 801a3d0:	20001b74 	.word	0x20001b74

0801a3d4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b082      	sub	sp, #8
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
 801a3dc:	460b      	mov	r3, r1
 801a3de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a3e0:	78fb      	ldrb	r3, [r7, #3]
 801a3e2:	461a      	mov	r2, r3
 801a3e4:	6879      	ldr	r1, [r7, #4]
 801a3e6:	2000      	movs	r0, #0
 801a3e8:	f000 ff20 	bl	801b22c <SUBGRF_WriteBuffer>
}
 801a3ec:	bf00      	nop
 801a3ee:	3708      	adds	r7, #8
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}

0801a3f4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b086      	sub	sp, #24
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	60f8      	str	r0, [r7, #12]
 801a3fc:	60b9      	str	r1, [r7, #8]
 801a3fe:	4613      	mov	r3, r2
 801a400:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a402:	2300      	movs	r3, #0
 801a404:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a406:	f107 0317 	add.w	r3, r7, #23
 801a40a:	4619      	mov	r1, r3
 801a40c:	68b8      	ldr	r0, [r7, #8]
 801a40e:	f000 fe23 	bl	801b058 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	79fa      	ldrb	r2, [r7, #7]
 801a418:	429a      	cmp	r2, r3
 801a41a:	d201      	bcs.n	801a420 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a41c:	2301      	movs	r3, #1
 801a41e:	e007      	b.n	801a430 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a420:	7df8      	ldrb	r0, [r7, #23]
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	781b      	ldrb	r3, [r3, #0]
 801a426:	461a      	mov	r2, r3
 801a428:	68f9      	ldr	r1, [r7, #12]
 801a42a:	f000 ff21 	bl	801b270 <SUBGRF_ReadBuffer>

    return 0;
 801a42e:	2300      	movs	r3, #0
}
 801a430:	4618      	mov	r0, r3
 801a432:	3718      	adds	r7, #24
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	60f8      	str	r0, [r7, #12]
 801a440:	460b      	mov	r3, r1
 801a442:	607a      	str	r2, [r7, #4]
 801a444:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a446:	7afb      	ldrb	r3, [r7, #11]
 801a448:	4619      	mov	r1, r3
 801a44a:	68f8      	ldr	r0, [r7, #12]
 801a44c:	f7ff ffc2 	bl	801a3d4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a450:	6878      	ldr	r0, [r7, #4]
 801a452:	f000 f91b 	bl	801a68c <SUBGRF_SetTx>
}
 801a456:	bf00      	nop
 801a458:	3710      	adds	r7, #16
 801a45a:	46bd      	mov	sp, r7
 801a45c:	bd80      	pop	{r7, pc}

0801a45e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a45e:	b580      	push	{r7, lr}
 801a460:	b082      	sub	sp, #8
 801a462:	af00      	add	r7, sp, #0
 801a464:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a466:	2208      	movs	r2, #8
 801a468:	6879      	ldr	r1, [r7, #4]
 801a46a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a46e:	f000 fe99 	bl	801b1a4 <SUBGRF_WriteRegisters>
    return 0;
 801a472:	2300      	movs	r3, #0
}
 801a474:	4618      	mov	r0, r3
 801a476:	3708      	adds	r7, #8
 801a478:	46bd      	mov	sp, r7
 801a47a:	bd80      	pop	{r7, pc}

0801a47c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af00      	add	r7, sp, #0
 801a482:	4603      	mov	r3, r0
 801a484:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a486:	88fb      	ldrh	r3, [r7, #6]
 801a488:	0a1b      	lsrs	r3, r3, #8
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	b2db      	uxtb	r3, r3
 801a48e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a490:	88fb      	ldrh	r3, [r7, #6]
 801a492:	b2db      	uxtb	r3, r3
 801a494:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a496:	f000 fb6b 	bl	801ab70 <SUBGRF_GetPacketType>
 801a49a:	4603      	mov	r3, r0
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d108      	bne.n	801a4b2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a4a0:	f107 030c 	add.w	r3, r7, #12
 801a4a4:	2202      	movs	r2, #2
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a4ac:	f000 fe7a 	bl	801b1a4 <SUBGRF_WriteRegisters>
            break;
 801a4b0:	e000      	b.n	801a4b4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a4b2:	bf00      	nop
    }
}
 801a4b4:	bf00      	nop
 801a4b6:	3710      	adds	r7, #16
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd80      	pop	{r7, pc}

0801a4bc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b084      	sub	sp, #16
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a4c6:	88fb      	ldrh	r3, [r7, #6]
 801a4c8:	0a1b      	lsrs	r3, r3, #8
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	b2db      	uxtb	r3, r3
 801a4ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a4d0:	88fb      	ldrh	r3, [r7, #6]
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a4d6:	f000 fb4b 	bl	801ab70 <SUBGRF_GetPacketType>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d108      	bne.n	801a4f2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a4e0:	f107 030c 	add.w	r3, r7, #12
 801a4e4:	2202      	movs	r2, #2
 801a4e6:	4619      	mov	r1, r3
 801a4e8:	f240 60be 	movw	r0, #1726	; 0x6be
 801a4ec:	f000 fe5a 	bl	801b1a4 <SUBGRF_WriteRegisters>
            break;
 801a4f0:	e000      	b.n	801a4f4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a4f2:	bf00      	nop
    }
}
 801a4f4:	bf00      	nop
 801a4f6:	3710      	adds	r7, #16
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}

0801a4fc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b084      	sub	sp, #16
 801a500:	af00      	add	r7, sp, #0
 801a502:	4603      	mov	r3, r0
 801a504:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a506:	2300      	movs	r3, #0
 801a508:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a50a:	f000 fb31 	bl	801ab70 <SUBGRF_GetPacketType>
 801a50e:	4603      	mov	r3, r0
 801a510:	2b00      	cmp	r3, #0
 801a512:	d121      	bne.n	801a558 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a514:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a518:	f000 fe30 	bl	801b17c <SUBGRF_ReadRegister>
 801a51c:	4603      	mov	r3, r0
 801a51e:	f023 0301 	bic.w	r3, r3, #1
 801a522:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a524:	88fb      	ldrh	r3, [r7, #6]
 801a526:	0a1b      	lsrs	r3, r3, #8
 801a528:	b29b      	uxth	r3, r3
 801a52a:	b25b      	sxtb	r3, r3
 801a52c:	f003 0301 	and.w	r3, r3, #1
 801a530:	b25a      	sxtb	r2, r3
 801a532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a536:	4313      	orrs	r3, r2
 801a538:	b25b      	sxtb	r3, r3
 801a53a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a53c:	7bfb      	ldrb	r3, [r7, #15]
 801a53e:	4619      	mov	r1, r3
 801a540:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a544:	f000 fe06 	bl	801b154 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a548:	88fb      	ldrh	r3, [r7, #6]
 801a54a:	b2db      	uxtb	r3, r3
 801a54c:	4619      	mov	r1, r3
 801a54e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a552:	f000 fdff 	bl	801b154 <SUBGRF_WriteRegister>
            break;
 801a556:	e000      	b.n	801a55a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a558:	bf00      	nop
    }
}
 801a55a:	bf00      	nop
 801a55c:	3710      	adds	r7, #16
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}

0801a562 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a562:	b580      	push	{r7, lr}
 801a564:	b082      	sub	sp, #8
 801a566:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a568:	2300      	movs	r3, #0
 801a56a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a56c:	2300      	movs	r3, #0
 801a56e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a570:	2300      	movs	r3, #0
 801a572:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a574:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a578:	f000 fe00 	bl	801b17c <SUBGRF_ReadRegister>
 801a57c:	4603      	mov	r3, r0
 801a57e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a580:	79fb      	ldrb	r3, [r7, #7]
 801a582:	f023 0301 	bic.w	r3, r3, #1
 801a586:	b2db      	uxtb	r3, r3
 801a588:	4619      	mov	r1, r3
 801a58a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a58e:	f000 fde1 	bl	801b154 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a592:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a596:	f000 fdf1 	bl	801b17c <SUBGRF_ReadRegister>
 801a59a:	4603      	mov	r3, r0
 801a59c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a59e:	79bb      	ldrb	r3, [r7, #6]
 801a5a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a5a4:	b2db      	uxtb	r3, r3
 801a5a6:	4619      	mov	r1, r3
 801a5a8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a5ac:	f000 fdd2 	bl	801b154 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a5b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a5b4:	f000 f88a 	bl	801a6cc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a5b8:	463b      	mov	r3, r7
 801a5ba:	2204      	movs	r2, #4
 801a5bc:	4619      	mov	r1, r3
 801a5be:	f640 0019 	movw	r0, #2073	; 0x819
 801a5c2:	f000 fe11 	bl	801b1e8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	f000 f844 	bl	801a654 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a5cc:	79fb      	ldrb	r3, [r7, #7]
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a5d4:	f000 fdbe 	bl	801b154 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a5d8:	79bb      	ldrb	r3, [r7, #6]
 801a5da:	4619      	mov	r1, r3
 801a5dc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a5e0:	f000 fdb8 	bl	801b154 <SUBGRF_WriteRegister>

    return number;
 801a5e4:	683b      	ldr	r3, [r7, #0]
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3708      	adds	r7, #8
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
	...

0801a5f0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b084      	sub	sp, #16
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a5f8:	2000      	movs	r0, #0
 801a5fa:	f7f1 fb18 	bl	800bc2e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a5fe:	2002      	movs	r0, #2
 801a600:	f000 ff90 	bl	801b524 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a604:	793b      	ldrb	r3, [r7, #4]
 801a606:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a60a:	b2db      	uxtb	r3, r3
 801a60c:	009b      	lsls	r3, r3, #2
 801a60e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a610:	793b      	ldrb	r3, [r7, #4]
 801a612:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a616:	b2db      	uxtb	r3, r3
 801a618:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a61a:	b25b      	sxtb	r3, r3
 801a61c:	4313      	orrs	r3, r2
 801a61e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a620:	793b      	ldrb	r3, [r7, #4]
 801a622:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a626:	b2db      	uxtb	r3, r3
 801a628:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a62a:	4313      	orrs	r3, r2
 801a62c:	b25b      	sxtb	r3, r3
 801a62e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a630:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a632:	f107 030f 	add.w	r3, r7, #15
 801a636:	2201      	movs	r2, #1
 801a638:	4619      	mov	r1, r3
 801a63a:	2084      	movs	r0, #132	; 0x84
 801a63c:	f000 fe3a 	bl	801b2b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a640:	4b03      	ldr	r3, [pc, #12]	; (801a650 <SUBGRF_SetSleep+0x60>)
 801a642:	2200      	movs	r2, #0
 801a644:	701a      	strb	r2, [r3, #0]
}
 801a646:	bf00      	nop
 801a648:	3710      	adds	r7, #16
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}
 801a64e:	bf00      	nop
 801a650:	20001b74 	.word	0x20001b74

0801a654 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b082      	sub	sp, #8
 801a658:	af00      	add	r7, sp, #0
 801a65a:	4603      	mov	r3, r0
 801a65c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a65e:	1dfb      	adds	r3, r7, #7
 801a660:	2201      	movs	r2, #1
 801a662:	4619      	mov	r1, r3
 801a664:	2080      	movs	r0, #128	; 0x80
 801a666:	f000 fe25 	bl	801b2b4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a66a:	79fb      	ldrb	r3, [r7, #7]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d103      	bne.n	801a678 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a670:	4b05      	ldr	r3, [pc, #20]	; (801a688 <SUBGRF_SetStandby+0x34>)
 801a672:	2201      	movs	r2, #1
 801a674:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a676:	e002      	b.n	801a67e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a678:	4b03      	ldr	r3, [pc, #12]	; (801a688 <SUBGRF_SetStandby+0x34>)
 801a67a:	2202      	movs	r2, #2
 801a67c:	701a      	strb	r2, [r3, #0]
}
 801a67e:	bf00      	nop
 801a680:	3708      	adds	r7, #8
 801a682:	46bd      	mov	sp, r7
 801a684:	bd80      	pop	{r7, pc}
 801a686:	bf00      	nop
 801a688:	20001b74 	.word	0x20001b74

0801a68c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a694:	4b0c      	ldr	r3, [pc, #48]	; (801a6c8 <SUBGRF_SetTx+0x3c>)
 801a696:	2204      	movs	r2, #4
 801a698:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	0c1b      	lsrs	r3, r3, #16
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	0a1b      	lsrs	r3, r3, #8
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	b2db      	uxtb	r3, r3
 801a6ae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a6b0:	f107 030c 	add.w	r3, r7, #12
 801a6b4:	2203      	movs	r2, #3
 801a6b6:	4619      	mov	r1, r3
 801a6b8:	2083      	movs	r0, #131	; 0x83
 801a6ba:	f000 fdfb 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a6be:	bf00      	nop
 801a6c0:	3710      	adds	r7, #16
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
 801a6c6:	bf00      	nop
 801a6c8:	20001b74 	.word	0x20001b74

0801a6cc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b084      	sub	sp, #16
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a6d4:	4b0c      	ldr	r3, [pc, #48]	; (801a708 <SUBGRF_SetRx+0x3c>)
 801a6d6:	2205      	movs	r2, #5
 801a6d8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	0c1b      	lsrs	r3, r3, #16
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	0a1b      	lsrs	r3, r3, #8
 801a6e6:	b2db      	uxtb	r3, r3
 801a6e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a6f0:	f107 030c 	add.w	r3, r7, #12
 801a6f4:	2203      	movs	r2, #3
 801a6f6:	4619      	mov	r1, r3
 801a6f8:	2082      	movs	r0, #130	; 0x82
 801a6fa:	f000 fddb 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a6fe:	bf00      	nop
 801a700:	3710      	adds	r7, #16
 801a702:	46bd      	mov	sp, r7
 801a704:	bd80      	pop	{r7, pc}
 801a706:	bf00      	nop
 801a708:	20001b74 	.word	0x20001b74

0801a70c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b084      	sub	sp, #16
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a714:	4b0e      	ldr	r3, [pc, #56]	; (801a750 <SUBGRF_SetRxBoosted+0x44>)
 801a716:	2205      	movs	r2, #5
 801a718:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a71a:	2197      	movs	r1, #151	; 0x97
 801a71c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a720:	f000 fd18 	bl	801b154 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	0c1b      	lsrs	r3, r3, #16
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	0a1b      	lsrs	r3, r3, #8
 801a730:	b2db      	uxtb	r3, r3
 801a732:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	b2db      	uxtb	r3, r3
 801a738:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a73a:	f107 030c 	add.w	r3, r7, #12
 801a73e:	2203      	movs	r2, #3
 801a740:	4619      	mov	r1, r3
 801a742:	2082      	movs	r0, #130	; 0x82
 801a744:	f000 fdb6 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a748:	bf00      	nop
 801a74a:	3710      	adds	r7, #16
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	20001b74 	.word	0x20001b74

0801a754 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b084      	sub	sp, #16
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
 801a75c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	0c1b      	lsrs	r3, r3, #16
 801a762:	b2db      	uxtb	r3, r3
 801a764:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	0a1b      	lsrs	r3, r3, #8
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	b2db      	uxtb	r3, r3
 801a772:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	0c1b      	lsrs	r3, r3, #16
 801a778:	b2db      	uxtb	r3, r3
 801a77a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a77c:	683b      	ldr	r3, [r7, #0]
 801a77e:	0a1b      	lsrs	r3, r3, #8
 801a780:	b2db      	uxtb	r3, r3
 801a782:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a784:	683b      	ldr	r3, [r7, #0]
 801a786:	b2db      	uxtb	r3, r3
 801a788:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a78a:	f107 0308 	add.w	r3, r7, #8
 801a78e:	2206      	movs	r2, #6
 801a790:	4619      	mov	r1, r3
 801a792:	2094      	movs	r0, #148	; 0x94
 801a794:	f000 fd8e 	bl	801b2b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a798:	4b03      	ldr	r3, [pc, #12]	; (801a7a8 <SUBGRF_SetRxDutyCycle+0x54>)
 801a79a:	2206      	movs	r2, #6
 801a79c:	701a      	strb	r2, [r3, #0]
}
 801a79e:	bf00      	nop
 801a7a0:	3710      	adds	r7, #16
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd80      	pop	{r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	20001b74 	.word	0x20001b74

0801a7ac <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	20c5      	movs	r0, #197	; 0xc5
 801a7b6:	f000 fd7d 	bl	801b2b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a7ba:	4b02      	ldr	r3, [pc, #8]	; (801a7c4 <SUBGRF_SetCad+0x18>)
 801a7bc:	2207      	movs	r2, #7
 801a7be:	701a      	strb	r2, [r3, #0]
}
 801a7c0:	bf00      	nop
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	20001b74 	.word	0x20001b74

0801a7c8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	2100      	movs	r1, #0
 801a7d0:	20d1      	movs	r0, #209	; 0xd1
 801a7d2:	f000 fd6f 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a7d6:	bf00      	nop
 801a7d8:	bd80      	pop	{r7, pc}

0801a7da <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a7da:	b580      	push	{r7, lr}
 801a7dc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a7de:	2200      	movs	r2, #0
 801a7e0:	2100      	movs	r1, #0
 801a7e2:	20d2      	movs	r0, #210	; 0xd2
 801a7e4:	f000 fd66 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a7e8:	bf00      	nop
 801a7ea:	bd80      	pop	{r7, pc}

0801a7ec <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a7f6:	1dfb      	adds	r3, r7, #7
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	4619      	mov	r1, r3
 801a7fc:	209f      	movs	r0, #159	; 0x9f
 801a7fe:	f000 fd59 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a802:	bf00      	nop
 801a804:	3708      	adds	r7, #8
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}

0801a80a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a80a:	b580      	push	{r7, lr}
 801a80c:	b084      	sub	sp, #16
 801a80e:	af00      	add	r7, sp, #0
 801a810:	4603      	mov	r3, r0
 801a812:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a814:	1dfb      	adds	r3, r7, #7
 801a816:	2201      	movs	r2, #1
 801a818:	4619      	mov	r1, r3
 801a81a:	20a0      	movs	r0, #160	; 0xa0
 801a81c:	f000 fd4a 	bl	801b2b4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a820:	79fb      	ldrb	r3, [r7, #7]
 801a822:	2b3f      	cmp	r3, #63	; 0x3f
 801a824:	d91c      	bls.n	801a860 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a826:	79fb      	ldrb	r3, [r7, #7]
 801a828:	085b      	lsrs	r3, r3, #1
 801a82a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a82c:	2300      	movs	r3, #0
 801a82e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a830:	2300      	movs	r3, #0
 801a832:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a834:	e005      	b.n	801a842 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a836:	7bfb      	ldrb	r3, [r7, #15]
 801a838:	089b      	lsrs	r3, r3, #2
 801a83a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a83c:	7bbb      	ldrb	r3, [r7, #14]
 801a83e:	3301      	adds	r3, #1
 801a840:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a842:	7bfb      	ldrb	r3, [r7, #15]
 801a844:	2b1f      	cmp	r3, #31
 801a846:	d8f6      	bhi.n	801a836 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a848:	7bfb      	ldrb	r3, [r7, #15]
 801a84a:	00db      	lsls	r3, r3, #3
 801a84c:	b2da      	uxtb	r2, r3
 801a84e:	7bbb      	ldrb	r3, [r7, #14]
 801a850:	4413      	add	r3, r2
 801a852:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a854:	7b7b      	ldrb	r3, [r7, #13]
 801a856:	4619      	mov	r1, r3
 801a858:	f240 7006 	movw	r0, #1798	; 0x706
 801a85c:	f000 fc7a 	bl	801b154 <SUBGRF_WriteRegister>
    }
}
 801a860:	bf00      	nop
 801a862:	3710      	adds	r7, #16
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}

0801a868 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b082      	sub	sp, #8
 801a86c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a86e:	f7f1 f9fa 	bl	800bc66 <RBI_IsDCDC>
 801a872:	4603      	mov	r3, r0
 801a874:	2b01      	cmp	r3, #1
 801a876:	d102      	bne.n	801a87e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a878:	2301      	movs	r3, #1
 801a87a:	71fb      	strb	r3, [r7, #7]
 801a87c:	e001      	b.n	801a882 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a87e:	2300      	movs	r3, #0
 801a880:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a882:	1dfb      	adds	r3, r7, #7
 801a884:	2201      	movs	r2, #1
 801a886:	4619      	mov	r1, r3
 801a888:	2096      	movs	r0, #150	; 0x96
 801a88a:	f000 fd13 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a88e:	bf00      	nop
 801a890:	3708      	adds	r7, #8
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}

0801a896 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a896:	b580      	push	{r7, lr}
 801a898:	b084      	sub	sp, #16
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a89e:	793b      	ldrb	r3, [r7, #4]
 801a8a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a8a4:	b2db      	uxtb	r3, r3
 801a8a6:	019b      	lsls	r3, r3, #6
 801a8a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a8aa:	793b      	ldrb	r3, [r7, #4]
 801a8ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a8b0:	b2db      	uxtb	r3, r3
 801a8b2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a8b4:	b25b      	sxtb	r3, r3
 801a8b6:	4313      	orrs	r3, r2
 801a8b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a8ba:	793b      	ldrb	r3, [r7, #4]
 801a8bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a8c0:	b2db      	uxtb	r3, r3
 801a8c2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a8c4:	b25b      	sxtb	r3, r3
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a8ca:	793b      	ldrb	r3, [r7, #4]
 801a8cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a8d0:	b2db      	uxtb	r3, r3
 801a8d2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a8d4:	b25b      	sxtb	r3, r3
 801a8d6:	4313      	orrs	r3, r2
 801a8d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a8da:	793b      	ldrb	r3, [r7, #4]
 801a8dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a8e0:	b2db      	uxtb	r3, r3
 801a8e2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a8e4:	b25b      	sxtb	r3, r3
 801a8e6:	4313      	orrs	r3, r2
 801a8e8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a8ea:	793b      	ldrb	r3, [r7, #4]
 801a8ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a8f0:	b2db      	uxtb	r3, r3
 801a8f2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a8f4:	b25b      	sxtb	r3, r3
 801a8f6:	4313      	orrs	r3, r2
 801a8f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a8fa:	793b      	ldrb	r3, [r7, #4]
 801a8fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a900:	b2db      	uxtb	r3, r3
 801a902:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a904:	4313      	orrs	r3, r2
 801a906:	b25b      	sxtb	r3, r3
 801a908:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a90a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a90c:	f107 030f 	add.w	r3, r7, #15
 801a910:	2201      	movs	r2, #1
 801a912:	4619      	mov	r1, r3
 801a914:	2089      	movs	r0, #137	; 0x89
 801a916:	f000 fccd 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a91a:	bf00      	nop
 801a91c:	3710      	adds	r7, #16
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
	...

0801a924 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b084      	sub	sp, #16
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	4a1b      	ldr	r2, [pc, #108]	; (801a99c <SUBGRF_CalibrateImage+0x78>)
 801a930:	4293      	cmp	r3, r2
 801a932:	d904      	bls.n	801a93e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a934:	23e1      	movs	r3, #225	; 0xe1
 801a936:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a938:	23e9      	movs	r3, #233	; 0xe9
 801a93a:	737b      	strb	r3, [r7, #13]
 801a93c:	e022      	b.n	801a984 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	4a17      	ldr	r2, [pc, #92]	; (801a9a0 <SUBGRF_CalibrateImage+0x7c>)
 801a942:	4293      	cmp	r3, r2
 801a944:	d904      	bls.n	801a950 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a946:	23d7      	movs	r3, #215	; 0xd7
 801a948:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a94a:	23db      	movs	r3, #219	; 0xdb
 801a94c:	737b      	strb	r3, [r7, #13]
 801a94e:	e019      	b.n	801a984 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	4a14      	ldr	r2, [pc, #80]	; (801a9a4 <SUBGRF_CalibrateImage+0x80>)
 801a954:	4293      	cmp	r3, r2
 801a956:	d904      	bls.n	801a962 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a958:	23c1      	movs	r3, #193	; 0xc1
 801a95a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a95c:	23c5      	movs	r3, #197	; 0xc5
 801a95e:	737b      	strb	r3, [r7, #13]
 801a960:	e010      	b.n	801a984 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	4a10      	ldr	r2, [pc, #64]	; (801a9a8 <SUBGRF_CalibrateImage+0x84>)
 801a966:	4293      	cmp	r3, r2
 801a968:	d904      	bls.n	801a974 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a96a:	2375      	movs	r3, #117	; 0x75
 801a96c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a96e:	2381      	movs	r3, #129	; 0x81
 801a970:	737b      	strb	r3, [r7, #13]
 801a972:	e007      	b.n	801a984 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	4a0d      	ldr	r2, [pc, #52]	; (801a9ac <SUBGRF_CalibrateImage+0x88>)
 801a978:	4293      	cmp	r3, r2
 801a97a:	d903      	bls.n	801a984 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a97c:	236b      	movs	r3, #107	; 0x6b
 801a97e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a980:	236f      	movs	r3, #111	; 0x6f
 801a982:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a984:	f107 030c 	add.w	r3, r7, #12
 801a988:	2202      	movs	r2, #2
 801a98a:	4619      	mov	r1, r3
 801a98c:	2098      	movs	r0, #152	; 0x98
 801a98e:	f000 fc91 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a992:	bf00      	nop
 801a994:	3710      	adds	r7, #16
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}
 801a99a:	bf00      	nop
 801a99c:	35a4e900 	.word	0x35a4e900
 801a9a0:	32a9f880 	.word	0x32a9f880
 801a9a4:	2de54480 	.word	0x2de54480
 801a9a8:	1b6b0b00 	.word	0x1b6b0b00
 801a9ac:	1954fc40 	.word	0x1954fc40

0801a9b0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a9b0:	b590      	push	{r4, r7, lr}
 801a9b2:	b085      	sub	sp, #20
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	4604      	mov	r4, r0
 801a9b8:	4608      	mov	r0, r1
 801a9ba:	4611      	mov	r1, r2
 801a9bc:	461a      	mov	r2, r3
 801a9be:	4623      	mov	r3, r4
 801a9c0:	71fb      	strb	r3, [r7, #7]
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	71bb      	strb	r3, [r7, #6]
 801a9c6:	460b      	mov	r3, r1
 801a9c8:	717b      	strb	r3, [r7, #5]
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a9ce:	79fb      	ldrb	r3, [r7, #7]
 801a9d0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a9d2:	79bb      	ldrb	r3, [r7, #6]
 801a9d4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a9d6:	797b      	ldrb	r3, [r7, #5]
 801a9d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a9da:	793b      	ldrb	r3, [r7, #4]
 801a9dc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a9de:	f107 030c 	add.w	r3, r7, #12
 801a9e2:	2204      	movs	r2, #4
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	2095      	movs	r0, #149	; 0x95
 801a9e8:	f000 fc64 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801a9ec:	bf00      	nop
 801a9ee:	3714      	adds	r7, #20
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	bd90      	pop	{r4, r7, pc}

0801a9f4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a9f4:	b590      	push	{r4, r7, lr}
 801a9f6:	b085      	sub	sp, #20
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	4604      	mov	r4, r0
 801a9fc:	4608      	mov	r0, r1
 801a9fe:	4611      	mov	r1, r2
 801aa00:	461a      	mov	r2, r3
 801aa02:	4623      	mov	r3, r4
 801aa04:	80fb      	strh	r3, [r7, #6]
 801aa06:	4603      	mov	r3, r0
 801aa08:	80bb      	strh	r3, [r7, #4]
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	807b      	strh	r3, [r7, #2]
 801aa0e:	4613      	mov	r3, r2
 801aa10:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801aa12:	88fb      	ldrh	r3, [r7, #6]
 801aa14:	0a1b      	lsrs	r3, r3, #8
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	b2db      	uxtb	r3, r3
 801aa1a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801aa1c:	88fb      	ldrh	r3, [r7, #6]
 801aa1e:	b2db      	uxtb	r3, r3
 801aa20:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801aa22:	88bb      	ldrh	r3, [r7, #4]
 801aa24:	0a1b      	lsrs	r3, r3, #8
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801aa2c:	88bb      	ldrh	r3, [r7, #4]
 801aa2e:	b2db      	uxtb	r3, r3
 801aa30:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801aa32:	887b      	ldrh	r3, [r7, #2]
 801aa34:	0a1b      	lsrs	r3, r3, #8
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801aa3c:	887b      	ldrh	r3, [r7, #2]
 801aa3e:	b2db      	uxtb	r3, r3
 801aa40:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801aa42:	883b      	ldrh	r3, [r7, #0]
 801aa44:	0a1b      	lsrs	r3, r3, #8
 801aa46:	b29b      	uxth	r3, r3
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801aa4c:	883b      	ldrh	r3, [r7, #0]
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801aa52:	f107 0308 	add.w	r3, r7, #8
 801aa56:	2208      	movs	r2, #8
 801aa58:	4619      	mov	r1, r3
 801aa5a:	2008      	movs	r0, #8
 801aa5c:	f000 fc2a 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801aa60:	bf00      	nop
 801aa62:	3714      	adds	r7, #20
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd90      	pop	{r4, r7, pc}

0801aa68 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b084      	sub	sp, #16
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	4603      	mov	r3, r0
 801aa70:	6039      	str	r1, [r7, #0]
 801aa72:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801aa74:	79fb      	ldrb	r3, [r7, #7]
 801aa76:	f003 0307 	and.w	r3, r3, #7
 801aa7a:	b2db      	uxtb	r3, r3
 801aa7c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	0c1b      	lsrs	r3, r3, #16
 801aa82:	b2db      	uxtb	r3, r3
 801aa84:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	0a1b      	lsrs	r3, r3, #8
 801aa8a:	b2db      	uxtb	r3, r3
 801aa8c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	b2db      	uxtb	r3, r3
 801aa92:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801aa94:	f107 030c 	add.w	r3, r7, #12
 801aa98:	2204      	movs	r2, #4
 801aa9a:	4619      	mov	r1, r3
 801aa9c:	2097      	movs	r0, #151	; 0x97
 801aa9e:	f000 fc09 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801aaa2:	bf00      	nop
 801aaa4:	3710      	adds	r7, #16
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd80      	pop	{r7, pc}
	...

0801aaac <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801aaac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801aab0:	b084      	sub	sp, #16
 801aab2:	af00      	add	r7, sp, #0
 801aab4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801aab6:	2300      	movs	r3, #0
 801aab8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801aaba:	4b1d      	ldr	r3, [pc, #116]	; (801ab30 <SUBGRF_SetRfFrequency+0x84>)
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	f083 0301 	eor.w	r3, r3, #1
 801aac2:	b2db      	uxtb	r3, r3
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d005      	beq.n	801aad4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801aac8:	6878      	ldr	r0, [r7, #4]
 801aaca:	f7ff ff2b 	bl	801a924 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801aace:	4b18      	ldr	r3, [pc, #96]	; (801ab30 <SUBGRF_SetRfFrequency+0x84>)
 801aad0:	2201      	movs	r2, #1
 801aad2:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	2200      	movs	r2, #0
 801aad8:	461c      	mov	r4, r3
 801aada:	4615      	mov	r5, r2
 801aadc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801aae0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801aae4:	4a13      	ldr	r2, [pc, #76]	; (801ab34 <SUBGRF_SetRfFrequency+0x88>)
 801aae6:	f04f 0300 	mov.w	r3, #0
 801aaea:	4640      	mov	r0, r8
 801aaec:	4649      	mov	r1, r9
 801aaee:	f7e5 feeb 	bl	80008c8 <__aeabi_uldivmod>
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	4613      	mov	r3, r2
 801aaf8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	0e1b      	lsrs	r3, r3, #24
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	0c1b      	lsrs	r3, r3, #16
 801ab06:	b2db      	uxtb	r3, r3
 801ab08:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	0a1b      	lsrs	r3, r3, #8
 801ab0e:	b2db      	uxtb	r3, r3
 801ab10:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801ab18:	f107 0308 	add.w	r3, r7, #8
 801ab1c:	2204      	movs	r2, #4
 801ab1e:	4619      	mov	r1, r3
 801ab20:	2086      	movs	r0, #134	; 0x86
 801ab22:	f000 fbc7 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801ab26:	bf00      	nop
 801ab28:	3710      	adds	r7, #16
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ab30:	20001b7c 	.word	0x20001b7c
 801ab34:	01e84800 	.word	0x01e84800

0801ab38 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	4603      	mov	r3, r0
 801ab40:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801ab42:	79fa      	ldrb	r2, [r7, #7]
 801ab44:	4b09      	ldr	r3, [pc, #36]	; (801ab6c <SUBGRF_SetPacketType+0x34>)
 801ab46:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801ab48:	79fb      	ldrb	r3, [r7, #7]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d104      	bne.n	801ab58 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801ab4e:	2100      	movs	r1, #0
 801ab50:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801ab54:	f000 fafe 	bl	801b154 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801ab58:	1dfb      	adds	r3, r7, #7
 801ab5a:	2201      	movs	r2, #1
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	208a      	movs	r0, #138	; 0x8a
 801ab60:	f000 fba8 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801ab64:	bf00      	nop
 801ab66:	3708      	adds	r7, #8
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	20001b75 	.word	0x20001b75

0801ab70 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ab70:	b480      	push	{r7}
 801ab72:	af00      	add	r7, sp, #0
    return PacketType;
 801ab74:	4b02      	ldr	r3, [pc, #8]	; (801ab80 <SUBGRF_GetPacketType+0x10>)
 801ab76:	781b      	ldrb	r3, [r3, #0]
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bc80      	pop	{r7}
 801ab7e:	4770      	bx	lr
 801ab80:	20001b75 	.word	0x20001b75

0801ab84 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b084      	sub	sp, #16
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	71fb      	strb	r3, [r7, #7]
 801ab8e:	460b      	mov	r3, r1
 801ab90:	71bb      	strb	r3, [r7, #6]
 801ab92:	4613      	mov	r3, r2
 801ab94:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ab96:	79fb      	ldrb	r3, [r7, #7]
 801ab98:	2b01      	cmp	r3, #1
 801ab9a:	d149      	bne.n	801ac30 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ab9c:	2000      	movs	r0, #0
 801ab9e:	f7f1 f869 	bl	800bc74 <RBI_GetRFOMaxPowerConfig>
 801aba2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801aba4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aba8:	68fa      	ldr	r2, [r7, #12]
 801abaa:	429a      	cmp	r2, r3
 801abac:	da01      	bge.n	801abb2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	2b0e      	cmp	r3, #14
 801abb6:	d10e      	bne.n	801abd6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801abb8:	2301      	movs	r3, #1
 801abba:	2201      	movs	r2, #1
 801abbc:	2100      	movs	r1, #0
 801abbe:	2004      	movs	r0, #4
 801abc0:	f7ff fef6 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801abc4:	79ba      	ldrb	r2, [r7, #6]
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	1ad3      	subs	r3, r2, r3
 801abcc:	b2db      	uxtb	r3, r3
 801abce:	330e      	adds	r3, #14
 801abd0:	b2db      	uxtb	r3, r3
 801abd2:	71bb      	strb	r3, [r7, #6]
 801abd4:	e01f      	b.n	801ac16 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2b0a      	cmp	r3, #10
 801abda:	d10e      	bne.n	801abfa <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801abdc:	2301      	movs	r3, #1
 801abde:	2201      	movs	r2, #1
 801abe0:	2100      	movs	r1, #0
 801abe2:	2001      	movs	r0, #1
 801abe4:	f7ff fee4 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801abe8:	79ba      	ldrb	r2, [r7, #6]
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	b2db      	uxtb	r3, r3
 801abee:	1ad3      	subs	r3, r2, r3
 801abf0:	b2db      	uxtb	r3, r3
 801abf2:	330d      	adds	r3, #13
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	71bb      	strb	r3, [r7, #6]
 801abf8:	e00d      	b.n	801ac16 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801abfa:	2301      	movs	r3, #1
 801abfc:	2201      	movs	r2, #1
 801abfe:	2100      	movs	r1, #0
 801ac00:	2006      	movs	r0, #6
 801ac02:	f7ff fed5 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ac06:	79ba      	ldrb	r2, [r7, #6]
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	b2db      	uxtb	r3, r3
 801ac0c:	1ad3      	subs	r3, r2, r3
 801ac0e:	b2db      	uxtb	r3, r3
 801ac10:	330e      	adds	r3, #14
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ac16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ac1a:	f113 0f11 	cmn.w	r3, #17
 801ac1e:	da01      	bge.n	801ac24 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ac20:	23ef      	movs	r3, #239	; 0xef
 801ac22:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ac24:	2118      	movs	r1, #24
 801ac26:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ac2a:	f000 fa93 	bl	801b154 <SUBGRF_WriteRegister>
 801ac2e:	e067      	b.n	801ad00 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ac30:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ac34:	f000 faa2 	bl	801b17c <SUBGRF_ReadRegister>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	f043 031e 	orr.w	r3, r3, #30
 801ac3e:	b2db      	uxtb	r3, r3
 801ac40:	4619      	mov	r1, r3
 801ac42:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ac46:	f000 fa85 	bl	801b154 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801ac4a:	2001      	movs	r0, #1
 801ac4c:	f7f1 f812 	bl	800bc74 <RBI_GetRFOMaxPowerConfig>
 801ac50:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801ac52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ac56:	68fa      	ldr	r2, [r7, #12]
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	da01      	bge.n	801ac60 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	2b14      	cmp	r3, #20
 801ac64:	d10e      	bne.n	801ac84 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801ac66:	2301      	movs	r3, #1
 801ac68:	2200      	movs	r2, #0
 801ac6a:	2105      	movs	r1, #5
 801ac6c:	2003      	movs	r0, #3
 801ac6e:	f7ff fe9f 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ac72:	79ba      	ldrb	r2, [r7, #6]
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	b2db      	uxtb	r3, r3
 801ac78:	1ad3      	subs	r3, r2, r3
 801ac7a:	b2db      	uxtb	r3, r3
 801ac7c:	3316      	adds	r3, #22
 801ac7e:	b2db      	uxtb	r3, r3
 801ac80:	71bb      	strb	r3, [r7, #6]
 801ac82:	e031      	b.n	801ace8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2b11      	cmp	r3, #17
 801ac88:	d10e      	bne.n	801aca8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	2103      	movs	r1, #3
 801ac90:	2002      	movs	r0, #2
 801ac92:	f7ff fe8d 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ac96:	79ba      	ldrb	r2, [r7, #6]
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	1ad3      	subs	r3, r2, r3
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	3316      	adds	r3, #22
 801aca2:	b2db      	uxtb	r3, r3
 801aca4:	71bb      	strb	r3, [r7, #6]
 801aca6:	e01f      	b.n	801ace8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	2b0e      	cmp	r3, #14
 801acac:	d10e      	bne.n	801accc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801acae:	2301      	movs	r3, #1
 801acb0:	2200      	movs	r2, #0
 801acb2:	2102      	movs	r1, #2
 801acb4:	2002      	movs	r0, #2
 801acb6:	f7ff fe7b 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801acba:	79ba      	ldrb	r2, [r7, #6]
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	b2db      	uxtb	r3, r3
 801acc0:	1ad3      	subs	r3, r2, r3
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	330e      	adds	r3, #14
 801acc6:	b2db      	uxtb	r3, r3
 801acc8:	71bb      	strb	r3, [r7, #6]
 801acca:	e00d      	b.n	801ace8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801accc:	2301      	movs	r3, #1
 801acce:	2200      	movs	r2, #0
 801acd0:	2107      	movs	r1, #7
 801acd2:	2004      	movs	r0, #4
 801acd4:	f7ff fe6c 	bl	801a9b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801acd8:	79ba      	ldrb	r2, [r7, #6]
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	b2db      	uxtb	r3, r3
 801acde:	1ad3      	subs	r3, r2, r3
 801ace0:	b2db      	uxtb	r3, r3
 801ace2:	3316      	adds	r3, #22
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ace8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801acec:	f113 0f09 	cmn.w	r3, #9
 801acf0:	da01      	bge.n	801acf6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801acf2:	23f7      	movs	r3, #247	; 0xf7
 801acf4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801acf6:	2138      	movs	r1, #56	; 0x38
 801acf8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801acfc:	f000 fa2a 	bl	801b154 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ad00:	79bb      	ldrb	r3, [r7, #6]
 801ad02:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ad04:	797b      	ldrb	r3, [r7, #5]
 801ad06:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ad08:	f107 0308 	add.w	r3, r7, #8
 801ad0c:	2202      	movs	r2, #2
 801ad0e:	4619      	mov	r1, r3
 801ad10:	208e      	movs	r0, #142	; 0x8e
 801ad12:	f000 facf 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801ad16:	bf00      	nop
 801ad18:	3710      	adds	r7, #16
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}
	...

0801ad20 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ad20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ad24:	b086      	sub	sp, #24
 801ad26:	af00      	add	r7, sp, #0
 801ad28:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ad2a:	2300      	movs	r3, #0
 801ad2c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ad2e:	4a61      	ldr	r2, [pc, #388]	; (801aeb4 <SUBGRF_SetModulationParams+0x194>)
 801ad30:	f107 0308 	add.w	r3, r7, #8
 801ad34:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ad38:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	781a      	ldrb	r2, [r3, #0]
 801ad40:	4b5d      	ldr	r3, [pc, #372]	; (801aeb8 <SUBGRF_SetModulationParams+0x198>)
 801ad42:	781b      	ldrb	r3, [r3, #0]
 801ad44:	429a      	cmp	r2, r3
 801ad46:	d004      	beq.n	801ad52 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	781b      	ldrb	r3, [r3, #0]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7ff fef3 	bl	801ab38 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	2b03      	cmp	r3, #3
 801ad58:	f200 80a5 	bhi.w	801aea6 <SUBGRF_SetModulationParams+0x186>
 801ad5c:	a201      	add	r2, pc, #4	; (adr r2, 801ad64 <SUBGRF_SetModulationParams+0x44>)
 801ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad62:	bf00      	nop
 801ad64:	0801ad75 	.word	0x0801ad75
 801ad68:	0801ae35 	.word	0x0801ae35
 801ad6c:	0801adf7 	.word	0x0801adf7
 801ad70:	0801ae63 	.word	0x0801ae63
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ad74:	2308      	movs	r3, #8
 801ad76:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	685b      	ldr	r3, [r3, #4]
 801ad7c:	4a4f      	ldr	r2, [pc, #316]	; (801aebc <SUBGRF_SetModulationParams+0x19c>)
 801ad7e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad82:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ad84:	697b      	ldr	r3, [r7, #20]
 801ad86:	0c1b      	lsrs	r3, r3, #16
 801ad88:	b2db      	uxtb	r3, r3
 801ad8a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ad8c:	697b      	ldr	r3, [r7, #20]
 801ad8e:	0a1b      	lsrs	r3, r3, #8
 801ad90:	b2db      	uxtb	r3, r3
 801ad92:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	b2db      	uxtb	r3, r3
 801ad98:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	7b1b      	ldrb	r3, [r3, #12]
 801ad9e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	7b5b      	ldrb	r3, [r3, #13]
 801ada4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	689b      	ldr	r3, [r3, #8]
 801adaa:	2200      	movs	r2, #0
 801adac:	461c      	mov	r4, r3
 801adae:	4615      	mov	r5, r2
 801adb0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801adb4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801adb8:	4a41      	ldr	r2, [pc, #260]	; (801aec0 <SUBGRF_SetModulationParams+0x1a0>)
 801adba:	f04f 0300 	mov.w	r3, #0
 801adbe:	4640      	mov	r0, r8
 801adc0:	4649      	mov	r1, r9
 801adc2:	f7e5 fd81 	bl	80008c8 <__aeabi_uldivmod>
 801adc6:	4602      	mov	r2, r0
 801adc8:	460b      	mov	r3, r1
 801adca:	4613      	mov	r3, r2
 801adcc:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801adce:	697b      	ldr	r3, [r7, #20]
 801add0:	0c1b      	lsrs	r3, r3, #16
 801add2:	b2db      	uxtb	r3, r3
 801add4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801add6:	697b      	ldr	r3, [r7, #20]
 801add8:	0a1b      	lsrs	r3, r3, #8
 801adda:	b2db      	uxtb	r3, r3
 801addc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801adde:	697b      	ldr	r3, [r7, #20]
 801ade0:	b2db      	uxtb	r3, r3
 801ade2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ade4:	7cfb      	ldrb	r3, [r7, #19]
 801ade6:	b29a      	uxth	r2, r3
 801ade8:	f107 0308 	add.w	r3, r7, #8
 801adec:	4619      	mov	r1, r3
 801adee:	208b      	movs	r0, #139	; 0x8b
 801adf0:	f000 fa60 	bl	801b2b4 <SUBGRF_WriteCommand>
        break;
 801adf4:	e058      	b.n	801aea8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801adf6:	2304      	movs	r3, #4
 801adf8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	691b      	ldr	r3, [r3, #16]
 801adfe:	4a2f      	ldr	r2, [pc, #188]	; (801aebc <SUBGRF_SetModulationParams+0x19c>)
 801ae00:	fbb2 f3f3 	udiv	r3, r2, r3
 801ae04:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ae06:	697b      	ldr	r3, [r7, #20]
 801ae08:	0c1b      	lsrs	r3, r3, #16
 801ae0a:	b2db      	uxtb	r3, r3
 801ae0c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	0a1b      	lsrs	r3, r3, #8
 801ae12:	b2db      	uxtb	r3, r3
 801ae14:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ae16:	697b      	ldr	r3, [r7, #20]
 801ae18:	b2db      	uxtb	r3, r3
 801ae1a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	7d1b      	ldrb	r3, [r3, #20]
 801ae20:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ae22:	7cfb      	ldrb	r3, [r7, #19]
 801ae24:	b29a      	uxth	r2, r3
 801ae26:	f107 0308 	add.w	r3, r7, #8
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	208b      	movs	r0, #139	; 0x8b
 801ae2e:	f000 fa41 	bl	801b2b4 <SUBGRF_WriteCommand>
        break;
 801ae32:	e039      	b.n	801aea8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ae34:	2304      	movs	r3, #4
 801ae36:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	7e1b      	ldrb	r3, [r3, #24]
 801ae3c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	7e5b      	ldrb	r3, [r3, #25]
 801ae42:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	7e9b      	ldrb	r3, [r3, #26]
 801ae48:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	7edb      	ldrb	r3, [r3, #27]
 801ae4e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ae50:	7cfb      	ldrb	r3, [r7, #19]
 801ae52:	b29a      	uxth	r2, r3
 801ae54:	f107 0308 	add.w	r3, r7, #8
 801ae58:	4619      	mov	r1, r3
 801ae5a:	208b      	movs	r0, #139	; 0x8b
 801ae5c:	f000 fa2a 	bl	801b2b4 <SUBGRF_WriteCommand>

        break;
 801ae60:	e022      	b.n	801aea8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ae62:	2305      	movs	r3, #5
 801ae64:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	4a14      	ldr	r2, [pc, #80]	; (801aebc <SUBGRF_SetModulationParams+0x19c>)
 801ae6c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ae70:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	0c1b      	lsrs	r3, r3, #16
 801ae76:	b2db      	uxtb	r3, r3
 801ae78:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ae7a:	697b      	ldr	r3, [r7, #20]
 801ae7c:	0a1b      	lsrs	r3, r3, #8
 801ae7e:	b2db      	uxtb	r3, r3
 801ae80:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ae82:	697b      	ldr	r3, [r7, #20]
 801ae84:	b2db      	uxtb	r3, r3
 801ae86:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	7b1b      	ldrb	r3, [r3, #12]
 801ae8c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	7b5b      	ldrb	r3, [r3, #13]
 801ae92:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ae94:	7cfb      	ldrb	r3, [r7, #19]
 801ae96:	b29a      	uxth	r2, r3
 801ae98:	f107 0308 	add.w	r3, r7, #8
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	208b      	movs	r0, #139	; 0x8b
 801aea0:	f000 fa08 	bl	801b2b4 <SUBGRF_WriteCommand>
        break;
 801aea4:	e000      	b.n	801aea8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801aea6:	bf00      	nop
    }
}
 801aea8:	bf00      	nop
 801aeaa:	3718      	adds	r7, #24
 801aeac:	46bd      	mov	sp, r7
 801aeae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801aeb2:	bf00      	nop
 801aeb4:	0801d70c 	.word	0x0801d70c
 801aeb8:	20001b75 	.word	0x20001b75
 801aebc:	3d090000 	.word	0x3d090000
 801aec0:	01e84800 	.word	0x01e84800

0801aec4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b086      	sub	sp, #24
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801aecc:	2300      	movs	r3, #0
 801aece:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801aed0:	4a48      	ldr	r2, [pc, #288]	; (801aff4 <SUBGRF_SetPacketParams+0x130>)
 801aed2:	f107 030c 	add.w	r3, r7, #12
 801aed6:	ca07      	ldmia	r2, {r0, r1, r2}
 801aed8:	c303      	stmia	r3!, {r0, r1}
 801aeda:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	781a      	ldrb	r2, [r3, #0]
 801aee0:	4b45      	ldr	r3, [pc, #276]	; (801aff8 <SUBGRF_SetPacketParams+0x134>)
 801aee2:	781b      	ldrb	r3, [r3, #0]
 801aee4:	429a      	cmp	r2, r3
 801aee6:	d004      	beq.n	801aef2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	4618      	mov	r0, r3
 801aeee:	f7ff fe23 	bl	801ab38 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	781b      	ldrb	r3, [r3, #0]
 801aef6:	2b03      	cmp	r3, #3
 801aef8:	d878      	bhi.n	801afec <SUBGRF_SetPacketParams+0x128>
 801aefa:	a201      	add	r2, pc, #4	; (adr r2, 801af00 <SUBGRF_SetPacketParams+0x3c>)
 801aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af00:	0801af11 	.word	0x0801af11
 801af04:	0801afa1 	.word	0x0801afa1
 801af08:	0801af95 	.word	0x0801af95
 801af0c:	0801af11 	.word	0x0801af11
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	7a5b      	ldrb	r3, [r3, #9]
 801af14:	2bf1      	cmp	r3, #241	; 0xf1
 801af16:	d10a      	bne.n	801af2e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801af18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801af1c:	f7ff faae 	bl	801a47c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801af20:	f248 0005 	movw	r0, #32773	; 0x8005
 801af24:	f7ff faca 	bl	801a4bc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801af28:	2302      	movs	r3, #2
 801af2a:	75bb      	strb	r3, [r7, #22]
 801af2c:	e011      	b.n	801af52 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	7a5b      	ldrb	r3, [r3, #9]
 801af32:	2bf2      	cmp	r3, #242	; 0xf2
 801af34:	d10a      	bne.n	801af4c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801af36:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801af3a:	f7ff fa9f 	bl	801a47c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801af3e:	f241 0021 	movw	r0, #4129	; 0x1021
 801af42:	f7ff fabb 	bl	801a4bc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801af46:	2306      	movs	r3, #6
 801af48:	75bb      	strb	r3, [r7, #22]
 801af4a:	e002      	b.n	801af52 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	7a5b      	ldrb	r3, [r3, #9]
 801af50:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801af52:	2309      	movs	r3, #9
 801af54:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	885b      	ldrh	r3, [r3, #2]
 801af5a:	0a1b      	lsrs	r3, r3, #8
 801af5c:	b29b      	uxth	r3, r3
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	885b      	ldrh	r3, [r3, #2]
 801af66:	b2db      	uxtb	r3, r3
 801af68:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	791b      	ldrb	r3, [r3, #4]
 801af6e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	795b      	ldrb	r3, [r3, #5]
 801af74:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	799b      	ldrb	r3, [r3, #6]
 801af7a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	79db      	ldrb	r3, [r3, #7]
 801af80:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	7a1b      	ldrb	r3, [r3, #8]
 801af86:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801af88:	7dbb      	ldrb	r3, [r7, #22]
 801af8a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	7a9b      	ldrb	r3, [r3, #10]
 801af90:	753b      	strb	r3, [r7, #20]
        break;
 801af92:	e022      	b.n	801afda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801af94:	2301      	movs	r3, #1
 801af96:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	7b1b      	ldrb	r3, [r3, #12]
 801af9c:	733b      	strb	r3, [r7, #12]
        break;
 801af9e:	e01c      	b.n	801afda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801afa0:	2306      	movs	r3, #6
 801afa2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	89db      	ldrh	r3, [r3, #14]
 801afa8:	0a1b      	lsrs	r3, r3, #8
 801afaa:	b29b      	uxth	r3, r3
 801afac:	b2db      	uxtb	r3, r3
 801afae:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	89db      	ldrh	r3, [r3, #14]
 801afb4:	b2db      	uxtb	r3, r3
 801afb6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	7c1a      	ldrb	r2, [r3, #16]
 801afbc:	4b0f      	ldr	r3, [pc, #60]	; (801affc <SUBGRF_SetPacketParams+0x138>)
 801afbe:	4611      	mov	r1, r2
 801afc0:	7019      	strb	r1, [r3, #0]
 801afc2:	4613      	mov	r3, r2
 801afc4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	7c5b      	ldrb	r3, [r3, #17]
 801afca:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	7c9b      	ldrb	r3, [r3, #18]
 801afd0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	7cdb      	ldrb	r3, [r3, #19]
 801afd6:	747b      	strb	r3, [r7, #17]
        break;
 801afd8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801afda:	7dfb      	ldrb	r3, [r7, #23]
 801afdc:	b29a      	uxth	r2, r3
 801afde:	f107 030c 	add.w	r3, r7, #12
 801afe2:	4619      	mov	r1, r3
 801afe4:	208c      	movs	r0, #140	; 0x8c
 801afe6:	f000 f965 	bl	801b2b4 <SUBGRF_WriteCommand>
 801afea:	e000      	b.n	801afee <SUBGRF_SetPacketParams+0x12a>
        return;
 801afec:	bf00      	nop
}
 801afee:	3718      	adds	r7, #24
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}
 801aff4:	0801d714 	.word	0x0801d714
 801aff8:	20001b75 	.word	0x20001b75
 801affc:	20001b76 	.word	0x20001b76

0801b000 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b084      	sub	sp, #16
 801b004:	af00      	add	r7, sp, #0
 801b006:	4603      	mov	r3, r0
 801b008:	460a      	mov	r2, r1
 801b00a:	71fb      	strb	r3, [r7, #7]
 801b00c:	4613      	mov	r3, r2
 801b00e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b010:	79fb      	ldrb	r3, [r7, #7]
 801b012:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b014:	79bb      	ldrb	r3, [r7, #6]
 801b016:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b018:	f107 030c 	add.w	r3, r7, #12
 801b01c:	2202      	movs	r2, #2
 801b01e:	4619      	mov	r1, r3
 801b020:	208f      	movs	r0, #143	; 0x8f
 801b022:	f000 f947 	bl	801b2b4 <SUBGRF_WriteCommand>
}
 801b026:	bf00      	nop
 801b028:	3710      	adds	r7, #16
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bd80      	pop	{r7, pc}

0801b02e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b02e:	b580      	push	{r7, lr}
 801b030:	b082      	sub	sp, #8
 801b032:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b034:	2300      	movs	r3, #0
 801b036:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b038:	1d3b      	adds	r3, r7, #4
 801b03a:	2201      	movs	r2, #1
 801b03c:	4619      	mov	r1, r3
 801b03e:	2015      	movs	r0, #21
 801b040:	f000 f95a 	bl	801b2f8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b044:	793b      	ldrb	r3, [r7, #4]
 801b046:	425b      	negs	r3, r3
 801b048:	105b      	asrs	r3, r3, #1
 801b04a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b04c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b050:	4618      	mov	r0, r3
 801b052:	3708      	adds	r7, #8
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}

0801b058 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b084      	sub	sp, #16
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
 801b060:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b062:	f107 030c 	add.w	r3, r7, #12
 801b066:	2202      	movs	r2, #2
 801b068:	4619      	mov	r1, r3
 801b06a:	2013      	movs	r0, #19
 801b06c:	f000 f944 	bl	801b2f8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b070:	f7ff fd7e 	bl	801ab70 <SUBGRF_GetPacketType>
 801b074:	4603      	mov	r3, r0
 801b076:	2b01      	cmp	r3, #1
 801b078:	d10d      	bne.n	801b096 <SUBGRF_GetRxBufferStatus+0x3e>
 801b07a:	4b0c      	ldr	r3, [pc, #48]	; (801b0ac <SUBGRF_GetRxBufferStatus+0x54>)
 801b07c:	781b      	ldrb	r3, [r3, #0]
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	2b01      	cmp	r3, #1
 801b082:	d108      	bne.n	801b096 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b084:	f240 7002 	movw	r0, #1794	; 0x702
 801b088:	f000 f878 	bl	801b17c <SUBGRF_ReadRegister>
 801b08c:	4603      	mov	r3, r0
 801b08e:	461a      	mov	r2, r3
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	701a      	strb	r2, [r3, #0]
 801b094:	e002      	b.n	801b09c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b096:	7b3a      	ldrb	r2, [r7, #12]
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b09c:	7b7a      	ldrb	r2, [r7, #13]
 801b09e:	683b      	ldr	r3, [r7, #0]
 801b0a0:	701a      	strb	r2, [r3, #0]
}
 801b0a2:	bf00      	nop
 801b0a4:	3710      	adds	r7, #16
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	20001b76 	.word	0x20001b76

0801b0b0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b084      	sub	sp, #16
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b0b8:	f107 030c 	add.w	r3, r7, #12
 801b0bc:	2203      	movs	r2, #3
 801b0be:	4619      	mov	r1, r3
 801b0c0:	2014      	movs	r0, #20
 801b0c2:	f000 f919 	bl	801b2f8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b0c6:	f7ff fd53 	bl	801ab70 <SUBGRF_GetPacketType>
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	461a      	mov	r2, r3
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	781b      	ldrb	r3, [r3, #0]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d002      	beq.n	801b0e0 <SUBGRF_GetPacketStatus+0x30>
 801b0da:	2b01      	cmp	r3, #1
 801b0dc:	d013      	beq.n	801b106 <SUBGRF_GetPacketStatus+0x56>
 801b0de:	e02a      	b.n	801b136 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b0e0:	7b3a      	ldrb	r2, [r7, #12]
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b0e6:	7b7b      	ldrb	r3, [r7, #13]
 801b0e8:	425b      	negs	r3, r3
 801b0ea:	105b      	asrs	r3, r3, #1
 801b0ec:	b25a      	sxtb	r2, r3
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b0f2:	7bbb      	ldrb	r3, [r7, #14]
 801b0f4:	425b      	negs	r3, r3
 801b0f6:	105b      	asrs	r3, r3, #1
 801b0f8:	b25a      	sxtb	r2, r3
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	2200      	movs	r2, #0
 801b102:	609a      	str	r2, [r3, #8]
            break;
 801b104:	e020      	b.n	801b148 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b106:	7b3b      	ldrb	r3, [r7, #12]
 801b108:	425b      	negs	r3, r3
 801b10a:	105b      	asrs	r3, r3, #1
 801b10c:	b25a      	sxtb	r2, r3
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b112:	7b7b      	ldrb	r3, [r7, #13]
 801b114:	b25b      	sxtb	r3, r3
 801b116:	3302      	adds	r3, #2
 801b118:	109b      	asrs	r3, r3, #2
 801b11a:	b25a      	sxtb	r2, r3
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b120:	7bbb      	ldrb	r3, [r7, #14]
 801b122:	425b      	negs	r3, r3
 801b124:	105b      	asrs	r3, r3, #1
 801b126:	b25a      	sxtb	r2, r3
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b12c:	4b08      	ldr	r3, [pc, #32]	; (801b150 <SUBGRF_GetPacketStatus+0xa0>)
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	611a      	str	r2, [r3, #16]
            break;
 801b134:	e008      	b.n	801b148 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b136:	2214      	movs	r2, #20
 801b138:	2100      	movs	r1, #0
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f000 fbf3 	bl	801b926 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	220f      	movs	r2, #15
 801b144:	701a      	strb	r2, [r3, #0]
            break;
 801b146:	bf00      	nop
    }
}
 801b148:	bf00      	nop
 801b14a:	3710      	adds	r7, #16
 801b14c:	46bd      	mov	sp, r7
 801b14e:	bd80      	pop	{r7, pc}
 801b150:	20001b78 	.word	0x20001b78

0801b154 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b082      	sub	sp, #8
 801b158:	af00      	add	r7, sp, #0
 801b15a:	4603      	mov	r3, r0
 801b15c:	460a      	mov	r2, r1
 801b15e:	80fb      	strh	r3, [r7, #6]
 801b160:	4613      	mov	r3, r2
 801b162:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b164:	1d7a      	adds	r2, r7, #5
 801b166:	88f9      	ldrh	r1, [r7, #6]
 801b168:	2301      	movs	r3, #1
 801b16a:	4803      	ldr	r0, [pc, #12]	; (801b178 <SUBGRF_WriteRegister+0x24>)
 801b16c:	f7ed fb96 	bl	800889c <HAL_SUBGHZ_WriteRegisters>
}
 801b170:	bf00      	nop
 801b172:	3708      	adds	r7, #8
 801b174:	46bd      	mov	sp, r7
 801b176:	bd80      	pop	{r7, pc}
 801b178:	200002a0 	.word	0x200002a0

0801b17c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b084      	sub	sp, #16
 801b180:	af00      	add	r7, sp, #0
 801b182:	4603      	mov	r3, r0
 801b184:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b186:	f107 020f 	add.w	r2, r7, #15
 801b18a:	88f9      	ldrh	r1, [r7, #6]
 801b18c:	2301      	movs	r3, #1
 801b18e:	4804      	ldr	r0, [pc, #16]	; (801b1a0 <SUBGRF_ReadRegister+0x24>)
 801b190:	f7ed fbe3 	bl	800895a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b194:	7bfb      	ldrb	r3, [r7, #15]
}
 801b196:	4618      	mov	r0, r3
 801b198:	3710      	adds	r7, #16
 801b19a:	46bd      	mov	sp, r7
 801b19c:	bd80      	pop	{r7, pc}
 801b19e:	bf00      	nop
 801b1a0:	200002a0 	.word	0x200002a0

0801b1a4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b086      	sub	sp, #24
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	6039      	str	r1, [r7, #0]
 801b1ae:	80fb      	strh	r3, [r7, #6]
 801b1b0:	4613      	mov	r3, r2
 801b1b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1be:	b672      	cpsid	i
}
 801b1c0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b1c2:	88bb      	ldrh	r3, [r7, #4]
 801b1c4:	88f9      	ldrh	r1, [r7, #6]
 801b1c6:	683a      	ldr	r2, [r7, #0]
 801b1c8:	4806      	ldr	r0, [pc, #24]	; (801b1e4 <SUBGRF_WriteRegisters+0x40>)
 801b1ca:	f7ed fb67 	bl	800889c <HAL_SUBGHZ_WriteRegisters>
 801b1ce:	697b      	ldr	r3, [r7, #20]
 801b1d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1d2:	693b      	ldr	r3, [r7, #16]
 801b1d4:	f383 8810 	msr	PRIMASK, r3
}
 801b1d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1da:	bf00      	nop
 801b1dc:	3718      	adds	r7, #24
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	bd80      	pop	{r7, pc}
 801b1e2:	bf00      	nop
 801b1e4:	200002a0 	.word	0x200002a0

0801b1e8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b086      	sub	sp, #24
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	6039      	str	r1, [r7, #0]
 801b1f2:	80fb      	strh	r3, [r7, #6]
 801b1f4:	4613      	mov	r3, r2
 801b1f6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801b1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b202:	b672      	cpsid	i
}
 801b204:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b206:	88bb      	ldrh	r3, [r7, #4]
 801b208:	88f9      	ldrh	r1, [r7, #6]
 801b20a:	683a      	ldr	r2, [r7, #0]
 801b20c:	4806      	ldr	r0, [pc, #24]	; (801b228 <SUBGRF_ReadRegisters+0x40>)
 801b20e:	f7ed fba4 	bl	800895a <HAL_SUBGHZ_ReadRegisters>
 801b212:	697b      	ldr	r3, [r7, #20]
 801b214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b216:	693b      	ldr	r3, [r7, #16]
 801b218:	f383 8810 	msr	PRIMASK, r3
}
 801b21c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b21e:	bf00      	nop
 801b220:	3718      	adds	r7, #24
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
 801b226:	bf00      	nop
 801b228:	200002a0 	.word	0x200002a0

0801b22c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b086      	sub	sp, #24
 801b230:	af00      	add	r7, sp, #0
 801b232:	4603      	mov	r3, r0
 801b234:	6039      	str	r1, [r7, #0]
 801b236:	71fb      	strb	r3, [r7, #7]
 801b238:	4613      	mov	r3, r2
 801b23a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b23c:	f3ef 8310 	mrs	r3, PRIMASK
 801b240:	60fb      	str	r3, [r7, #12]
  return(result);
 801b242:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b246:	b672      	cpsid	i
}
 801b248:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b24a:	79bb      	ldrb	r3, [r7, #6]
 801b24c:	b29b      	uxth	r3, r3
 801b24e:	79f9      	ldrb	r1, [r7, #7]
 801b250:	683a      	ldr	r2, [r7, #0]
 801b252:	4806      	ldr	r0, [pc, #24]	; (801b26c <SUBGRF_WriteBuffer+0x40>)
 801b254:	f7ed fc95 	bl	8008b82 <HAL_SUBGHZ_WriteBuffer>
 801b258:	697b      	ldr	r3, [r7, #20]
 801b25a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	f383 8810 	msr	PRIMASK, r3
}
 801b262:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b264:	bf00      	nop
 801b266:	3718      	adds	r7, #24
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	200002a0 	.word	0x200002a0

0801b270 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b270:	b580      	push	{r7, lr}
 801b272:	b086      	sub	sp, #24
 801b274:	af00      	add	r7, sp, #0
 801b276:	4603      	mov	r3, r0
 801b278:	6039      	str	r1, [r7, #0]
 801b27a:	71fb      	strb	r3, [r7, #7]
 801b27c:	4613      	mov	r3, r2
 801b27e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b280:	f3ef 8310 	mrs	r3, PRIMASK
 801b284:	60fb      	str	r3, [r7, #12]
  return(result);
 801b286:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b28a:	b672      	cpsid	i
}
 801b28c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b28e:	79bb      	ldrb	r3, [r7, #6]
 801b290:	b29b      	uxth	r3, r3
 801b292:	79f9      	ldrb	r1, [r7, #7]
 801b294:	683a      	ldr	r2, [r7, #0]
 801b296:	4806      	ldr	r0, [pc, #24]	; (801b2b0 <SUBGRF_ReadBuffer+0x40>)
 801b298:	f7ed fcc6 	bl	8008c28 <HAL_SUBGHZ_ReadBuffer>
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2a0:	693b      	ldr	r3, [r7, #16]
 801b2a2:	f383 8810 	msr	PRIMASK, r3
}
 801b2a6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b2a8:	bf00      	nop
 801b2aa:	3718      	adds	r7, #24
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd80      	pop	{r7, pc}
 801b2b0:	200002a0 	.word	0x200002a0

0801b2b4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b086      	sub	sp, #24
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	6039      	str	r1, [r7, #0]
 801b2be:	71fb      	strb	r3, [r7, #7]
 801b2c0:	4613      	mov	r3, r2
 801b2c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2c4:	f3ef 8310 	mrs	r3, PRIMASK
 801b2c8:	60fb      	str	r3, [r7, #12]
  return(result);
 801b2ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b2cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b2ce:	b672      	cpsid	i
}
 801b2d0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b2d2:	88bb      	ldrh	r3, [r7, #4]
 801b2d4:	79f9      	ldrb	r1, [r7, #7]
 801b2d6:	683a      	ldr	r2, [r7, #0]
 801b2d8:	4806      	ldr	r0, [pc, #24]	; (801b2f4 <SUBGRF_WriteCommand+0x40>)
 801b2da:	f7ed fb9f 	bl	8008a1c <HAL_SUBGHZ_ExecSetCmd>
 801b2de:	697b      	ldr	r3, [r7, #20]
 801b2e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	f383 8810 	msr	PRIMASK, r3
}
 801b2e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b2ea:	bf00      	nop
 801b2ec:	3718      	adds	r7, #24
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}
 801b2f2:	bf00      	nop
 801b2f4:	200002a0 	.word	0x200002a0

0801b2f8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b086      	sub	sp, #24
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	4603      	mov	r3, r0
 801b300:	6039      	str	r1, [r7, #0]
 801b302:	71fb      	strb	r3, [r7, #7]
 801b304:	4613      	mov	r3, r2
 801b306:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b308:	f3ef 8310 	mrs	r3, PRIMASK
 801b30c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b30e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b312:	b672      	cpsid	i
}
 801b314:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b316:	88bb      	ldrh	r3, [r7, #4]
 801b318:	79f9      	ldrb	r1, [r7, #7]
 801b31a:	683a      	ldr	r2, [r7, #0]
 801b31c:	4806      	ldr	r0, [pc, #24]	; (801b338 <SUBGRF_ReadCommand+0x40>)
 801b31e:	f7ed fbdc 	bl	8008ada <HAL_SUBGHZ_ExecGetCmd>
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b326:	693b      	ldr	r3, [r7, #16]
 801b328:	f383 8810 	msr	PRIMASK, r3
}
 801b32c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b32e:	bf00      	nop
 801b330:	3718      	adds	r7, #24
 801b332:	46bd      	mov	sp, r7
 801b334:	bd80      	pop	{r7, pc}
 801b336:	bf00      	nop
 801b338:	200002a0 	.word	0x200002a0

0801b33c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b084      	sub	sp, #16
 801b340:	af00      	add	r7, sp, #0
 801b342:	4603      	mov	r3, r0
 801b344:	460a      	mov	r2, r1
 801b346:	71fb      	strb	r3, [r7, #7]
 801b348:	4613      	mov	r3, r2
 801b34a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b34c:	2301      	movs	r3, #1
 801b34e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b350:	79bb      	ldrb	r3, [r7, #6]
 801b352:	2b01      	cmp	r3, #1
 801b354:	d10d      	bne.n	801b372 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b356:	79fb      	ldrb	r3, [r7, #7]
 801b358:	2b01      	cmp	r3, #1
 801b35a:	d104      	bne.n	801b366 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b35c:	2302      	movs	r3, #2
 801b35e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b360:	2004      	movs	r0, #4
 801b362:	f000 f8df 	bl	801b524 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b366:	79fb      	ldrb	r3, [r7, #7]
 801b368:	2b02      	cmp	r3, #2
 801b36a:	d107      	bne.n	801b37c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b36c:	2303      	movs	r3, #3
 801b36e:	73fb      	strb	r3, [r7, #15]
 801b370:	e004      	b.n	801b37c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b372:	79bb      	ldrb	r3, [r7, #6]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d101      	bne.n	801b37c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b378:	2301      	movs	r3, #1
 801b37a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b37c:	7bfb      	ldrb	r3, [r7, #15]
 801b37e:	4618      	mov	r0, r3
 801b380:	f7f0 fc55 	bl	800bc2e <RBI_ConfigRFSwitch>
}
 801b384:	bf00      	nop
 801b386:	3710      	adds	r7, #16
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}

0801b38c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	4603      	mov	r3, r0
 801b394:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b396:	2301      	movs	r3, #1
 801b398:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b39a:	f7f0 fc56 	bl	800bc4a <RBI_GetTxConfig>
 801b39e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	2b02      	cmp	r3, #2
 801b3a4:	d016      	beq.n	801b3d4 <SUBGRF_SetRfTxPower+0x48>
 801b3a6:	68bb      	ldr	r3, [r7, #8]
 801b3a8:	2b02      	cmp	r3, #2
 801b3aa:	dc16      	bgt.n	801b3da <SUBGRF_SetRfTxPower+0x4e>
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d003      	beq.n	801b3ba <SUBGRF_SetRfTxPower+0x2e>
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	2b01      	cmp	r3, #1
 801b3b6:	d00a      	beq.n	801b3ce <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b3b8:	e00f      	b.n	801b3da <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3be:	2b0f      	cmp	r3, #15
 801b3c0:	dd02      	ble.n	801b3c8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b3c2:	2302      	movs	r3, #2
 801b3c4:	73fb      	strb	r3, [r7, #15]
            break;
 801b3c6:	e009      	b.n	801b3dc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b3c8:	2301      	movs	r3, #1
 801b3ca:	73fb      	strb	r3, [r7, #15]
            break;
 801b3cc:	e006      	b.n	801b3dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b3ce:	2301      	movs	r3, #1
 801b3d0:	73fb      	strb	r3, [r7, #15]
            break;
 801b3d2:	e003      	b.n	801b3dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b3d4:	2302      	movs	r3, #2
 801b3d6:	73fb      	strb	r3, [r7, #15]
            break;
 801b3d8:	e000      	b.n	801b3dc <SUBGRF_SetRfTxPower+0x50>
            break;
 801b3da:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b3dc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b3e0:	7bfb      	ldrb	r3, [r7, #15]
 801b3e2:	2202      	movs	r2, #2
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	f7ff fbcd 	bl	801ab84 <SUBGRF_SetTxParams>

    return paSelect;
 801b3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3710      	adds	r7, #16
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b3f8:	2301      	movs	r3, #1
}
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	bc80      	pop	{r7}
 801b400:	4770      	bx	lr
	...

0801b404 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b40c:	4b03      	ldr	r3, [pc, #12]	; (801b41c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	2001      	movs	r0, #1
 801b412:	4798      	blx	r3
}
 801b414:	bf00      	nop
 801b416:	3708      	adds	r7, #8
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	20001b80 	.word	0x20001b80

0801b420 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b082      	sub	sp, #8
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b428:	4b03      	ldr	r3, [pc, #12]	; (801b438 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	2002      	movs	r0, #2
 801b42e:	4798      	blx	r3
}
 801b430:	bf00      	nop
 801b432:	3708      	adds	r7, #8
 801b434:	46bd      	mov	sp, r7
 801b436:	bd80      	pop	{r7, pc}
 801b438:	20001b80 	.word	0x20001b80

0801b43c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b444:	4b03      	ldr	r3, [pc, #12]	; (801b454 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	2040      	movs	r0, #64	; 0x40
 801b44a:	4798      	blx	r3
}
 801b44c:	bf00      	nop
 801b44e:	3708      	adds	r7, #8
 801b450:	46bd      	mov	sp, r7
 801b452:	bd80      	pop	{r7, pc}
 801b454:	20001b80 	.word	0x20001b80

0801b458 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
 801b460:	460b      	mov	r3, r1
 801b462:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b464:	78fb      	ldrb	r3, [r7, #3]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d002      	beq.n	801b470 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b46a:	2b01      	cmp	r3, #1
 801b46c:	d005      	beq.n	801b47a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b46e:	e00a      	b.n	801b486 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b470:	4b07      	ldr	r3, [pc, #28]	; (801b490 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	2080      	movs	r0, #128	; 0x80
 801b476:	4798      	blx	r3
            break;
 801b478:	e005      	b.n	801b486 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b47a:	4b05      	ldr	r3, [pc, #20]	; (801b490 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b482:	4798      	blx	r3
            break;
 801b484:	bf00      	nop
    }
}
 801b486:	bf00      	nop
 801b488:	3708      	adds	r7, #8
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bd80      	pop	{r7, pc}
 801b48e:	bf00      	nop
 801b490:	20001b80 	.word	0x20001b80

0801b494 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b494:	b580      	push	{r7, lr}
 801b496:	b082      	sub	sp, #8
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b49c:	4b04      	ldr	r3, [pc, #16]	; (801b4b0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b4a4:	4798      	blx	r3
}
 801b4a6:	bf00      	nop
 801b4a8:	3708      	adds	r7, #8
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	20001b80 	.word	0x20001b80

0801b4b4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b082      	sub	sp, #8
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b4bc:	4b03      	ldr	r3, [pc, #12]	; (801b4cc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2020      	movs	r0, #32
 801b4c2:	4798      	blx	r3
}
 801b4c4:	bf00      	nop
 801b4c6:	3708      	adds	r7, #8
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}
 801b4cc:	20001b80 	.word	0x20001b80

0801b4d0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b082      	sub	sp, #8
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b4d8:	4b03      	ldr	r3, [pc, #12]	; (801b4e8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	2004      	movs	r0, #4
 801b4de:	4798      	blx	r3
}
 801b4e0:	bf00      	nop
 801b4e2:	3708      	adds	r7, #8
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	bd80      	pop	{r7, pc}
 801b4e8:	20001b80 	.word	0x20001b80

0801b4ec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b082      	sub	sp, #8
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b4f4:	4b03      	ldr	r3, [pc, #12]	; (801b504 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	2008      	movs	r0, #8
 801b4fa:	4798      	blx	r3
}
 801b4fc:	bf00      	nop
 801b4fe:	3708      	adds	r7, #8
 801b500:	46bd      	mov	sp, r7
 801b502:	bd80      	pop	{r7, pc}
 801b504:	20001b80 	.word	0x20001b80

0801b508 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b082      	sub	sp, #8
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b510:	4b03      	ldr	r3, [pc, #12]	; (801b520 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	2010      	movs	r0, #16
 801b516:	4798      	blx	r3
}
 801b518:	bf00      	nop
 801b51a:	3708      	adds	r7, #8
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	20001b80 	.word	0x20001b80

0801b524 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b084      	sub	sp, #16
 801b528:	af00      	add	r7, sp, #0
 801b52a:	4603      	mov	r3, r0
 801b52c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b52e:	f7f0 fb9a 	bl	800bc66 <RBI_IsDCDC>
 801b532:	4603      	mov	r3, r0
 801b534:	2b01      	cmp	r3, #1
 801b536:	d112      	bne.n	801b55e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b538:	f640 1023 	movw	r0, #2339	; 0x923
 801b53c:	f7ff fe1e 	bl	801b17c <SUBGRF_ReadRegister>
 801b540:	4603      	mov	r3, r0
 801b542:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b544:	7bfb      	ldrb	r3, [r7, #15]
 801b546:	f023 0306 	bic.w	r3, r3, #6
 801b54a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b54c:	7bfa      	ldrb	r2, [r7, #15]
 801b54e:	79fb      	ldrb	r3, [r7, #7]
 801b550:	4313      	orrs	r3, r2
 801b552:	b2db      	uxtb	r3, r3
 801b554:	4619      	mov	r1, r3
 801b556:	f640 1023 	movw	r0, #2339	; 0x923
 801b55a:	f7ff fdfb 	bl	801b154 <SUBGRF_WriteRegister>
  }
}
 801b55e:	bf00      	nop
 801b560:	3710      	adds	r7, #16
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
	...

0801b568 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b568:	b480      	push	{r7}
 801b56a:	b085      	sub	sp, #20
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d101      	bne.n	801b57a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b576:	231f      	movs	r3, #31
 801b578:	e016      	b.n	801b5a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b57a:	2300      	movs	r3, #0
 801b57c:	73fb      	strb	r3, [r7, #15]
 801b57e:	e00f      	b.n	801b5a0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b580:	7bfb      	ldrb	r3, [r7, #15]
 801b582:	4a0c      	ldr	r2, [pc, #48]	; (801b5b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b588:	687a      	ldr	r2, [r7, #4]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d205      	bcs.n	801b59a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b58e:	7bfb      	ldrb	r3, [r7, #15]
 801b590:	4a08      	ldr	r2, [pc, #32]	; (801b5b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b592:	00db      	lsls	r3, r3, #3
 801b594:	4413      	add	r3, r2
 801b596:	791b      	ldrb	r3, [r3, #4]
 801b598:	e006      	b.n	801b5a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b59a:	7bfb      	ldrb	r3, [r7, #15]
 801b59c:	3301      	adds	r3, #1
 801b59e:	73fb      	strb	r3, [r7, #15]
 801b5a0:	7bfb      	ldrb	r3, [r7, #15]
 801b5a2:	2b15      	cmp	r3, #21
 801b5a4:	d9ec      	bls.n	801b580 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b5a6:	e7fe      	b.n	801b5a6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	3714      	adds	r7, #20
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bc80      	pop	{r7}
 801b5b0:	4770      	bx	lr
 801b5b2:	bf00      	nop
 801b5b4:	0801dcc4 	.word	0x0801dcc4

0801b5b8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b08a      	sub	sp, #40	; 0x28
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
 801b5c0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b5c2:	4b35      	ldr	r3, [pc, #212]	; (801b698 <SUBGRF_GetCFO+0xe0>)
 801b5c4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b5c6:	f640 0007 	movw	r0, #2055	; 0x807
 801b5ca:	f7ff fdd7 	bl	801b17c <SUBGRF_ReadRegister>
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b5d2:	7ffb      	ldrb	r3, [r7, #31]
 801b5d4:	08db      	lsrs	r3, r3, #3
 801b5d6:	b2db      	uxtb	r3, r3
 801b5d8:	f003 0303 	and.w	r3, r3, #3
 801b5dc:	3328      	adds	r3, #40	; 0x28
 801b5de:	443b      	add	r3, r7
 801b5e0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b5e4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b5e6:	7ffb      	ldrb	r3, [r7, #31]
 801b5e8:	f003 0307 	and.w	r3, r3, #7
 801b5ec:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b5ee:	7fba      	ldrb	r2, [r7, #30]
 801b5f0:	7f7b      	ldrb	r3, [r7, #29]
 801b5f2:	3b01      	subs	r3, #1
 801b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b5f8:	461a      	mov	r2, r3
 801b5fa:	4b28      	ldr	r3, [pc, #160]	; (801b69c <SUBGRF_GetCFO+0xe4>)
 801b5fc:	fbb3 f3f2 	udiv	r3, r3, r2
 801b600:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b602:	69ba      	ldr	r2, [r7, #24]
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	fbb2 f3f3 	udiv	r3, r2, r3
 801b60a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b60c:	2301      	movs	r3, #1
 801b60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b616:	697a      	ldr	r2, [r7, #20]
 801b618:	fb02 f303 	mul.w	r3, r2, r3
 801b61c:	2b07      	cmp	r3, #7
 801b61e:	d802      	bhi.n	801b626 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b620:	2302      	movs	r3, #2
 801b622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b62a:	697a      	ldr	r2, [r7, #20]
 801b62c:	fb02 f303 	mul.w	r3, r2, r3
 801b630:	2b03      	cmp	r3, #3
 801b632:	d802      	bhi.n	801b63a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b634:	2304      	movs	r3, #4
 801b636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b63a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b63e:	69bb      	ldr	r3, [r7, #24]
 801b640:	fb02 f303 	mul.w	r3, r2, r3
 801b644:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b646:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b64a:	f7ff fd97 	bl	801b17c <SUBGRF_ReadRegister>
 801b64e:	4603      	mov	r3, r0
 801b650:	021b      	lsls	r3, r3, #8
 801b652:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b656:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b658:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b65c:	f7ff fd8e 	bl	801b17c <SUBGRF_ReadRegister>
 801b660:	4603      	mov	r3, r0
 801b662:	461a      	mov	r2, r3
 801b664:	6a3b      	ldr	r3, [r7, #32]
 801b666:	4313      	orrs	r3, r2
 801b668:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b66a:	6a3b      	ldr	r3, [r7, #32]
 801b66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b670:	2b00      	cmp	r3, #0
 801b672:	d005      	beq.n	801b680 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b674:	6a3b      	ldr	r3, [r7, #32]
 801b676:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b67a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b67e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b680:	693b      	ldr	r3, [r7, #16]
 801b682:	095b      	lsrs	r3, r3, #5
 801b684:	6a3a      	ldr	r2, [r7, #32]
 801b686:	fb02 f303 	mul.w	r3, r2, r3
 801b68a:	11da      	asrs	r2, r3, #7
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	601a      	str	r2, [r3, #0]
}
 801b690:	bf00      	nop
 801b692:	3728      	adds	r7, #40	; 0x28
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}
 801b698:	0c0a0804 	.word	0x0c0a0804
 801b69c:	01e84800 	.word	0x01e84800

0801b6a0 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b087      	sub	sp, #28
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	60b9      	str	r1, [r7, #8]
 801b6aa:	607a      	str	r2, [r7, #4]
 801b6ac:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b6b6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b6b8:	697b      	ldr	r3, [r7, #20]
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	371c      	adds	r7, #28
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bc80      	pop	{r7}
 801b6c2:	4770      	bx	lr

0801b6c4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b6c4:	b480      	push	{r7}
 801b6c6:	b087      	sub	sp, #28
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	60b9      	str	r1, [r7, #8]
 801b6ce:	607a      	str	r2, [r7, #4]
 801b6d0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b6d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b6da:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b6dc:	697b      	ldr	r3, [r7, #20]
}
 801b6de:	4618      	mov	r0, r3
 801b6e0:	371c      	adds	r7, #28
 801b6e2:	46bd      	mov	sp, r7
 801b6e4:	bc80      	pop	{r7}
 801b6e6:	4770      	bx	lr

0801b6e8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b6e8:	b480      	push	{r7}
 801b6ea:	b085      	sub	sp, #20
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	60f8      	str	r0, [r7, #12]
 801b6f0:	60b9      	str	r1, [r7, #8]
 801b6f2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b6f4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3714      	adds	r7, #20
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bc80      	pop	{r7}
 801b700:	4770      	bx	lr

0801b702 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b702:	b480      	push	{r7}
 801b704:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b706:	bf00      	nop
 801b708:	46bd      	mov	sp, r7
 801b70a:	bc80      	pop	{r7}
 801b70c:	4770      	bx	lr

0801b70e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b70e:	b480      	push	{r7}
 801b710:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b712:	2300      	movs	r3, #0
#endif
}
 801b714:	4618      	mov	r0, r3
 801b716:	46bd      	mov	sp, r7
 801b718:	bc80      	pop	{r7}
 801b71a:	4770      	bx	lr

0801b71c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b71c:	b480      	push	{r7}
 801b71e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b720:	2300      	movs	r3, #0
#endif
}
 801b722:	4618      	mov	r0, r3
 801b724:	46bd      	mov	sp, r7
 801b726:	bc80      	pop	{r7}
 801b728:	4770      	bx	lr

0801b72a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b72a:	b480      	push	{r7}
 801b72c:	b083      	sub	sp, #12
 801b72e:	af00      	add	r7, sp, #0
 801b730:	4603      	mov	r3, r0
 801b732:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b734:	bf00      	nop
 801b736:	370c      	adds	r7, #12
 801b738:	46bd      	mov	sp, r7
 801b73a:	bc80      	pop	{r7}
 801b73c:	4770      	bx	lr

0801b73e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b73e:	b480      	push	{r7}
 801b740:	b087      	sub	sp, #28
 801b742:	af00      	add	r7, sp, #0
 801b744:	60f8      	str	r0, [r7, #12]
 801b746:	460b      	mov	r3, r1
 801b748:	607a      	str	r2, [r7, #4]
 801b74a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b74c:	f04f 33ff 	mov.w	r3, #4294967295
 801b750:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b752:	697b      	ldr	r3, [r7, #20]
}
 801b754:	4618      	mov	r0, r3
 801b756:	371c      	adds	r7, #28
 801b758:	46bd      	mov	sp, r7
 801b75a:	bc80      	pop	{r7}
 801b75c:	4770      	bx	lr

0801b75e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b75e:	b480      	push	{r7}
 801b760:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b762:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b766:	4618      	mov	r0, r3
 801b768:	46bd      	mov	sp, r7
 801b76a:	bc80      	pop	{r7}
 801b76c:	4770      	bx	lr

0801b76e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b76e:	b480      	push	{r7}
 801b770:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b772:	bf00      	nop
 801b774:	46bd      	mov	sp, r7
 801b776:	bc80      	pop	{r7}
 801b778:	4770      	bx	lr

0801b77a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b77a:	b480      	push	{r7}
 801b77c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b77e:	bf00      	nop
 801b780:	46bd      	mov	sp, r7
 801b782:	bc80      	pop	{r7}
 801b784:	4770      	bx	lr

0801b786 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b786:	b480      	push	{r7}
 801b788:	b083      	sub	sp, #12
 801b78a:	af00      	add	r7, sp, #0
 801b78c:	4603      	mov	r3, r0
 801b78e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b790:	bf00      	nop
 801b792:	370c      	adds	r7, #12
 801b794:	46bd      	mov	sp, r7
 801b796:	bc80      	pop	{r7}
 801b798:	4770      	bx	lr
	...

0801b79c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b79c:	b480      	push	{r7}
 801b79e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b7a0:	4b04      	ldr	r3, [pc, #16]	; (801b7b4 <UTIL_LPM_Init+0x18>)
 801b7a2:	2200      	movs	r2, #0
 801b7a4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b7a6:	4b04      	ldr	r3, [pc, #16]	; (801b7b8 <UTIL_LPM_Init+0x1c>)
 801b7a8:	2200      	movs	r2, #0
 801b7aa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b7ac:	bf00      	nop
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	bc80      	pop	{r7}
 801b7b2:	4770      	bx	lr
 801b7b4:	20001b84 	.word	0x20001b84
 801b7b8:	20001b88 	.word	0x20001b88

0801b7bc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b7bc:	b480      	push	{r7}
 801b7be:	b087      	sub	sp, #28
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
 801b7c4:	460b      	mov	r3, r1
 801b7c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7c8:	f3ef 8310 	mrs	r3, PRIMASK
 801b7cc:	613b      	str	r3, [r7, #16]
  return(result);
 801b7ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b7d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7d2:	b672      	cpsid	i
}
 801b7d4:	bf00      	nop
  
  switch( state )
 801b7d6:	78fb      	ldrb	r3, [r7, #3]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d008      	beq.n	801b7ee <UTIL_LPM_SetStopMode+0x32>
 801b7dc:	2b01      	cmp	r3, #1
 801b7de:	d10e      	bne.n	801b7fe <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b7e0:	4b0d      	ldr	r3, [pc, #52]	; (801b818 <UTIL_LPM_SetStopMode+0x5c>)
 801b7e2:	681a      	ldr	r2, [r3, #0]
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	4313      	orrs	r3, r2
 801b7e8:	4a0b      	ldr	r2, [pc, #44]	; (801b818 <UTIL_LPM_SetStopMode+0x5c>)
 801b7ea:	6013      	str	r3, [r2, #0]
      break;
 801b7ec:	e008      	b.n	801b800 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	43da      	mvns	r2, r3
 801b7f2:	4b09      	ldr	r3, [pc, #36]	; (801b818 <UTIL_LPM_SetStopMode+0x5c>)
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4013      	ands	r3, r2
 801b7f8:	4a07      	ldr	r2, [pc, #28]	; (801b818 <UTIL_LPM_SetStopMode+0x5c>)
 801b7fa:	6013      	str	r3, [r2, #0]
      break;
 801b7fc:	e000      	b.n	801b800 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b7fe:	bf00      	nop
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	f383 8810 	msr	PRIMASK, r3
}
 801b80a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b80c:	bf00      	nop
 801b80e:	371c      	adds	r7, #28
 801b810:	46bd      	mov	sp, r7
 801b812:	bc80      	pop	{r7}
 801b814:	4770      	bx	lr
 801b816:	bf00      	nop
 801b818:	20001b84 	.word	0x20001b84

0801b81c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b81c:	b480      	push	{r7}
 801b81e:	b087      	sub	sp, #28
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	460b      	mov	r3, r1
 801b826:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b828:	f3ef 8310 	mrs	r3, PRIMASK
 801b82c:	613b      	str	r3, [r7, #16]
  return(result);
 801b82e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b832:	b672      	cpsid	i
}
 801b834:	bf00      	nop
  
  switch(state)
 801b836:	78fb      	ldrb	r3, [r7, #3]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d008      	beq.n	801b84e <UTIL_LPM_SetOffMode+0x32>
 801b83c:	2b01      	cmp	r3, #1
 801b83e:	d10e      	bne.n	801b85e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b840:	4b0d      	ldr	r3, [pc, #52]	; (801b878 <UTIL_LPM_SetOffMode+0x5c>)
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	4313      	orrs	r3, r2
 801b848:	4a0b      	ldr	r2, [pc, #44]	; (801b878 <UTIL_LPM_SetOffMode+0x5c>)
 801b84a:	6013      	str	r3, [r2, #0]
      break;
 801b84c:	e008      	b.n	801b860 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	43da      	mvns	r2, r3
 801b852:	4b09      	ldr	r3, [pc, #36]	; (801b878 <UTIL_LPM_SetOffMode+0x5c>)
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	4013      	ands	r3, r2
 801b858:	4a07      	ldr	r2, [pc, #28]	; (801b878 <UTIL_LPM_SetOffMode+0x5c>)
 801b85a:	6013      	str	r3, [r2, #0]
      break;
 801b85c:	e000      	b.n	801b860 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b85e:	bf00      	nop
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	f383 8810 	msr	PRIMASK, r3
}
 801b86a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b86c:	bf00      	nop
 801b86e:	371c      	adds	r7, #28
 801b870:	46bd      	mov	sp, r7
 801b872:	bc80      	pop	{r7}
 801b874:	4770      	bx	lr
 801b876:	bf00      	nop
 801b878:	20001b88 	.word	0x20001b88

0801b87c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b084      	sub	sp, #16
 801b880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b882:	f3ef 8310 	mrs	r3, PRIMASK
 801b886:	60bb      	str	r3, [r7, #8]
  return(result);
 801b888:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b88a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b88c:	b672      	cpsid	i
}
 801b88e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b890:	4b12      	ldr	r3, [pc, #72]	; (801b8dc <UTIL_LPM_EnterLowPower+0x60>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d006      	beq.n	801b8a6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b898:	4b11      	ldr	r3, [pc, #68]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b89e:	4b10      	ldr	r3, [pc, #64]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b8a0:	685b      	ldr	r3, [r3, #4]
 801b8a2:	4798      	blx	r3
 801b8a4:	e010      	b.n	801b8c8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b8a6:	4b0f      	ldr	r3, [pc, #60]	; (801b8e4 <UTIL_LPM_EnterLowPower+0x68>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d006      	beq.n	801b8bc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b8ae:	4b0c      	ldr	r3, [pc, #48]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b8b0:	689b      	ldr	r3, [r3, #8]
 801b8b2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b8b4:	4b0a      	ldr	r3, [pc, #40]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b8b6:	68db      	ldr	r3, [r3, #12]
 801b8b8:	4798      	blx	r3
 801b8ba:	e005      	b.n	801b8c8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b8bc:	4b08      	ldr	r3, [pc, #32]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b8be:	691b      	ldr	r3, [r3, #16]
 801b8c0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b8c2:	4b07      	ldr	r3, [pc, #28]	; (801b8e0 <UTIL_LPM_EnterLowPower+0x64>)
 801b8c4:	695b      	ldr	r3, [r3, #20]
 801b8c6:	4798      	blx	r3
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	f383 8810 	msr	PRIMASK, r3
}
 801b8d2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b8d4:	bf00      	nop
 801b8d6:	3710      	adds	r7, #16
 801b8d8:	46bd      	mov	sp, r7
 801b8da:	bd80      	pop	{r7, pc}
 801b8dc:	20001b84 	.word	0x20001b84
 801b8e0:	0801d778 	.word	0x0801d778
 801b8e4:	20001b88 	.word	0x20001b88

0801b8e8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b8e8:	b480      	push	{r7}
 801b8ea:	b087      	sub	sp, #28
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	60f8      	str	r0, [r7, #12]
 801b8f0:	60b9      	str	r1, [r7, #8]
 801b8f2:	4613      	mov	r3, r2
 801b8f4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b8fa:	68bb      	ldr	r3, [r7, #8]
 801b8fc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b8fe:	e007      	b.n	801b910 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b900:	693a      	ldr	r2, [r7, #16]
 801b902:	1c53      	adds	r3, r2, #1
 801b904:	613b      	str	r3, [r7, #16]
 801b906:	697b      	ldr	r3, [r7, #20]
 801b908:	1c59      	adds	r1, r3, #1
 801b90a:	6179      	str	r1, [r7, #20]
 801b90c:	7812      	ldrb	r2, [r2, #0]
 801b90e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b910:	88fb      	ldrh	r3, [r7, #6]
 801b912:	1e5a      	subs	r2, r3, #1
 801b914:	80fa      	strh	r2, [r7, #6]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d1f2      	bne.n	801b900 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b91a:	bf00      	nop
 801b91c:	bf00      	nop
 801b91e:	371c      	adds	r7, #28
 801b920:	46bd      	mov	sp, r7
 801b922:	bc80      	pop	{r7}
 801b924:	4770      	bx	lr

0801b926 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b926:	b480      	push	{r7}
 801b928:	b085      	sub	sp, #20
 801b92a:	af00      	add	r7, sp, #0
 801b92c:	6078      	str	r0, [r7, #4]
 801b92e:	460b      	mov	r3, r1
 801b930:	70fb      	strb	r3, [r7, #3]
 801b932:	4613      	mov	r3, r2
 801b934:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b93a:	e004      	b.n	801b946 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	1c5a      	adds	r2, r3, #1
 801b940:	60fa      	str	r2, [r7, #12]
 801b942:	78fa      	ldrb	r2, [r7, #3]
 801b944:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b946:	883b      	ldrh	r3, [r7, #0]
 801b948:	1e5a      	subs	r2, r3, #1
 801b94a:	803a      	strh	r2, [r7, #0]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d1f5      	bne.n	801b93c <UTIL_MEM_set_8+0x16>
  }
}
 801b950:	bf00      	nop
 801b952:	bf00      	nop
 801b954:	3714      	adds	r7, #20
 801b956:	46bd      	mov	sp, r7
 801b958:	bc80      	pop	{r7}
 801b95a:	4770      	bx	lr

0801b95c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b95c:	b082      	sub	sp, #8
 801b95e:	b480      	push	{r7}
 801b960:	b087      	sub	sp, #28
 801b962:	af00      	add	r7, sp, #0
 801b964:	60f8      	str	r0, [r7, #12]
 801b966:	1d38      	adds	r0, r7, #4
 801b968:	e880 0006 	stmia.w	r0, {r1, r2}
 801b96c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b96e:	2300      	movs	r3, #0
 801b970:	613b      	str	r3, [r7, #16]
 801b972:	2300      	movs	r3, #0
 801b974:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b976:	687a      	ldr	r2, [r7, #4]
 801b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97a:	4413      	add	r3, r2
 801b97c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b97e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b982:	b29a      	uxth	r2, r3
 801b984:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b988:	b29b      	uxth	r3, r3
 801b98a:	4413      	add	r3, r2
 801b98c:	b29b      	uxth	r3, r3
 801b98e:	b21b      	sxth	r3, r3
 801b990:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b992:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b99a:	db0a      	blt.n	801b9b2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b99c:	693b      	ldr	r3, [r7, #16]
 801b99e:	3301      	adds	r3, #1
 801b9a0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b9a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b9a6:	b29b      	uxth	r3, r3
 801b9a8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b9ac:	b29b      	uxth	r3, r3
 801b9ae:	b21b      	sxth	r3, r3
 801b9b0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	461a      	mov	r2, r3
 801b9b6:	f107 0310 	add.w	r3, r7, #16
 801b9ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b9be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b9c2:	68f8      	ldr	r0, [r7, #12]
 801b9c4:	371c      	adds	r7, #28
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	bc80      	pop	{r7}
 801b9ca:	b002      	add	sp, #8
 801b9cc:	4770      	bx	lr

0801b9ce <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b9ce:	b082      	sub	sp, #8
 801b9d0:	b480      	push	{r7}
 801b9d2:	b087      	sub	sp, #28
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	1d38      	adds	r0, r7, #4
 801b9da:	e880 0006 	stmia.w	r0, {r1, r2}
 801b9de:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	613b      	str	r3, [r7, #16]
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ec:	1ad3      	subs	r3, r2, r3
 801b9ee:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b9f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b9f4:	b29a      	uxth	r2, r3
 801b9f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b9fa:	b29b      	uxth	r3, r3
 801b9fc:	1ad3      	subs	r3, r2, r3
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	b21b      	sxth	r3, r3
 801ba02:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ba04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	da0a      	bge.n	801ba22 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ba0c:	693b      	ldr	r3, [r7, #16]
 801ba0e:	3b01      	subs	r3, #1
 801ba10:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ba12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ba16:	b29b      	uxth	r3, r3
 801ba18:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ba1c:	b29b      	uxth	r3, r3
 801ba1e:	b21b      	sxth	r3, r3
 801ba20:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	461a      	mov	r2, r3
 801ba26:	f107 0310 	add.w	r3, r7, #16
 801ba2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ba32:	68f8      	ldr	r0, [r7, #12]
 801ba34:	371c      	adds	r7, #28
 801ba36:	46bd      	mov	sp, r7
 801ba38:	bc80      	pop	{r7}
 801ba3a:	b002      	add	sp, #8
 801ba3c:	4770      	bx	lr
	...

0801ba40 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b088      	sub	sp, #32
 801ba44:	af02      	add	r7, sp, #8
 801ba46:	463b      	mov	r3, r7
 801ba48:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ba4c:	2300      	movs	r3, #0
 801ba4e:	60bb      	str	r3, [r7, #8]
 801ba50:	2300      	movs	r3, #0
 801ba52:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ba54:	4b10      	ldr	r3, [pc, #64]	; (801ba98 <SysTimeSet+0x58>)
 801ba56:	691b      	ldr	r3, [r3, #16]
 801ba58:	f107 0208 	add.w	r2, r7, #8
 801ba5c:	3204      	adds	r2, #4
 801ba5e:	4610      	mov	r0, r2
 801ba60:	4798      	blx	r3
 801ba62:	4603      	mov	r3, r0
 801ba64:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ba66:	f107 0010 	add.w	r0, r7, #16
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	9300      	str	r3, [sp, #0]
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	463a      	mov	r2, r7
 801ba72:	ca06      	ldmia	r2, {r1, r2}
 801ba74:	f7ff ffab 	bl	801b9ce <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ba78:	4b07      	ldr	r3, [pc, #28]	; (801ba98 <SysTimeSet+0x58>)
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	693a      	ldr	r2, [r7, #16]
 801ba7e:	4610      	mov	r0, r2
 801ba80:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ba82:	4b05      	ldr	r3, [pc, #20]	; (801ba98 <SysTimeSet+0x58>)
 801ba84:	689b      	ldr	r3, [r3, #8]
 801ba86:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	4798      	blx	r3
}
 801ba8e:	bf00      	nop
 801ba90:	3718      	adds	r7, #24
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd80      	pop	{r7, pc}
 801ba96:	bf00      	nop
 801ba98:	0801d85c 	.word	0x0801d85c

0801ba9c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b08a      	sub	sp, #40	; 0x28
 801baa0:	af02      	add	r7, sp, #8
 801baa2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801baa4:	2300      	movs	r3, #0
 801baa6:	61bb      	str	r3, [r7, #24]
 801baa8:	2300      	movs	r3, #0
 801baaa:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801baac:	2300      	movs	r3, #0
 801baae:	613b      	str	r3, [r7, #16]
 801bab0:	2300      	movs	r3, #0
 801bab2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bab4:	4b14      	ldr	r3, [pc, #80]	; (801bb08 <SysTimeGet+0x6c>)
 801bab6:	691b      	ldr	r3, [r3, #16]
 801bab8:	f107 0218 	add.w	r2, r7, #24
 801babc:	3204      	adds	r2, #4
 801babe:	4610      	mov	r0, r2
 801bac0:	4798      	blx	r3
 801bac2:	4603      	mov	r3, r0
 801bac4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bac6:	4b10      	ldr	r3, [pc, #64]	; (801bb08 <SysTimeGet+0x6c>)
 801bac8:	68db      	ldr	r3, [r3, #12]
 801baca:	4798      	blx	r3
 801bacc:	4603      	mov	r3, r0
 801bace:	b21b      	sxth	r3, r3
 801bad0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bad2:	4b0d      	ldr	r3, [pc, #52]	; (801bb08 <SysTimeGet+0x6c>)
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	4798      	blx	r3
 801bad8:	4603      	mov	r3, r0
 801bada:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801badc:	f107 0010 	add.w	r0, r7, #16
 801bae0:	69fb      	ldr	r3, [r7, #28]
 801bae2:	9300      	str	r3, [sp, #0]
 801bae4:	69bb      	ldr	r3, [r7, #24]
 801bae6:	f107 0208 	add.w	r2, r7, #8
 801baea:	ca06      	ldmia	r2, {r1, r2}
 801baec:	f7ff ff36 	bl	801b95c <SysTimeAdd>

  return sysTime;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	461a      	mov	r2, r3
 801baf4:	f107 0310 	add.w	r3, r7, #16
 801baf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bafc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	3720      	adds	r7, #32
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	0801d85c 	.word	0x0801d85c

0801bb0c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b084      	sub	sp, #16
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bb14:	2300      	movs	r3, #0
 801bb16:	60bb      	str	r3, [r7, #8]
 801bb18:	2300      	movs	r3, #0
 801bb1a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bb1c:	4b0a      	ldr	r3, [pc, #40]	; (801bb48 <SysTimeGetMcuTime+0x3c>)
 801bb1e:	691b      	ldr	r3, [r3, #16]
 801bb20:	f107 0208 	add.w	r2, r7, #8
 801bb24:	3204      	adds	r2, #4
 801bb26:	4610      	mov	r0, r2
 801bb28:	4798      	blx	r3
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	461a      	mov	r2, r3
 801bb32:	f107 0308 	add.w	r3, r7, #8
 801bb36:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bb3a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bb3e:	6878      	ldr	r0, [r7, #4]
 801bb40:	3710      	adds	r7, #16
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	0801d85c 	.word	0x0801d85c

0801bb4c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b088      	sub	sp, #32
 801bb50:	af02      	add	r7, sp, #8
 801bb52:	463b      	mov	r3, r7
 801bb54:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bb58:	4b0f      	ldr	r3, [pc, #60]	; (801bb98 <SysTimeToMs+0x4c>)
 801bb5a:	68db      	ldr	r3, [r3, #12]
 801bb5c:	4798      	blx	r3
 801bb5e:	4603      	mov	r3, r0
 801bb60:	b21b      	sxth	r3, r3
 801bb62:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bb64:	4b0c      	ldr	r3, [pc, #48]	; (801bb98 <SysTimeToMs+0x4c>)
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	4798      	blx	r3
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801bb6e:	f107 0008 	add.w	r0, r7, #8
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	9300      	str	r3, [sp, #0]
 801bb76:	693b      	ldr	r3, [r7, #16]
 801bb78:	463a      	mov	r2, r7
 801bb7a:	ca06      	ldmia	r2, {r1, r2}
 801bb7c:	f7ff ff27 	bl	801b9ce <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801bb86:	fb02 f303 	mul.w	r3, r2, r3
 801bb8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801bb8e:	4413      	add	r3, r2
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	3718      	adds	r7, #24
 801bb94:	46bd      	mov	sp, r7
 801bb96:	bd80      	pop	{r7, pc}
 801bb98:	0801d85c 	.word	0x0801d85c

0801bb9c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b08a      	sub	sp, #40	; 0x28
 801bba0:	af02      	add	r7, sp, #8
 801bba2:	6078      	str	r0, [r7, #4]
 801bba4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801bba6:	683b      	ldr	r3, [r7, #0]
 801bba8:	4a19      	ldr	r2, [pc, #100]	; (801bc10 <SysTimeFromMs+0x74>)
 801bbaa:	fba2 2303 	umull	r2, r3, r2, r3
 801bbae:	099b      	lsrs	r3, r3, #6
 801bbb0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801bbb2:	69fb      	ldr	r3, [r7, #28]
 801bbb4:	617b      	str	r3, [r7, #20]
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	b29a      	uxth	r2, r3
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	b29b      	uxth	r3, r3
 801bbbe:	4619      	mov	r1, r3
 801bbc0:	0149      	lsls	r1, r1, #5
 801bbc2:	1ac9      	subs	r1, r1, r3
 801bbc4:	0089      	lsls	r1, r1, #2
 801bbc6:	440b      	add	r3, r1
 801bbc8:	00db      	lsls	r3, r3, #3
 801bbca:	b29b      	uxth	r3, r3
 801bbcc:	1ad3      	subs	r3, r2, r3
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	b21b      	sxth	r3, r3
 801bbd2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801bbd4:	f107 030c 	add.w	r3, r7, #12
 801bbd8:	2200      	movs	r2, #0
 801bbda:	601a      	str	r2, [r3, #0]
 801bbdc:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bbde:	4b0d      	ldr	r3, [pc, #52]	; (801bc14 <SysTimeFromMs+0x78>)
 801bbe0:	68db      	ldr	r3, [r3, #12]
 801bbe2:	4798      	blx	r3
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	b21b      	sxth	r3, r3
 801bbe8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bbea:	4b0a      	ldr	r3, [pc, #40]	; (801bc14 <SysTimeFromMs+0x78>)
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	4798      	blx	r3
 801bbf0:	4603      	mov	r3, r0
 801bbf2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801bbf4:	6878      	ldr	r0, [r7, #4]
 801bbf6:	693b      	ldr	r3, [r7, #16]
 801bbf8:	9300      	str	r3, [sp, #0]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	f107 0214 	add.w	r2, r7, #20
 801bc00:	ca06      	ldmia	r2, {r1, r2}
 801bc02:	f7ff feab 	bl	801b95c <SysTimeAdd>
}
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	3720      	adds	r7, #32
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	bd80      	pop	{r7, pc}
 801bc0e:	bf00      	nop
 801bc10:	10624dd3 	.word	0x10624dd3
 801bc14:	0801d85c 	.word	0x0801d85c

0801bc18 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bc18:	b480      	push	{r7}
 801bc1a:	b085      	sub	sp, #20
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bc20:	2300      	movs	r3, #0
 801bc22:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bc24:	e00e      	b.n	801bc44 <ee_skip_atoi+0x2c>
 801bc26:	68fa      	ldr	r2, [r7, #12]
 801bc28:	4613      	mov	r3, r2
 801bc2a:	009b      	lsls	r3, r3, #2
 801bc2c:	4413      	add	r3, r2
 801bc2e:	005b      	lsls	r3, r3, #1
 801bc30:	4618      	mov	r0, r3
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	1c59      	adds	r1, r3, #1
 801bc38:	687a      	ldr	r2, [r7, #4]
 801bc3a:	6011      	str	r1, [r2, #0]
 801bc3c:	781b      	ldrb	r3, [r3, #0]
 801bc3e:	4403      	add	r3, r0
 801bc40:	3b30      	subs	r3, #48	; 0x30
 801bc42:	60fb      	str	r3, [r7, #12]
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2b2f      	cmp	r3, #47	; 0x2f
 801bc4c:	d904      	bls.n	801bc58 <ee_skip_atoi+0x40>
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	781b      	ldrb	r3, [r3, #0]
 801bc54:	2b39      	cmp	r3, #57	; 0x39
 801bc56:	d9e6      	bls.n	801bc26 <ee_skip_atoi+0xe>
  return i;
 801bc58:	68fb      	ldr	r3, [r7, #12]
}
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	3714      	adds	r7, #20
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bc80      	pop	{r7}
 801bc62:	4770      	bx	lr

0801bc64 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bc64:	b480      	push	{r7}
 801bc66:	b099      	sub	sp, #100	; 0x64
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	60f8      	str	r0, [r7, #12]
 801bc6c:	60b9      	str	r1, [r7, #8]
 801bc6e:	607a      	str	r2, [r7, #4]
 801bc70:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bc72:	4b71      	ldr	r3, [pc, #452]	; (801be38 <ee_number+0x1d4>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bc78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d002      	beq.n	801bc88 <ee_number+0x24>
 801bc82:	4b6e      	ldr	r3, [pc, #440]	; (801be3c <ee_number+0x1d8>)
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bc88:	683b      	ldr	r3, [r7, #0]
 801bc8a:	2b01      	cmp	r3, #1
 801bc8c:	dd02      	ble.n	801bc94 <ee_number+0x30>
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	2b24      	cmp	r3, #36	; 0x24
 801bc92:	dd01      	ble.n	801bc98 <ee_number+0x34>
 801bc94:	2300      	movs	r3, #0
 801bc96:	e0ca      	b.n	801be2e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bc98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bc9a:	f003 0301 	and.w	r3, r3, #1
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d001      	beq.n	801bca6 <ee_number+0x42>
 801bca2:	2330      	movs	r3, #48	; 0x30
 801bca4:	e000      	b.n	801bca8 <ee_number+0x44>
 801bca6:	2320      	movs	r3, #32
 801bca8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801bcac:	2300      	movs	r3, #0
 801bcae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801bcb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bcb4:	f003 0302 	and.w	r3, r3, #2
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d00b      	beq.n	801bcd4 <ee_number+0x70>
  {
    if (num < 0)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	da08      	bge.n	801bcd4 <ee_number+0x70>
    {
      sign = '-';
 801bcc2:	232d      	movs	r3, #45	; 0x2d
 801bcc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	425b      	negs	r3, r3
 801bccc:	607b      	str	r3, [r7, #4]
      size--;
 801bcce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcd0:	3b01      	subs	r3, #1
 801bcd2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d11e      	bne.n	801bd1c <ee_number+0xb8>
    tmp[i++] = '0';
 801bcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bce0:	1c5a      	adds	r2, r3, #1
 801bce2:	657a      	str	r2, [r7, #84]	; 0x54
 801bce4:	3360      	adds	r3, #96	; 0x60
 801bce6:	443b      	add	r3, r7
 801bce8:	2230      	movs	r2, #48	; 0x30
 801bcea:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bcee:	e018      	b.n	801bd22 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	683a      	ldr	r2, [r7, #0]
 801bcf4:	fbb3 f1f2 	udiv	r1, r3, r2
 801bcf8:	fb01 f202 	mul.w	r2, r1, r2
 801bcfc:	1a9b      	subs	r3, r3, r2
 801bcfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bd00:	441a      	add	r2, r3
 801bd02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd04:	1c59      	adds	r1, r3, #1
 801bd06:	6579      	str	r1, [r7, #84]	; 0x54
 801bd08:	7812      	ldrb	r2, [r2, #0]
 801bd0a:	3360      	adds	r3, #96	; 0x60
 801bd0c:	443b      	add	r3, r7
 801bd0e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	683b      	ldr	r3, [r7, #0]
 801bd16:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd1a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d1e6      	bne.n	801bcf0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bd22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bd26:	429a      	cmp	r2, r3
 801bd28:	dd01      	ble.n	801bd2e <ee_number+0xca>
 801bd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bd2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bd30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bd32:	1ad3      	subs	r3, r2, r3
 801bd34:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bd36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bd38:	f003 0301 	and.w	r3, r3, #1
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d112      	bne.n	801bd66 <ee_number+0x102>
 801bd40:	e00c      	b.n	801bd5c <ee_number+0xf8>
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	1c5a      	adds	r2, r3, #1
 801bd46:	60fa      	str	r2, [r7, #12]
 801bd48:	2220      	movs	r2, #32
 801bd4a:	701a      	strb	r2, [r3, #0]
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	3b01      	subs	r3, #1
 801bd50:	60bb      	str	r3, [r7, #8]
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d101      	bne.n	801bd5c <ee_number+0xf8>
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	e068      	b.n	801be2e <ee_number+0x1ca>
 801bd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bd5e:	1e5a      	subs	r2, r3, #1
 801bd60:	66ba      	str	r2, [r7, #104]	; 0x68
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	dced      	bgt.n	801bd42 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bd66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d01b      	beq.n	801bda6 <ee_number+0x142>
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	1c5a      	adds	r2, r3, #1
 801bd72:	60fa      	str	r2, [r7, #12]
 801bd74:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801bd78:	701a      	strb	r2, [r3, #0]
 801bd7a:	68bb      	ldr	r3, [r7, #8]
 801bd7c:	3b01      	subs	r3, #1
 801bd7e:	60bb      	str	r3, [r7, #8]
 801bd80:	68bb      	ldr	r3, [r7, #8]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d10f      	bne.n	801bda6 <ee_number+0x142>
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	e051      	b.n	801be2e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	1c5a      	adds	r2, r3, #1
 801bd8e:	60fa      	str	r2, [r7, #12]
 801bd90:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801bd94:	701a      	strb	r2, [r3, #0]
 801bd96:	68bb      	ldr	r3, [r7, #8]
 801bd98:	3b01      	subs	r3, #1
 801bd9a:	60bb      	str	r3, [r7, #8]
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d101      	bne.n	801bda6 <ee_number+0x142>
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	e043      	b.n	801be2e <ee_number+0x1ca>
 801bda6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bda8:	1e5a      	subs	r2, r3, #1
 801bdaa:	66ba      	str	r2, [r7, #104]	; 0x68
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	dcec      	bgt.n	801bd8a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bdb0:	e00c      	b.n	801bdcc <ee_number+0x168>
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	1c5a      	adds	r2, r3, #1
 801bdb6:	60fa      	str	r2, [r7, #12]
 801bdb8:	2230      	movs	r2, #48	; 0x30
 801bdba:	701a      	strb	r2, [r3, #0]
 801bdbc:	68bb      	ldr	r3, [r7, #8]
 801bdbe:	3b01      	subs	r3, #1
 801bdc0:	60bb      	str	r3, [r7, #8]
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d101      	bne.n	801bdcc <ee_number+0x168>
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	e030      	b.n	801be2e <ee_number+0x1ca>
 801bdcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bdce:	1e5a      	subs	r2, r3, #1
 801bdd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bdd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	dbec      	blt.n	801bdb2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bdd8:	e010      	b.n	801bdfc <ee_number+0x198>
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	1c5a      	adds	r2, r3, #1
 801bdde:	60fa      	str	r2, [r7, #12]
 801bde0:	f107 0110 	add.w	r1, r7, #16
 801bde4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bde6:	440a      	add	r2, r1
 801bde8:	7812      	ldrb	r2, [r2, #0]
 801bdea:	701a      	strb	r2, [r3, #0]
 801bdec:	68bb      	ldr	r3, [r7, #8]
 801bdee:	3b01      	subs	r3, #1
 801bdf0:	60bb      	str	r3, [r7, #8]
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d101      	bne.n	801bdfc <ee_number+0x198>
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	e018      	b.n	801be2e <ee_number+0x1ca>
 801bdfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bdfe:	1e5a      	subs	r2, r3, #1
 801be00:	657a      	str	r2, [r7, #84]	; 0x54
 801be02:	2b00      	cmp	r3, #0
 801be04:	dce9      	bgt.n	801bdda <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801be06:	e00c      	b.n	801be22 <ee_number+0x1be>
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	1c5a      	adds	r2, r3, #1
 801be0c:	60fa      	str	r2, [r7, #12]
 801be0e:	2220      	movs	r2, #32
 801be10:	701a      	strb	r2, [r3, #0]
 801be12:	68bb      	ldr	r3, [r7, #8]
 801be14:	3b01      	subs	r3, #1
 801be16:	60bb      	str	r3, [r7, #8]
 801be18:	68bb      	ldr	r3, [r7, #8]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d101      	bne.n	801be22 <ee_number+0x1be>
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	e005      	b.n	801be2e <ee_number+0x1ca>
 801be22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801be24:	1e5a      	subs	r2, r3, #1
 801be26:	66ba      	str	r2, [r7, #104]	; 0x68
 801be28:	2b00      	cmp	r3, #0
 801be2a:	dced      	bgt.n	801be08 <ee_number+0x1a4>

  return str;
 801be2c:	68fb      	ldr	r3, [r7, #12]
}
 801be2e:	4618      	mov	r0, r3
 801be30:	3764      	adds	r7, #100	; 0x64
 801be32:	46bd      	mov	sp, r7
 801be34:	bc80      	pop	{r7}
 801be36:	4770      	bx	lr
 801be38:	20000128 	.word	0x20000128
 801be3c:	2000012c 	.word	0x2000012c

0801be40 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b092      	sub	sp, #72	; 0x48
 801be44:	af04      	add	r7, sp, #16
 801be46:	60f8      	str	r0, [r7, #12]
 801be48:	60b9      	str	r1, [r7, #8]
 801be4a:	607a      	str	r2, [r7, #4]
 801be4c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801be4e:	68bb      	ldr	r3, [r7, #8]
 801be50:	2b00      	cmp	r3, #0
 801be52:	dc01      	bgt.n	801be58 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801be54:	2300      	movs	r3, #0
 801be56:	e142      	b.n	801c0de <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801be5c:	e12a      	b.n	801c0b4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801be5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	1ad2      	subs	r2, r2, r3
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	3b01      	subs	r3, #1
 801be68:	429a      	cmp	r2, r3
 801be6a:	f280 8131 	bge.w	801c0d0 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	781b      	ldrb	r3, [r3, #0]
 801be72:	2b25      	cmp	r3, #37	; 0x25
 801be74:	d006      	beq.n	801be84 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801be76:	687a      	ldr	r2, [r7, #4]
 801be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be7a:	1c59      	adds	r1, r3, #1
 801be7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801be7e:	7812      	ldrb	r2, [r2, #0]
 801be80:	701a      	strb	r2, [r3, #0]
      continue;
 801be82:	e114      	b.n	801c0ae <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801be84:	2300      	movs	r3, #0
 801be86:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	3301      	adds	r3, #1
 801be8c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	2b30      	cmp	r3, #48	; 0x30
 801be94:	d103      	bne.n	801be9e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801be96:	6a3b      	ldr	r3, [r7, #32]
 801be98:	f043 0301 	orr.w	r3, r3, #1
 801be9c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801be9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bea2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	2b2f      	cmp	r3, #47	; 0x2f
 801beaa:	d908      	bls.n	801bebe <tiny_vsnprintf_like+0x7e>
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	2b39      	cmp	r3, #57	; 0x39
 801beb2:	d804      	bhi.n	801bebe <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801beb4:	1d3b      	adds	r3, r7, #4
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7ff feae 	bl	801bc18 <ee_skip_atoi>
 801bebc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bebe:	f04f 33ff 	mov.w	r3, #4294967295
 801bec2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bec4:	f04f 33ff 	mov.w	r3, #4294967295
 801bec8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801beca:	230a      	movs	r3, #10
 801becc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	3b58      	subs	r3, #88	; 0x58
 801bed4:	2b20      	cmp	r3, #32
 801bed6:	f200 8094 	bhi.w	801c002 <tiny_vsnprintf_like+0x1c2>
 801beda:	a201      	add	r2, pc, #4	; (adr r2, 801bee0 <tiny_vsnprintf_like+0xa0>)
 801bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bee0:	0801bfeb 	.word	0x0801bfeb
 801bee4:	0801c003 	.word	0x0801c003
 801bee8:	0801c003 	.word	0x0801c003
 801beec:	0801c003 	.word	0x0801c003
 801bef0:	0801c003 	.word	0x0801c003
 801bef4:	0801c003 	.word	0x0801c003
 801bef8:	0801c003 	.word	0x0801c003
 801befc:	0801c003 	.word	0x0801c003
 801bf00:	0801c003 	.word	0x0801c003
 801bf04:	0801c003 	.word	0x0801c003
 801bf08:	0801c003 	.word	0x0801c003
 801bf0c:	0801bf6f 	.word	0x0801bf6f
 801bf10:	0801bff9 	.word	0x0801bff9
 801bf14:	0801c003 	.word	0x0801c003
 801bf18:	0801c003 	.word	0x0801c003
 801bf1c:	0801c003 	.word	0x0801c003
 801bf20:	0801c003 	.word	0x0801c003
 801bf24:	0801bff9 	.word	0x0801bff9
 801bf28:	0801c003 	.word	0x0801c003
 801bf2c:	0801c003 	.word	0x0801c003
 801bf30:	0801c003 	.word	0x0801c003
 801bf34:	0801c003 	.word	0x0801c003
 801bf38:	0801c003 	.word	0x0801c003
 801bf3c:	0801c003 	.word	0x0801c003
 801bf40:	0801c003 	.word	0x0801c003
 801bf44:	0801c003 	.word	0x0801c003
 801bf48:	0801c003 	.word	0x0801c003
 801bf4c:	0801bf8f 	.word	0x0801bf8f
 801bf50:	0801c003 	.word	0x0801c003
 801bf54:	0801c04f 	.word	0x0801c04f
 801bf58:	0801c003 	.word	0x0801c003
 801bf5c:	0801c003 	.word	0x0801c003
 801bf60:	0801bff3 	.word	0x0801bff3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf66:	1c5a      	adds	r2, r3, #1
 801bf68:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bf6a:	2220      	movs	r2, #32
 801bf6c:	701a      	strb	r2, [r3, #0]
 801bf6e:	69fb      	ldr	r3, [r7, #28]
 801bf70:	3b01      	subs	r3, #1
 801bf72:	61fb      	str	r3, [r7, #28]
 801bf74:	69fb      	ldr	r3, [r7, #28]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	dcf4      	bgt.n	801bf64 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	1d1a      	adds	r2, r3, #4
 801bf7e:	603a      	str	r2, [r7, #0]
 801bf80:	6819      	ldr	r1, [r3, #0]
 801bf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf84:	1c5a      	adds	r2, r3, #1
 801bf86:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bf88:	b2ca      	uxtb	r2, r1
 801bf8a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801bf8c:	e08f      	b.n	801c0ae <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801bf8e:	683b      	ldr	r3, [r7, #0]
 801bf90:	1d1a      	adds	r2, r3, #4
 801bf92:	603a      	str	r2, [r7, #0]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d101      	bne.n	801bfa2 <tiny_vsnprintf_like+0x162>
 801bf9e:	4b52      	ldr	r3, [pc, #328]	; (801c0e8 <tiny_vsnprintf_like+0x2a8>)
 801bfa0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801bfa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfa4:	f7e4 f8e8 	bl	8000178 <strlen>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801bfac:	e004      	b.n	801bfb8 <tiny_vsnprintf_like+0x178>
 801bfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfb0:	1c5a      	adds	r2, r3, #1
 801bfb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bfb4:	2220      	movs	r2, #32
 801bfb6:	701a      	strb	r2, [r3, #0]
 801bfb8:	69fb      	ldr	r3, [r7, #28]
 801bfba:	1e5a      	subs	r2, r3, #1
 801bfbc:	61fa      	str	r2, [r7, #28]
 801bfbe:	693a      	ldr	r2, [r7, #16]
 801bfc0:	429a      	cmp	r2, r3
 801bfc2:	dbf4      	blt.n	801bfae <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	62bb      	str	r3, [r7, #40]	; 0x28
 801bfc8:	e00a      	b.n	801bfe0 <tiny_vsnprintf_like+0x1a0>
 801bfca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfcc:	1c53      	adds	r3, r2, #1
 801bfce:	627b      	str	r3, [r7, #36]	; 0x24
 801bfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfd2:	1c59      	adds	r1, r3, #1
 801bfd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bfd6:	7812      	ldrb	r2, [r2, #0]
 801bfd8:	701a      	strb	r2, [r3, #0]
 801bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfdc:	3301      	adds	r3, #1
 801bfde:	62bb      	str	r3, [r7, #40]	; 0x28
 801bfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bfe2:	693b      	ldr	r3, [r7, #16]
 801bfe4:	429a      	cmp	r2, r3
 801bfe6:	dbf0      	blt.n	801bfca <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801bfe8:	e061      	b.n	801c0ae <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801bfea:	6a3b      	ldr	r3, [r7, #32]
 801bfec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bff0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801bff2:	2310      	movs	r3, #16
 801bff4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801bff6:	e02d      	b.n	801c054 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801bff8:	6a3b      	ldr	r3, [r7, #32]
 801bffa:	f043 0302 	orr.w	r3, r3, #2
 801bffe:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c000:	e025      	b.n	801c04e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	2b25      	cmp	r3, #37	; 0x25
 801c008:	d004      	beq.n	801c014 <tiny_vsnprintf_like+0x1d4>
 801c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c00c:	1c5a      	adds	r2, r3, #1
 801c00e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c010:	2225      	movs	r2, #37	; 0x25
 801c012:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	1ad2      	subs	r2, r2, r3
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	3b01      	subs	r3, #1
 801c01e:	429a      	cmp	r2, r3
 801c020:	da17      	bge.n	801c052 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	781b      	ldrb	r3, [r3, #0]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d006      	beq.n	801c038 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c02a:	687a      	ldr	r2, [r7, #4]
 801c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c02e:	1c59      	adds	r1, r3, #1
 801c030:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c032:	7812      	ldrb	r2, [r2, #0]
 801c034:	701a      	strb	r2, [r3, #0]
 801c036:	e002      	b.n	801c03e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	3b01      	subs	r3, #1
 801c03c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	1ad2      	subs	r2, r2, r3
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	3b01      	subs	r3, #1
 801c048:	429a      	cmp	r2, r3
 801c04a:	db2f      	blt.n	801c0ac <tiny_vsnprintf_like+0x26c>
 801c04c:	e002      	b.n	801c054 <tiny_vsnprintf_like+0x214>
        break;
 801c04e:	bf00      	nop
 801c050:	e000      	b.n	801c054 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801c052:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c054:	697b      	ldr	r3, [r7, #20]
 801c056:	2b6c      	cmp	r3, #108	; 0x6c
 801c058:	d105      	bne.n	801c066 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801c05a:	683b      	ldr	r3, [r7, #0]
 801c05c:	1d1a      	adds	r2, r3, #4
 801c05e:	603a      	str	r2, [r7, #0]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	637b      	str	r3, [r7, #52]	; 0x34
 801c064:	e00f      	b.n	801c086 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801c066:	6a3b      	ldr	r3, [r7, #32]
 801c068:	f003 0302 	and.w	r3, r3, #2
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d005      	beq.n	801c07c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801c070:	683b      	ldr	r3, [r7, #0]
 801c072:	1d1a      	adds	r2, r3, #4
 801c074:	603a      	str	r2, [r7, #0]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	637b      	str	r3, [r7, #52]	; 0x34
 801c07a:	e004      	b.n	801c086 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	1d1a      	adds	r2, r3, #4
 801c080:	603a      	str	r2, [r7, #0]
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	1e5a      	subs	r2, r3, #1
 801c08a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	1acb      	subs	r3, r1, r3
 801c090:	1ad1      	subs	r1, r2, r3
 801c092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c094:	6a3b      	ldr	r3, [r7, #32]
 801c096:	9302      	str	r3, [sp, #8]
 801c098:	69bb      	ldr	r3, [r7, #24]
 801c09a:	9301      	str	r3, [sp, #4]
 801c09c:	69fb      	ldr	r3, [r7, #28]
 801c09e:	9300      	str	r3, [sp, #0]
 801c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c0a4:	f7ff fdde 	bl	801bc64 <ee_number>
 801c0a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c0aa:	e000      	b.n	801c0ae <tiny_vsnprintf_like+0x26e>
        continue;
 801c0ac:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	607b      	str	r3, [r7, #4]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	781b      	ldrb	r3, [r3, #0]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	f47f aed0 	bne.w	801be5e <tiny_vsnprintf_like+0x1e>
 801c0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	1ad2      	subs	r2, r2, r3
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	3b01      	subs	r3, #1
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	f6bf aec8 	bge.w	801be5e <tiny_vsnprintf_like+0x1e>
 801c0ce:	e000      	b.n	801c0d2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801c0d0:	bf00      	nop
  }

  *str = '\0';
 801c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0d4:	2200      	movs	r2, #0
 801c0d6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c0d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	1ad3      	subs	r3, r2, r3
}
 801c0de:	4618      	mov	r0, r3
 801c0e0:	3738      	adds	r7, #56	; 0x38
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	bd80      	pop	{r7, pc}
 801c0e6:	bf00      	nop
 801c0e8:	0801d770 	.word	0x0801d770

0801c0ec <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b090      	sub	sp, #64	; 0x40
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c0f4:	4b73      	ldr	r3, [pc, #460]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c0fa:	4b72      	ldr	r3, [pc, #456]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c0fc:	681a      	ldr	r2, [r3, #0]
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	4013      	ands	r3, r2
 801c102:	4a70      	ldr	r2, [pc, #448]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c104:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c106:	4b70      	ldr	r3, [pc, #448]	; (801c2c8 <UTIL_SEQ_Run+0x1dc>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c10c:	4b6f      	ldr	r3, [pc, #444]	; (801c2cc <UTIL_SEQ_Run+0x1e0>)
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c112:	4b6f      	ldr	r3, [pc, #444]	; (801c2d0 <UTIL_SEQ_Run+0x1e4>)
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c118:	4b6e      	ldr	r3, [pc, #440]	; (801c2d4 <UTIL_SEQ_Run+0x1e8>)
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c11e:	e08d      	b.n	801c23c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c120:	2300      	movs	r3, #0
 801c122:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c124:	e002      	b.n	801c12c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c128:	3301      	adds	r3, #1
 801c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c12c:	4a6a      	ldr	r2, [pc, #424]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c130:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c136:	401a      	ands	r2, r3
 801c138:	4b62      	ldr	r3, [pc, #392]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	4013      	ands	r3, r2
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d0f1      	beq.n	801c126 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c142:	4a65      	ldr	r2, [pc, #404]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c146:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c14c:	401a      	ands	r2, r3
 801c14e:	4b5d      	ldr	r3, [pc, #372]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	4013      	ands	r3, r2
 801c154:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c156:	4a60      	ldr	r2, [pc, #384]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c15a:	00db      	lsls	r3, r3, #3
 801c15c:	4413      	add	r3, r2
 801c15e:	685a      	ldr	r2, [r3, #4]
 801c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c162:	4013      	ands	r3, r2
 801c164:	2b00      	cmp	r3, #0
 801c166:	d106      	bne.n	801c176 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c168:	4a5b      	ldr	r2, [pc, #364]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c16c:	00db      	lsls	r3, r3, #3
 801c16e:	4413      	add	r3, r2
 801c170:	f04f 32ff 	mov.w	r2, #4294967295
 801c174:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c176:	4a58      	ldr	r2, [pc, #352]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c17a:	00db      	lsls	r3, r3, #3
 801c17c:	4413      	add	r3, r2
 801c17e:	685a      	ldr	r2, [r3, #4]
 801c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c182:	4013      	ands	r3, r2
 801c184:	4618      	mov	r0, r3
 801c186:	f000 f907 	bl	801c398 <SEQ_BitPosition>
 801c18a:	4603      	mov	r3, r0
 801c18c:	461a      	mov	r2, r3
 801c18e:	4b53      	ldr	r3, [pc, #332]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c190:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c192:	4a51      	ldr	r2, [pc, #324]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c196:	00db      	lsls	r3, r3, #3
 801c198:	4413      	add	r3, r2
 801c19a:	685a      	ldr	r2, [r3, #4]
 801c19c:	4b4f      	ldr	r3, [pc, #316]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2101      	movs	r1, #1
 801c1a2:	fa01 f303 	lsl.w	r3, r1, r3
 801c1a6:	43db      	mvns	r3, r3
 801c1a8:	401a      	ands	r2, r3
 801c1aa:	494b      	ldr	r1, [pc, #300]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1ae:	00db      	lsls	r3, r3, #3
 801c1b0:	440b      	add	r3, r1
 801c1b2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1b4:	f3ef 8310 	mrs	r3, PRIMASK
 801c1b8:	61bb      	str	r3, [r7, #24]
  return(result);
 801c1ba:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c1bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1be:	b672      	cpsid	i
}
 801c1c0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c1c2:	4b46      	ldr	r3, [pc, #280]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	2201      	movs	r2, #1
 801c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 801c1cc:	43da      	mvns	r2, r3
 801c1ce:	4b3e      	ldr	r3, [pc, #248]	; (801c2c8 <UTIL_SEQ_Run+0x1dc>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	4013      	ands	r3, r2
 801c1d4:	4a3c      	ldr	r2, [pc, #240]	; (801c2c8 <UTIL_SEQ_Run+0x1dc>)
 801c1d6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c1d8:	2301      	movs	r3, #1
 801c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c1dc:	e013      	b.n	801c206 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1e0:	3b01      	subs	r3, #1
 801c1e2:	4a3d      	ldr	r2, [pc, #244]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c1e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c1e8:	4b3c      	ldr	r3, [pc, #240]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2201      	movs	r2, #1
 801c1ee:	fa02 f303 	lsl.w	r3, r2, r3
 801c1f2:	43da      	mvns	r2, r3
 801c1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1f6:	3b01      	subs	r3, #1
 801c1f8:	400a      	ands	r2, r1
 801c1fa:	4937      	ldr	r1, [pc, #220]	; (801c2d8 <UTIL_SEQ_Run+0x1ec>)
 801c1fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c202:	3b01      	subs	r3, #1
 801c204:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d1e8      	bne.n	801c1de <UTIL_SEQ_Run+0xf2>
 801c20c:	6a3b      	ldr	r3, [r7, #32]
 801c20e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c210:	697b      	ldr	r3, [r7, #20]
 801c212:	f383 8810 	msr	PRIMASK, r3
}
 801c216:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c218:	4b30      	ldr	r3, [pc, #192]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	4a30      	ldr	r2, [pc, #192]	; (801c2e0 <UTIL_SEQ_Run+0x1f4>)
 801c21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c222:	4798      	blx	r3

    local_taskset = TaskSet;
 801c224:	4b28      	ldr	r3, [pc, #160]	; (801c2c8 <UTIL_SEQ_Run+0x1dc>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c22a:	4b28      	ldr	r3, [pc, #160]	; (801c2cc <UTIL_SEQ_Run+0x1e0>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c230:	4b27      	ldr	r3, [pc, #156]	; (801c2d0 <UTIL_SEQ_Run+0x1e4>)
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c236:	4b27      	ldr	r3, [pc, #156]	; (801c2d4 <UTIL_SEQ_Run+0x1e8>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c23c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c240:	401a      	ands	r2, r3
 801c242:	4b20      	ldr	r3, [pc, #128]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	4013      	ands	r3, r2
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d005      	beq.n	801c258 <UTIL_SEQ_Run+0x16c>
 801c24c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c250:	4013      	ands	r3, r2
 801c252:	2b00      	cmp	r3, #0
 801c254:	f43f af64 	beq.w	801c120 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c258:	4b20      	ldr	r3, [pc, #128]	; (801c2dc <UTIL_SEQ_Run+0x1f0>)
 801c25a:	f04f 32ff 	mov.w	r2, #4294967295
 801c25e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c260:	f000 f88e 	bl	801c380 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c264:	f3ef 8310 	mrs	r3, PRIMASK
 801c268:	613b      	str	r3, [r7, #16]
  return(result);
 801c26a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c26c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c26e:	b672      	cpsid	i
}
 801c270:	bf00      	nop
  local_taskset = TaskSet;
 801c272:	4b15      	ldr	r3, [pc, #84]	; (801c2c8 <UTIL_SEQ_Run+0x1dc>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c278:	4b14      	ldr	r3, [pc, #80]	; (801c2cc <UTIL_SEQ_Run+0x1e0>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c27e:	4b14      	ldr	r3, [pc, #80]	; (801c2d0 <UTIL_SEQ_Run+0x1e4>)
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c288:	401a      	ands	r2, r3
 801c28a:	4b0e      	ldr	r3, [pc, #56]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	4013      	ands	r3, r2
 801c290:	2b00      	cmp	r3, #0
 801c292:	d107      	bne.n	801c2a4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c294:	4b0f      	ldr	r3, [pc, #60]	; (801c2d4 <UTIL_SEQ_Run+0x1e8>)
 801c296:	681a      	ldr	r2, [r3, #0]
 801c298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c29a:	4013      	ands	r3, r2
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d101      	bne.n	801c2a4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c2a0:	f7e5 fdb0 	bl	8001e04 <UTIL_SEQ_Idle>
 801c2a4:	69fb      	ldr	r3, [r7, #28]
 801c2a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	f383 8810 	msr	PRIMASK, r3
}
 801c2ae:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c2b0:	f000 f86c 	bl	801c38c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c2b4:	4a03      	ldr	r2, [pc, #12]	; (801c2c4 <UTIL_SEQ_Run+0x1d8>)
 801c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2b8:	6013      	str	r3, [r2, #0]

  return;
 801c2ba:	bf00      	nop
}
 801c2bc:	3740      	adds	r7, #64	; 0x40
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}
 801c2c2:	bf00      	nop
 801c2c4:	20000134 	.word	0x20000134
 801c2c8:	20001b8c 	.word	0x20001b8c
 801c2cc:	20001b90 	.word	0x20001b90
 801c2d0:	20000130 	.word	0x20000130
 801c2d4:	20001b94 	.word	0x20001b94
 801c2d8:	20001bac 	.word	0x20001bac
 801c2dc:	20001b98 	.word	0x20001b98
 801c2e0:	20001b9c 	.word	0x20001b9c

0801c2e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b088      	sub	sp, #32
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	60f8      	str	r0, [r7, #12]
 801c2ec:	60b9      	str	r1, [r7, #8]
 801c2ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2f0:	f3ef 8310 	mrs	r3, PRIMASK
 801c2f4:	617b      	str	r3, [r7, #20]
  return(result);
 801c2f6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c2f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2fa:	b672      	cpsid	i
}
 801c2fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c2fe:	68f8      	ldr	r0, [r7, #12]
 801c300:	f000 f84a 	bl	801c398 <SEQ_BitPosition>
 801c304:	4603      	mov	r3, r0
 801c306:	4619      	mov	r1, r3
 801c308:	4a06      	ldr	r2, [pc, #24]	; (801c324 <UTIL_SEQ_RegTask+0x40>)
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c310:	69fb      	ldr	r3, [r7, #28]
 801c312:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c314:	69bb      	ldr	r3, [r7, #24]
 801c316:	f383 8810 	msr	PRIMASK, r3
}
 801c31a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c31c:	bf00      	nop
}
 801c31e:	3720      	adds	r7, #32
 801c320:	46bd      	mov	sp, r7
 801c322:	bd80      	pop	{r7, pc}
 801c324:	20001b9c 	.word	0x20001b9c

0801c328 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c328:	b480      	push	{r7}
 801c32a:	b087      	sub	sp, #28
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
 801c330:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c332:	f3ef 8310 	mrs	r3, PRIMASK
 801c336:	60fb      	str	r3, [r7, #12]
  return(result);
 801c338:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c33a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c33c:	b672      	cpsid	i
}
 801c33e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c340:	4b0d      	ldr	r3, [pc, #52]	; (801c378 <UTIL_SEQ_SetTask+0x50>)
 801c342:	681a      	ldr	r2, [r3, #0]
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	4313      	orrs	r3, r2
 801c348:	4a0b      	ldr	r2, [pc, #44]	; (801c378 <UTIL_SEQ_SetTask+0x50>)
 801c34a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c34c:	4a0b      	ldr	r2, [pc, #44]	; (801c37c <UTIL_SEQ_SetTask+0x54>)
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	431a      	orrs	r2, r3
 801c358:	4908      	ldr	r1, [pc, #32]	; (801c37c <UTIL_SEQ_SetTask+0x54>)
 801c35a:	683b      	ldr	r3, [r7, #0]
 801c35c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c360:	697b      	ldr	r3, [r7, #20]
 801c362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c364:	693b      	ldr	r3, [r7, #16]
 801c366:	f383 8810 	msr	PRIMASK, r3
}
 801c36a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c36c:	bf00      	nop
}
 801c36e:	371c      	adds	r7, #28
 801c370:	46bd      	mov	sp, r7
 801c372:	bc80      	pop	{r7}
 801c374:	4770      	bx	lr
 801c376:	bf00      	nop
 801c378:	20001b8c 	.word	0x20001b8c
 801c37c:	20001bac 	.word	0x20001bac

0801c380 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c380:	b480      	push	{r7}
 801c382:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c384:	bf00      	nop
}
 801c386:	46bd      	mov	sp, r7
 801c388:	bc80      	pop	{r7}
 801c38a:	4770      	bx	lr

0801c38c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c38c:	b480      	push	{r7}
 801c38e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c390:	bf00      	nop
}
 801c392:	46bd      	mov	sp, r7
 801c394:	bc80      	pop	{r7}
 801c396:	4770      	bx	lr

0801c398 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c398:	b480      	push	{r7}
 801c39a:	b085      	sub	sp, #20
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	0c1b      	lsrs	r3, r3, #16
 801c3ac:	041b      	lsls	r3, r3, #16
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d104      	bne.n	801c3bc <SEQ_BitPosition+0x24>
 801c3b2:	2310      	movs	r3, #16
 801c3b4:	73fb      	strb	r3, [r7, #15]
 801c3b6:	68bb      	ldr	r3, [r7, #8]
 801c3b8:	041b      	lsls	r3, r3, #16
 801c3ba:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c3bc:	68bb      	ldr	r3, [r7, #8]
 801c3be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d105      	bne.n	801c3d2 <SEQ_BitPosition+0x3a>
 801c3c6:	7bfb      	ldrb	r3, [r7, #15]
 801c3c8:	3308      	adds	r3, #8
 801c3ca:	73fb      	strb	r3, [r7, #15]
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	021b      	lsls	r3, r3, #8
 801c3d0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d105      	bne.n	801c3e8 <SEQ_BitPosition+0x50>
 801c3dc:	7bfb      	ldrb	r3, [r7, #15]
 801c3de:	3304      	adds	r3, #4
 801c3e0:	73fb      	strb	r3, [r7, #15]
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	011b      	lsls	r3, r3, #4
 801c3e6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c3e8:	68bb      	ldr	r3, [r7, #8]
 801c3ea:	0f1b      	lsrs	r3, r3, #28
 801c3ec:	4a06      	ldr	r2, [pc, #24]	; (801c408 <SEQ_BitPosition+0x70>)
 801c3ee:	5cd2      	ldrb	r2, [r2, r3]
 801c3f0:	7bfb      	ldrb	r3, [r7, #15]
 801c3f2:	4413      	add	r3, r2
 801c3f4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c3f6:	7bfb      	ldrb	r3, [r7, #15]
 801c3f8:	f1c3 031f 	rsb	r3, r3, #31
 801c3fc:	b2db      	uxtb	r3, r3
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	3714      	adds	r7, #20
 801c402:	46bd      	mov	sp, r7
 801c404:	bc80      	pop	{r7}
 801c406:	4770      	bx	lr
 801c408:	0801dd74 	.word	0x0801dd74

0801c40c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c40c:	b580      	push	{r7, lr}
 801c40e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c410:	4b04      	ldr	r3, [pc, #16]	; (801c424 <UTIL_TIMER_Init+0x18>)
 801c412:	2200      	movs	r2, #0
 801c414:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c416:	4b04      	ldr	r3, [pc, #16]	; (801c428 <UTIL_TIMER_Init+0x1c>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4798      	blx	r3
 801c41c:	4603      	mov	r3, r0
}
 801c41e:	4618      	mov	r0, r3
 801c420:	bd80      	pop	{r7, pc}
 801c422:	bf00      	nop
 801c424:	20001bb4 	.word	0x20001bb4
 801c428:	0801d830 	.word	0x0801d830

0801c42c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b084      	sub	sp, #16
 801c430:	af00      	add	r7, sp, #0
 801c432:	60f8      	str	r0, [r7, #12]
 801c434:	60b9      	str	r1, [r7, #8]
 801c436:	603b      	str	r3, [r7, #0]
 801c438:	4613      	mov	r3, r2
 801c43a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d023      	beq.n	801c48a <UTIL_TIMER_Create+0x5e>
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d020      	beq.n	801c48a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	2200      	movs	r2, #0
 801c44c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c44e:	4b11      	ldr	r3, [pc, #68]	; (801c494 <UTIL_TIMER_Create+0x68>)
 801c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c452:	68b8      	ldr	r0, [r7, #8]
 801c454:	4798      	blx	r3
 801c456:	4602      	mov	r2, r0
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	2200      	movs	r2, #0
 801c460:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	2200      	movs	r2, #0
 801c466:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	2200      	movs	r2, #0
 801c46c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	683a      	ldr	r2, [r7, #0]
 801c472:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	69ba      	ldr	r2, [r7, #24]
 801c478:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	79fa      	ldrb	r2, [r7, #7]
 801c47e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2200      	movs	r2, #0
 801c484:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c486:	2300      	movs	r3, #0
 801c488:	e000      	b.n	801c48c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c48a:	2301      	movs	r3, #1
  }
}
 801c48c:	4618      	mov	r0, r3
 801c48e:	3710      	adds	r7, #16
 801c490:	46bd      	mov	sp, r7
 801c492:	bd80      	pop	{r7, pc}
 801c494:	0801d830 	.word	0x0801d830

0801c498 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b08a      	sub	sp, #40	; 0x28
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d056      	beq.n	801c55a <UTIL_TIMER_Start+0xc2>
 801c4ac:	6878      	ldr	r0, [r7, #4]
 801c4ae:	f000 f9a9 	bl	801c804 <TimerExists>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	f083 0301 	eor.w	r3, r3, #1
 801c4b8:	b2db      	uxtb	r3, r3
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d04d      	beq.n	801c55a <UTIL_TIMER_Start+0xc2>
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	7a5b      	ldrb	r3, [r3, #9]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d149      	bne.n	801c55a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4c6:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ca:	613b      	str	r3, [r7, #16]
  return(result);
 801c4cc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c4ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4d0:	b672      	cpsid	i
}
 801c4d2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	685b      	ldr	r3, [r3, #4]
 801c4d8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c4da:	4b24      	ldr	r3, [pc, #144]	; (801c56c <UTIL_TIMER_Start+0xd4>)
 801c4dc:	6a1b      	ldr	r3, [r3, #32]
 801c4de:	4798      	blx	r3
 801c4e0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c4e2:	6a3a      	ldr	r2, [r7, #32]
 801c4e4:	69bb      	ldr	r3, [r7, #24]
 801c4e6:	429a      	cmp	r2, r3
 801c4e8:	d201      	bcs.n	801c4ee <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c4ea:	69bb      	ldr	r3, [r7, #24]
 801c4ec:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6a3a      	ldr	r2, [r7, #32]
 801c4f2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2201      	movs	r2, #1
 801c4fe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	2200      	movs	r2, #0
 801c504:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c506:	4b1a      	ldr	r3, [pc, #104]	; (801c570 <UTIL_TIMER_Start+0xd8>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d106      	bne.n	801c51c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c50e:	4b17      	ldr	r3, [pc, #92]	; (801c56c <UTIL_TIMER_Start+0xd4>)
 801c510:	691b      	ldr	r3, [r3, #16]
 801c512:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	f000 f9eb 	bl	801c8f0 <TimerInsertNewHeadTimer>
 801c51a:	e017      	b.n	801c54c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c51c:	4b13      	ldr	r3, [pc, #76]	; (801c56c <UTIL_TIMER_Start+0xd4>)
 801c51e:	699b      	ldr	r3, [r3, #24]
 801c520:	4798      	blx	r3
 801c522:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681a      	ldr	r2, [r3, #0]
 801c528:	697b      	ldr	r3, [r7, #20]
 801c52a:	441a      	add	r2, r3
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681a      	ldr	r2, [r3, #0]
 801c534:	4b0e      	ldr	r3, [pc, #56]	; (801c570 <UTIL_TIMER_Start+0xd8>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	429a      	cmp	r2, r3
 801c53c:	d203      	bcs.n	801c546 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c53e:	6878      	ldr	r0, [r7, #4]
 801c540:	f000 f9d6 	bl	801c8f0 <TimerInsertNewHeadTimer>
 801c544:	e002      	b.n	801c54c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c546:	6878      	ldr	r0, [r7, #4]
 801c548:	f000 f9a2 	bl	801c890 <TimerInsertTimer>
 801c54c:	69fb      	ldr	r3, [r7, #28]
 801c54e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	f383 8810 	msr	PRIMASK, r3
}
 801c556:	bf00      	nop
  {
 801c558:	e002      	b.n	801c560 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c55a:	2301      	movs	r3, #1
 801c55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c564:	4618      	mov	r0, r3
 801c566:	3728      	adds	r7, #40	; 0x28
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	0801d830 	.word	0x0801d830
 801c570:	20001bb4 	.word	0x20001bb4

0801c574 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b088      	sub	sp, #32
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c57c:	2300      	movs	r3, #0
 801c57e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	2b00      	cmp	r3, #0
 801c584:	d05b      	beq.n	801c63e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c586:	f3ef 8310 	mrs	r3, PRIMASK
 801c58a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c58c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c58e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c590:	b672      	cpsid	i
}
 801c592:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c594:	4b2d      	ldr	r3, [pc, #180]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c59a:	4b2c      	ldr	r3, [pc, #176]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	2201      	movs	r2, #1
 801c5a4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c5a6:	4b29      	ldr	r3, [pc, #164]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d041      	beq.n	801c632 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c5b4:	4b25      	ldr	r3, [pc, #148]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	687a      	ldr	r2, [r7, #4]
 801c5ba:	429a      	cmp	r2, r3
 801c5bc:	d134      	bne.n	801c628 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c5be:	4b23      	ldr	r3, [pc, #140]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c5c6:	4b21      	ldr	r3, [pc, #132]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	695b      	ldr	r3, [r3, #20]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d00a      	beq.n	801c5e6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c5d0:	4b1e      	ldr	r3, [pc, #120]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	695b      	ldr	r3, [r3, #20]
 801c5d6:	4a1d      	ldr	r2, [pc, #116]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5d8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c5da:	4b1c      	ldr	r3, [pc, #112]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	4618      	mov	r0, r3
 801c5e0:	f000 f92c 	bl	801c83c <TimerSetTimeout>
 801c5e4:	e023      	b.n	801c62e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c5e6:	4b1a      	ldr	r3, [pc, #104]	; (801c650 <UTIL_TIMER_Stop+0xdc>)
 801c5e8:	68db      	ldr	r3, [r3, #12]
 801c5ea:	4798      	blx	r3
            TimerListHead = NULL;
 801c5ec:	4b17      	ldr	r3, [pc, #92]	; (801c64c <UTIL_TIMER_Stop+0xd8>)
 801c5ee:	2200      	movs	r2, #0
 801c5f0:	601a      	str	r2, [r3, #0]
 801c5f2:	e01c      	b.n	801c62e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c5f4:	697a      	ldr	r2, [r7, #20]
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d110      	bne.n	801c61e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	695b      	ldr	r3, [r3, #20]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d006      	beq.n	801c612 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	695b      	ldr	r3, [r3, #20]
 801c608:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c60a:	69bb      	ldr	r3, [r7, #24]
 801c60c:	697a      	ldr	r2, [r7, #20]
 801c60e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c610:	e00d      	b.n	801c62e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c612:	2300      	movs	r3, #0
 801c614:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c616:	69bb      	ldr	r3, [r7, #24]
 801c618:	697a      	ldr	r2, [r7, #20]
 801c61a:	615a      	str	r2, [r3, #20]
            break;
 801c61c:	e007      	b.n	801c62e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c61e:	697b      	ldr	r3, [r7, #20]
 801c620:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	695b      	ldr	r3, [r3, #20]
 801c626:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c628:	697b      	ldr	r3, [r7, #20]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d1e2      	bne.n	801c5f4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c62e:	2300      	movs	r3, #0
 801c630:	77fb      	strb	r3, [r7, #31]
 801c632:	693b      	ldr	r3, [r7, #16]
 801c634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	f383 8810 	msr	PRIMASK, r3
}
 801c63c:	e001      	b.n	801c642 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c63e:	2301      	movs	r3, #1
 801c640:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c642:	7ffb      	ldrb	r3, [r7, #31]
}
 801c644:	4618      	mov	r0, r3
 801c646:	3720      	adds	r7, #32
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	20001bb4 	.word	0x20001bb4
 801c650:	0801d830 	.word	0x0801d830

0801c654 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
 801c65c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c65e:	2300      	movs	r3, #0
 801c660:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d102      	bne.n	801c66e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c668:	2301      	movs	r3, #1
 801c66a:	73fb      	strb	r3, [r7, #15]
 801c66c:	e014      	b.n	801c698 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c66e:	4b0d      	ldr	r3, [pc, #52]	; (801c6a4 <UTIL_TIMER_SetPeriod+0x50>)
 801c670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c672:	6838      	ldr	r0, [r7, #0]
 801c674:	4798      	blx	r3
 801c676:	4602      	mov	r2, r0
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c67c:	6878      	ldr	r0, [r7, #4]
 801c67e:	f000 f8c1 	bl	801c804 <TimerExists>
 801c682:	4603      	mov	r3, r0
 801c684:	2b00      	cmp	r3, #0
 801c686:	d007      	beq.n	801c698 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f7ff ff73 	bl	801c574 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c68e:	6878      	ldr	r0, [r7, #4]
 801c690:	f7ff ff02 	bl	801c498 <UTIL_TIMER_Start>
 801c694:	4603      	mov	r3, r0
 801c696:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c698:	7bfb      	ldrb	r3, [r7, #15]
}
 801c69a:	4618      	mov	r0, r3
 801c69c:	3710      	adds	r7, #16
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	bd80      	pop	{r7, pc}
 801c6a2:	bf00      	nop
 801c6a4:	0801d830 	.word	0x0801d830

0801c6a8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c6a8:	b590      	push	{r4, r7, lr}
 801c6aa:	b089      	sub	sp, #36	; 0x24
 801c6ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c6b2:	60bb      	str	r3, [r7, #8]
  return(result);
 801c6b4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c6b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6b8:	b672      	cpsid	i
}
 801c6ba:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c6bc:	4b38      	ldr	r3, [pc, #224]	; (801c7a0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c6be:	695b      	ldr	r3, [r3, #20]
 801c6c0:	4798      	blx	r3
 801c6c2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c6c4:	4b36      	ldr	r3, [pc, #216]	; (801c7a0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c6c6:	691b      	ldr	r3, [r3, #16]
 801c6c8:	4798      	blx	r3
 801c6ca:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c6cc:	693a      	ldr	r2, [r7, #16]
 801c6ce:	697b      	ldr	r3, [r7, #20]
 801c6d0:	1ad3      	subs	r3, r2, r3
 801c6d2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c6d4:	4b33      	ldr	r3, [pc, #204]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d037      	beq.n	801c74c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c6dc:	4b31      	ldr	r3, [pc, #196]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c6e2:	69fb      	ldr	r3, [r7, #28]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	68fa      	ldr	r2, [r7, #12]
 801c6e8:	429a      	cmp	r2, r3
 801c6ea:	d206      	bcs.n	801c6fa <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c6ec:	69fb      	ldr	r3, [r7, #28]
 801c6ee:	681a      	ldr	r2, [r3, #0]
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	1ad2      	subs	r2, r2, r3
 801c6f4:	69fb      	ldr	r3, [r7, #28]
 801c6f6:	601a      	str	r2, [r3, #0]
 801c6f8:	e002      	b.n	801c700 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c6fa:	69fb      	ldr	r3, [r7, #28]
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c700:	69fb      	ldr	r3, [r7, #28]
 801c702:	695b      	ldr	r3, [r3, #20]
 801c704:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c706:	69fb      	ldr	r3, [r7, #28]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d1ea      	bne.n	801c6e2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c70c:	e01e      	b.n	801c74c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c70e:	4b25      	ldr	r3, [pc, #148]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c714:	4b23      	ldr	r3, [pc, #140]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	695b      	ldr	r3, [r3, #20]
 801c71a:	4a22      	ldr	r2, [pc, #136]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c71c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c71e:	69fb      	ldr	r3, [r7, #28]
 801c720:	2200      	movs	r2, #0
 801c722:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c724:	69fb      	ldr	r3, [r7, #28]
 801c726:	2200      	movs	r2, #0
 801c728:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c72a:	69fb      	ldr	r3, [r7, #28]
 801c72c:	68db      	ldr	r3, [r3, #12]
 801c72e:	69fa      	ldr	r2, [r7, #28]
 801c730:	6912      	ldr	r2, [r2, #16]
 801c732:	4610      	mov	r0, r2
 801c734:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c736:	69fb      	ldr	r3, [r7, #28]
 801c738:	7adb      	ldrb	r3, [r3, #11]
 801c73a:	2b01      	cmp	r3, #1
 801c73c:	d106      	bne.n	801c74c <UTIL_TIMER_IRQ_Handler+0xa4>
 801c73e:	69fb      	ldr	r3, [r7, #28]
 801c740:	7a9b      	ldrb	r3, [r3, #10]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d102      	bne.n	801c74c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c746:	69f8      	ldr	r0, [r7, #28]
 801c748:	f7ff fea6 	bl	801c498 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c74c:	4b15      	ldr	r3, [pc, #84]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d00d      	beq.n	801c770 <UTIL_TIMER_IRQ_Handler+0xc8>
 801c754:	4b13      	ldr	r3, [pc, #76]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d0d7      	beq.n	801c70e <UTIL_TIMER_IRQ_Handler+0x66>
 801c75e:	4b11      	ldr	r3, [pc, #68]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	681c      	ldr	r4, [r3, #0]
 801c764:	4b0e      	ldr	r3, [pc, #56]	; (801c7a0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c766:	699b      	ldr	r3, [r3, #24]
 801c768:	4798      	blx	r3
 801c76a:	4603      	mov	r3, r0
 801c76c:	429c      	cmp	r4, r3
 801c76e:	d3ce      	bcc.n	801c70e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c770:	4b0c      	ldr	r3, [pc, #48]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d009      	beq.n	801c78c <UTIL_TIMER_IRQ_Handler+0xe4>
 801c778:	4b0a      	ldr	r3, [pc, #40]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	7a1b      	ldrb	r3, [r3, #8]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d104      	bne.n	801c78c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c782:	4b08      	ldr	r3, [pc, #32]	; (801c7a4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	4618      	mov	r0, r3
 801c788:	f000 f858 	bl	801c83c <TimerSetTimeout>
 801c78c:	69bb      	ldr	r3, [r7, #24]
 801c78e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	f383 8810 	msr	PRIMASK, r3
}
 801c796:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c798:	bf00      	nop
 801c79a:	3724      	adds	r7, #36	; 0x24
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd90      	pop	{r4, r7, pc}
 801c7a0:	0801d830 	.word	0x0801d830
 801c7a4:	20001bb4 	.word	0x20001bb4

0801c7a8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b082      	sub	sp, #8
 801c7ac:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c7ae:	4b06      	ldr	r3, [pc, #24]	; (801c7c8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c7b0:	69db      	ldr	r3, [r3, #28]
 801c7b2:	4798      	blx	r3
 801c7b4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c7b6:	4b04      	ldr	r3, [pc, #16]	; (801c7c8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7ba:	6878      	ldr	r0, [r7, #4]
 801c7bc:	4798      	blx	r3
 801c7be:	4603      	mov	r3, r0
}
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	3708      	adds	r7, #8
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	0801d830 	.word	0x0801d830

0801c7cc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c7d4:	4b0a      	ldr	r3, [pc, #40]	; (801c800 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c7d6:	69db      	ldr	r3, [r3, #28]
 801c7d8:	4798      	blx	r3
 801c7da:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c7dc:	4b08      	ldr	r3, [pc, #32]	; (801c800 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7e0:	6878      	ldr	r0, [r7, #4]
 801c7e2:	4798      	blx	r3
 801c7e4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c7e6:	4b06      	ldr	r3, [pc, #24]	; (801c800 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7ea:	68f9      	ldr	r1, [r7, #12]
 801c7ec:	68ba      	ldr	r2, [r7, #8]
 801c7ee:	1a8a      	subs	r2, r1, r2
 801c7f0:	4610      	mov	r0, r2
 801c7f2:	4798      	blx	r3
 801c7f4:	4603      	mov	r3, r0
}
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	3710      	adds	r7, #16
 801c7fa:	46bd      	mov	sp, r7
 801c7fc:	bd80      	pop	{r7, pc}
 801c7fe:	bf00      	nop
 801c800:	0801d830 	.word	0x0801d830

0801c804 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c804:	b480      	push	{r7}
 801c806:	b085      	sub	sp, #20
 801c808:	af00      	add	r7, sp, #0
 801c80a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c80c:	4b0a      	ldr	r3, [pc, #40]	; (801c838 <TimerExists+0x34>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c812:	e008      	b.n	801c826 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c814:	68fa      	ldr	r2, [r7, #12]
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	429a      	cmp	r2, r3
 801c81a:	d101      	bne.n	801c820 <TimerExists+0x1c>
    {
      return true;
 801c81c:	2301      	movs	r3, #1
 801c81e:	e006      	b.n	801c82e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	695b      	ldr	r3, [r3, #20]
 801c824:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d1f3      	bne.n	801c814 <TimerExists+0x10>
  }
  return false;
 801c82c:	2300      	movs	r3, #0
}
 801c82e:	4618      	mov	r0, r3
 801c830:	3714      	adds	r7, #20
 801c832:	46bd      	mov	sp, r7
 801c834:	bc80      	pop	{r7}
 801c836:	4770      	bx	lr
 801c838:	20001bb4 	.word	0x20001bb4

0801c83c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c83c:	b590      	push	{r4, r7, lr}
 801c83e:	b085      	sub	sp, #20
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c844:	4b11      	ldr	r3, [pc, #68]	; (801c88c <TimerSetTimeout+0x50>)
 801c846:	6a1b      	ldr	r3, [r3, #32]
 801c848:	4798      	blx	r3
 801c84a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	2201      	movs	r2, #1
 801c850:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	681c      	ldr	r4, [r3, #0]
 801c856:	4b0d      	ldr	r3, [pc, #52]	; (801c88c <TimerSetTimeout+0x50>)
 801c858:	699b      	ldr	r3, [r3, #24]
 801c85a:	4798      	blx	r3
 801c85c:	4602      	mov	r2, r0
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	4413      	add	r3, r2
 801c862:	429c      	cmp	r4, r3
 801c864:	d207      	bcs.n	801c876 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c866:	4b09      	ldr	r3, [pc, #36]	; (801c88c <TimerSetTimeout+0x50>)
 801c868:	699b      	ldr	r3, [r3, #24]
 801c86a:	4798      	blx	r3
 801c86c:	4602      	mov	r2, r0
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	441a      	add	r2, r3
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c876:	4b05      	ldr	r3, [pc, #20]	; (801c88c <TimerSetTimeout+0x50>)
 801c878:	689b      	ldr	r3, [r3, #8]
 801c87a:	687a      	ldr	r2, [r7, #4]
 801c87c:	6812      	ldr	r2, [r2, #0]
 801c87e:	4610      	mov	r0, r2
 801c880:	4798      	blx	r3
}
 801c882:	bf00      	nop
 801c884:	3714      	adds	r7, #20
 801c886:	46bd      	mov	sp, r7
 801c888:	bd90      	pop	{r4, r7, pc}
 801c88a:	bf00      	nop
 801c88c:	0801d830 	.word	0x0801d830

0801c890 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c890:	b480      	push	{r7}
 801c892:	b085      	sub	sp, #20
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c898:	4b14      	ldr	r3, [pc, #80]	; (801c8ec <TimerInsertTimer+0x5c>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c89e:	4b13      	ldr	r3, [pc, #76]	; (801c8ec <TimerInsertTimer+0x5c>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	695b      	ldr	r3, [r3, #20]
 801c8a4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c8a6:	e012      	b.n	801c8ce <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681a      	ldr	r2, [r3, #0]
 801c8ac:	68bb      	ldr	r3, [r7, #8]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	429a      	cmp	r2, r3
 801c8b2:	d905      	bls.n	801c8c0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c8b4:	68bb      	ldr	r3, [r7, #8]
 801c8b6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c8b8:	68bb      	ldr	r3, [r7, #8]
 801c8ba:	695b      	ldr	r3, [r3, #20]
 801c8bc:	60bb      	str	r3, [r7, #8]
 801c8be:	e006      	b.n	801c8ce <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	68ba      	ldr	r2, [r7, #8]
 801c8ca:	615a      	str	r2, [r3, #20]
        return;
 801c8cc:	e009      	b.n	801c8e2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	695b      	ldr	r3, [r3, #20]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d1e8      	bne.n	801c8a8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	687a      	ldr	r2, [r7, #4]
 801c8da:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	2200      	movs	r2, #0
 801c8e0:	615a      	str	r2, [r3, #20]
}
 801c8e2:	3714      	adds	r7, #20
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bc80      	pop	{r7}
 801c8e8:	4770      	bx	lr
 801c8ea:	bf00      	nop
 801c8ec:	20001bb4 	.word	0x20001bb4

0801c8f0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b084      	sub	sp, #16
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c8f8:	4b0b      	ldr	r3, [pc, #44]	; (801c928 <TimerInsertNewHeadTimer+0x38>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	2b00      	cmp	r3, #0
 801c902:	d002      	beq.n	801c90a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	2200      	movs	r2, #0
 801c908:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	68fa      	ldr	r2, [r7, #12]
 801c90e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c910:	4a05      	ldr	r2, [pc, #20]	; (801c928 <TimerInsertNewHeadTimer+0x38>)
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c916:	4b04      	ldr	r3, [pc, #16]	; (801c928 <TimerInsertNewHeadTimer+0x38>)
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	4618      	mov	r0, r3
 801c91c:	f7ff ff8e 	bl	801c83c <TimerSetTimeout>
}
 801c920:	bf00      	nop
 801c922:	3710      	adds	r7, #16
 801c924:	46bd      	mov	sp, r7
 801c926:	bd80      	pop	{r7, pc}
 801c928:	20001bb4 	.word	0x20001bb4

0801c92c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c92c:	b580      	push	{r7, lr}
 801c92e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c930:	2218      	movs	r2, #24
 801c932:	2100      	movs	r1, #0
 801c934:	4807      	ldr	r0, [pc, #28]	; (801c954 <UTIL_ADV_TRACE_Init+0x28>)
 801c936:	f7fe fff6 	bl	801b926 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c93a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c93e:	2100      	movs	r1, #0
 801c940:	4805      	ldr	r0, [pc, #20]	; (801c958 <UTIL_ADV_TRACE_Init+0x2c>)
 801c942:	f7fe fff0 	bl	801b926 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c946:	4b05      	ldr	r3, [pc, #20]	; (801c95c <UTIL_ADV_TRACE_Init+0x30>)
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	4805      	ldr	r0, [pc, #20]	; (801c960 <UTIL_ADV_TRACE_Init+0x34>)
 801c94c:	4798      	blx	r3
 801c94e:	4603      	mov	r3, r0
}
 801c950:	4618      	mov	r0, r3
 801c952:	bd80      	pop	{r7, pc}
 801c954:	20001bb8 	.word	0x20001bb8
 801c958:	20001bd0 	.word	0x20001bd0
 801c95c:	0801d870 	.word	0x0801d870
 801c960:	0801cbcd 	.word	0x0801cbcd

0801c964 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c964:	b480      	push	{r7}
 801c966:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c968:	4b06      	ldr	r3, [pc, #24]	; (801c984 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c96a:	8a5a      	ldrh	r2, [r3, #18]
 801c96c:	4b05      	ldr	r3, [pc, #20]	; (801c984 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c96e:	8a1b      	ldrh	r3, [r3, #16]
 801c970:	429a      	cmp	r2, r3
 801c972:	d101      	bne.n	801c978 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c974:	2301      	movs	r3, #1
 801c976:	e000      	b.n	801c97a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c978:	2300      	movs	r3, #0
}
 801c97a:	4618      	mov	r0, r3
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bc80      	pop	{r7}
 801c980:	4770      	bx	lr
 801c982:	bf00      	nop
 801c984:	20001bb8 	.word	0x20001bb8

0801c988 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c988:	b408      	push	{r3}
 801c98a:	b580      	push	{r7, lr}
 801c98c:	b08d      	sub	sp, #52	; 0x34
 801c98e:	af00      	add	r7, sp, #0
 801c990:	60f8      	str	r0, [r7, #12]
 801c992:	60b9      	str	r1, [r7, #8]
 801c994:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c996:	2300      	movs	r3, #0
 801c998:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c99a:	2300      	movs	r3, #0
 801c99c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c99e:	4b37      	ldr	r3, [pc, #220]	; (801ca7c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c9a0:	7a1b      	ldrb	r3, [r3, #8]
 801c9a2:	461a      	mov	r2, r3
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	4293      	cmp	r3, r2
 801c9a8:	d902      	bls.n	801c9b0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c9aa:	f06f 0304 	mvn.w	r3, #4
 801c9ae:	e05e      	b.n	801ca6e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c9b0:	4b32      	ldr	r3, [pc, #200]	; (801ca7c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c9b2:	68da      	ldr	r2, [r3, #12]
 801c9b4:	68bb      	ldr	r3, [r7, #8]
 801c9b6:	4013      	ands	r3, r2
 801c9b8:	68ba      	ldr	r2, [r7, #8]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d002      	beq.n	801c9c4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c9be:	f06f 0305 	mvn.w	r3, #5
 801c9c2:	e054      	b.n	801ca6e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c9c4:	4b2d      	ldr	r3, [pc, #180]	; (801ca7c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c9c6:	685b      	ldr	r3, [r3, #4]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d00a      	beq.n	801c9e2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d007      	beq.n	801c9e2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c9d2:	4b2a      	ldr	r3, [pc, #168]	; (801ca7c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c9d4:	685b      	ldr	r3, [r3, #4]
 801c9d6:	f107 0116 	add.w	r1, r7, #22
 801c9da:	f107 0218 	add.w	r2, r7, #24
 801c9de:	4610      	mov	r0, r2
 801c9e0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c9e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c9e6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c9ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c9f0:	4823      	ldr	r0, [pc, #140]	; (801ca80 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c9f2:	f7ff fa25 	bl	801be40 <tiny_vsnprintf_like>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c9fa:	f000 f9f1 	bl	801cde0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c9fe:	8afa      	ldrh	r2, [r7, #22]
 801ca00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ca02:	4413      	add	r3, r2
 801ca04:	b29b      	uxth	r3, r3
 801ca06:	f107 0214 	add.w	r2, r7, #20
 801ca0a:	4611      	mov	r1, r2
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	f000 f969 	bl	801cce4 <TRACE_AllocateBufer>
 801ca12:	4603      	mov	r3, r0
 801ca14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca18:	d025      	beq.n	801ca66 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ca1e:	e00e      	b.n	801ca3e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ca20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca22:	8aba      	ldrh	r2, [r7, #20]
 801ca24:	3330      	adds	r3, #48	; 0x30
 801ca26:	443b      	add	r3, r7
 801ca28:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ca2c:	4b15      	ldr	r3, [pc, #84]	; (801ca84 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ca2e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ca30:	8abb      	ldrh	r3, [r7, #20]
 801ca32:	3301      	adds	r3, #1
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ca38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca3a:	3301      	adds	r3, #1
 801ca3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ca3e:	8afb      	ldrh	r3, [r7, #22]
 801ca40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca42:	429a      	cmp	r2, r3
 801ca44:	d3ec      	bcc.n	801ca20 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ca46:	8abb      	ldrh	r3, [r7, #20]
 801ca48:	461a      	mov	r2, r3
 801ca4a:	4b0e      	ldr	r3, [pc, #56]	; (801ca84 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ca4c:	18d0      	adds	r0, r2, r3
 801ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca52:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ca56:	f7ff f9f3 	bl	801be40 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ca5a:	f000 f9df 	bl	801ce1c <TRACE_UnLock>

    return TRACE_Send();
 801ca5e:	f000 f831 	bl	801cac4 <TRACE_Send>
 801ca62:	4603      	mov	r3, r0
 801ca64:	e003      	b.n	801ca6e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ca66:	f000 f9d9 	bl	801ce1c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ca6a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ca6e:	4618      	mov	r0, r3
 801ca70:	3734      	adds	r7, #52	; 0x34
 801ca72:	46bd      	mov	sp, r7
 801ca74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ca78:	b001      	add	sp, #4
 801ca7a:	4770      	bx	lr
 801ca7c:	20001bb8 	.word	0x20001bb8
 801ca80:	20001fd0 	.word	0x20001fd0
 801ca84:	20001bd0 	.word	0x20001bd0

0801ca88 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ca88:	b480      	push	{r7}
 801ca8a:	b083      	sub	sp, #12
 801ca8c:	af00      	add	r7, sp, #0
 801ca8e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ca90:	4a03      	ldr	r2, [pc, #12]	; (801caa0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	6053      	str	r3, [r2, #4]
}
 801ca96:	bf00      	nop
 801ca98:	370c      	adds	r7, #12
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	bc80      	pop	{r7}
 801ca9e:	4770      	bx	lr
 801caa0:	20001bb8 	.word	0x20001bb8

0801caa4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801caa4:	b480      	push	{r7}
 801caa6:	b083      	sub	sp, #12
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	4603      	mov	r3, r0
 801caac:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801caae:	4a04      	ldr	r2, [pc, #16]	; (801cac0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cab0:	79fb      	ldrb	r3, [r7, #7]
 801cab2:	7213      	strb	r3, [r2, #8]
}
 801cab4:	bf00      	nop
 801cab6:	370c      	adds	r7, #12
 801cab8:	46bd      	mov	sp, r7
 801caba:	bc80      	pop	{r7}
 801cabc:	4770      	bx	lr
 801cabe:	bf00      	nop
 801cac0:	20001bb8 	.word	0x20001bb8

0801cac4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b088      	sub	sp, #32
 801cac8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801caca:	2300      	movs	r3, #0
 801cacc:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cace:	2300      	movs	r3, #0
 801cad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cad2:	f3ef 8310 	mrs	r3, PRIMASK
 801cad6:	613b      	str	r3, [r7, #16]
  return(result);
 801cad8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cada:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cadc:	b672      	cpsid	i
}
 801cade:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cae0:	f000 f9ba 	bl	801ce58 <TRACE_IsLocked>
 801cae4:	4603      	mov	r3, r0
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d15d      	bne.n	801cba6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801caea:	f000 f979 	bl	801cde0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801caee:	4b34      	ldr	r3, [pc, #208]	; (801cbc0 <TRACE_Send+0xfc>)
 801caf0:	8a1a      	ldrh	r2, [r3, #16]
 801caf2:	4b33      	ldr	r3, [pc, #204]	; (801cbc0 <TRACE_Send+0xfc>)
 801caf4:	8a5b      	ldrh	r3, [r3, #18]
 801caf6:	429a      	cmp	r2, r3
 801caf8:	d04d      	beq.n	801cb96 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cafa:	4b31      	ldr	r3, [pc, #196]	; (801cbc0 <TRACE_Send+0xfc>)
 801cafc:	789b      	ldrb	r3, [r3, #2]
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	d117      	bne.n	801cb32 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cb02:	4b2f      	ldr	r3, [pc, #188]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb04:	881a      	ldrh	r2, [r3, #0]
 801cb06:	4b2e      	ldr	r3, [pc, #184]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb08:	8a1b      	ldrh	r3, [r3, #16]
 801cb0a:	1ad3      	subs	r3, r2, r3
 801cb0c:	b29a      	uxth	r2, r3
 801cb0e:	4b2c      	ldr	r3, [pc, #176]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb10:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cb12:	4b2b      	ldr	r3, [pc, #172]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb14:	2202      	movs	r2, #2
 801cb16:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cb18:	4b29      	ldr	r3, [pc, #164]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cb1e:	4b28      	ldr	r3, [pc, #160]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb20:	8a9b      	ldrh	r3, [r3, #20]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d105      	bne.n	801cb32 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cb26:	4b26      	ldr	r3, [pc, #152]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb28:	2200      	movs	r2, #0
 801cb2a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cb2c:	4b24      	ldr	r3, [pc, #144]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb2e:	2200      	movs	r2, #0
 801cb30:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cb32:	4b23      	ldr	r3, [pc, #140]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb34:	789b      	ldrb	r3, [r3, #2]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d115      	bne.n	801cb66 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cb3a:	4b21      	ldr	r3, [pc, #132]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb3c:	8a5a      	ldrh	r2, [r3, #18]
 801cb3e:	4b20      	ldr	r3, [pc, #128]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb40:	8a1b      	ldrh	r3, [r3, #16]
 801cb42:	429a      	cmp	r2, r3
 801cb44:	d908      	bls.n	801cb58 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cb46:	4b1e      	ldr	r3, [pc, #120]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb48:	8a5a      	ldrh	r2, [r3, #18]
 801cb4a:	4b1d      	ldr	r3, [pc, #116]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb4c:	8a1b      	ldrh	r3, [r3, #16]
 801cb4e:	1ad3      	subs	r3, r2, r3
 801cb50:	b29a      	uxth	r2, r3
 801cb52:	4b1b      	ldr	r3, [pc, #108]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb54:	829a      	strh	r2, [r3, #20]
 801cb56:	e006      	b.n	801cb66 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cb58:	4b19      	ldr	r3, [pc, #100]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb5a:	8a1b      	ldrh	r3, [r3, #16]
 801cb5c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cb60:	b29a      	uxth	r2, r3
 801cb62:	4b17      	ldr	r3, [pc, #92]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb64:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cb66:	4b16      	ldr	r3, [pc, #88]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb68:	8a1b      	ldrh	r3, [r3, #16]
 801cb6a:	461a      	mov	r2, r3
 801cb6c:	4b15      	ldr	r3, [pc, #84]	; (801cbc4 <TRACE_Send+0x100>)
 801cb6e:	4413      	add	r3, r2
 801cb70:	61bb      	str	r3, [r7, #24]
 801cb72:	697b      	ldr	r3, [r7, #20]
 801cb74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	f383 8810 	msr	PRIMASK, r3
}
 801cb7c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801cb7e:	f7e5 fa43 	bl	8002008 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cb82:	4b11      	ldr	r3, [pc, #68]	; (801cbc8 <TRACE_Send+0x104>)
 801cb84:	68db      	ldr	r3, [r3, #12]
 801cb86:	4a0e      	ldr	r2, [pc, #56]	; (801cbc0 <TRACE_Send+0xfc>)
 801cb88:	8a92      	ldrh	r2, [r2, #20]
 801cb8a:	4611      	mov	r1, r2
 801cb8c:	69b8      	ldr	r0, [r7, #24]
 801cb8e:	4798      	blx	r3
 801cb90:	4603      	mov	r3, r0
 801cb92:	77fb      	strb	r3, [r7, #31]
 801cb94:	e00d      	b.n	801cbb2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801cb96:	f000 f941 	bl	801ce1c <TRACE_UnLock>
 801cb9a:	697b      	ldr	r3, [r7, #20]
 801cb9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb9e:	68bb      	ldr	r3, [r7, #8]
 801cba0:	f383 8810 	msr	PRIMASK, r3
}
 801cba4:	e005      	b.n	801cbb2 <TRACE_Send+0xee>
 801cba6:	697b      	ldr	r3, [r7, #20]
 801cba8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	f383 8810 	msr	PRIMASK, r3
}
 801cbb0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801cbb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	3720      	adds	r7, #32
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	bd80      	pop	{r7, pc}
 801cbbe:	bf00      	nop
 801cbc0:	20001bb8 	.word	0x20001bb8
 801cbc4:	20001bd0 	.word	0x20001bd0
 801cbc8:	0801d870 	.word	0x0801d870

0801cbcc <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b088      	sub	sp, #32
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbd8:	f3ef 8310 	mrs	r3, PRIMASK
 801cbdc:	617b      	str	r3, [r7, #20]
  return(result);
 801cbde:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cbe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbe2:	b672      	cpsid	i
}
 801cbe4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801cbe6:	4b3c      	ldr	r3, [pc, #240]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cbe8:	789b      	ldrb	r3, [r3, #2]
 801cbea:	2b02      	cmp	r3, #2
 801cbec:	d106      	bne.n	801cbfc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cbee:	4b3a      	ldr	r3, [pc, #232]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cbf4:	4b38      	ldr	r3, [pc, #224]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	821a      	strh	r2, [r3, #16]
 801cbfa:	e00a      	b.n	801cc12 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cbfc:	4b36      	ldr	r3, [pc, #216]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cbfe:	8a1a      	ldrh	r2, [r3, #16]
 801cc00:	4b35      	ldr	r3, [pc, #212]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc02:	8a9b      	ldrh	r3, [r3, #20]
 801cc04:	4413      	add	r3, r2
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cc0c:	b29a      	uxth	r2, r3
 801cc0e:	4b32      	ldr	r3, [pc, #200]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc10:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801cc12:	4b31      	ldr	r3, [pc, #196]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc14:	8a1a      	ldrh	r2, [r3, #16]
 801cc16:	4b30      	ldr	r3, [pc, #192]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc18:	8a5b      	ldrh	r3, [r3, #18]
 801cc1a:	429a      	cmp	r2, r3
 801cc1c:	d04d      	beq.n	801ccba <TRACE_TxCpltCallback+0xee>
 801cc1e:	4b2e      	ldr	r3, [pc, #184]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc20:	8adb      	ldrh	r3, [r3, #22]
 801cc22:	2b01      	cmp	r3, #1
 801cc24:	d149      	bne.n	801ccba <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cc26:	4b2c      	ldr	r3, [pc, #176]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc28:	789b      	ldrb	r3, [r3, #2]
 801cc2a:	2b01      	cmp	r3, #1
 801cc2c:	d117      	bne.n	801cc5e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cc2e:	4b2a      	ldr	r3, [pc, #168]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc30:	881a      	ldrh	r2, [r3, #0]
 801cc32:	4b29      	ldr	r3, [pc, #164]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc34:	8a1b      	ldrh	r3, [r3, #16]
 801cc36:	1ad3      	subs	r3, r2, r3
 801cc38:	b29a      	uxth	r2, r3
 801cc3a:	4b27      	ldr	r3, [pc, #156]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc3c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cc3e:	4b26      	ldr	r3, [pc, #152]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc40:	2202      	movs	r2, #2
 801cc42:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cc44:	4b24      	ldr	r3, [pc, #144]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc46:	2200      	movs	r2, #0
 801cc48:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cc4a:	4b23      	ldr	r3, [pc, #140]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc4c:	8a9b      	ldrh	r3, [r3, #20]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d105      	bne.n	801cc5e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cc52:	4b21      	ldr	r3, [pc, #132]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc54:	2200      	movs	r2, #0
 801cc56:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cc58:	4b1f      	ldr	r3, [pc, #124]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cc5e:	4b1e      	ldr	r3, [pc, #120]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc60:	789b      	ldrb	r3, [r3, #2]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d115      	bne.n	801cc92 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cc66:	4b1c      	ldr	r3, [pc, #112]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc68:	8a5a      	ldrh	r2, [r3, #18]
 801cc6a:	4b1b      	ldr	r3, [pc, #108]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc6c:	8a1b      	ldrh	r3, [r3, #16]
 801cc6e:	429a      	cmp	r2, r3
 801cc70:	d908      	bls.n	801cc84 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cc72:	4b19      	ldr	r3, [pc, #100]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc74:	8a5a      	ldrh	r2, [r3, #18]
 801cc76:	4b18      	ldr	r3, [pc, #96]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc78:	8a1b      	ldrh	r3, [r3, #16]
 801cc7a:	1ad3      	subs	r3, r2, r3
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	4b16      	ldr	r3, [pc, #88]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc80:	829a      	strh	r2, [r3, #20]
 801cc82:	e006      	b.n	801cc92 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cc84:	4b14      	ldr	r3, [pc, #80]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc86:	8a1b      	ldrh	r3, [r3, #16]
 801cc88:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cc8c:	b29a      	uxth	r2, r3
 801cc8e:	4b12      	ldr	r3, [pc, #72]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc90:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cc92:	4b11      	ldr	r3, [pc, #68]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801cc94:	8a1b      	ldrh	r3, [r3, #16]
 801cc96:	461a      	mov	r2, r3
 801cc98:	4b10      	ldr	r3, [pc, #64]	; (801ccdc <TRACE_TxCpltCallback+0x110>)
 801cc9a:	4413      	add	r3, r2
 801cc9c:	61fb      	str	r3, [r7, #28]
 801cc9e:	69bb      	ldr	r3, [r7, #24]
 801cca0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cca2:	693b      	ldr	r3, [r7, #16]
 801cca4:	f383 8810 	msr	PRIMASK, r3
}
 801cca8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ccaa:	4b0d      	ldr	r3, [pc, #52]	; (801cce0 <TRACE_TxCpltCallback+0x114>)
 801ccac:	68db      	ldr	r3, [r3, #12]
 801ccae:	4a0a      	ldr	r2, [pc, #40]	; (801ccd8 <TRACE_TxCpltCallback+0x10c>)
 801ccb0:	8a92      	ldrh	r2, [r2, #20]
 801ccb2:	4611      	mov	r1, r2
 801ccb4:	69f8      	ldr	r0, [r7, #28]
 801ccb6:	4798      	blx	r3
 801ccb8:	e00a      	b.n	801ccd0 <TRACE_TxCpltCallback+0x104>
 801ccba:	69bb      	ldr	r3, [r7, #24]
 801ccbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	f383 8810 	msr	PRIMASK, r3
}
 801ccc4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ccc6:	f7e5 f9a7 	bl	8002018 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ccca:	f000 f8a7 	bl	801ce1c <TRACE_UnLock>
  }
}
 801ccce:	bf00      	nop
 801ccd0:	bf00      	nop
 801ccd2:	3720      	adds	r7, #32
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	20001bb8 	.word	0x20001bb8
 801ccdc:	20001bd0 	.word	0x20001bd0
 801cce0:	0801d870 	.word	0x0801d870

0801cce4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cce4:	b480      	push	{r7}
 801cce6:	b087      	sub	sp, #28
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	4603      	mov	r3, r0
 801ccec:	6039      	str	r1, [r7, #0]
 801ccee:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ccf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccf4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccf6:	f3ef 8310 	mrs	r3, PRIMASK
 801ccfa:	60fb      	str	r3, [r7, #12]
  return(result);
 801ccfc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ccfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd00:	b672      	cpsid	i
}
 801cd02:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cd04:	4b35      	ldr	r3, [pc, #212]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd06:	8a5a      	ldrh	r2, [r3, #18]
 801cd08:	4b34      	ldr	r3, [pc, #208]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd0a:	8a1b      	ldrh	r3, [r3, #16]
 801cd0c:	429a      	cmp	r2, r3
 801cd0e:	d11b      	bne.n	801cd48 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cd10:	4b32      	ldr	r3, [pc, #200]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd12:	8a5b      	ldrh	r3, [r3, #18]
 801cd14:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cd18:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cd1a:	88fa      	ldrh	r2, [r7, #6]
 801cd1c:	8afb      	ldrh	r3, [r7, #22]
 801cd1e:	429a      	cmp	r2, r3
 801cd20:	d33a      	bcc.n	801cd98 <TRACE_AllocateBufer+0xb4>
 801cd22:	4b2e      	ldr	r3, [pc, #184]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd24:	8a1b      	ldrh	r3, [r3, #16]
 801cd26:	88fa      	ldrh	r2, [r7, #6]
 801cd28:	429a      	cmp	r2, r3
 801cd2a:	d235      	bcs.n	801cd98 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cd2c:	4b2b      	ldr	r3, [pc, #172]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd2e:	2201      	movs	r2, #1
 801cd30:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cd32:	4b2a      	ldr	r3, [pc, #168]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd34:	8a5a      	ldrh	r2, [r3, #18]
 801cd36:	4b29      	ldr	r3, [pc, #164]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd38:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cd3a:	4b28      	ldr	r3, [pc, #160]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd3c:	8a1b      	ldrh	r3, [r3, #16]
 801cd3e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cd40:	4b26      	ldr	r3, [pc, #152]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd42:	2200      	movs	r2, #0
 801cd44:	825a      	strh	r2, [r3, #18]
 801cd46:	e027      	b.n	801cd98 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cd48:	4b24      	ldr	r3, [pc, #144]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd4a:	8a5a      	ldrh	r2, [r3, #18]
 801cd4c:	4b23      	ldr	r3, [pc, #140]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd4e:	8a1b      	ldrh	r3, [r3, #16]
 801cd50:	429a      	cmp	r2, r3
 801cd52:	d91b      	bls.n	801cd8c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cd54:	4b21      	ldr	r3, [pc, #132]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd56:	8a5b      	ldrh	r3, [r3, #18]
 801cd58:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cd5c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cd5e:	88fa      	ldrh	r2, [r7, #6]
 801cd60:	8afb      	ldrh	r3, [r7, #22]
 801cd62:	429a      	cmp	r2, r3
 801cd64:	d318      	bcc.n	801cd98 <TRACE_AllocateBufer+0xb4>
 801cd66:	4b1d      	ldr	r3, [pc, #116]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd68:	8a1b      	ldrh	r3, [r3, #16]
 801cd6a:	88fa      	ldrh	r2, [r7, #6]
 801cd6c:	429a      	cmp	r2, r3
 801cd6e:	d213      	bcs.n	801cd98 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cd70:	4b1a      	ldr	r3, [pc, #104]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd72:	2201      	movs	r2, #1
 801cd74:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cd76:	4b19      	ldr	r3, [pc, #100]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd78:	8a5a      	ldrh	r2, [r3, #18]
 801cd7a:	4b18      	ldr	r3, [pc, #96]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd7c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cd7e:	4b17      	ldr	r3, [pc, #92]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd80:	8a1b      	ldrh	r3, [r3, #16]
 801cd82:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cd84:	4b15      	ldr	r3, [pc, #84]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd86:	2200      	movs	r2, #0
 801cd88:	825a      	strh	r2, [r3, #18]
 801cd8a:	e005      	b.n	801cd98 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cd8c:	4b13      	ldr	r3, [pc, #76]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd8e:	8a1a      	ldrh	r2, [r3, #16]
 801cd90:	4b12      	ldr	r3, [pc, #72]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cd92:	8a5b      	ldrh	r3, [r3, #18]
 801cd94:	1ad3      	subs	r3, r2, r3
 801cd96:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801cd98:	8afa      	ldrh	r2, [r7, #22]
 801cd9a:	88fb      	ldrh	r3, [r7, #6]
 801cd9c:	429a      	cmp	r2, r3
 801cd9e:	d90f      	bls.n	801cdc0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cda0:	4b0e      	ldr	r3, [pc, #56]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cda2:	8a5a      	ldrh	r2, [r3, #18]
 801cda4:	683b      	ldr	r3, [r7, #0]
 801cda6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cda8:	4b0c      	ldr	r3, [pc, #48]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cdaa:	8a5a      	ldrh	r2, [r3, #18]
 801cdac:	88fb      	ldrh	r3, [r7, #6]
 801cdae:	4413      	add	r3, r2
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cdb6:	b29a      	uxth	r2, r3
 801cdb8:	4b08      	ldr	r3, [pc, #32]	; (801cddc <TRACE_AllocateBufer+0xf8>)
 801cdba:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	82bb      	strh	r3, [r7, #20]
 801cdc0:	693b      	ldr	r3, [r7, #16]
 801cdc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdc4:	68bb      	ldr	r3, [r7, #8]
 801cdc6:	f383 8810 	msr	PRIMASK, r3
}
 801cdca:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801cdcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801cdd0:	4618      	mov	r0, r3
 801cdd2:	371c      	adds	r7, #28
 801cdd4:	46bd      	mov	sp, r7
 801cdd6:	bc80      	pop	{r7}
 801cdd8:	4770      	bx	lr
 801cdda:	bf00      	nop
 801cddc:	20001bb8 	.word	0x20001bb8

0801cde0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cde0:	b480      	push	{r7}
 801cde2:	b085      	sub	sp, #20
 801cde4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cde6:	f3ef 8310 	mrs	r3, PRIMASK
 801cdea:	607b      	str	r3, [r7, #4]
  return(result);
 801cdec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cdee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdf0:	b672      	cpsid	i
}
 801cdf2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801cdf4:	4b08      	ldr	r3, [pc, #32]	; (801ce18 <TRACE_Lock+0x38>)
 801cdf6:	8adb      	ldrh	r3, [r3, #22]
 801cdf8:	3301      	adds	r3, #1
 801cdfa:	b29a      	uxth	r2, r3
 801cdfc:	4b06      	ldr	r3, [pc, #24]	; (801ce18 <TRACE_Lock+0x38>)
 801cdfe:	82da      	strh	r2, [r3, #22]
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce04:	68bb      	ldr	r3, [r7, #8]
 801ce06:	f383 8810 	msr	PRIMASK, r3
}
 801ce0a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ce0c:	bf00      	nop
 801ce0e:	3714      	adds	r7, #20
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bc80      	pop	{r7}
 801ce14:	4770      	bx	lr
 801ce16:	bf00      	nop
 801ce18:	20001bb8 	.word	0x20001bb8

0801ce1c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ce1c:	b480      	push	{r7}
 801ce1e:	b085      	sub	sp, #20
 801ce20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce22:	f3ef 8310 	mrs	r3, PRIMASK
 801ce26:	607b      	str	r3, [r7, #4]
  return(result);
 801ce28:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce2c:	b672      	cpsid	i
}
 801ce2e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ce30:	4b08      	ldr	r3, [pc, #32]	; (801ce54 <TRACE_UnLock+0x38>)
 801ce32:	8adb      	ldrh	r3, [r3, #22]
 801ce34:	3b01      	subs	r3, #1
 801ce36:	b29a      	uxth	r2, r3
 801ce38:	4b06      	ldr	r3, [pc, #24]	; (801ce54 <TRACE_UnLock+0x38>)
 801ce3a:	82da      	strh	r2, [r3, #22]
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce40:	68bb      	ldr	r3, [r7, #8]
 801ce42:	f383 8810 	msr	PRIMASK, r3
}
 801ce46:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ce48:	bf00      	nop
 801ce4a:	3714      	adds	r7, #20
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	bc80      	pop	{r7}
 801ce50:	4770      	bx	lr
 801ce52:	bf00      	nop
 801ce54:	20001bb8 	.word	0x20001bb8

0801ce58 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ce58:	b480      	push	{r7}
 801ce5a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ce5c:	4b05      	ldr	r3, [pc, #20]	; (801ce74 <TRACE_IsLocked+0x1c>)
 801ce5e:	8adb      	ldrh	r3, [r3, #22]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	bf14      	ite	ne
 801ce64:	2301      	movne	r3, #1
 801ce66:	2300      	moveq	r3, #0
 801ce68:	b2db      	uxtb	r3, r3
}
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bc80      	pop	{r7}
 801ce70:	4770      	bx	lr
 801ce72:	bf00      	nop
 801ce74:	20001bb8 	.word	0x20001bb8

0801ce78 <__libc_init_array>:
 801ce78:	b570      	push	{r4, r5, r6, lr}
 801ce7a:	4d0d      	ldr	r5, [pc, #52]	; (801ceb0 <__libc_init_array+0x38>)
 801ce7c:	4c0d      	ldr	r4, [pc, #52]	; (801ceb4 <__libc_init_array+0x3c>)
 801ce7e:	1b64      	subs	r4, r4, r5
 801ce80:	10a4      	asrs	r4, r4, #2
 801ce82:	2600      	movs	r6, #0
 801ce84:	42a6      	cmp	r6, r4
 801ce86:	d109      	bne.n	801ce9c <__libc_init_array+0x24>
 801ce88:	4d0b      	ldr	r5, [pc, #44]	; (801ceb8 <__libc_init_array+0x40>)
 801ce8a:	4c0c      	ldr	r4, [pc, #48]	; (801cebc <__libc_init_array+0x44>)
 801ce8c:	f000 f8a0 	bl	801cfd0 <_init>
 801ce90:	1b64      	subs	r4, r4, r5
 801ce92:	10a4      	asrs	r4, r4, #2
 801ce94:	2600      	movs	r6, #0
 801ce96:	42a6      	cmp	r6, r4
 801ce98:	d105      	bne.n	801cea6 <__libc_init_array+0x2e>
 801ce9a:	bd70      	pop	{r4, r5, r6, pc}
 801ce9c:	f855 3b04 	ldr.w	r3, [r5], #4
 801cea0:	4798      	blx	r3
 801cea2:	3601      	adds	r6, #1
 801cea4:	e7ee      	b.n	801ce84 <__libc_init_array+0xc>
 801cea6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ceaa:	4798      	blx	r3
 801ceac:	3601      	adds	r6, #1
 801ceae:	e7f2      	b.n	801ce96 <__libc_init_array+0x1e>
 801ceb0:	0801de4c 	.word	0x0801de4c
 801ceb4:	0801de4c 	.word	0x0801de4c
 801ceb8:	0801de4c 	.word	0x0801de4c
 801cebc:	0801de50 	.word	0x0801de50

0801cec0 <memset>:
 801cec0:	4402      	add	r2, r0
 801cec2:	4603      	mov	r3, r0
 801cec4:	4293      	cmp	r3, r2
 801cec6:	d100      	bne.n	801ceca <memset+0xa>
 801cec8:	4770      	bx	lr
 801ceca:	f803 1b01 	strb.w	r1, [r3], #1
 801cece:	e7f9      	b.n	801cec4 <memset+0x4>

0801ced0 <floor>:
 801ced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ced4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ced8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801cedc:	2e13      	cmp	r6, #19
 801cede:	4602      	mov	r2, r0
 801cee0:	460b      	mov	r3, r1
 801cee2:	4607      	mov	r7, r0
 801cee4:	460c      	mov	r4, r1
 801cee6:	4605      	mov	r5, r0
 801cee8:	dc33      	bgt.n	801cf52 <floor+0x82>
 801ceea:	2e00      	cmp	r6, #0
 801ceec:	da14      	bge.n	801cf18 <floor+0x48>
 801ceee:	a334      	add	r3, pc, #208	; (adr r3, 801cfc0 <floor+0xf0>)
 801cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef4:	f7e3 f94e 	bl	8000194 <__adddf3>
 801cef8:	2200      	movs	r2, #0
 801cefa:	2300      	movs	r3, #0
 801cefc:	f7e3 fb7e 	bl	80005fc <__aeabi_dcmpgt>
 801cf00:	b138      	cbz	r0, 801cf12 <floor+0x42>
 801cf02:	2c00      	cmp	r4, #0
 801cf04:	da58      	bge.n	801cfb8 <floor+0xe8>
 801cf06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801cf0a:	431d      	orrs	r5, r3
 801cf0c:	d001      	beq.n	801cf12 <floor+0x42>
 801cf0e:	4c2e      	ldr	r4, [pc, #184]	; (801cfc8 <floor+0xf8>)
 801cf10:	2500      	movs	r5, #0
 801cf12:	4623      	mov	r3, r4
 801cf14:	462f      	mov	r7, r5
 801cf16:	e025      	b.n	801cf64 <floor+0x94>
 801cf18:	4a2c      	ldr	r2, [pc, #176]	; (801cfcc <floor+0xfc>)
 801cf1a:	fa42 f806 	asr.w	r8, r2, r6
 801cf1e:	ea01 0208 	and.w	r2, r1, r8
 801cf22:	4302      	orrs	r2, r0
 801cf24:	d01e      	beq.n	801cf64 <floor+0x94>
 801cf26:	a326      	add	r3, pc, #152	; (adr r3, 801cfc0 <floor+0xf0>)
 801cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf2c:	f7e3 f932 	bl	8000194 <__adddf3>
 801cf30:	2200      	movs	r2, #0
 801cf32:	2300      	movs	r3, #0
 801cf34:	f7e3 fb62 	bl	80005fc <__aeabi_dcmpgt>
 801cf38:	2800      	cmp	r0, #0
 801cf3a:	d0ea      	beq.n	801cf12 <floor+0x42>
 801cf3c:	2c00      	cmp	r4, #0
 801cf3e:	bfbe      	ittt	lt
 801cf40:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801cf44:	fa43 f606 	asrlt.w	r6, r3, r6
 801cf48:	19a4      	addlt	r4, r4, r6
 801cf4a:	ea24 0408 	bic.w	r4, r4, r8
 801cf4e:	2500      	movs	r5, #0
 801cf50:	e7df      	b.n	801cf12 <floor+0x42>
 801cf52:	2e33      	cmp	r6, #51	; 0x33
 801cf54:	dd0a      	ble.n	801cf6c <floor+0x9c>
 801cf56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cf5a:	d103      	bne.n	801cf64 <floor+0x94>
 801cf5c:	f7e3 f91a 	bl	8000194 <__adddf3>
 801cf60:	4607      	mov	r7, r0
 801cf62:	460b      	mov	r3, r1
 801cf64:	4638      	mov	r0, r7
 801cf66:	4619      	mov	r1, r3
 801cf68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf6c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801cf70:	f04f 32ff 	mov.w	r2, #4294967295
 801cf74:	fa22 f808 	lsr.w	r8, r2, r8
 801cf78:	ea18 0f00 	tst.w	r8, r0
 801cf7c:	d0f2      	beq.n	801cf64 <floor+0x94>
 801cf7e:	a310      	add	r3, pc, #64	; (adr r3, 801cfc0 <floor+0xf0>)
 801cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf84:	f7e3 f906 	bl	8000194 <__adddf3>
 801cf88:	2200      	movs	r2, #0
 801cf8a:	2300      	movs	r3, #0
 801cf8c:	f7e3 fb36 	bl	80005fc <__aeabi_dcmpgt>
 801cf90:	2800      	cmp	r0, #0
 801cf92:	d0be      	beq.n	801cf12 <floor+0x42>
 801cf94:	2c00      	cmp	r4, #0
 801cf96:	da02      	bge.n	801cf9e <floor+0xce>
 801cf98:	2e14      	cmp	r6, #20
 801cf9a:	d103      	bne.n	801cfa4 <floor+0xd4>
 801cf9c:	3401      	adds	r4, #1
 801cf9e:	ea25 0508 	bic.w	r5, r5, r8
 801cfa2:	e7b6      	b.n	801cf12 <floor+0x42>
 801cfa4:	2301      	movs	r3, #1
 801cfa6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801cfaa:	fa03 f606 	lsl.w	r6, r3, r6
 801cfae:	4435      	add	r5, r6
 801cfb0:	42bd      	cmp	r5, r7
 801cfb2:	bf38      	it	cc
 801cfb4:	18e4      	addcc	r4, r4, r3
 801cfb6:	e7f2      	b.n	801cf9e <floor+0xce>
 801cfb8:	2500      	movs	r5, #0
 801cfba:	462c      	mov	r4, r5
 801cfbc:	e7a9      	b.n	801cf12 <floor+0x42>
 801cfbe:	bf00      	nop
 801cfc0:	8800759c 	.word	0x8800759c
 801cfc4:	7e37e43c 	.word	0x7e37e43c
 801cfc8:	bff00000 	.word	0xbff00000
 801cfcc:	000fffff 	.word	0x000fffff

0801cfd0 <_init>:
 801cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfd2:	bf00      	nop
 801cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfd6:	bc08      	pop	{r3}
 801cfd8:	469e      	mov	lr, r3
 801cfda:	4770      	bx	lr

0801cfdc <_fini>:
 801cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfde:	bf00      	nop
 801cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfe2:	bc08      	pop	{r3}
 801cfe4:	469e      	mov	lr, r3
 801cfe6:	4770      	bx	lr
